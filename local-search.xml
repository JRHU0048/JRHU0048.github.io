<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Leetcode hot100</title>
    <link href="/2025/03/12/leetcode-hot100/"/>
    <url>/2025/03/12/leetcode-hot100/</url>
    
    <content type="html"><![CDATA[<h1 id="两数之和">1. 两数之和</h1><p>给定一个整数数组 <code>nums</code> 和一个整数目标值<code>target</code>，请你在该数组中找出 <strong>和为目标值</strong><code>target</code> 的那 <strong>两个</strong>整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><h2 id="示例-1">示例 1：</h2><p><strong>输入</strong>：<code>nums = [2,7,11,15]</code>,<code>target = 9</code></p><p><strong>输出</strong>：<code>[0,1]</code></p><p><strong>解释</strong>：因为 <code>nums[0] + nums[1] == 9</code>，返回<code>[0, 1]</code></p><h2 id="answer">Answer:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):<br>                <span class="hljs-keyword">if</span> nums[i]+nums[j] == target:<br>                    <span class="hljs-keyword">return</span> [i, j]<br></code></pre></td></tr></table></figure><h1 id="字母异位词分组">49. 字母异位词分组</h1><p>给你一个字符串数组，请你将 <strong>字母异位词</strong>组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong>是由重新排列源单词的所有字母得到的一个新单词。</p><h2 id="示例-1-1">示例 1：</h2><p><strong>输入</strong>：<code>strs = ["eat", "tea", "tan", "ate", "nat", "bat"]</code></p><p><strong>输出</strong>：<code>[["bat"],["nat","tan"],["ate","eat","tea"]]</code></p><h2 id="answer-1">Answer:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">match</span>(<span class="hljs-params">self, <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">str</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">groupAnagrams</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]:<br>        anagram_dict = &#123;&#125;<br>        <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> strs:<br>            sorted_word = self.<span class="hljs-keyword">match</span>(word)<br>            <span class="hljs-keyword">if</span> sorted_word <span class="hljs-keyword">in</span> anagram_dict:<br>                anagram_dict[sorted_word].append(word)<br>            <span class="hljs-keyword">else</span>:<br>                anagram_dict[sorted_word] = [word]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(anagram_dict.values())<br></code></pre></td></tr></table></figure><h1 id="最长连续序列">128. 最长连续序列</h1><p>给定一个未排序的整数数组<code>nums</code>，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 <span class="math inline">\(O(n)\)</span>的算法解决此问题。</p><h2 id="示例-1-2">示例 1：</h2><p><strong>输入</strong>：<code>nums = [100,4,200,1,3,2]</code></p><p><strong>输出</strong>：<code>4</code></p><p><strong>解释</strong>：最长数字连续序列是<code>[1, 2, 3, 4]</code>。它的长度为 <code>4</code>。</p><h2 id="answer-2">Answer:</h2><p>排序的时间复杂度为O(nlogn)!!!因此不能排序 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestConsecutive</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        set_nums = <span class="hljs-built_in">set</span>(nums)  <span class="hljs-comment"># 转为集合去重</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> set_nums:<br>            <span class="hljs-keyword">if</span> x - <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> set_nums:<br>                <span class="hljs-keyword">continue</span><br>            y = x + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> y <span class="hljs-keyword">in</span> set_nums:<br>                y += <span class="hljs-number">1</span><br>            ans = <span class="hljs-built_in">max</span>(ans, y - x)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure></p><h1 id="move-zeroes">283. Move Zeroes</h1><p>Given an integer array <code>nums</code>, move all <code>0</code>'sto the end of it while maintaining the relative order of the non - zeroelements.</p><p>Note that you must do this in - place without making a copy of thearray.</p><h2 id="example-1">Example 1:</h2><p><strong>Input</strong>: <code>nums = [0,1,0,3,12]</code></p><p><strong>Output</strong>: <code>[1,3,12,0,0]</code></p><h2 id="example-2">Example 2:</h2><p><strong>Input</strong>: <code>nums = [0]</code></p><p><strong>Output</strong>: <code>[0]</code></p><h2 id="answer-1-1">Answer 1:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveZeroes</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify nums in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>                count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):<br>                <span class="hljs-keyword">if</span> nums[j] != <span class="hljs-number">0</span>:<br>                    nums[i] = nums[j]<br>                    i += <span class="hljs-number">1</span> <br>        <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)-count, <span class="hljs-built_in">len</span>(nums)):<br>            nums[z] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><h2 id="answer-2-1">Answer 2:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveZeroes</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        i0 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i]:<br>                nums[i], nums[i0] = nums[i0], nums[i]<br>                i0 += <span class="hljs-number">1</span><br><span class="hljs-comment"># by：灵茶山艾府</span><br></code></pre></td></tr></table></figure><h1 id="container-with-most-water">11. Container With Most Water</h1><p>You are given an integer array <code>height</code> of length<code>n</code>. There are <code>n</code> vertical lines drawn such thatthe two endpoints of the <code>i</code>th line are <code>(i, 0)</code>and <code>(i, height[i])</code>.</p><p>Find two lines that together with the x - axis form a container, suchthat the container contains the most water.</p><p>Return the maximum amount of water a container can store.</p><p>Notice that you may not slant the container.</p><h2 id="example-1-1">Example 1:</h2><p><imgsrc="https://pic1.imgdb.cn/item/67d1966888c538a9b5bc296a.png" /></p><p><strong>Input</strong>: <code>height = [1,8,6,2,5,4,8,3,7]</code></p><p><strong>Output</strong>: <code>49</code></p><p><strong>Explanation</strong>: The above vertical lines arerepresented by the array <code>[1,8,6,2,5,4,8,3,7]</code>. In this case,the maximum area of water (the blue - shaded section) that the containercan hold is <code>49</code>.</p><h2 id="example-2-1">Example 2</h2><p><strong>Input</strong>: <code>height = [1,1]</code></p><p><strong>Output</strong>: <code>1</code></p><h2 id="answer-1-2">Answer 1:</h2><p>Brute-force search，NONONO <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxArea</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        maxarea = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(height)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(height)):<br>                maxarea = <span class="hljs-built_in">max</span>(maxarea, (j-i)* <span class="hljs-built_in">min</span>(height[j],height[i]))<br>        <span class="hljs-keyword">return</span> maxarea<br></code></pre></td></tr></table></figure></p><h2 id="answer-2-2">Answer 2:</h2><p>Great !!! <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxArea</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        i , j, maxarea = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(height)-<span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; j:<br>            <span class="hljs-keyword">if</span> height[i] &lt; height[j]:<br>                maxarea = <span class="hljs-built_in">max</span>(maxarea, (j-i) * height[i])<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                maxarea = <span class="hljs-built_in">max</span>(maxarea, (j-i) * height[j])<br>                j -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> maxarea<br></code></pre></td></tr></table></figure></p><h1 id="sum">15. 3Sum</h1><p>Given an integer array nums, return all the triplets [nums[i],nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] +nums[j] + nums[k] == 0.</p><p>Notice that the solution set must not contain duplicate triplets.</p><h2 id="example-1-2">Example 1:</h2><p><strong>Input</strong>: nums = [-1,0,1,2,-1,-4]</p><p><strong>Output</strong>: [[-1,-1,2],[-1,0,1]]</p><p><strong>Explanation</strong>: nums[0] + nums[1] + nums[2] = (-1) + 0+ 1 = 0.<br />nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.<br />nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.<br />The distinct triplets are [-1,0,1] and [-1,-1,2].</p><p>Notice that the order of the output and the order of the tripletsdoes not matter.</p><h2 id="answer-3">Answer:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        result = []<br>        nums = <span class="hljs-built_in">sorted</span>(nums)<br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i-<span class="hljs-number">1</span>]:  <span class="hljs-comment"># i 是可以跳过重复数字的</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> nums[i] &gt; <span class="hljs-number">0</span>: <span class="hljs-comment"># 优化1</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> nums[i] + nums[i+<span class="hljs-number">1</span>] + nums[i+<span class="hljs-number">2</span>] &gt; <span class="hljs-number">0</span>: <span class="hljs-comment"># 优化2</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> nums[i] + nums[-<span class="hljs-number">1</span>] + nums[-<span class="hljs-number">2</span>] &lt; <span class="hljs-number">0</span>: <span class="hljs-comment"># 优化3</span><br>                <span class="hljs-keyword">continue</span><br>            k = i + <span class="hljs-number">1</span><br>            j = <span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> k &lt; j:  <span class="hljs-comment"># 剩下的问题是两数和</span><br>                <span class="hljs-keyword">if</span> nums[i] + nums[k] + nums[j] &lt; <span class="hljs-number">0</span>:<br>                    k += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> nums[i] + nums[k] + nums[j] &gt; <span class="hljs-number">0</span>:<br>                    j -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    result.append([nums[i], nums[k], nums[j]])<br>                    j -= <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">while</span> k &lt; j <span class="hljs-keyword">and</span> nums[j] == nums[j+<span class="hljs-number">1</span>]:  <span class="hljs-comment"># j k 排除重复数字时，都是和考虑过的数字比较！！！</span><br>                        j -= <span class="hljs-number">1</span><br>                    k += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">while</span> k &lt; j <span class="hljs-keyword">and</span> nums[k] == nums[k-<span class="hljs-number">1</span>]:<br>                        k += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h1 id="longest-substring-without-repeating-characters">3. LongestSubstring Without Repeating Characters</h1><p>Given a string <code>s</code>, find the length of the longest<em>substring</em> without duplicate characters.</p><h2 id="example-1-3">Example 1:</h2><p><strong>Input</strong>: s = "abcabcbb"</p><p><strong>Output</strong>: 3</p><p><strong>Explanation</strong>: The answer is "abc", with the length of3.</p><h2 id="example-2-2">Example 2:</h2><p><strong>Input</strong>: s = "bbbbb"</p><p><strong>Output</strong>: 1</p><p><strong>Explanation</strong>: The answer is "b", with the length of1.</p><h2 id="example-3">Example 3:</h2><p><strong>Input</strong>: s = "pwwkew"</p><p><strong>Output</strong>: 3</p><p><strong>Explanation</strong>: The answer is "wke", with the length of3.</p><p>Notice that the answer must be a substring, "pwke" is a subsequenceand not a substring.</p><h2 id="answer-4">Answer:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        result = left = <span class="hljs-number">0</span><br>        count  = defaultdict(<span class="hljs-built_in">int</span>) <span class="hljs-comment"># 使用 defaultdict(int) 不需要预先检查键是否存在</span><br>        <span class="hljs-keyword">for</span> right, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>            count[c]+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> count[c]&gt;<span class="hljs-number">1</span>:<br>                count[s[left]]-=<span class="hljs-number">1</span><br>                left+=<span class="hljs-number">1</span><br>            result = <span class="hljs-built_in">max</span>(result, right - left +<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h1 id="find-all-anagrams-in-a-string">438. Find All Anagrams in aString</h1><p>Given two strings s and p, return an array of all the start indicesof p's anagrams in s. You may return the answer in any order.</p><h2 id="example-1-4">Example 1:</h2><p><strong>Input</strong>: s = "cbaebabacd", p = "abc"</p><p><strong>Output</strong>: [0,6]</p><p><strong>Explanation</strong>: The substring with start index = 0 is"cba", which is an anagram of "abc".<br />The substring with start index = 6 is "bac", which is an anagram of"abc".</p><h2 id="example-2-3">Example 2:</h2><p><strong>Input</strong>: s = "abab", p = "ab"</p><p><strong>Output</strong>: [0,1,2]</p><p><strong>Explanation</strong>:</p><p>The substring with start index = 0 is "ab", which is an anagram of"ab".<br />The substring with start index = 1 is "ba", which is an anagram of"ab".<br />The substring with start index = 2 is "ab", which is an anagram of"ab".</p><p>考察点是滑动窗口，与前一题有点像</p><h2 id="answer-1-3">Answer 1:</h2><p>能够通过大部分样例的解法，比较笨 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findAnagrams</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        result = []<br>        length = <span class="hljs-built_in">len</span>(p)<br>        p = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">sorted</span>(p))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)-length+<span class="hljs-number">1</span>):<br>            string = <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>                string += s[i+j]<br>            string = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">sorted</span>(string))<br>            <span class="hljs-keyword">if</span> string == p:<br>                result.append(i)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure></p><h2 id="answer-2-3">Answer 2:</h2><p>采用了定长滑动窗口的解法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findAnagrams</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        result = []<br>        length = <span class="hljs-built_in">len</span>(p)<br>        cnt_p = Counter(p) <span class="hljs-comment"># Counter 用于统计可哈希对象的出现次数</span><br>        cnt_s = Counter()<br>        <span class="hljs-keyword">for</span> right, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>            cnt_s[c]+=<span class="hljs-number">1</span><br>            left = right - length + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> left &lt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> cnt_s == cnt_p:<br>                result.append(left)<br>            cnt_s[s[left]] -= <span class="hljs-number">1</span>  <span class="hljs-comment"># 因为定长滑动窗口，所以需要把左边的元素减掉</span><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure></p><h2 id="answer-3-1">Answer 3:</h2><p>采用不定长滑动窗口，思路参考：by 灵茶山艾府</p><p>枚举子串 <code>s'</code> 的右端点，如果发现 <code>s'</code>其中一种字母的出现次数<strong>大于</strong> <code>p</code>的这种字母的出现次数，则右移 <code>s'</code> 的左端点。如果发现<code>s'</code> 的长度等于 <code>p</code> 的长度，则说明 <code>s'</code>的每种字母的出现次数，和 <code>p</code> 的每种字母的出现次数都相同，那么<code>s'</code> 是 <code>p</code> 的异位词。</p><p><strong>证明</strong>：内层循环结束后，<code>s'</code>的每种字母的出现次数，都小于等于 <code>p</code>的每种字母的出现次数。如果 <code>s'</code> 的其中一种字母的出现次数比<code>p</code> 的小，那么 <code>s'</code> 的长度必然小于 <code>p</code>的长度。所以只要 <code>s'</code> 的长度等于 <code>p</code>的长度，就说明 <code>s'</code> 的每种字母的出现次数，和 <code>p</code>的每种字母的出现次数都相同，<code>s'</code> 是 <code>p</code>的异位词，把 <code>s'</code> 左端点下标加入答案。</p><p>代码实现时，可以把 <code>cntS</code> 和 <code>cntP</code> 合并成一个<code>cnt</code>： - 对于 <code>p</code> 的字母 <code>c</code>，把<code>cnt[p]</code> 加一。 - 对于 <code>s'</code> 的字母<code>c</code>，把 <code>cnt[c]</code> 减一。 - 如果<code>cnt[c] &lt; 0</code>，说明窗口中的字母 <code>c</code> 的个数比<code>p</code> 的多，右移左端点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findAnagrams</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        result = []<br>        length = <span class="hljs-built_in">len</span>(p)<br>        cnt_p = Counter(p)<br>        cnt_s = Counter()<br>        left = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> right, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>            cnt_s[c]+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> cnt_s[c] &gt; cnt_p[c]:<br>                cnt_s[s[left]] -= <span class="hljs-number">1</span><br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> right - left + <span class="hljs-number">1</span> == length:<br>                result.append(left)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h1 id="subarray-sum-equals-k">560. Subarray Sum Equals K</h1><p>Given an array of integers nums and an integer k, return the totalnumber of subarrays whose sum equals to k.</p><p>A subarray is a contiguous non-empty sequence of elements within anarray.<br />子数组是数组中元素的连续非空序列。<br />注意是<strong>连续的</strong>！！！</p><h2 id="example-1-5">Example 1:</h2><p><strong>Input</strong>: nums = [1,1,1], k = 2<br /><strong>Output</strong>: 2</p><h2 id="example-2-4">Example 2:</h2><p><strong>Input</strong>: nums = [1,2,3], k = 3<br /><strong>Output</strong>: 2</p><h2 id="answer-1-4">Answer 1:</h2><p>前缀和问题，使用前缀和字典记录前缀和的出现次数，然后遍历数组，计算当前前缀和减去目标值k的差值在字典中出现的次数，累加到结果中。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subarraySum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        prefix_sum = &#123;<span class="hljs-number">0</span>: <span class="hljs-number">1</span>&#125;  <span class="hljs-comment"># 前缀和字典，初始值为前缀和为0出现1次</span><br>        current_sum = <span class="hljs-number">0</span><br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            current_sum += num<br>            <span class="hljs-keyword">if</span> current_sum - k <span class="hljs-keyword">in</span> prefix_sum:<br>                count += prefix_sum[current_sum - k]<br>            prefix_sum[current_sum] = prefix_sum.get(current_sum, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> count<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十二讲 ensemble learning</title>
    <link href="/2024/12/27/ji-qi-xue-xi/di-shi-er-jiang-ensemble-learning/"/>
    <url>/2024/12/27/ji-qi-xue-xi/di-shi-er-jiang-ensemble-learning/</url>
    
    <content type="html"><![CDATA[<h2 id="ensemble-learning">Ensemble learning</h2><h3 id="bagging">bagging</h3><p>bagging 主要实现的效果是降低模型的高方差</p><p>类似并行决策模型</p><p><imgsrc="https://pic.imgdb.cn/item/676e6a82d0e0a243d4eb71fc.png" /></p><p>Bagging is ineffective when the model is too simple with a smallnumber of parameters</p><h3 id="boosting">boosting</h3><p>boosting 主要实现的效果是降低模型的高偏差</p><p>类似串行决策模型</p><p>Boosting trains weak learners one after one to solve the problem stepby step</p><h3 id="adaboost">AdaBoost</h3><p>AdaBoost (Adaptive Boosting) is a famous boosting approach</p><p><imgsrc="https://pic.imgdb.cn/item/676e6d36d0e0a243d4eb7a38.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/676e6e5fd0e0a243d4eb7ee0.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/676e7279d0e0a243d4eb8c76.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/676e85fcd0e0a243d4ebb165.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/676e860bd0e0a243d4ebb177.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/676e8629d0e0a243d4ebb19c.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/676e8635d0e0a243d4ebb1b0.png" /></p><p>adaboost有个例题，需要看一下，熟悉计算过程：</p><ul><li>对于每个弱学习器，先计算错误率</li><li>根据错误率计算模型权重 α</li><li>根据模型权重 α 计算各个参数的权重</li><li>循环</li></ul><p>集成学习总结：bagging 和 boosting</p><p><imgsrc="https://pic.imgdb.cn/item/676e8e11d0e0a243d4ebbde9.png" /></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十一讲-SVM</title>
    <link href="/2024/12/16/ji-qi-xue-xi/di-shi-yi-jiang-svm/"/>
    <url>/2024/12/16/ji-qi-xue-xi/di-shi-yi-jiang-svm/</url>
    
    <content type="html"><![CDATA[<h2 id="支持向量机---最大化间隔问题">支持向量机---最大化间隔问题</h2><p>支持向量机也是一个分类模型</p><p>目的是找到分离各类数据点的最好的分界线（面），能够实现最大间隔（相对于支持向量来说）</p><ul><li>每类中最近的点叫支持向量</li><li>非支持向量到决策面的距离都大于决策向量</li></ul><p><img src="https://pic.imgdb.cn/item/676e1234d0e0a243d4eb1ee7.png" /><img src="https://pic.imgdb.cn/item/676e1248d0e0a243d4eb1eee.png" /></p><p>下面是一个例题，和课后作业的内容很像:</p><p><imgsrc="https://pic.imgdb.cn/item/676e14b2d0e0a243d4eb1fbd.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/676e1507d0e0a243d4eb1fcc.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/676e1738d0e0a243d4eb2080.png" /></p><h2 id="考试需要掌握的内容">考试需要掌握的内容：</h2><h3 id="支持向量机中的核技巧the-kernel-trick">支持向量机中的核技巧（TheKernel Trick）</h3><p><imgsrc="https://pic.imgdb.cn/item/676e1112d0e0a243d4eb1e18.png" /></p><p>面对非线性数据，使用复杂的模型把低维的样本映射到高维中，以此来实现线性可分</p><p><imgsrc="https://pic.imgdb.cn/item/676e1158d0e0a243d4eb1e5d.png" /></p><p>结论：如果数据映射的维度越高，就越有可能实现线性可分！</p><ul><li>The more dimension ϕ(x) has, the more likely ϕ(x) is linearlyseparable！</li></ul><p>如果将 x 映射到无穷维，那么一定可以实现线性可分！</p><p><imgsrc="https://pic.imgdb.cn/item/676e1165d0e0a243d4eb1e8d.png" /></p><h3 id="soft-margin-svm-and-hard-margin-svm">soft margin SVM and hardmargin SVM</h3><p>硬间隔SVM对于噪声过于敏感</p><p>软间隔SVM</p><p>Hinge loss</p><figure><img src="https://pic.imgdb.cn/item/676e1e4fd0e0a243d4eb22a5.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末总结</title>
    <link href="/2024/12/16/shu-zi-tu-xiang-chu-li/shu-zi-tu-xiang-chu-li-qi-mo-zong-jie/"/>
    <url>/2024/12/16/shu-zi-tu-xiang-chu-li/shu-zi-tu-xiang-chu-li-qi-mo-zong-jie/</url>
    
    <content type="html"><![CDATA[<h2 id="第一讲---前言概述">第一讲---前言+概述</h2><p>理解</p><ul><li>什么是数字图像</li><li>数字图像和物理图像的区别</li><li>图像和图形的区别</li></ul><p>数字图像的定义：</p><ul><li>数字图像是指物理图像的连续信号值被离散化后，由被称作像素的小块区域组成的二维矩阵。将物理图像行列划分后，每个小块区域称为像素（Pixel）。每个像素包括两个属性：位置和色彩（或亮度）</li></ul><p>图像的数字化（概念是重点）</p><ul><li>由一幅物理图像（信号值连续）获取一幅满足需求的数字图像的离散化过程称为图像数字化。这里涉及到两个重要的概念：采样与量化</li><li>采样和量化的概念: 采样是位置离散化、量化是色彩/亮度离散化</li></ul><p>图像和图形的区别</p><ul><li><imgsrc="https://pic.imgdb.cn/item/675f7428d0e0a243d4e4427a.png" /></li></ul><p>数字图像处理研究的几个内容（了解）：</p><ul><li>图像变换：灰度变化、几何变换、正交变换</li><li>图像增强：空域滤波、频域滤波</li><li>图像恢复：</li><li>图像分割</li><li>数学形态学</li></ul><p>图像工程的三个层次（这个我感觉也挺重要的）</p><ul><li>图像处理、图像分析、图像理解</li><li>图像处理着重强调图像到图像之间进行的变换。对图像进行各种加工以改善图像的视觉效果并为自动识别打基础，或对图像进行压缩编码以减少对其所需存储空间或传输时间的要求。</li><li>图像分析是对图像中感兴趣的目标进行检测和测量，以获得它们的客观信息从而建立对图像的描述。图像分析是一个从图像到数据的过程，这里数据可以是对目标特征检测的结果或是基于测量的符号表示。</li><li>图像理解的重点是在图像分析的基础上，借助知识、经验等进一步研究图像中各目标的性质和他们之间的相互联系，并得出对图像内容含义的理解以及对原来客观场景的解释，从而指导和规划行动。</li><li><imgsrc="https://pic.imgdb.cn/item/675f74a2d0e0a243d4e4428a.png" /></li></ul><h2 id="第二讲---色彩模型">第二讲---色彩模型</h2><p>色彩模型是为了描述和重现图像的色彩</p><p>分为</p><ul><li>面向设备的色彩模型<ul><li>RGB ：红、绿、蓝</li><li>CMYK : 青（Cyan）、品红（Magenta）、黄（Yellow）和黑（Black）</li></ul></li><li>面向色彩感知的色彩模型<ul><li>HSI：色调（Hue）、色饱和度（Saturation）和亮度（Intensity）</li><li>LAB ：L表示亮度，A赋予了从红到绿的所有颜色，B赋予了从黄到蓝的所有颜色</li></ul></li></ul><p>需要知道上述四种色彩模型中的每个字母代表什么含义（颜色）</p><p>然后就是理解发光体和反光体的概念，RGB 利用的是发光体的原理，CMYK利用的是反光体的原理，二者刚刚好是互补的，一个是电视机，一个是打印机</p><ul><li>类似出题可能为：利用发光体的原理，将黄色和蓝色融合得到什么颜色？在反光体的原理下呢？</li></ul><p>jepg 文件使用到的色彩模型为：YCbCr !!!</p><h2 id="第三讲---bmp文件的读取与显示">第三讲---BMP文件的读取与显示</h2><p>这讲主要是与实验课关系比较大，需要知道BMP文件的大概结构即可，具体如下：</p><p>一个完整的BMP文件由文件头、信息头、调色板以及实际的位图数据四部分组成</p><p><imgsrc="https://pic.imgdb.cn/item/675f76fcd0e0a243d4e442ad.png" /></p><h3 id="文件头">文件头</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tagBITMAPFILEHEADER</span> &#123;<br>        WORD      bfType;              <span class="hljs-comment">//2个字节</span><br>        DWORD   bfSize;                <span class="hljs-comment">//4个字节</span><br>        WORD      bfReserved1;     <span class="hljs-comment">//2个字节</span><br>        WORD      bfReserved2;     <span class="hljs-comment">//2个字节</span><br>        DWORD   bfOffBits;          <span class="hljs-comment">//4个字节</span><br>&#125; BITMAPFILEHEADER; <br></code></pre></td></tr></table></figure><p>文件头长度固定为14字节（会考！！！）</p><h3 id="信息头">信息头</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tagBITMAPINFOHEADER</span>&#123;<br>   DWORD  biSize; <br>   LONG      biWidth; <br>   LONG      biHeight; <br>   WORD     biPlanes; <br>   WORD     biBitCount;<br>   DWORD  biCompression; <br>   DWORD  biSizeImage; <br>   LONG      biXPelsPerMeter; <br>   LONG      biYPelsPerMeter; <br>   DWORD  biClrUsed; <br>   DWORD  biClrImportant; <br>&#125; BITMAPINFOHEADER; <br></code></pre></td></tr></table></figure><p>信息头长度固定为40字节（也会考！！！）</p><p>信息头里需要记住的几个字段有：</p><ul><li>biWidth：指定图像的宽度，单位是像素。</li><li>biHeight：指定图像的高度，单位是像素。</li><li>biBitCount: 指定表示颜色时要用到的位数，常用的值为1（黑白二色图）,4（16色图）, 8（256色）, 24（真彩色图）</li><li>biClrUsed:指定本图象实际用到的颜色数（决定调色板数组元素的个数），如果该值为零，则用到的颜色数为2的biBitCount 次方</li></ul><p>biClrUsed 与 biBitCount结合起来会让你计算，提供这两个值，计算整幅图像用到的颜色数</p><h3 id="调色板">调色板</h3><p>对于调色板的概念要知道，我的理解为：调色板就是数据结构中的哈希表，一种高效的数据存储结构</p><ul><li>注意24位真彩图像不需要使用到调色板</li></ul><p>调色板长度为4字节</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tagRGBQUAD</span> &#123; <br>    BYTE    rgbBlue;         <span class="hljs-comment">//该颜色的蓝色分量</span><br>    BYTE    rgbGreen;      <span class="hljs-comment">//该颜色的绿色分量</span><br>    BYTE    rgbRed;          <span class="hljs-comment">//该颜色的红色分量</span><br>    BYTE    rgbReserved; <span class="hljs-comment">//保留值，不考虑</span><br>&#125; RGBQUAD; <br></code></pre></td></tr></table></figure><h3 id="实际的位图数据">实际的位图数据</h3><p>课上用到的几种位图数据</p><ul><li>2色位图（黑白），一个字节表示8个像素点</li><li>16色，一个字节表示两个像素点</li><li>256色，一个字节表示一个像素点</li><li>真彩图，三个字节表示一个像素点</li></ul><p>可能会让你算内存大小，所以要知道各个图像一个像素点所占的字节数</p><h4 id="关于位图数据需要注意的点">关于位图数据需要注意的点</h4><p>1、每一行的字节数必须是4的整倍数，如果不是，则需要补齐</p><p>2、BMP文件的数据是从下到上，从左到右的，最后得到的是最上面一行的最右一个像素</p><p>3、针对实验课，显示位图的两个关键指针: lpBitsInfo 和 lpBits</p><p><imgsrc="https://pic.imgdb.cn/item/675fd075d0e0a243d4e4886e.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/675fd0a3d0e0a243d4e48885.png" /></p><p>每个函数开头都需要使用到的四行代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> w = lpBitsInfo-&gt;bmiHeader.biWidth;<br><span class="hljs-type">int</span> h = lpBitsInfo-&gt;bmiHeader.biHeight;<br><span class="hljs-type">int</span> LineBytes = (w * lpBitsInfo-&gt;bmiHeader.biBitCount + <span class="hljs-number">31</span>)/<span class="hljs-number">32</span> * <span class="hljs-number">4</span>;  <span class="hljs-comment">// 确保LineBytes是4的倍数</span><br>BYTE* lpBits = (BYTE*)&amp;lpBitsInfo-&gt;bmiColors[lpBitsInfo-&gt;bmiHeader.biClrUsed];<br></code></pre></td></tr></table></figure></p><h2 id="第四讲---数字图像基本运算">第四讲---数字图像基本运算</h2><ul><li>算术运算</li><li>逻辑运算</li><li>几何运算</li><li>灰度直方图</li><li>点运算</li></ul><p>需要结合课件，知道各个运算能够实现什么效果（功能）</p><p>个人认为比较重要的是乘法运算中的正片叠底和滤色</p><p>正片叠底： [A(x, y) * B(x, y)]/255模拟反光体的颜色混合（相减混色），如打印机的油墨。</p><p>滤色：255-{[255-A(x, y)] * [255-B(x, y)]}/255模拟发光体的颜色混合（相加混色），如显示器的光束。</p><p>正片叠底和滤色的公式要记住，会考！</p><p>除法不考</p><p>几何运算中的缩放和旋转是重点，ppt里面的公式都要记</p><p>插值算法需要掌握0阶插值和1阶插值</p><p><imgsrc="https://pic.imgdb.cn/item/675fd2c7d0e0a243d4e489d7.png" /></p><p>一截插值会考计算题，给你四个红色的点，让你求蓝色的点</p><p>灰度直方图要记住几个特性，ppt里有，实验课用的比较多</p><p>点运算的特点和种类要了解</p><p><imgsrc="https://pic.imgdb.cn/item/675fd36ad0e0a243d4e48a0b.png" /></p><p>如上图，线性点运算给你参数，让你说出处理后的效果</p><p>直方图均衡化的公式会考，非常重要，</p><p><imgsrc="https://pic.imgdb.cn/item/675fd3c2d0e0a243d4e48a20.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/675fd3d4d0e0a243d4e48a24.png" /></p><p>按照ppt里的步骤来，算错也有步骤分！！！</p><p>TODO：直方图规定化课上老师讲了大概，没说怎么考，期末讲了再补充</p><h2 id="第五讲---傅里叶变换">第五讲---傅里叶变换</h2><p>了解频域和空域的基本概念</p><p>...</p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>随笔</title>
    <link href="/2024/11/25/sui-bi/"/>
    <url>/2024/11/25/sui-bi/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="❌哒咩！投喂错误❌" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9be67fba17b8a9f82b4c5490b2a615785f2725f06e86aced1aad945699a7d886">53f1270e529fa4987cfa890269a9062a7bfa82f634ca5dd30b2d2d2bd1a17d0e338bdb8e129f6c619f143de62db85682cb497198826ece92a30cfbb94d1ece4b03284f65a6ba7c941f34a0ca1495aa458727f4d97d01a1d8329307ab0e4a52539eefa2212ab901542f498a6700dd2787f3c1c100bc98343d9ae63edc1fca16f1764d0ecd017260f26ae601df25312ac1b438f7e516a14a4b90b643ec31598106</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请投喂我密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Contrastive Learning for Unpaired Image-to-Image Translation</title>
    <link href="/2024/11/15/wen-xian-yue-du/wen-xian-yue-du-2/"/>
    <url>/2024/11/15/wen-xian-yue-du/wen-xian-yue-du-2/</url>
    
    <content type="html"><![CDATA[<p>文章链接：https://arxiv.org/pdf/2007.15651.pdf</p><p>代码：https://github.com/taesungp/contrastive-unpaired-translation</p><p>2020年发表在ECCV上的文章，在cyclegan的基础上，采用对比学习的方法进行改进优化</p><h2 id="通读">通读</h2><h3 id="abstract">abstract</h3><p>maximizing mutual information between the two</p><p>作者选择的方法是最大化两张图片的互信息，采用了对比学习的框架，能够实现二者之间相互映射到学习特征空间，数据集中的其他元素称为（negatives），不会被学习到</p><p>作者采用的是多层的，基于patch的方法，而不是在整个数据集（dataset）中实现</p><p>对于negatives的提取也是从当前的输入图片中提取，而不是数据集的其他部分</p><p>值得注意的是，CUT可以拓展到每个域仅为单张图片的训练模式</p><h2 id="introduction">introduction</h2><p>image2image需要值得注意的点是，需要让输出呈现目标域的外观，同时能够保留源域的结构或内容（细节）</p><p>separating the content, which needs to be preserved across domains,from appearance, which must change将需要跨域保留的内容与必须更改的外观分开</p><p>cyclegan使用循环一致性损失来保留内容，同时使用对抗性损失来强制改变风格（外观）</p><p>但是循环一致性损失的假设是两个域之间存在双射的关系（能找到对应），whichis often too restrictive.</p><p>by maximizing the mutual information between corresponding input andoutput patches. 使用这种方式来保持内容的不变</p><p><imgsrc="https://pic.imgdb.cn/item/67375112d29ded1a8cc52f79.png" /></p><p>提出了使用对比损失函数 InfoNCE loss 来实现：</p><p>通过生成的斑马的前额patch，知道其来自于马前额，其目的是学习将对应的补丁彼此关联的嵌入或编码器，,同时将他们与其他patch 分开。</p><p>为此，编码器学会关注两个域之间的共性，例如对象部分和形状，同时差异得到了保留，例如动物的纹理。</p><p>生成器和编码器，共同生成一个图像，使得 patch可以很容易地跟踪到输入,实现映射关系</p><p>它适用于一个多层次的，拼接的方式。</p><p>在非配对的图像生成中，循环一致性是一种强制对应的方法，它学习从输出域到输入的逆映射，并检查输入是否可以重建。</p><p>尝试通过信息最大化（ informationmaximization）来学习输入和输出补丁之间的跨域相似性函数，而不依赖于预先指定的距离来取代周期一致性。</p><p><imgsrc="https://pic.imgdb.cn/item/6738010cd29ded1a8c3f61cd.png" /></p><p>该方法只需要学习一个方向的映射，避免了使用逆辅助生成器和判别器。这可以大大简化训练过程并减少训练时间。同时将生成函数G分解为两个分量，编码器Genc和解码器Gdec，它们被顺序地应用以产生输出图像y= G（z）= Gdec（Genc（x））</p><p>使用对抗性损失：Adversarial loss. We use an adversarial loss, toencourage the output to be visually similar to images from the targetdomain, as follows: <imgsrc="https://pic.imgdb.cn/item/67380200d29ded1a8c40258b.png" /></p><p>这个公式没给解释诶，损失函数没讲清楚</p><p>Mutual information maximization 互信息最大化 <imgsrc="https://pic.imgdb.cn/item/673803bad29ded1a8c416545.png" />在特征提取后结合了两层MLP,该网络学习将输入和输出 patch投影到共享的嵌入空间。</p><p>The cross-entropy loss is calculated, representing the probability ofthe positive example being selected over negatives. <imgsrc="https://pic.imgdb.cn/item/6738061cd29ded1a8c431235.png" /></p><ul><li>Our goal is to associate the input and output data. In our context,query refers to an output. positive and negatives are corresponding andnoncorresponding input.</li><li>我们的目标是关联输入和输出数据。在我们的文章中，query指的是一个输出。正和负是对应的和非对应的输入。</li></ul><p>使用MLP的目的是什么？ -特征图本身并非为满足对比损失而设计的，因为它们只是对图像转换有用的特征。但它们应该很容易投射到可以满足对比损失的另一个空间，MLP负责这部分工作。</p><p>如何将图片映射到矢量中？如何对负样本进行采样？</p><p>多层次的，基于patch的学习方法</p><ul><li>Each layer and spatial location within this feature stack representsa patch of the input image, with deeper layers corresponding to biggerpatches.</li><li>该特征堆栈中的每个层和空间位置表示输入图像的一个patch，较深的层对应于较大的patch</li></ul><p>PatchNCE loss可以简单理解为对于输入和输出两张图片，相同位置的patch可以更好的联系在一起，相较于输入图片中的其他patch(单图像的内部统计)</p><p>编码器Genc学习捕获跨域中的不变内容，解码器Gdec学习合成特定域的特征</p><p>final objective:</p><p>生成真实的图像，同时保持输入和输出图像相同位置上的 patch保持对应关系，在生成域上，可以使用 PatchNCE loss来防止生成器对生成的图像进行不必要的修改（这里我理解为改变了输入图像的轮廓）</p><p><img src="https://pic.imgdb.cn/item/6738c3a0d29ded1a8ce44ec5.png" />循环一致性损失是条件熵上界H(X|Y) orH(Y|X),最小化循环一致性损失会促进输出y更加依赖于输入x</p><ul><li>This is related to our objective of maximizing the mutualinformation I(X, Y), as I(X, Y) = H(X) − H(X|Y).</li><li>As entropy H(X) is a constant and independent of the generator G,maximizing mutual information is equivalent to minimizing theconditional entropy.</li><li>这里我的理解为最大化互信息就是让输入和输出之间的熵最小（更相似），H(X|Y)可以表示输入x与输出y之间的差异程度，cyclegan的优化目标是让输入和输出之间的差异 H(X|Y) 更小，本质上和作者这里的想法是一致的。</li></ul><h2 id="记录一些其他读过的内容">记录一些其他读过的内容</h2><p>风格转换的可行性：</p><ul><li>数据一致性提升：不同站点的 CT图像由于设备品牌、扫描参数等因素导致图像的亮度、对比度、纹理等方面存在差异，通过风格转换可以使它们在视觉上更加相似。这有助于模型更稳定地学习图像特征，避免模型因数据风格差异过大而出现过拟合或学习困难的情况。</li><li>利用公开数据集的优势：以一个高质量的公开数据集风格为标准，可以借鉴公开数据集在数据标注、数据质量控制等方面的优点。公开数据集通常经过精心整理和标注，其风格也往往是被广泛认可和适用于特定任务的。通过将各站点数据转换为这种风格，能够使模型更好地利用在公开数据集上验证过的架构和训练方法</li></ul><p>现在的想法就是可以实现一种风格图像到另一种风格的转换，同时能够提高模型训练的识别精度</p><p>MIA2024年还发布了一篇文章，里面提到了：用于多站点脑网络分析的多源 DA方法（Wang et al., 2020、She et al., 2022、Guan et al., 2021）具有局限性，并且通常涉及两个独立的阶段，即多源域适应和疾病诊断，如图 1(c) 所示。然而，很难确保 DA后对齐的特征一定对最终的分类任务有益。虽然这些方法考虑了多源DA，但它们独立地建立每个源域和目标域之间的单独域映射，忽略了不同域映射之间的潜在相关性。</p><h2 id="记录灵感">记录灵感</h2><p>设计一种跨模态的注意力机制，允许图像级别的信息与特征级别的信息进行交互：可以利用图像样式转化后的输出来指导特征提取器关注那些对领域对齐特别重要的区域或者特征，利用这种机制，有助于提高模型对特定领域变化的鲁棒性</p><p>虽然图像层面的样式转化可以实现，但是转换后的图像保存的领域特征可能并非是我们需要的，因此我们需要同时保持特征层面的对齐（比如使用共享的特征提取器）</p>]]></content>
    
    
    <categories>
      
      <category>文献阅读</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROS实验报告三</title>
    <link href="/2024/11/09/ros/ros-shi-yan-bao-gao-san/"/>
    <url>/2024/11/09/ros/ros-shi-yan-bao-gao-san/</url>
    
    <content type="html"><![CDATA[<h1id="实验三利用action实现小海龟的运动">实验三：利用action实现小海龟的运动</h1><h2id="任务利用action机制实现小海龟的360转圈运动">任务：利用action机制实现小海龟的360°转圈运动</h2><h3id="一实验原理介绍算法或实验思路">一、实验原理(介绍算法或实验思路)</h3><h4 id="实验思路介绍">1、实验思路介绍</h4><p>本实验的主要目的是利用ros2中的action机制实现小海龟的360°转圈运动，具体实现思路：</p><h5 id="动作客户端">（1）动作客户端：</h5><ul><li>客户端节点首先初始化ROS2环境，并创建一个动作客户端对象。</li><li>客户端发送一个包含使能标志的动作目标消息，告诉服务器开始执行360°转圈运动。</li><li>客户端等待服务器的响应，并在接收到响应后继续等待最终结果。</li><li>客户端订阅小海龟的位置信息，并在回调函数中输出当前海龟的位置。</li></ul><h5 id="动作服务器">（2）动作服务器：</h5><ul><li>服务器节点初始化ROS2环境，并创建一个动作服务器对象。</li><li>服务器接收到客户端的动作目标后，开始控制小海龟进行360°转圈运动。</li><li>服务器设置小海龟的线速度和角速度，并在一个循环中持续发布速度消息，直到完成360°的圆周运动。</li><li>运动完成后，服务器停止发布速度消息，并向客户端返回成功结果。</li></ul><h3 id="二实验步骤附上必要图片">二、实验步骤(附上必要图片)</h3><h4 id="终端启动小海龟">1、终端启动小海龟</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ros2 run turtlesim turtlesim_node  <br></code></pre></td></tr></table></figure><p><imgsrc="https://pic.imgdb.cn/item/672f0741d29ded1a8c357e65.png" /></p><h4 id="创建功能包">2、创建功能包</h4><p><imgsrc="https://pic.imgdb.cn/item/672f074fd29ded1a8c358b45.png" /></p><h4 id="创建编写源文件">3、创建编写源文件</h4><p><imgsrc="https://pic.imgdb.cn/item/672f0761d29ded1a8c359c6f.png" /></p><h4 id="配置编译文件">4、配置编译文件</h4><p><imgsrc="https://pic.imgdb.cn/item/672f077bd29ded1a8c35b536.png" /></p><h4 id="编译">5、编译</h4><p><imgsrc="https://pic.imgdb.cn/item/672f078dd29ded1a8c35c469.png" /></p><h4 id="运行客户端以及服务器节点">6、运行客户端以及服务器节点</h4><p><imgsrc="https://pic.imgdb.cn/item/672f07aad29ded1a8c35e70d.png" /></p><h3 id="三实验结果分析附上必要图片">三、实验结果+分析(附上必要图片)</h3><h4 id="实验过程及结果展示">1、实验过程及结果展示</h4><p><img src="https://pic.imgdb.cn/item/672f0825d29ded1a8c364f21.png" /><img src="https://pic.imgdb.cn/item/672f0866d29ded1a8c368441.png" /></p><h4 id="实验过程分析">2、实验过程分析</h4><p>（1）启动turtlesim节点：</p><ul><li>成功启动turtlesim节点后，屏幕上显示了一个小海龟。</li></ul><p>（2）启动动作服务器节点：</p><ul><li>成功启动动作服务器节点后，终端输出“Movingcircle...”信息，表示服务器已准备好接收动作目标。</li></ul><p>（3）启动动作客户端节点：</p><ul><li>成功启动动作客户端节点后，客户端发送动作目标，并等待服务器响应。客户端订阅小海龟的位置信息，并在回调函数中输出当前海龟的位置。</li></ul><p>（4）小海龟运动：</p><ul><li>小海龟开始按照设定的线速度和角速度进行360°转圈运动。运动过程中，客户端不断输出小海龟的位置信息，确认运动状态。</li></ul><p>（5）运动完成：</p><ul><li>小海龟完成360°转圈运动后，服务器停止发布速度消息，并向客户端返回成功结果。客户端输出最终结果和小海龟的最终位置。</li></ul><h4 id="实验结果分析">3、实验结果分析</h4><p>（1）运动轨迹：</p><p>小海龟按照预期完成了360°的圆周运动，轨迹呈圆形，没有明显的偏移或误差，这表明设置的线速度和角速度是合理的，能够有效控制小海龟的运动。</p><p>（2）反馈机制：</p><p>客户端订阅小海龟的位置信息，并在回调函数中实时输出当前位置。这种实时反馈机制有助于监控小海龟的运动状态，确保运动过程的稳定性和准确性。</p><h3 id="四关键功能代码">四、关键功能代码</h3><h4 id="action_client.py">1、action_client.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> rclpy                              <span class="hljs-comment"># ROS2 Python接口库</span><br><span class="hljs-keyword">from</span> rclpy.node <span class="hljs-keyword">import</span> Node               <span class="hljs-comment"># ROS2 节点类</span><br><span class="hljs-keyword">from</span> rclpy.action <span class="hljs-keyword">import</span> ActionClient     <span class="hljs-comment"># ROS2 动作客户端类</span><br><span class="hljs-keyword">from</span> learning_interface.action <span class="hljs-keyword">import</span> MoveCircle  <span class="hljs-comment"># 自定义的圆周运动接口</span><br><span class="hljs-keyword">from</span> turtlesim.msg <span class="hljs-keyword">import</span> Pose            <span class="hljs-comment"># 导入海龟位置消息</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MoveCircleActionClient</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)            <span class="hljs-comment"># ROS2节点父类初始化</span><br>        self._action_client = ActionClient(  <span class="hljs-comment"># 创建动作客户端（接口类型、动作名）</span><br>            self, MoveCircle, <span class="hljs-string">&#x27;move_circle&#x27;</span>)<br>        self.pose_subscription = self.create_subscription(  <span class="hljs-comment"># 创建订阅者，订阅海龟位置</span><br>            Pose, <span class="hljs-string">&#x27;/turtle1/pose&#x27;</span>, self.pose_callback, <span class="hljs-number">10</span>)<br>        self.current_pose = <span class="hljs-literal">None</span>          <span class="hljs-comment"># 初始化当前海龟位置</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send_goal</span>(<span class="hljs-params">self, enable</span>):          <span class="hljs-comment"># 创建一个发送动作目标的函数</span><br>        goal_msg = MoveCircle.Goal()      <span class="hljs-comment"># 创建一个动作目标的消息</span><br>        goal_msg.enable = enable          <span class="hljs-comment"># 设置动作目标为使能，希望机器人开始运动</span><br><br>        self._action_client.wait_for_server()  <span class="hljs-comment"># 等待动作的服务器端启动</span><br>        self._send_goal_future = self._action_client.send_goal_async(  <span class="hljs-comment"># 异步方式发送动作的目标</span><br>            goal_msg)  <span class="hljs-comment"># 动作目标</span><br><br>        self._send_goal_future.add_done_callback(self.goal_response_callback)  <span class="hljs-comment"># 设置一个服务器收到目标之后反馈时的回调函数</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">goal_response_callback</span>(<span class="hljs-params">self, future</span>):  <span class="hljs-comment"># 创建一个服务器收到目标之后反馈时的回调函数</span><br>        goal_handle = future.result()          <span class="hljs-comment"># 接收动作的结果</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> goal_handle.accepted:           <span class="hljs-comment"># 如果动作被拒绝执行</span><br>            self.get_logger().info(<span class="hljs-string">&#x27;Goal rejected :(&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        self.get_logger().info(<span class="hljs-string">&#x27;Goal accepted :)&#x27;</span>)  <span class="hljs-comment"># 动作被顺利执行</span><br><br>        self._get_result_future = goal_handle.get_result_async()  <span class="hljs-comment"># 异步获取动作最终执行的结果反馈</span><br>        self._get_result_future.add_done_callback(self.get_result_callback)  <span class="hljs-comment"># 设置一个收到最终结果的回调函数</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_result_callback</span>(<span class="hljs-params">self, future</span>):  <span class="hljs-comment"># 创建一个收到最终结果的回调函数</span><br>        result = future.result().result     <span class="hljs-comment"># 读取动作执行的结果</span><br>        self.get_logger().info(<span class="hljs-string">&#x27;Result: &#123;%d&#125;&#x27;</span> % result.finish)  <span class="hljs-comment"># 日志输出执行结果</span><br>        <span class="hljs-keyword">if</span> self.current_pose:<br>            self.get_logger().info(<span class="hljs-string">&#x27;Final Pose: x=%f, y=%f, theta=%f&#x27;</span> % (self.current_pose.x, self.current_pose.y, self.current_pose.theta))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pose_callback</span>(<span class="hljs-params">self, msg</span>):  <span class="hljs-comment"># 创建处理海龟中间位置消息的回调函数</span><br>        self.current_pose = msg    <span class="hljs-comment"># 更新当前海龟位置</span><br>        self.get_logger().info(<span class="hljs-string">&#x27;Pose updated: x=%f, y=%f, theta=%f&#x27;</span> % (msg.x, msg.y, msg.theta))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">args=<span class="hljs-literal">None</span></span>):  <span class="hljs-comment"># ROS2节点主入口main函数</span><br>    rclpy.init(args=args)  <span class="hljs-comment"># ROS2 Python接口初始化</span><br>    node = MoveCircleActionClient(<span class="hljs-string">&quot;action_move_client&quot;</span>)  <span class="hljs-comment"># 创建ROS2节点对象并进行初始化</span><br>    node.send_goal(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 发送动作目标</span><br>    rclpy.spin(node)  <span class="hljs-comment"># 循环等待ROS2退出</span><br>    node.destroy_node()  <span class="hljs-comment"># 销毁节点对象</span><br>    rclpy.shutdown()  <span class="hljs-comment"># 关闭ROS2 Python接口</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="action_server.py">2、action_server.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> rclpy                              <span class="hljs-comment"># ROS2 Python接口库</span><br><span class="hljs-keyword">from</span> rclpy.node <span class="hljs-keyword">import</span> Node               <span class="hljs-comment"># ROS2 节点类</span><br><span class="hljs-keyword">from</span> rclpy.action <span class="hljs-keyword">import</span> ActionServer     <span class="hljs-comment"># ROS2 动作服务器类</span><br><span class="hljs-keyword">from</span> learning_interface.action <span class="hljs-keyword">import</span> MoveCircle  <span class="hljs-comment"># 自定义的圆周运动接口</span><br><span class="hljs-keyword">from</span> geometry_msgs.msg <span class="hljs-keyword">import</span> Twist        <span class="hljs-comment"># 导入速度消息</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MoveCircleActionServer</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)            <span class="hljs-comment"># ROS2节点父类初始化</span><br>        self._action_server = ActionServer(  <span class="hljs-comment"># 创建动作服务器（接口类型、动作名、回调函数）</span><br>            self,<br>            MoveCircle,<br>            <span class="hljs-string">&#x27;move_circle&#x27;</span>,<br>            self.execute_callback)<br>        self.publisher_ = self.create_publisher(Twist, <span class="hljs-string">&#x27;/turtle1/cmd_vel&#x27;</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 创建速度发布者</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_callback</span>(<span class="hljs-params">self, goal_handle</span>):  <span class="hljs-comment"># 执行收到动作目标之后的处理函数</span><br>        self.get_logger().info(<span class="hljs-string">&#x27;Moving circle...&#x27;</span>)<br>        twist = Twist()                       <span class="hljs-comment"># 创建速度消息</span><br><br>        <span class="hljs-comment"># 设置线速度和角速度</span><br>        twist.linear.x = <span class="hljs-number">1.0</span><br>        twist.angular.z = <span class="hljs-number">1.0</span><br><br>        start_time = self.get_clock().now().nanoseconds / <span class="hljs-number">1e9</span>  <span class="hljs-comment"># 获取当前时间（秒）</span><br>        duration = <span class="hljs-number">6.28</span>  <span class="hljs-comment"># 360度大约需要6.28秒（2π秒）</span><br><br>        <span class="hljs-keyword">while</span> (self.get_clock().now().nanoseconds / <span class="hljs-number">1e9</span> - start_time) &lt; duration:<br>            self.publisher_.publish(twist)  <span class="hljs-comment"># 发布速度消息</span><br>            time.sleep(<span class="hljs-number">0.1</span>)  <span class="hljs-comment"># 每0.1秒发布一次速度消息</span><br><br>        twist.linear.x = <span class="hljs-number">0.0</span><br>        twist.angular.z = <span class="hljs-number">0.0</span><br>        self.publisher_.publish(twist)  <span class="hljs-comment"># 停止海龟</span><br><br>        goal_handle.succeed()  <span class="hljs-comment"># 动作执行成功</span><br>        result = MoveCircle.Result()  <span class="hljs-comment"># 创建结果消息</span><br>        result.finish = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> result  <span class="hljs-comment"># 反馈最终动作执行的结果</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">args=<span class="hljs-literal">None</span></span>):  <span class="hljs-comment"># ROS2节点主入口main函数</span><br>    rclpy.init(args=args)  <span class="hljs-comment"># ROS2 Python接口初始化</span><br>    node = MoveCircleActionServer(<span class="hljs-string">&quot;action_move_server&quot;</span>)  <span class="hljs-comment"># 创建ROS2节点对象并进行初始化</span><br>    rclpy.spin(node)  <span class="hljs-comment"># 循环等待ROS2退出</span><br>    node.destroy_node()  <span class="hljs-comment"># 销毁节点对象</span><br>    rclpy.shutdown()  <span class="hljs-comment"># 关闭ROS2 Python接口</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实验报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文献阅读-2024.11.7</title>
    <link href="/2024/11/06/wen-xian-yue-du/wen-xian-yue-du-1/"/>
    <url>/2024/11/06/wen-xian-yue-du/wen-xian-yue-du-1/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="❌哒咩！投喂错误❌" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="99aaa01b69a44b2067c0ca47229c90d9d3b9c82cd866f6ab9aa29486fd065976"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请投喂我密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>文献阅读</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十二讲 Decision Tree</title>
    <link href="/2024/11/03/ji-qi-xue-xi/di-shi-er-jiang-decision-tree/"/>
    <url>/2024/11/03/ji-qi-xue-xi/di-shi-er-jiang-decision-tree/</url>
    
    <content type="html"><![CDATA[<p>决策树是一种依托策略抉择而建立起来的树，机器学习中的决策树是一种预测模型，可以用来代表对象属性与对象值之间的一种映射关系，从根节点到叶子节点所经历的路径对应一个判定测试序列</p><p>决策树可以是二叉树也可以是非二叉树，本质可以理解为 if else语句，也可以认为是在特征空间上的条件概率分布</p><p>决策树的优点：</p><ul><li>决策树算法中学习简单的决策规则建立决策模型的过程非常容易理解</li><li>决策树可以可视化，直观</li><li>应用范围广，可用于分类问题和回归问题</li><li>能够处理数值型样本和连续型样本</li></ul><p>ID3算法的缺陷：</p><ul><li>不能处理连续数据样本</li><li>不能剪枝</li></ul><p>CD4.5算法可以：</p><ul><li>处理连续数据样本</li><li>能够剪枝</li></ul><h2 id="背景内容">背景内容</h2><h3 id="信息量">信息量</h3><p>信息量是作为信息“多少”的度量，</p><ul><li>事件A：巴西队进入了2026年世界杯决赛圈</li><li>事件B：中国队进入了2026年世界杯决赛圈</li></ul><p>越不可能的事情发生，其中包含的信息量就越多，越可能的事情发生，我们能够获得的信息量就越少，因此可以认为：<strong>信息量与事情发生的概率有关（反比）</strong>，同时<strong>两个事件的信息量可以相加，并且两个独立事件的联合信息量应该是他们各自信息量的和</strong>，<img src="https://pic.imgdb.cn/item/6728a480d29ded1a8cbaaccd.png" /></p><h3 id="信息熵entropy">信息熵（Entropy）</h3><p>信息熵是接受信息量的平均值，用于确定信息的不确定程度，是随机变量的均值。信息熵越大，信息就越凌乱或传输的信息越多</p><p><imgsrc="https://pic.imgdb.cn/item/6728a598d29ded1a8cbc1c23.png" /></p><h3 id="条件熵">条件熵</h3><p>...</p><h2 id="数据">数据</h2><p>Decision Tree适合用来处理离散数据，解决分类问题，后面改进版的决策树也可以处理连续数据</p><h2 id="模型">模型</h2><p>选择的模型本质上是一个 if-else 语句</p><p><imgsrc="https://pic.imgdb.cn/item/6726de4ed29ded1a8c2c895e.png" /></p><h2 id="损失函数">损失函数</h2><p>选择信息增益作为损失函数（信息增益的相反数？因为信息增益是越大越好的），但是在定义信息增益前需要先定义Surprise.</p><p><imgsrc="https://pic.imgdb.cn/item/6726e2f4d29ded1a8c2f8135.png" /></p><p>注意：这里的log表示以2为底的对数</p><p>信息熵的定义：Surprise的期望---所有取值的概率乘以对应概率的 Surprise值</p><p>前面学过的 ‘交叉熵’ 与这里定义的 ‘信息熵’是不一样的，具体区别如下：</p><p><imgsrc="https://pic.imgdb.cn/item/6726e7dcd29ded1a8c3334db.png" /></p><h3 id="information-gaint-信息增益">Information Gaint 信息增益</h3><p>信息增益作为损失函数，用来衡量一个特征对目标变量的影响</p><p><imgsrc="https://pic.imgdb.cn/item/67272ef5d29ded1a8c689b17.png" /></p><p>对于所有的指标，选择信息增益最大的作为最优特征，作为第一步的分类标准，类似下面这样，这就是ID3算法的递归过程</p><p>ID3算法是以信息论为基础，以信息熵和信息增益为衡量标准，从而实现对数据的归纳分类。</p><p><strong>根据信息增益运用自顶向下的贪心策略是ID3建立决策树的主要方法。</strong></p><p>运用ID3算法的主要优点是建立的决策树的规模比较小，查询速度比较快。这个算法建立在“奥卡姆剃刀”的基础上，即越是小型的决策树越优于大的决策树。但是，该算法在某些情况下生成的并不是最小的树型结构。<ahref="https://www.cnblogs.com/JetpropelledSnake/p/14513544.html">---引自</a></p><p>下图是通过计算不同特征的信息增益，来决定最优的分类特征的过程： <imgsrc="https://pic.imgdb.cn/item/67272fb2d29ded1a8c693705.png" /></p><h3 id="information-gain-ratio-信息增益比">Information Gain Ratio信息增益比</h3><p>ID3 算法其中的缺点：</p><p>通过信息增益发现算法倾向于选择 ‘取值结果比较多的特征’，但是很多时候这种情况（比如遇到连续的数据）并非最优解，因此利用信息增益做损失函数存在一些问题，同时ID3不支持剪枝。</p><p>解决方案---提出了新的优化算法：C4.5</p><ul><li><p>Information gain ration is indroduced to solve the problem ofID3</p></li><li><p>It supports pruning</p></li></ul><p>新的算法需要重新定义损失函数：在 信息增益的基础上，计算除以当前特征的信息熵，得到的比值作为新的损失函数（这里其实我觉得叫评价指标可能会更好点，因为通常损失函数都是越小越好的）<img src="https://pic.imgdb.cn/item/672732b8d29ded1a8c6b929f.png" /></p><p>C4.5其实很好理解，因为ID3的问题在于遇到特征取值很多的情况无法避开，C4.5在ID3基础上除以了当前特征的信息熵，因此可以避免特征取值过多的情况，在一定程度上将选择更‘理性’ 的分类指标。</p><p>面对连续的值，同一个特征可以多次用来分类： <imgsrc="https://pic.imgdb.cn/item/676e5d26d0e0a243d4eb514c.png" /></p><p>C4.5剪枝：前剪枝与后剪枝</p><p>C4.5的缺点：不支持回归，只能构建分类树</p><p>C4.5可以构建多叉树！</p><h3 id="cart-决策树">CART 决策树</h3><p>引入了 Gini index 作为损失函数,但是只能构建二叉树</p><p>Gini index 越小越好</p><p><imgsrc="https://pic.imgdb.cn/item/676e61fdd0e0a243d4eb5a0d.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/676e64d2d0e0a243d4eb61d9.png" /></p><h2 id="优化算法">优化算法</h2><p>以ID3算法为例：</p><p>因为是离散的数据，无法使用梯度下降，因此决策树采用 ‘ 贪心算法’来实现优化</p><ol type="1"><li><p>随机选择一个特征，计算这个特征的所有可能取值，计算每个取值对应的信息增益，选择最大的信息增益（熵最小）作为最优特征</p></li><li><p>递归的构建决策树，直到满足停止条件，比如所有的数据属于同一类，或者所有的特征已经用完，或者满足停止条件</p></li></ol><h2 id="参考链接">参考链接</h2><p>【1】https://www.cnblogs.com/JetpropelledSnake/p/14513544.html</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>随笔</title>
    <link href="/2024/11/02/sui-bi/sui-bi/"/>
    <url>/2024/11/02/sui-bi/sui-bi/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="❌哒咩！投喂错误❌" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a1c8b927896d4bca612a1ec2c4698228107204405fa6d120653d2692a397795e">e472198b98210c5a2c9af0c33a4c82b6ab17addd6fefc194a8161583432d1635a8cb168fbcc36e1133c5802c470d7a4ee2744d69f63d505eb5b372081bf949d73a9c09019a7aa7659ee414311d78b7dfeb951562074f0da05000043afd01d2000378f17de31b667f3142487812afe79ef9a0f1f24efc37db0922248db0d19ed53b3679612c68746a79a297be5e820fee7a2921d23958e0da76c19120b79ba29cb977c7f35e7f06f49205fa5986723eaa100386298ca3ed3870abef39f569ac81e492faec78cd3dd98e6dc703fd4844982263f250ed8532baf1df57d7756e7580b8f484e80121ee35644de81e5ba568876e21e0bb9f6c653089bc198f9062b2f0c6b734aa603b0f41adfa6085862ef4a0c4d6183de20ee836f089e091f6253c57c764e232cc297d605052b31d7ad0425efc40a798db68291d0b6e6ef98b6f5406d843310b0e5d5b5cda865b5d145f344c6b4421386e46a9dc049f578cdb9cca2fb75768d640e7fb4e7cec26975f6cf6f207341bb276ce7c092bd36dde9c0bdf89be3bf6cf847a888434fa8c1c1769dac792c594f2e08129ebbc6eaeb5087394339382c784981e046aab101b32df93bc90d23e152e2b67283059e9ef52740f85f3d01c9e23a0b0c67ae9a80fb1f7faa764d11273050fe7dab7d4d3cc33d241bb1e3f98f178a031fcd881ec6faca489ab16e3cda1abb6de7021ad96c5a7578078ce64fb37ca5aa29c77aa62860df0519bc411d015c9221314daaea941234a9d3a8d5ce36242ed0c896c6659a56d5ac70b36ab652f72d8a94f369ce26cfed898ae388d31d4b57d9e8887b1e3c8ccf2dcb73c6b0a5d0a03dfec354eae8769b687a64462534db1371d623c9a780a5a3a8d34abd5b8ef01900cb03fb773143f9b3a6c79f7f64bae9f76b950889e3cedf5290b6089669cb151a81aa58d2e823df27059a3983ddf9f2f0a5bd457ad78e4418fcd8e8139b0b6fa315275f3a72c6685599c4379c94debed5cf61018568505ed1393b31f6b18380a773c246a4069226aeff4d8ad72fed7265cb1b2cdcd85ec691c99de764d71a0461be73bdde3ff9a20cda019eaa83718f073d7775fa00a2c1d5f522c430e0c153ddd7f1d708a71b8501ebab8b79415964210b60406ccd739a3abd0ca874dcb05267522353e545d462c691d22b5e8d047a04ab3e41fa9856c6e22a4e379153746235919e7eb20d4ebe4523eecf18a24cacbd3c9a6beefef79e2f05ca62796a8d9597cb86902fad703dc697089950c06a595f0a0286b3cd2ace31b7c54bbfd4f16052a489f6436e275cb91f147d9d229729979e4fb4906c6075239d6c5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请投喂我密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2024-2025ICT备赛</title>
    <link href="/2024/10/29/2024-2025ict-bei-sai/"/>
    <url>/2024/10/29/2024-2025ict-bei-sai/</url>
    
    <content type="html"><![CDATA[<h2 id="链接">链接</h2><ul><li>昇腾AI全栈介绍:</li></ul><p>https://www.mindspore.cn/tutorial/zh-CN/r1.2/introduction.html</p><p>昇腾计算，是基于昇腾系列处理器构建的全栈AI计算基础设施及应用，包括昇腾Ascend系列芯片、Atlas系列硬件、CANN芯片使能、MindSporeAI框架、ModelArts、MindX应用使能等</p><ul><li>昇腾大模型训练开发（MindSpore）</li></ul><p>https://www.hiascend.com/edu/growth/details/6ce1cb8a880d4ab58c85ef843ded2c9d</p><ul><li>华为AI开发框架MindSpore</li></ul><p>https://connect.huaweicloud.com/courses/learn/course-v1:HuaweiX+CBUCNXE155+Self-paced/about</p><ul><li>昇腾AI赛道学习空间</li></ul><p>https://talent.shixizhi.huawei.com/center/privateCenter.htm?schoolId=1365189427395223554&amp;type=studyCenter_LearningTask&amp;sxz-lang=zh_CN&amp;mapDetail=3&amp;mapDetailId=1717745115962806274&amp;freedomMapClickItemId=1847185340759060482&amp;freedomMapClickItemId=1831536371775934466&amp;freedomMapClickItemId=1717745115962806288&amp;freedomMapClickItemId=1717745115983777797&amp;freedomMapClickItemId=1717746003334926337&amp;freedomMapClickItemId=1770711109533810690</p><h2 id="昇思mindspore技术公开课">昇思MindSpore技术公开课</h2><p>https://github.com/mindspore-courses/step_into_llm</p><h3 id="mindspore-分布式并行">MindSpore 分布式并行</h3><p>什么是数据并行？</p><p><imgsrc="https://pic.imgdb.cn/item/6722006dd29ded1a8c384073.png" /></p><h3 id="数字视觉预处理dvpp">数字视觉预处理（DVPP）</h3><p>数字视觉预处理对外提供6个模块，分别为视频解码（VDEC）模块、视频编码（VENC）模块、JPEG解码（JPEGD）模块、JPEG编码（JPEGE）模块、PNG解码（PNGD）模块和视觉预处理（VPC）模块。</p><ul><li>当输入图片格式为PNG时，需要调用PNGD解码模块进行解码，将PNG图片以RGB格式进行数据输出给昇腾AI处理器进行推理计算</li><li>JPEGD模块对JPEG格式的图片进行解码，将原始输入的JPEG图片转换成YUV数据，对神经网络的推理输入数据进行预处理</li><li>JPEG图片处理完成后，需要用JPEGE编码模块对处理后的数据进行JPEG格式还原，用于神经网络的推理输出数据的后处理</li><li>数字视觉处理（DVPP）模块的执行流程如下图所示，需要由Matrix、DVPP、DVPP驱动和DVPP硬件模块共同协作完成<imgsrc="https://pic.imgdb.cn/item/67221e62d29ded1a8c65282a.png" /></li></ul><h2 id="真题">真题</h2><h3 id="mindspore">MindSpore</h3><p>1、MindSpore深度学习框架的候选运行时支持多种硬件平台，包括CPU、GPU、NPU等。以下关于MindSpore后端的描述中，正确的有哪些项?(多选题)</p><p>A.MindSpore后端运行时负责将计算图转换为对应硬件平台的执行指令，同时进行硬件相关的优化</p><p>B.MindSpore后端运行时可以根据用户的需求，动态地选择合适的硬件平台进行计算</p><p>C.MindSpore后端运行时可以实现跨硬件平台的数据传输和同步，保证计算的正确性和一致性</p><p>D.MindSpore后端运行时可以根据硬件平台的特性，自动地调整计算图的结构和参数，提高计算的效率和精度</p><p>正确答案：AC</p><ul><li>这题没找到资料</li></ul><p>2、MindSpore是一个全场景深度学习框架，提供了丰富的数据处理和数据增强的功能。MindSpore数据处理的核心是Dataset类，它可以从不同的数据源加载数据，并支持多种数据处理操作，如复制、分批、混洗、映射等。以下关于MindSpore数据处理的描述中，正确的是哪一项?(单选题)</p><p>A.Dataset类只能从文件系统中加载数据，不支持从内存中或网络中加载数据</p><p>B.Dataset类可以通过map函数对数据进行映射操作，用户可以自定义函数或使用transforms模块提供的算子</p><p>C.Dataset类可以通过batch函数对数据进行分批操作，但是不支持将不足一批的数据截掉</p><p>D.Dataset类可以通过shuffle函数对数据进行混洗操作，混洗程度由参数buffer_size设定，buffer_size越大，混洗时间越短，可节约计算资源消耗</p><p>正确答案：B</p><ul><li>buffer_size参数的大小与混洗（shuffle）的时间并没有直接的反比关系，相反，较大的buffer_size可能会导致更长的初始化时间，因为框架需要先填充更大的缓冲区，较大的buffer_size通常可以提供更好的数据随机性，这对于训练过程是有益的</li></ul><p>3、MindSpore是一个全场景深度学习框架，提供了丰富的模型层、损失函数、优化器等组件，帮助用户快速构建神经网络。MindSpore神经网络构建的核心是Cell类，它是所有网络的基类，也是网络的基本单元。以下关于MindSpore神经网络构建的描述中，正确的有哪些项?(多选题)</p><p>A.自定义网络时，需要继承Cell类，并重写__init__方法和construct方法</p><p>B.Cell类重写了__call__方法，在Cell类的实例被调用时，会执行construct方法</p><p>C.Cell类可以通过requires_grad方法指定网络是否需要微分求梯度，在不传入参数调用时，默认设置requires_grad为False</p><p>D.Cell类可以通过set_train方法指定模型是否为训练模式，在不传入参数调用时，默认设置mode属性为False</p><p>正确答案：AB</p><ul><li><p>C.错误。requires_grad属性是用来控制张量（Tensor）是否需要计算梯度的，而不是Cell类的方法。在MindSpore中，可以通过设置张量的requires_grad属性来控制该张量是否参与梯度计算。对于网络参数，可以通过Parameter类的构造函数中的requires_grad参数来指定。Cell类本身没有requires_grad方法。</p></li><li><p>D.错误。Cell类提供了set_train方法来切换模型的训练模式或评估模式。如果不传入参数调用此方法，默认会将模型设置为训练模式，即mode属性设置为True。</p></li><li><p>官网的注释：https://authoring-modelarts-cnnorth4.huaweicloud.com/console/lab?share-url-b64=aHR0cHM6Ly9vYnMuZHVhbHN0YWNrLmNuLW5vcnRoLTQubXlodWF3ZWljbG91ZC5jb20vbWluZHNwb3JlLXdlYnNpdGUvbm90ZWJvb2svcjIuMC90dXRvcmlhbHMvemhfY24vYmVnaW5uZXIvbWluZHNwb3JlX3F1aWNrX3N0YXJ0LmlweW5i=&amp;imageid=b8671c1e-c439-4ae2-b9c6-69b46db134ae)&amp;emsp&amp;[<imgsrc="https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r2.0/resource/_static/logo_notebook.png"alt="%E4%B8%8B%E8%BD%BDNotebook" />](https://obs.dualstack.cn-north-4.myhuaweicloud.com/mindspore-website/notebook/r2.0/tutorials/zh_cn/beginner/mindspore_quick_start.ipynb</p><ul><li>网络构建mindspore.nn类是构建所有网络的基类，也是网络的基本单元。当用户需要自定义网络时，可以继承nn.Cell类，并重写__init__方法和construct方法。__init__包含所有网络层的定义，construct中包含数据（Tensor）的变换过程（即计算图的构造过程）</li><li>对于D选项，官网这样说:network；网络模型实现，一般使用Cell包装。推理时的网络结构一般和训练是一样的。需要注意推理时给Cell加set_train(False)的标签，训练时加set_train(True)的标签，这个和PyTorchmodel.eval() (模型评估模式)，model.train() (模型训练模式) 一样</li><li>对于C选项，官网有：MindSpore的 requires_grad参数与PyTorch也有差异，该参数在PyTorch中为一个后端级别的参数，该参数设为False时，代表不需要对该张量计算梯度，构建计算图时不会包含该张量，也不会记录每个操作的梯度信息，在推理阶段等场景可以提高计算效率；而MindSpore的该参数则为一个前端级别的参数，参数设为False时，MindSpore的自动微分机制在后端依旧会对该张量进行梯度计算，只会在前端侧对该参数以属性的形式进行展示并使用，例如，MindSpore中的trainable_params 方法则会屏蔽掉Parameter中 requires_grad 为 False的属性</li></ul></li></ul><p>4、MindSpore提供了丰富的网络构建和优化的功能。MindSpore网络优化的核心是Optimizer类，它可以对网络的可训练参数进行梯度更新，并支持多种优化算法，如SGD、Adam、Momentum等。以下关于MindSpore网络优化的描述中，正确的是哪一项?(单选题)</p><p>A.Optimizer类只能对网络的权重参数进行优化，不支持对偏置参数进行优化</p><p>B.Optimizer类可以通过参数learning_rate设置学习率策略，支持固定的学习率或动态的学习率</p><p>C.Optimizer类无需参数分组即可通过参数parameters对不同的参数配置不同的学习率、权重衰减和梯度中心化策略</p><p>D.Optimizer类可以通过clip类算子对梯度进行裁剪操作，如果要将输入的Tensor值裁剪到最大值和最小值之间，可以用clip_by_global_norm</p><p>正确答案：B</p><ul><li>C.错误。参数分组是指将网络中的参数按照一定的规则分成不同的组，每个组有不同的学习率、权重衰减和梯度中心化策略。在MindSpore中，可以通过设置参数的group属性来指定参数的分组。</li></ul><p>5、MindSpore提供了多种模型迁移工具，如MindSpore DevToolkit、TroubleShooter等，支持将神经网络从其他主流深度学习框架快速迁移到MindSpore进行二次开发和调优。以下有关MindSpore网络迁移的流程描述中，正确的是哪一项?(单选题)</p><p>A.网络脚本开发;</p><p>B.网络脚本分析;</p><p>C.网络执行调试;</p><p>D.网络精度性能调优;</p><p>E.MindSpore环境配置</p><p>A.ECBAD B.EBACD C.EDCBA D.EABCD</p><p>正确答案：B</p><ul><li>配环境、分析、开发、调试、优化</li></ul><p>6、以下关于MindSpore的统一模型文件MindIR的描述中，正确的有哪些项?(多选题)</p><p>A.MindIR同时存储了网络结构和权重参数</p><p>B.同一MindIR文件支持多种硬形态的部署</p><p>C.支持云侧(训练)和端侧(推理)任务</p><p>D.MindIR模型与硬件平台解耦，实现一次训练多次部署</p><p>正确答案：ABCD</p><ul><li>“解耦”的含义是指MindIR模型文件与具体的硬件平台之间没有直接的绑定关系，这为模型的跨平台部署提供了极大的便利性和灵活性</li></ul><p>7、如图所示，在使用MindSpore构建的残差网络中，以下关于该段代码的描述中，正确的有哪些项?(多选题)</p><p><imgsrc="https://pic.imgdb.cn/item/672205ffd29ded1a8c3df11b.png" /></p><p>A.结构的主分支有两层卷积结构</p><p>B.主分支第二层卷积层通过大小1×1的卷积核进行升维</p><p>C.主分支与shortcuts输出的特征矩阵相加时，需要保证主分支与shortcuts输出的特征矩阵shape相同</p><p>D.该段代码可以正常运行的前提条件是要求in_channel = out_channel*2</p><p>正确答案：ABC</p><h3 id="昇腾ai全栈">昇腾AI全栈</h3><p>1、以下关于达芬奇架构(AICore)中的硬件架构且对应的功能介绍中，不正确是哪一项?(单选题)</p><p>A.达芬奇架构(AICore)包括计算单元、存储单元。计算单元:包含两种基础计算资源（矢量计算单元、向量计算单元)﹔存储系统:AI Core的片上存储单元和相应的数据通路构成了存储系统</p><p>B.达芬奇架构这一专门为AI算力提升所研发的架构，是昇腾AI计算引擎和AI处理器的核心所在</p><p>C.矩阵计算单元和累加器主要完成矩阵相关运算。一拍完成一个fp16的16×16与16×16矩阵乘(4096)</p><p>D.累加器:把当前矩阵乘的结果与前次计算的中间结果相加，可以用于完成卷积中加bias操作</p><p>正确答案：A</p><p>昇腾 AI处理器：达芬奇架构：https://github.com/hbulpf/aipath/blob/master/frames/ascend/intro/davinci.md</p><p>昇腾 AI 处理器的计算核心主要由 AI Core 构成,负责执行标量、向量和张量相关的计算密集型算子。AI Core采用了达芬奇架构.</p><ul><li>计算部件: 矩阵计算单元 (Cube Unit)、向量计算单元 (Vector Unit)和标量计算单元 (Scalar Unit)<ul><li>这三种计算单元分别对应了张量、向量和标量三种常见的计算模式,形成了三条独立的执行流水线,在系统软件的统一调度下互相配合达到优化的计算效率</li></ul></li><li>片上缓冲区: 这些存储资源和相关联的计算资源相连,或者和总线接口单元(Bus Interface Unit, BIU)相连,从而可以获得外部总线上的数据；具体来说，片上缓冲区包括:<ul><li>用来放置整体图像特征数据、网络参数以及中间结果的输入缓冲区 (InputBuffer, IB) 和输出缓冲区(Output Buffer, OB)</li><li>提供一些临时变量的高速寄存器单元,这些寄存器单元位于各个计算单元中</li></ul></li><li>存储转换单元 (Memory Transfer Unit, MTE): 设置于输入缓冲区之后,主要的目的是为了以极高的效率实现数据格式的转换<ul><li>例如卷积操作中为了加速卷积运算，需要用 Img2Col函数将卷积操作转化为矩阵乘积操作。存储转换单元将 Img2Col函数固化在了硬件电路中, 极大地提升了 AI Core 的执行效率,从而能够实现不间断的卷积计算 (与之相对的，GPU 是以软件来实现 Img2Col函数的，因此效率不如 AI Core)</li></ul></li><li>控制单元:主要包括系统控制模块、标量指令处理队列、指令发射模块、矩阵运算队列、向量运算队列、存储转换队列和事件同步模块<ul><li>系统控制模块负责指挥和协调 AI Core的整体运行模式、配置参数和实现功耗控制等</li><li>标量指令处理队列主要实现控制指令的译码</li></ul></li></ul><h2 id="考试宝的练习题">考试宝的练习题</h2><h3 id="判断题">判断题</h3><p>1、朴素贝叶斯模型假设所有特征之间相互独立</p><p>2、昇腾芯片采用的达芬奇3DCube框架，是一种针对AI计算优化的架构。该框架通过高效的计算单元组织和数据流动设计，确实使得昇腾芯片能够实现高算力、高能效以及良好的可扩展性。这些优点使得昇腾芯片在AI计算领域表现出色。</p><p>3、人脸检测服务在测试图像中没有人脸时不会报错，而是返回没有人脸的结果。</p><p>4、</p><p><imgsrc="https://pic.imgdb.cn/item/672cdc18d29ded1a8c65222e.png" /></p><p>不是三要素吗...虽然这么说也没错</p><p>5、朴素贝叶斯算法的一个基本假设就是特征之间相互独立，即样本特征之间的独立同分布。这是朴素贝叶斯分类器“朴素”一词的含义。如果特征之间存在相互依赖关系，那么朴素贝叶斯算法的分类效果可能会受到影响。</p><p>6、集成模型随机森林的底层实际上是决策树，更具体地说，是CART（分类与回归树）而不是ID3树。ID3树是另一种决策树算法，它使用信息增益来构建树，而CART树则使用基尼不纯度。这里可以拓展一下关于集成模型随机森林的概念</p><p>7、根据华为云图像内容审核API的请求参数，categories参数用于指定检测场景。如果该值为空或无此参数，则表示API会默认检测politics和terrorism两个场景，但不包含porn场景。</p><p>8、</p><p><imgsrc="https://pic.imgdb.cn/item/672cdd55d29ded1a8c67cb0b.png" /></p><p>9、在Tensorflow2.x框架中，EagerExecution模式实际上是一种命令式编程（imperativeprogramming）模式，它允许操作立即执行并返回其值，而不需要构建一个图来在后续会话中执行。相反，声明式编程（declarativeprogramming）更侧重于“什么”应该被执行，而不是“如何”执行，这在Tensorflow 中通常与图（Graph）执行模式相关联。</p><p>10、TensorFlow2.0 支持 GPU加速，其主要表现之一就是在进行矩阵的加减乘除等运算时，可以利用 GPU的并行计算能力，显著提高运算速度。这种加速对于深度学习等需要大量矩阵运算的应用尤为重要。</p><p>11、Tensorflow 是一个用于机器学习和深度学习的端到端开源平台。</p><p>12、TensorFlow提供了自身的可视化工具，但在某些情况下，用户可能仍然会选择使用matplotlib 来满足其特定的可视化需求。</p><p>13、Tensor 是 MindSpore 中用于数据存储的基本组件。</p><p>14、在深度学习中，激活函数的选择对于神经网络的性能和稳定性至关重要。Sigmoid、tanh和 Softsign等函数在神经网络层数加深时，存在梯度消失的问题，这会导致梯度难以传递到下一层，进而影响网络的训练和优化。</p><p>15、RNN（循环神经网络）与前馈神经网络有显著的区别，其中最关键的一点在于它们处理序列数据的方式不同。RNN通过引入循环结构，在每个时间步都将前一时刻的信息传递给当前时刻的隐藏层，从而能够捕捉输入序列中的时序依赖关系。这是RNN的一个核心特性，也是它相对于前馈神经网络的主要优势之一。</p><p>16、在 MindSpore 框架中，Cell是构建所有网络的基类，它代表了神经网络中的一个节点。用户可以通过直接调用Cell 对象来实现前向计算，执行网络。</p><p>17、MindSpore 支持的处理器种类，包括 Ascend处理器（昇腾处理器）、GPU（图形处理单元）和CPU（中央处理器）。</p><p>18、MindSpore张量和NumPy数组在某些方面相似，但在设计理念和实现机制上有明显的区别。</p><p>19、MindSpore是一种面向AI应用场景的开发框架，专注于提供高效、易用和灵活的解决方案。其中，通过面向芯片的深度图优化技术来减少同步等待、最大化数据计算通信的并行度，让整个模型训练和推理过程更高效。</p><p>20、Julia 编程语言从张量原生表达、IR开放和高性能入手，结合科学计算HPC 领域的积累，可以更好地支持 AI 领域的工作。</p><p>21、FPGA是现场可编程门阵列，GPU是图形处理器</p><p>22、AlCore 作为昇腾 AI芯片的计算核心，主要负责矩阵类复杂计算，而非矩阵类复杂计算则由其他部件或者算法来处理。</p><p>23、在以连接主义为基础的神经网络中，每个节点并不直接表达特定的意义，而是通过其连接权重和激活函数等来共同作用于整个网络的输出。</p><p>24、网格搜索（GridSearch）是一种参数调节方法，它通过在给定的参数空间中逐网格点进行实验，以找到最优参数组合。然而，这种方法效率较低，因为它需要遍历整个网格才能找到最优解。在许多情况下，更高效的参数调节方法是随机搜索（RandomSearch）或启发式搜索（HeuristicSearch）。</p><p>25、TensorFlow2.0中取消了图和会话的机制，改为使用 tf.function来封装计算作为图的执行。 前面的话有点问题，TensorFlow 2.0确实减少了对图和会话的直接操作需求，但并没有完全去除这些概念。tf.function成为了连接 Eager Execution和图执行模式的桥梁，使得开发者可以根据需要在这两种模式之间灵活切换。</p><p>26、模型的容量指其拟合各种函数的能力，也称为模型的复杂度。</p><p>27、在卷积层中，Dropout比例是指在网络训练时随机丢弃一定比例的神经元，即将其激活值设置为0的比例。这个比例通常设定在0.2 到 0.5范围内。这样做是为了防止过拟合，使模型更具泛化能力。通过随机丢弃一部分神经元，模型被迫学习更多的冗余特征，从而提高了模型的鲁棒性</p><p>28、2004年的DARPA挑战赛是自动驾驶技术发展的一个重要里程碑。在这场比赛中，部分参赛车辆确实展示出了先进的感知能力，能够检测到障碍物。虽然当时的技术尚未实现对交通信号灯的识别，但这一比赛为自动驾驶汽车的后续发展奠定了基础，特别是在感知和导航技术方面。</p><p>29、昇腾 AI 应用不仅支持对接第三方框架，也支持 MindSpore框架的训练。推理类应用主要负责处理和执行 AI模型，而框架类应用(训练)则负责模型的训练和开发。</p><p>30、在深度学习中，dropout技术主要是在训练阶段使用，以减少过拟合的风险。在预测或评估阶段，通常不使用dropout。</p><p>31、卷积神经网络中，同一卷积层的所有卷积核是共享权重的，这是卷积神经网络的一个重要特性，可以显著减少模型参数的数量。</p><p>32、卷积神经网络中的全连接层可以确保输入图像被转换为固定尺寸的卷积特征图，但这并不意味着输入图像的尺寸必须保持一致。事实上，输入图像的尺寸可以根据需要调整，以适应不同的任务和数据集。</p><p>33、单层感知机和逻辑回归都是线性分类器，只能处理线性可分的数据</p><p>34、单层感知机（Single Layer Perceptron,SLP）是一个简单的线性分类器，只能处理线性可分的数据。这意味着它只能找到一条直线（二维空间）、平面（三维空间）或多维超平面来分离两类数据点。对于非线性可分的数据集，单层感知机会遇到无法完全正确分类的情况</p><p>35、逻辑回归（LogisticRegression）也是一种线性分类器，但它主要用于二分类问题。逻辑回归通过对线性组合的结果应用sigmoid函数来进行概率估计，因此它可以产生连续的概率值而不是离散的类别标签。尽管如此，逻辑回归本质上仍然是线性的，因为它依赖于输入特征的线性组合</p><p>36、前馈神经网络是一种常见的神经网络类型，其特点是在神经元的输出层和下一层之间没有相互连接，信息的传递只沿着一个方向进行。此外，前馈神经网络中的每一层包含的神经元数量可以根据需要调整，以适应不同的任务和数据集.</p><p>关于前馈神经网络，有个比较好的动画讲解：https://okai.brown.edu/zh/chapter5.html</p><p>博客：https://0809zheng.github.io/2020/04/17/feedforward-neural-network.html</p><p>37、前馈神经网络与全连接神经网络之间的区别是： &gt;&gt;连接方式：(1)前馈神经网络：信息从输入层到输出层单向传播，层间连接可以是全连接、部分连接或稀疏连接。(2)全连接神经网络：每一层的每个神经元都与下一层的所有神经元相连，是一种特殊的前馈神经网络。</p><p>38、MindSpore是一种用于深度学习训练和推理的开源框架。该算法通过对一阶矩阵进行近似表达，降低计算复杂度，然后再对矩阵进行降频、降维度以加速计算。这是MindSpore算法的核心思想，也是其能够高效处理大规模数据集的原因。(不确定是否正确)</p><blockquote><blockquote><p>动量优化器可以为每个参数设置不同的学习率，在深度学习中，动量优化器是一种常用的优化算法，它可以通过调整学习率来改变参数更新的速度和幅度，从而更好地优化模型性能。</p></blockquote></blockquote><blockquote><blockquote><p><img src="https://pic.imgdb.cn/item/672dc24bd29ded1a8c19e698.png" />强化学习是一种机器学习算法，它通过与环境交互并观察到环境给予的反馈（奖励或惩罚）来学习如何做出决策。强化学习的优势在于它具有更强的适应性，可以处理更复杂的环境和任务，并且不需要预先知道数据分布。虽然强化学习可以处理大量的训练数据，但这个陈述中的“增加了训练数据量”是不准确的，因为强化学习通常不需要与监督学习或非监督学习相比的特定训练数据量。</p></blockquote></blockquote><blockquote><blockquote><p>在 PyTorch中，动态图是它的主要特点，它允许用户在运行时定义和修改图结构。静态图通常用于TensorFlow 等其他深度学习框架。</p></blockquote></blockquote><blockquote><blockquote><p><img src="https://pic.imgdb.cn/item/672dc3ecd29ded1a8c1b9c10.png" />输出通道数为 3、卷积核大小为 5∗5、使用 normal算子初始化参数的卷积层。</p></blockquote></blockquote><blockquote><blockquote><p>与FPGA相比，相同工艺下，基于ASIC的AI芯片功耗更小，因此更适合用于手机等终端设备上。与FPGA（Field-Programmable GateArray，现场可编程门阵列）相比，基于ASIC（Application-Specific IntegratedCircuit，专用集成电路）的AI芯片在相同工艺下通常具有更低的功耗，因此更适合用于手机等终端设备上。</p></blockquote></blockquote><blockquote><blockquote><p>昇腾 AI 处理器中包含 AI CPU, 控制整个 AICore的运算，完成整个程序的循环控制分支判断，但不限于这些功能</p></blockquote></blockquote><blockquote><blockquote><p>165、使用mindspore.nn.conv2d构建二位卷积神经网络时，默认情况下，接受图像数据格式为【数量，通道，高度，宽度】 在使用 MindSpore 的 nn.conv2D构建二维卷积神经网络时，图像数据通常以 [数量，通道，高度，宽度]的顺序提供。但需要注意的是，题目中的“二位”可能会引起误解，因为在计算机视觉领域，通常我们讨论的是彩色图像（即三维数据，包含通道、高度和宽度），而非灰度图像（即二维数据）。所以，这里的需要更严谨一些，建议使用[数量，通道数，高度，宽度]作为正确的输入格式。</p></blockquote></blockquote><blockquote><blockquote><p>华为 HiAI提供了三层能力开放，这三层能力分别是：HiAIFoundation、HiAIEngine 和HiAIPlatform，HiAIFoundation是基础层，提供基础算法和芯片支持；HiAIEngine是引擎层，提供高效的AI运算能力；HiAIPlatform是平台层，提供一站式的AI开发、部署和管理服务。</p></blockquote></blockquote><blockquote><blockquote><p>AI芯片在推理时需要进行多种优化，这些优化可能涉及算法、硬件加速等多个方面，因此与主要用于训练场景的AI芯片相比，设计可能更加复杂。</p></blockquote></blockquote><p>为保证模型精度及避免硬件差异带来的影响，Mindspore的并行训练需要相同型号的设备(如:全部都使用 Atlas100T Pro者全部都用NVIDIA V100) ×</p><blockquote><blockquote><p>MindSpore的并行训练支持不同型号的设备，但需确保设备间的兼容性和性能匹配。</p></blockquote></blockquote><blockquote><blockquote><p>XOR问题是线性分类问题</p></blockquote></blockquote><p>XOR问题是一种逻辑分类问题，因为输入和输出之间的关系不是线性的，所以为“错误”。</p><p>池化层在卷积神经网络中并非必不可少</p><p>MindSpore支持动态图和静态图两种模型开发方式。但是在静态图下，对于python语法有所限制，因此从动态图切换成静态图时需要符合静态图的语法规则，才能正确使用静态图来进行执行×</p><p>MindSpore确实支持动态图和静态图两种模型开发方式。在静态图下，虽然对Python语法有所要求，但并不意味着对语法有严格的限制。从动态图切换到静态图时，主要是需要遵循静态图编程的一些特定规则和约定，而非必须完全符合静态图的语法规则。</p><p>损失函数是定义在参数空间的函数，目标是找到最优的参数值，使得损失函数的值最小。</p><p>在生成对抗网络中，判断网络的输入主要是生成网络生成的样本数据以及真实的样本数据，因为判断器的作用就是区分输入的样本数据是来自真实的数据集还是网络生成的数据集</p>]]></content>
    
    
    <categories>
      
      <category>华为ICT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ICT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十讲_Perceptron</title>
    <link href="/2024/10/26/ji-qi-xue-xi/di-shi-jiang-perceptron/"/>
    <url>/2024/10/26/ji-qi-xue-xi/di-shi-jiang-perceptron/</url>
    
    <content type="html"><![CDATA[<h3 id="写在前面">写在前面</h3><p>感知机内容不多，老师只用了40min讲完，可以多看看博客笔记，也没有作业，这块不是重点</p><p>[1]https://luweikxy.gitbook.io/machine-learning-notes/perceptron[2]https://www.jiqizhixin.com/graph/technologies/f9849d6c-6262-4c1f-8f42-6d976be17161</p><h3 id="perceptron介绍">Perceptron介绍</h3><p>感知器是FrankRosenblatt在1957年就职于Cornell航空实验室时所发明的一种人工神经网络。它可以被视为一种最简单形式的前馈神经网络，是一种二元线性分类器</p><p>FrankRosenblatt给出了相应的感知机学习算法，常用的有感知机学习、最小二乘法和梯度下降法。譬如，感知机利用梯度下降法对损失函数进行极小化，求出可将训练数据进行线性划分的分离超平面，从而求得感知机模型</p><p>感知机主要的本质缺陷是它不能处理线性不可分问题</p><p>https://www.jiqizhixin.com/graph/technologies/f9849d6c-6262-4c1f-8f42-6d976be17161</p><h3 id="数据">数据</h3><p>感知机是一个分类算法，常用于二分类，用+1和-1来表示这两个类，因此数据与逻辑回归的数据一致，不过y的标签用+1和-1来区分，这是不同点</p><h3 id="回归与分类的概念区分">回归与分类的概念区分</h3><p><img src="https://pic.imgdb.cn/item/671cc999d29ded1a8c29e914.png" />回归的结果是连续的，分类的结果是离散的</p><h3 id="模型">模型</h3><p>使用的模型是一个符号函数，sign(x)，其中x是输入向量，s是符号函数，取值为-1或1，如果x大于0，则输出为1，否则输出为-1</p><p><imgsrc="https://pic.imgdb.cn/item/675fe63fd0e0a243d4e49149.png" /></p><h3 id="损失函数">损失函数</h3><p>如果分类分对了，那么认为该样本的损失为0</p><p>只考虑误分类点，感知机的学习策略是在假设空间中选取使损失函数最小的模型参数w、b，即感知机模型<img src="https://pic.imgdb.cn/item/671ce157d29ded1a8c470d18.png" /></p><p>上述公式中的y代表分类错误的样本，标签全为-1</p><p><imgsrc="https://pic.imgdb.cn/item/671ce35bd29ded1a8c4922dd.png" /></p><p>由于每次更新只考虑一个样本（随机梯度下降），因此只需要计算损失函数即可，用不到代价函数</p><p>从距离上考虑损失函数，分类错误的点距离平面越远，损失越大</p><h3 id="优化算法">优化算法</h3><p>使用的是随机梯度下降算法</p><p><imgsrc="https://pic.imgdb.cn/item/675fe8d9d0e0a243d4e491df.png" /></p><h3 id="summary">SUMMARY</h3><p><imgsrc="https://pic.imgdb.cn/item/671ce7c1d29ded1a8c4c9ae0.png" /></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第九讲_Convolutional neural networks</title>
    <link href="/2024/10/25/ji-qi-xue-xi/di-jiu-jiang-convolutional-neural-networks/"/>
    <url>/2024/10/25/ji-qi-xue-xi/di-jiu-jiang-convolutional-neural-networks/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><p>记录一下非常好的博客讲解：</p><p>[1] CNN 卷积神经网络 https://dorianzi.github.io/2019/04/25/CNN/</p><h2 id="卷积神经网络">卷积神经网络</h2><p><img src="https://dorianzi.github.io/uploads/cnn_1.gif" /></p><p><img src="https://dorianzi.github.io/uploads/cnn_2.gif" /></p><p>上述图片引自：https://dorianzi.github.io/2019/04/25/CNN/</p><p>卷积神经网络是为了处理图片而生的分类任务 <imgsrc="https://pic.imgdb.cn/item/671b8d08d29ded1a8c2cce31.png" /></p><h3 id="全连接神经网络与卷积神经网络">全连接神经网络与卷积神经网络</h3><p>从卷积的角度理解全连接，从全连接的角度理解卷积</p><p><imgsrc="https://pic.imgdb.cn/item/671b8fadd29ded1a8c2fa727.png" /></p><p>为什么选择 卷积层神经网络 而不用 全连接神经网络</p><p><imgsrc="https://pic.imgdb.cn/item/671b9456d29ded1a8c33c16c.png" /></p><p>卷积核的作用（优点）：①减少了计算量；②减少参数</p><p>对于卷积神经网络来说，计算一个输出涉及到的输入数量只与卷积核的大小有关；对于全连接神经网络来说，计算一个输出需要所有的输出参与计算，大大增大了计算量</p><h4id="卷积神经网络一般使用的激活函数为-relu为什么">卷积神经网络一般使用的激活函数为Relu，为什么？</h4><p>卷积神经网络使用的激活函数为 relu，前面学过的神经网络使用的激活函数为sigmoid，最后一层使用了sotfmax</p><p>ReLU（Rectified Linear Unit）函数的数学表达式非常简单，定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs math">f(x) = \max(0, x) <br></code></pre></td></tr></table></figure><p>这个表达式的含义是：</p><ul><li><p>当输入 ( x ) 大于0时，输出就是 ( x ) 本身；</p></li><li><p>当输入 ( x ) 小于或等于0时，输出为0。</p></li><li><p>计算效率：</p><ul><li>ReLU函数计算非常高效，因为它仅仅是将所有负值设为零，保留正值不变。这种操作在硬件上实现起来非常快，不需要复杂的数学运算如指数或除法，这对于训练深层网络尤其重要，因为可以显著减少训练时间和资源消耗。</li></ul></li><li><p>缓解梯度消失问题：</p><ul><li>在深度网络中，当使用像Sigmoid或tanh这样的激活函数时，容易遇到梯度消失的问题，即随着网络层数增加，反向传播时梯度逐渐减小到接近于零，导致底层权重难以有效更新。ReLU函数由于其导数在正区间内恒等于1，可以有效地缓解这一问题，促进梯度的有效传播。</li></ul></li><li><p>稀疏激活：</p><ul><li>ReLU可以使一部分神经元输出为零，这意味着模型会自动忽略一些不重要的特征，从而实现一种形式的内部特征选择，有助于提高模型的泛化能力，并且使模型更加紧凑。</li></ul></li><li><p>生物学合理性：</p><ul><li>从生物学的角度来看，神经元要么活跃要么不活跃，这种二元行为与ReLU函数的行为相似，因此ReLU也符合大脑神经元工作的某些假设。</li></ul></li></ul><p>从全连接的角度理解卷积神经网络：稀疏的全连接神经网络：</p><p>不管是全连接神经网络还是卷积神经网络，本质上都是多元复合函数！ <imgsrc="https://pic.imgdb.cn/item/671b9af4d29ded1a8c39fa2f.png" /></p><p>根据卷积核以及输入图片的大小判断输出图片大小的公式： <imgsrc="https://pic.imgdb.cn/item/671b9d2dd29ded1a8c3bdc8d.png" /></p><p>Padding 操作：</p><p>卷积操作会导致输出图片的大小发生变化，所以需要padding操作：让输入尺寸与输出尺寸保持一致<img src="https://pic.imgdb.cn/item/671b9cc6d29ded1a8c3b8a66.png" /></p><p>计算量的大小比较： <imgsrc="https://pic.imgdb.cn/item/671b9f81d29ded1a8c3def5b.png" /> <imgsrc="https://pic.imgdb.cn/item/671ba02ed29ded1a8c3e8e70.png" /></p><h4 id="利用卷积神经网络实现边缘检测">利用卷积神经网络实现边缘检测</h4><p><imgsrc="https://pic.imgdb.cn/item/671ba2b2d29ded1a8c40cd56.png" /></p><p>有点类似在ROS2实验课上做的边缘检测算法，原理都差不多</p><p>卷积是能够提取特征的 <imgsrc="https://pic.imgdb.cn/item/671bab11d29ded1a8c482604.png" /></p><p>为了丢掉不必要的信息，引入池化层的概念： <imgsrc="https://pic.imgdb.cn/item/671bacacd29ded1a8c49af53.png" /></p><p>经验：最大池化比平均池化效果会好一点</p><p>卷积神经网络帮助我们提取特征，进行分类工作，可以理解为特征提取器 <imgsrc="https://pic.imgdb.cn/item/671bb3bfd29ded1a8c502c2e.png" /></p><p>卷积神经网络的损失函数同前面学过的交叉熵损失函数 <imgsrc="https://pic.imgdb.cn/item/671bb49bd29ded1a8c50ffdd.png" /></p><p>卷积神经网络反向传播</p><p>先后经过：softmax、池化层、relu、卷积层:</p><p>(1)softmax <imgsrc="https://pic.imgdb.cn/item/671bbf44d29ded1a8c5a0c8d.png" /> <imgsrc="https://pic.imgdb.cn/item/671bbf67d29ded1a8c5a2b7a.png" />(2)池化层 <imgsrc="https://pic.imgdb.cn/item/671bbfdbd29ded1a8c5a8a71.png" /> (3)relu<img src="https://pic.imgdb.cn/item/671bc0e2d29ded1a8c5be4b4.png" />(4)卷积层，卷积层的反向传播有点复杂 <imgsrc="https://pic.imgdb.cn/item/671c8faad29ded1a8cea6549.png" />卷积层反向传播的规律 <imgsrc="https://pic.imgdb.cn/item/671c9178d29ded1a8cec5bcf.png" /></p><p>多层CNN的卷积结构</p><p>卷积核的通道数需要与输入的通道数相匹配，输出的通道数与卷积核的个数相匹配<img src="https://pic.imgdb.cn/item/671c9755d29ded1a8cf23bba.png" /></p><p>这里的偏置结构有点问题，应该是有三层的结构，与输出的结构一模一样，与输出对应</p><p>当遇到多通道卷积网络时，需要考虑稍微多一点点内容</p><h3 id="img2col">img2col</h3><p><img src="https://pic.imgdb.cn/item/671cc5a5d29ded1a8c252ffe.png" /><img src="https://pic.imgdb.cn/item/671cc5b9d29ded1a8c25449c.png" /></p><p>第一种结构的优化相对会更好一点，各有优劣</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第八讲_Optimization</title>
    <link href="/2024/10/25/ji-qi-xue-xi/di-ba-jiang-optimization/"/>
    <url>/2024/10/25/ji-qi-xue-xi/di-ba-jiang-optimization/</url>
    
    <content type="html"><![CDATA[<h2 id="optimization">Optimization</h2><p>注意偏导和梯度的区别：</p><p>这里讲模型的第四个部分：优化算法，相较于传统的梯度下降优化算法，有很多改进的版本，虽然没有跳脱出梯度下降的框架，但是在传统算法的基础上进行了改进优化，更加好用</p><h3 id="梯度下降算法的缺点">梯度下降算法的缺点</h3><ul><li>梯度消失 saddle point</li><li>局部最优 local minimum</li><li>各参数尺度不一 different scale</li></ul><h3 id="gdm-gd-with-momentum">GDM (GD with momentum)</h3><p>通过在梯度下降过程中加入一个“动量”项，该算法能够累积过去梯度的方向，从而帮助算法更快地穿越平坦区域，并减少振荡</p><p>更新梯度的公式：</p><p><span class="math display">\[w_t = w_{t-1} - \alphaV_{t}\]</span></p><p>在原来设置了学习率的基础上，还丰富了下面的部分：</p><p><span class="math display">\[V_{t} = \beta V_{t-1} + (1-\beta)\frac{\partial J}{\partial w_t}\]</span></p><p><span class="math display">\[\beta \in [0,1]\]</span></p><p><span class="math display">\[V_{0} = 0\]</span></p><p><span class="math display">\[\beta = 0.9\]</span></p><p>这样既能保存过去的梯度信息，也不至于产生过大的影响</p><p><imgsrc="https://pic.imgdb.cn/item/671b0220d29ded1a8c9af208.png" /></p><p>指数滑动平均</p><h3 id="adagrad-adaptive-gradient">AdaGrad (Adaptive Gradient)</h3><p>AdaGrad算法通过自适应地调整学习率，使得学习率随着迭代次数的增加而减小，从而避免了梯度消失和梯度爆炸的问题</p><p>公式：</p><p><span class="math display">\[W_{t+1} = W_{t} - \frac{\alpha}{\sqrt{S_{t}+\epsilon}}\frac{\partialJ}{\partial w_t}\]</span></p><p><span class="math display">\[S_{t} = S_{t-1} + (\frac{\partial J}{\partial w_t})^2\]</span></p><p><span class="math display">\[S_{0} = 0\]</span></p><p><span class="math display">\[\epsilon = 10^{-7}\]</span><br />作用：防止除 0</p><p>偏导可以间接表明下降坡度的大小</p><ul><li>偏导大坡度大，需要设置一个较小的学习率</li><li>偏导小坡度小，需要设置一个较大的学习率</li></ul><p><imgsrc="https://pic.imgdb.cn/item/671b7dc2d29ded1a8c1b192d.png" /></p><p>但是会出现一个问题，S会越来越大，导致后面出现学不动的情况</p><h3 id="rmsprop-root-mean-square-propagation">RMSProp (Root Mean SquarePropagation)</h3><p>本质是在 AdaGrad 基础上引入了指数滑动平均防止S越加越大的问题</p><p><span class="math display">\[W_{t+1} = W_{t} -\frac{\alpha}{\sqrt{S_{t}+\epsilon}}\frac{\partial J}{\partialw_t}\]</span></p><p><span class="math display">\[S_{t} = \beta S_{t-1} +(1-\beta)(\frac{\partial J}{\partial w_t})^2\]</span></p><p><imgsrc="https://pic.imgdb.cn/item/671b7f4cd29ded1a8c1d0aca.png" /></p><h3 id="adam-adaptive-moment-estimation">Adam (Adaptive MomentEstimation)</h3><p>Adam算法通过引入两个指数滑动平均来修正AdaGrad算法中的学习率，从而避免了学习率过大的问题</p><p><imgsrc="https://pic.imgdb.cn/item/671b81a5d29ded1a8c1fa9a8.png" /></p><p>公式：</p><p><span class="math display">\[W_{t+1} = W_{t} -\frac{\alpha}{\sqrt{\hat S_{t}}+\epsilon}\hat V_{t}\]</span></p><p><span class="math display">\[\hat V_{t} =\frac{V_{t}}{1-\beta_1^t}\]</span></p><p><span class="math display">\[\hat S_{t} =\frac{S_{t}}{1-\beta_2^t}\]</span></p><p><span class="math display">\[V_{t} = \beta_1 V_{t-1} +(1-\beta_1)\frac{\partial J}{\partial w_t}\]</span></p><p><span class="math display">\[S_{t} = \beta_2 S_{t-1} +(1-\beta_2)(\frac{\partial J}{\partial w_t})^2\]</span></p><p>该算法能够解决一些存在的缺点，例如：V和S在刚开始迭代时会非常小，不利于算法更新</p><p><imgsrc="https://pic.imgdb.cn/item/671b8374d29ded1a8c21b7b9.png" /></p><h3 id="随机梯度下降">随机梯度下降</h3><p>从另一个角度（训练数据）来解决优化问题</p><p>内容可以看第二讲，已经记录过了</p><h3 id="小批量梯度下降">小批量梯度下降</h3><p>第二讲也有记录</p><p><imgsrc="https://pic.imgdb.cn/item/671b899dd29ded1a8c294dff.png" /></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第三章：BMP文件的读取与显示</title>
    <link href="/2024/10/25/shu-zi-tu-xiang-chu-li/di-san-zhang-bmp-wen-jian-de-du-qu-yu-xian-shi/"/>
    <url>/2024/10/25/shu-zi-tu-xiang-chu-li/di-san-zhang-bmp-wen-jian-de-du-qu-yu-xian-shi/</url>
    
    <content type="html"><![CDATA[<h2 id="bmp文件的读取与显示">BMP文件的读取与显示</h2><h3 id="常见的图像文件格式">常见的图像文件格式</h3><h4 id="bmpbitmap位图">BMP（Bitmap位图）</h4><p>是一种与设备无关（DIB）的图像文件格式，是Windows环境中经常使用的一种位图格式。其特点是不进行压缩，包含的图像信息丰富，但由此导致了占用磁盘空间过大的缺点。</p><p>BMP在单机上非常流行，不受Internet网络欢迎。</p><p>采用的是RGB色彩系统。</p><h4 id="gif.gif文件">GIF（.gif）文件</h4><p>GIF（Graphics InterchangeFormat）是美国联机服务商CompuServe针对当时网络传输带宽的限制开发的图像格式。其特点是压缩比高，磁盘空间占用较少，但不能存储超过256色的图像。</p><p>在Internet上广泛应用：</p><p>①它不仅可以存储单幅静止图像，也可以同时存储若干静止图像进而形成连续的动画；</p><p>②指定透明区域；</p><p>③渐显方式。</p><p>采用的是RGB色彩系统。</p><h4 id="jpeg.jpg文件">JPEG（.jpg）文件</h4><p>JPEG（Joint Photographic ExpertsGroup）是利用JPEG方法压缩的图像格式，有损压缩、压缩比非常高，但压缩/解压缩算法复杂、存储和显示速度慢。可以处理24位真彩色，适用于处理大幅的图像。</p><p>JPEG是Internet中 最受欢迎 的图像格式。</p><p>采用的是YCbCr色彩系统。</p><h4 id="tiff.tif文件">TIFF（.tif）文件</h4><p>TIFF（Tag Image FileFormat）是一种独立于操作系统和文件系统的格式，便于在软件间进行图像数据交换。文件格式复杂，记录的相关信息多（图层、通道信息、多幅图像）。</p><p>该格式支持压缩；支持单色、256色、24位真彩色、32位色、48位色等多种色彩位；同时支持RGB、CMYK、YCbCr等多种色彩系统。</p><h3 id="bmp图像文件结构">BMP图像文件结构</h3><p><imgsrc="https://pic.imgdb.cn/item/671a7100d29ded1a8c40eb6f.png" /></p><h4id="bitmapfileheader结构---14字节">BITMAPFILEHEADER结构---14字节</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tagBITMAPFILEHEADER</span> &#123;<br>        WORD      bfType;              <span class="hljs-comment">//2个字节</span><br>        DWORD   bfSize;                <span class="hljs-comment">//4个字节</span><br>        WORD      bfReserved1;     <span class="hljs-comment">//2个字节</span><br>        WORD      bfReserved2;     <span class="hljs-comment">//2个字节</span><br>        DWORD   bfOffBits;          <span class="hljs-comment">//4个字节</span><br>&#125; BITMAPFILEHEADER; <br></code></pre></td></tr></table></figure><p>这个结构的长度是固定的，为14个字节（WORD为无符号16位整数，DWORD为无符号32位整数），各个成员的说明如下：</p><ol type="1"><li><p>bfType：文件类型，为BM，即0x4D42，表示BMP文件。</p></li><li><p>bfSize：文件大小，以字节为单位。</p></li><li><p>bfReserved1：保留字，为0。</p></li><li><p>bfReserved2：保留字，为0。</p></li><li><p>bfOffBits：图像数据相对于文件头的偏移量，即位图数据的起始位置。即结构示意图中前三个部分的长度之和。</p></li></ol><h4id="bitmapinfoheader结构---40字节">BITMAPINFOHEADER结构---40字节</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tagBITMAPINFOHEADER</span>&#123;<br>   DWORD  biSize; <br>   LONG      biWidth; <br>   LONG      biHeight; <br>   WORD     biPlanes; <br>   WORD     biBitCount;<br>   DWORD  biCompression; <br>   DWORD  biSizeImage; <br>   LONG      biXPelsPerMeter; <br>   LONG      biYPelsPerMeter; <br>   DWORD  biClrUsed; <br>   DWORD  biClrImportant; <br>&#125; BITMAPINFOHEADER; <br></code></pre></td></tr></table></figure><p>这个结构的长度是固定的，为40个字节，各个成员的说明如下：</p><ol type="1"><li><p>biSize：指定结构大小，为40。</p></li><li><p>biWidth：指定图像的宽度，单位是像素。</p></li><li><p>biHeight：指定图像的高度，单位是像素。</p></li><li><p>biPlanes：必须是1，不用考虑。</p></li><li><p>biBitCount：指定表示颜色时要用到的位数，常用的值为1（黑白二色图）,4（16色图）, 8（256色）, 24（真彩色图）。</p></li></ol><p>biBitCount在实验中会经常使用到！！！</p><ol start="6" type="1"><li><p>biCompression指定位图是否压缩。Windows位图可以采用压缩格式，但用的不多。我们只讨论的不压缩的情况，biCompression为BI_RGB（Windows定义好的常量）。</p></li><li><p>biSizeImage位图数据占用的字节数，可以通过图像的高度、宽度、颜色深度计算出来。如果biCompression为BI_RGB，则该项可以为零。</p></li><li><p>biXPelsPerMeter指定目标设备的水平分辨率，单位是每米的像素个数。</p></li><li><p>biYPelsPerMeter 指定目标设备的垂直分辨率，单位同上。</p></li><li><p>biClrUsed指定本图象实际用到的颜色数（决定调色板数组元素的个数），如果该值为零，则用到的颜色数为2的biBitCount次方。</p></li></ol><p>biClrUsed在实验中也会经常使用到！！！</p><p>11。 biClrImportant指定本图象中重要的颜色数，该值通常为零，即认为所有的颜色都是重要的。</p><h4 id="palette结构">Palette结构</h4><p>调色板实际上是一个数组，共有biClrUsed个元素（如果该值为零，则有2的biBitCount次方个元素）。数组中每个元素的类型是一个RGBQUAD结构，占4个字节，其定义如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tagRGBQUAD</span> &#123; <br>    BYTE    rgbBlue;         <span class="hljs-comment">//该颜色的蓝色分量</span><br>    BYTE    rgbGreen;      <span class="hljs-comment">//该颜色的绿色分量</span><br>    BYTE    rgbRed;          <span class="hljs-comment">//该颜色的红色分量</span><br>    BYTE    rgbReserved; <span class="hljs-comment">//保留值，不考虑</span><br>&#125; RGBQUAD; <br></code></pre></td></tr></table></figure></p><p>真彩色图，不需要调色板的，BITMAPINFOHEADER 后直接是位图数据</p><h4 id="关于灰度图像的调色板">关于灰度图像的调色板</h4><p>BMP格式的文件中并没有灰度图这个概念，但可以很容易地用BMP文件来表示灰度图。方法是用256色的调色板，不过这个调色板有些特殊，每一项的RGB都相同。RGB值从(0,0,0)、(1,1,1)一直到(255,255,255)。(0,0,0)是全黑色， (255,255,255)是全白色。</p><p>对于R=G=B的色彩，带入HSI色彩系统转换公式中可以看到只有亮度信息，饱和度分量都是0，即没有色彩信息。</p><h4 id="实际的位图数据-imagedata">实际的位图数据 ImageData</h4><p>对于用到调色板的位图，图象数据就是该像素颜色在调色板中的索引值，对于真彩色图，图像数据就是实际的R,G,B值。下面就2色，16色，256色位图和真彩色位图分别介绍</p><p>2色位图，用1位就可以表示该像素的颜色（一般0表示黑，1表示白），一个字节可以表示8个像素</p><p>16色位图，用4位可以表示一个像素的颜色，所以一个字节可以表示2个像素,分为前4位和后4位</p><p>256色位图，一个字节表示1个像素</p><p>真彩色图，三个字节表示1个像素,RGB分别占用一个字节</p><h4 id="位图数据需要注意的两点">位图数据——需要注意的两点</h4><p>① 每一行的字节数必须是4的整倍数，如果不是，则需要补齐。</p><p>②BMP文件的数据是从下到上，从左到右的。也就是说，从文件中最先读到的是图像最下面一行的左边第一个像素，然后是左边第二个像素。。。接下来是倒数第二行左边第一个像素，左边第二个像素。。。依次类推，最后得到的是最上面一行的最右一个像素。</p><p><imgsrc="https://pic.imgdb.cn/item/671a77a8d29ded1a8c46d7bb.png" /></p><p>这个指针2怎么得到的没搞懂</p><p><img src="https://pic.imgdb.cn/item/671bce20d29ded1a8c678e46.png" /><img src="https://pic.imgdb.cn/item/671bce34d29ded1a8c679f8f.png" /></p><p>计算方法： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> w = lpBitsInfo-&gt;bmiHeader.biWidth;<br><span class="hljs-type">int</span> h = lpBitsInfo-&gt;bmiHeader.biHeight;<br><span class="hljs-type">int</span> LineBytes = (w * lpBitsInfo-&gt;bmiHeader.biBitCount + <span class="hljs-number">31</span>) / <span class="hljs-number">32</span> * <span class="hljs-number">4</span>;<br>BYTE* lpBits = (BYTE*)&amp;lpBitsInfo-&gt;bmiColors[lpBitsInfo-&gt;bmiHeader.biClrUsed];<br></code></pre></td></tr></table></figure>注意：每一行的字节数LineBytes必须是4的整倍数</p><p>遍历灰度图像数据的方法: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> i, j;<br>BYTE* pixel;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; h; i ++)<br>&#123;<br>  <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; w; j ++)<br>  &#123;<br>    <span class="hljs-comment">// 指向像素点(i,j)的指针</span><br>    pixel = lpBits + LineBytes * (h - <span class="hljs-number">1</span> - i) + j;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="bmp图像文件读写与显示">BMP图像文件读写与显示</h3>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习实验7</title>
    <link href="/2024/10/23/ji-qi-xue-xi/ji-qi-xue-xi-shi-yan-7/"/>
    <url>/2024/10/23/ji-qi-xue-xi/ji-qi-xue-xi-shi-yan-7/</url>
    
    <content type="html"><![CDATA[<p>本次实验需要实现一个简单的神经网络，并使用梯度下降法训练。</p><p>遇到了<code>Xavier初始化</code>,找到了一篇学习资料：</p><p>https://blog.csdn.net/qq_67720621/article/details/138045784</p><p><imgsrc="https://pic.imgdb.cn/item/6718e4c9d29ded1a8ce31af9.png" /></p><p>networkBackward 函数需要对照课件好好学习一下</p><h3 id="实验代码">实验代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># Utilities</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">onehotEncoder</span>(<span class="hljs-params">Y, ny</span>):<br>    <span class="hljs-keyword">return</span> np.eye(ny)[Y]<br><br><span class="hljs-comment"># Xavier Initialization</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">initWeights</span>(<span class="hljs-params">M</span>):<br>    l = <span class="hljs-built_in">len</span>(M)<br>    W = []<br>    B = []<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l):<br>        W.append(np.random.randn(M[i-<span class="hljs-number">1</span>], M[i]) * np.sqrt(<span class="hljs-number">2.0</span>/M[i-<span class="hljs-number">1</span>]))  <span class="hljs-comment"># (M[i-1], M[i]) 表示当前权重矩阵的形状</span><br>        <span class="hljs-comment"># W.append(np.random.randn(M[i-1], M[i]) * np.sqrt(1.0/M[i-1]))  # TODO 尝试标准的Xavier初始化</span><br>        B.append(np.zeros([<span class="hljs-number">1</span>, M[i]]))<br>        <br>    <span class="hljs-keyword">return</span> W, B<br><br><span class="hljs-comment"># Forward propagation</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">networkForward</span>(<span class="hljs-params">X, W, B</span>):<br>    l = <span class="hljs-built_in">len</span>(W)<br>    A = [X] + [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)]<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        Z = np.dot(A[i], W[i]) + B[i]<br>        <span class="hljs-comment"># Z到下一层有两种情况</span><br>        <span class="hljs-keyword">if</span> i == l-<span class="hljs-number">1</span>: <span class="hljs-comment"># 输出层使用softmax函数</span><br>            A[i+<span class="hljs-number">1</span>] = np.exp(Z) / np.<span class="hljs-built_in">sum</span>(np.exp(Z), axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">else</span>:<br>            A[i+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-Z))<br>    <br>    <span class="hljs-keyword">return</span> A<br><br><span class="hljs-comment"># Backward propagation</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">networkBackward</span>(<span class="hljs-params">Y, A, W</span>):<br>    l = <span class="hljs-built_in">len</span>(W)<br>    dW = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)]<br>    dB = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)]<br>    <br>    m = Y.shape[<span class="hljs-number">0</span>]<br>    dA = A[-<span class="hljs-number">1</span>] - Y  <span class="hljs-comment"># 从最后一层往前推导</span><br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(l)):<br>        <span class="hljs-keyword">if</span> i != l-<span class="hljs-number">1</span>:<br>            dA = np.dot(dA, W[i+<span class="hljs-number">1</span>].T) * (A[i+<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-A[i+<span class="hljs-number">1</span>])) <span class="hljs-comment"># sigmoid导数</span><br>        dW[i] = np.dot(A[i].T, dA) / m<br>        dB[i] = np.<span class="hljs-built_in">sum</span>(dA, axis=<span class="hljs-number">0</span>, keepdims=<span class="hljs-literal">True</span>) / m<br>        <br>    <span class="hljs-keyword">return</span> dW, dB<br><br><span class="hljs-comment"># Update weights by gradient descent</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">updateWeights</span>(<span class="hljs-params">W, B, dW, dB, lr</span>):<br>    l = <span class="hljs-built_in">len</span>(W)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        W[i] -= lr * dW[i]<br>        B[i] -= lr * dB[i]<br><br>    <span class="hljs-keyword">return</span> W, B<br><br><span class="hljs-comment"># Compute regularized cost function</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cost</span>(<span class="hljs-params">A_l, Y, W</span>):<br>    n = Y.shape[<span class="hljs-number">0</span>]<br>    c = -np.<span class="hljs-built_in">sum</span>(Y*np.log(A_l + <span class="hljs-number">1e-8</span>)) / n<br>    <span class="hljs-comment"># TODO 这里可以添加正则项</span><br>    <span class="hljs-keyword">return</span> c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">X, Y, M, lr, iterations</span>):<br>    costs = []<br>    W, B = initWeights(M)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>        A = networkForward(X, W, B)<br>        c = cost(A[-<span class="hljs-number">1</span>], Y, W)<br>        dW, dB = networkBackward(Y, A, W)<br>        W, B = updateWeights(W, B, dW, dB, lr)<br><br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cost after iteration %i: %f&quot;</span> %(i, c))<br>            costs.append(c)<br><br>    <span class="hljs-keyword">return</span> W, B, costs<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">X, W, B, Y</span>):<br>    Y_out = np.zeros([X.shape[<span class="hljs-number">0</span>], Y.shape[<span class="hljs-number">1</span>]])<br>    <br>    A = networkForward(X, W, B)<br>    idx = np.argmax(A[-<span class="hljs-number">1</span>], axis=<span class="hljs-number">1</span>)<br>    Y_out[<span class="hljs-built_in">range</span>(Y.shape[<span class="hljs-number">0</span>]),idx] = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">return</span> Y_out<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">Y, X, W, B</span>):<br>    Y_out = predict(X, W, B, Y)<br>    acc = np.mean(Y_out == Y)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Training accuracy is: %f&quot;</span> %(acc))<br>    <br>    <span class="hljs-keyword">return</span> acc<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">X, W, B</span>):<br>    A = networkForward(X, W, B)<br>    <br>    Y_hat = np.expand_dims(np.argmax(A[-<span class="hljs-number">1</span>], axis=<span class="hljs-number">1</span>), axis=<span class="hljs-number">1</span>)<br>    idx = np.expand_dims(np.arange(Y_hat.shape[<span class="hljs-number">0</span>]), axis=<span class="hljs-number">1</span>)<br>    np.savetxt(<span class="hljs-string">&quot;predict.csv&quot;</span>, np.concatenate([idx, Y_hat], axis=<span class="hljs-number">1</span>), header=<span class="hljs-string">&quot;Index,ID&quot;</span>, comments=<span class="hljs-string">&#x27;&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br>iterations = <span class="hljs-number">5000</span>  <span class="hljs-comment"># Training loops</span><br>lr = <span class="hljs-number">0.08</span>          <span class="hljs-comment"># Learning rate</span><br><br>X = np.load(<span class="hljs-string">&quot;train_data.npy&quot;</span>)<br>Y = np.load(<span class="hljs-string">&quot;train_label.npy&quot;</span>)<br>(n, m) = X.shape<br>Y = onehotEncoder(Y, <span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># M = [784, 25, 10]</span><br>M = [<span class="hljs-number">784</span>,<span class="hljs-number">64</span>,<span class="hljs-number">64</span>,<span class="hljs-number">10</span>]  <span class="hljs-comment"># TODO：尝试增加隐藏层来提高模型复杂度 当前模型可以达到0.86</span><br>W, B, costs = train(X, Y, M, lr, iterations)<br><br>plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(costs)), costs)<br><br>X = np.load(<span class="hljs-string">&quot;train_data.npy&quot;</span>)<br>Y = np.load(<span class="hljs-string">&quot;train_label.npy&quot;</span>)<br>Y = onehotEncoder(Y, <span class="hljs-number">10</span>)<br>test(Y, X, W, B)<br><br>X = np.load(<span class="hljs-string">&quot;test_data.npy&quot;</span>)<br>output(X, W, B)<br></code></pre></td></tr></table></figure><p>实验效果最好为 0.86，感觉下标那里好乱啊，搞不明白</p><p>下面是一些尝试的记录</p><p><imgsrc="https://pic.imgdb.cn/item/6719a4e5d29ded1a8c6c009d.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/6719a4ced29ded1a8c6be866.png" /></p><p>调整了一下学习率，曲线较为平稳了一点，设置的结构为：M=[784,256,256,10]</p><p><imgsrc="https://pic.imgdb.cn/item/6719cc21d29ded1a8c95da4b.png" /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">X, Y, M, lr, iterations</span>):<br>    costs = []<br>    W, B = initWeights(M)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>        A = networkForward(X, W, B)<br>        c = cost(A[-<span class="hljs-number">1</span>], Y, W)<br>        dW, dB = networkBackward(Y, A, W)<br>        <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">9000</span>:<br>            W, B = updateWeights(W, B, dW, dB,<span class="hljs-number">0.0005</span>)<br>        <span class="hljs-keyword">elif</span> i &gt; <span class="hljs-number">8000</span>:<br>            W, B = updateWeights(W, B, dW, dB,<span class="hljs-number">0.001</span>)<br>        <span class="hljs-keyword">elif</span> i &gt;= <span class="hljs-number">4000</span> <span class="hljs-keyword">and</span> i &lt;= <span class="hljs-number">8000</span>:<br>            W, B = updateWeights(W, B, dW, dB,<span class="hljs-number">0.008</span>)<br>        <span class="hljs-keyword">else</span>:<br>            W, B = updateWeights(W, B, dW, dB, <span class="hljs-number">0.02</span>)<br><br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cost after iteration %i: %f&quot;</span> %(i, c))<br>            costs.append(c)<br><br>    <span class="hljs-keyword">return</span> W, B, costs<br></code></pre></td></tr></table></figure><p>但是效果还是不太好,可能是过拟合了，改一下结构: M =[784,128,128,10]</p><p>结果还是不太好，大概只有0.82得分</p><p><imgsrc="https://pic.imgdb.cn/item/6719d27dd29ded1a8c9c18f9.png" /></p><p>下面尝试加一个L2正则看看效果，网络结构为 M =[784,512,256,128,64,32,10]</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Compute regularized cost function</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cost</span>(<span class="hljs-params">A_l, Y, W</span>):<br>    <span class="hljs-comment"># n = Y.shape[0]</span><br>    <span class="hljs-comment"># c = -np.sum(Y*np.log(A_l + 1e-8)) / n</span><br>    <br>    <span class="hljs-comment"># return c</span><br>    <br>    <span class="hljs-comment"># 加了L2的损失函数</span><br>    n = Y.shape[<span class="hljs-number">0</span>]<br>    lambda_reg = <span class="hljs-number">0.01</span><br>    c = -np.<span class="hljs-built_in">sum</span>(Y*np.log(A_l + <span class="hljs-number">1e-8</span>)) / n<br>    reg_term = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> W:<br>        reg_term += np.<span class="hljs-built_in">sum</span>(np.square(w))<br>    reg_term *= lambda_reg / (<span class="hljs-number">2</span> * n)<br>    <span class="hljs-keyword">return</span> c + reg_term<br></code></pre></td></tr></table></figure><p>这个框架跑太慢了，而且损失函数降不下去，pass</p><p>不知道怎么提升了...</p><h3 id="关于这个实验">关于这个实验</h3><p>不死心又尝试了relu激活，有几点注意事项，可以看看这个总结：https://sakigami-yang.me/2017/08/11/thinking-from-softmax-03/</p><p>使用relu的话主要要选择一个比较小的学习率，防止梯度爆炸或者直接die掉</p><p>根据实验的结果来看，个人感觉relu的梯度下降会更平稳一点，但是由于学习率不敢给太高，所以迭代次数上需要多给一点，整体效果应该会比sigmoid好一点点吧，嗯，希望是这样...</p><p>附上测试代码： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 尝试使用relu激活函数来看看效果</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># Utilities</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">onehotEncoder</span>(<span class="hljs-params">Y, ny</span>):<br>    <span class="hljs-keyword">return</span> np.eye(ny)[Y]<br><br><span class="hljs-comment"># Xavier Initialization</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">initWeights</span>(<span class="hljs-params">M</span>):<br>    l = <span class="hljs-built_in">len</span>(M)<br>    W = []<br>    B = []<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l):<br>        W.append(np.random.randn(M[i-<span class="hljs-number">1</span>], M[i]) * np.sqrt(<span class="hljs-number">2.0</span>/M[i-<span class="hljs-number">1</span>])) <br>        B.append(np.zeros([<span class="hljs-number">1</span>, M[i]]))<br>        <br>    <span class="hljs-keyword">return</span> W, B<br><br><span class="hljs-comment"># ReLU Activation Function</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">relu</span>(<span class="hljs-params">Z</span>):<br>    <span class="hljs-keyword">return</span> np.maximum(<span class="hljs-number">0</span>, Z)<br><br><span class="hljs-comment"># Derivative of ReLU</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reluDerivative</span>(<span class="hljs-params">Z</span>):<br>    <span class="hljs-keyword">return</span> (Z &gt; <span class="hljs-number">0</span>).astype(<span class="hljs-built_in">float</span>)<br><br><span class="hljs-comment"># Forward propagation</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">networkForward</span>(<span class="hljs-params">X, W, B</span>):<br>    l = <span class="hljs-built_in">len</span>(W)<br>    A = [X] + [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)]<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        Z = np.dot(A[i], W[i]) + B[i]<br>        <span class="hljs-keyword">if</span> i == l-<span class="hljs-number">1</span>: <span class="hljs-comment"># Output layer uses softmax function</span><br>            A[i+<span class="hljs-number">1</span>] = np.exp(Z) / np.<span class="hljs-built_in">sum</span>(np.exp(Z), axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">else</span>:<br>            A[i+<span class="hljs-number">1</span>] = relu(Z)<br>    <br>    <span class="hljs-keyword">return</span> A<br><br><span class="hljs-comment"># Backward propagation</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">networkBackward</span>(<span class="hljs-params">Y, A, W</span>):<br>    l = <span class="hljs-built_in">len</span>(W)<br>    dW = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)]<br>    dB = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)]<br>    <br>    m = Y.shape[<span class="hljs-number">0</span>]<br>    dA = A[-<span class="hljs-number">1</span>] - Y  <span class="hljs-comment"># Start from the last layer</span><br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(l)):<br>        <span class="hljs-keyword">if</span> i != l-<span class="hljs-number">1</span>:<br>            dA = np.dot(dA, W[i+<span class="hljs-number">1</span>].T) * reluDerivative(A[i+<span class="hljs-number">1</span>])<br>        dW[i] = np.dot(A[i].T, dA) / m<br>        dB[i] = np.<span class="hljs-built_in">sum</span>(dA, axis=<span class="hljs-number">0</span>, keepdims=<span class="hljs-literal">True</span>) / m<br>        <br>    <span class="hljs-keyword">return</span> dW, dB<br><br><span class="hljs-comment"># Update weights by gradient descent</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">updateWeights</span>(<span class="hljs-params">W, B, dW, dB, lr</span>):<br>    l = <span class="hljs-built_in">len</span>(W)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        W[i] -= lr * dW[i]<br>        B[i] -= lr * dB[i]<br><br>    <span class="hljs-keyword">return</span> W, B<br><br><span class="hljs-comment"># Compute regularized cost function</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cost</span>(<span class="hljs-params">A_l, Y, W</span>):<br>    n = Y.shape[<span class="hljs-number">0</span>]<br>    lambda_reg = <span class="hljs-number">0.15</span>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> L2正则化可能也需要调整</span><br>    c = -np.<span class="hljs-built_in">sum</span>(Y*np.log(A_l + <span class="hljs-number">1e-8</span>)) / n<br>    reg_term = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> W:<br>        reg_term += np.<span class="hljs-built_in">sum</span>(np.square(w))<br>    reg_term *= lambda_reg / (<span class="hljs-number">2</span> * n)<br>    <span class="hljs-keyword">return</span> c + reg_term<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">X, Y, M, lr, iterations</span>):<br>    costs = []<br>    W, B = initWeights(M)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>        A = networkForward(X, W, B)<br>        c = cost(A[-<span class="hljs-number">1</span>], Y, W)<br>        dW, dB = networkBackward(Y, A, W)<br>        <br>        W, B = updateWeights(W, B, dW, dB, lr)<br>        <br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cost after iteration %i: %f&quot;</span> %(i, c))<br>            costs.append(c)<br><br>    <span class="hljs-keyword">return</span> W, B, costs<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">X, W, B, Y</span>):<br>    Y_out = np.zeros([X.shape[<span class="hljs-number">0</span>], Y.shape[<span class="hljs-number">1</span>]])<br>    <br>    A = networkForward(X, W, B)<br>    idx = np.argmax(A[-<span class="hljs-number">1</span>], axis=<span class="hljs-number">1</span>)<br>    Y_out[<span class="hljs-built_in">range</span>(Y.shape[<span class="hljs-number">0</span>]),idx] = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">return</span> Y_out<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">Y, X, W, B</span>):<br>    Y_out = predict(X, W, B, Y)<br>    acc = np.mean(Y_out == Y) <span class="hljs-comment"># 计算的是预测正确的样本占总样本的比例</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Training accuracy is: %f&quot;</span> %(acc))<br>    <br>    <span class="hljs-keyword">return</span> acc<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">X, W, B</span>):<br>    A = networkForward(X, W, B)<br>    <br>    Y_hat = np.expand_dims(np.argmax(A[-<span class="hljs-number">1</span>], axis=<span class="hljs-number">1</span>), axis=<span class="hljs-number">1</span>)<br>    idx = np.expand_dims(np.arange(Y_hat.shape[<span class="hljs-number">0</span>]), axis=<span class="hljs-number">1</span>)<br>    np.savetxt(<span class="hljs-string">&quot;predict.csv&quot;</span>, np.concatenate([idx, Y_hat], axis=<span class="hljs-number">1</span>), header=<span class="hljs-string">&quot;Index,ID&quot;</span>, comments=<span class="hljs-string">&#x27;&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br>iterations = <span class="hljs-number">12000</span>  <span class="hljs-comment"># Training loops</span><br>lr = <span class="hljs-number">0.005</span>          <span class="hljs-comment"># Learning rate</span><br><span class="hljs-comment"># 0.001没跑完感觉小了</span><br><span class="hljs-comment"># 0.005感觉刚刚好，但是迭代次数6000有点不够用，可以加一点</span><br><br>X = np.load(<span class="hljs-string">&quot;train_data.npy&quot;</span>)<br>X = (X - np.mean(X, axis=<span class="hljs-number">0</span>)) / np.std(X, axis=<span class="hljs-number">0</span>)  <span class="hljs-comment"># s数据标准化</span><br>Y = np.load(<span class="hljs-string">&quot;train_label.npy&quot;</span>)<br>(n, m) = X.shape<br>Y = onehotEncoder(Y, <span class="hljs-number">10</span>)<br><br>M = [<span class="hljs-number">784</span>,<span class="hljs-number">256</span>,<span class="hljs-number">10</span>]<br>W, B, costs = train(X, Y, M, lr, iterations)<br><br>plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(costs)), costs)<br><br>X = np.load(<span class="hljs-string">&quot;train_data.npy&quot;</span>)<br>Y = np.load(<span class="hljs-string">&quot;train_label.npy&quot;</span>)<br>Y = onehotEncoder(Y, <span class="hljs-number">10</span>)<br>test(Y, X, W, B)<br><br>X = np.load(<span class="hljs-string">&quot;test_data.npy&quot;</span>)<br>output(X, W, B)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第七讲_神经网络</title>
    <link href="/2024/10/23/ji-qi-xue-xi/di-qi-jiang-shen-jing-wang-luo/"/>
    <url>/2024/10/23/ji-qi-xue-xi/di-qi-jiang-shen-jing-wang-luo/</url>
    
    <content type="html"><![CDATA[<h2 id="neural-network">Neural Network</h2><p>使用神经网络进行多分类</p><p><imgsrc="https://pic.imgdb.cn/item/66ec41adf21886ccc024991f.png" /></p><p>神经网络只改变了模型，使用很复杂的模型即可，其他方面都没有改变</p><h3 id="神经元的概念">神经元的概念</h3><p>线性神经元</p><p><imgsrc="https://pic.imgdb.cn/item/66ec5092f21886ccc0348c8f.png" /></p><p>神经网络本质上都是<code>多元复合函数!!!!!</code>，是对模型的改变</p><p>不加入激活函数的后果：无论多少层神经网络，最后得到的都是线性模型，学习能力比较差</p><p><imgsrc="https://pic.imgdb.cn/item/66ecef53f21886ccc09ef585.png" /></p><p>完全体的神经网络模型如下：</p><p><imgsrc="https://pic.imgdb.cn/item/66ecf00ef21886ccc09f9200.png" /></p><p>常见的激活函数：</p><p><imgsrc="https://pic.imgdb.cn/item/66ecff9ff21886ccc0b8e1f8.png" /></p><p>全连接神经网络：可以实现各种组合，模型复杂度高，学习能力强</p><p><imgsrc="https://pic.imgdb.cn/item/66ed200bf21886ccc0dffe75.png" /></p><p>一层全连接层的公式表达如下：</p><p><imgsrc="https://pic.imgdb.cn/item/66ed2215f21886ccc0e29248.png" /></p><p>神经网络可以理解为把<code>输入向量</code>变成了<code>特征向量</code>，理解为<code>特征提取器</code>，把样本中的特征提取出来</p><p>feature vector = feature extractor(input vector)</p><p>最后再对抽取出来的特征进行<code>softmax变换</code>，就变成了<code>线性可分</code>的（针对多分类问题）- softmax变换的作用是将<code>输出结果</code>转换为<code>概率</code> -每一层sigmoid函数的作用是将线性模型转为非线性</p><p>如果是针对二分类问题，将抽取出来的特征进行<code>sigmoid</code>变换即可,就没必要使用<code>softmax</code>变换了</p><p>如果是针对回归类问题，则不需要使用激活函数，直接预测结果</p><p>输出层是一个softmax回归，数学结构如下：</p><p><imgsrc="https://pic.imgdb.cn/item/6718b12ed29ded1a8ca91076.png" /></p><h3 id="损失函数">损失函数</h3><p>神经网络的损失函数还是沿用了交叉熵损失函数</p><p><imgsrc="https://pic.imgdb.cn/item/6718c278d29ded1a8cbb8874.png" /></p><p>下面对于梯度下降的公式推导有点点复杂...</p><p>反向第一层的推导相对来说较为简单：</p><p><imgsrc="https://pic.imgdb.cn/item/6718c2ded29ded1a8cbbf2d3.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/6718c312d29ded1a8cbc2692.png" /></p><p>反向第二层：</p><p><imgsrc="https://pic.imgdb.cn/item/6718c34ed29ded1a8cbc685e.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/6718c37dd29ded1a8cbc9e9a.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/6718c39dd29ded1a8cbcc581.png" /></p><p>Back Propagation 总结：</p><p><imgsrc="https://pic.imgdb.cn/item/6718c3c7d29ded1a8cbcef95.png" /></p><p>矩阵形式表示：</p><p><imgsrc="https://pic.imgdb.cn/item/6718c3fad29ded1a8cbd263b.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/6718c447d29ded1a8cbd8288.png" /></p><p>神经网络公式总结:</p><p><imgsrc="https://pic.imgdb.cn/item/6718c463d29ded1a8cbda482.png" /></p><p>https://www.bilibili.com/video/BV1h34y1M7QZ?t=7631.3</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第四章：数字图像基本运算</title>
    <link href="/2024/10/21/shu-zi-tu-xiang-chu-li/di-si-zhang-shu-zi-tu-xiang-ji-ben-yun-suan/"/>
    <url>/2024/10/21/shu-zi-tu-xiang-chu-li/di-si-zhang-shu-zi-tu-xiang-ji-ben-yun-suan/</url>
    
    <content type="html"><![CDATA[<h2 id="算数运算">算数运算</h2><h3 id="算数运算概述">算数运算概述</h3><p>定义：对<code>两幅</code>输入的图像进行点对点的<code>加、减、乘、除</code>计算得到的<code>输出图像</code>，数学表达式为：</p><ul><li>加法运算：输出图像 C 的像素值 C(x,y)=A(x,y)+B(x,y)</li><li>减法运算：输出图像 C 的像素值 C(x,y)=A(x,y)-B(x,y)</li><li>乘法运算：输出图像 C 的像素值 C(x,y)=A(x,y)×B(x,y)</li><li>除法运算：输出图像 C 的像素值 C(x,y)=A(x,y)/B(x,y)（需注意分母不能为0）</li></ul><p>对整幅图的算术运算是<code>逐像素</code>进行的。算术运算每次只涉及1个空间像素的位</p><p><strong>图像算数运算中，最为重要的是<code>乘法运算</code>，也就是点运算</strong></p><h3 id="算数运算的应用场景">算数运算的应用场景</h3><h4 id="加法运算应用---均值降噪">加法运算应用---均值降噪</h4><p>对于同一场景的多幅图像求平均值，以降低叠加性随机噪声</p><p>对于原图像<spanclass="math inline">\(F(x,y)\)</span>，有一个噪音图像集 <spanclass="math inline">\(G_i(x,y)\)</span>，其中 <spanclass="math inline">\(i = 1,2,\cdots,M\)</span>。</p><p>且<span class="math inline">\(G_i(x,y)=F(x,y)+H_i(x,y)\)</span>。</p><p><span class="math inline">\(M\)</span>个图像的均值定义为：<spanclass="math inline">\(G(x,y)=\frac{G_0(x,y)+G_1(x,y)+\cdots+G_M(x,y)}{M}\)</span>。</p><p>当噪音 <span class="math inline">\(H_i(x,y)\)</span>为互不相关，且均值为0时，上述图象均值将降低噪音的影响。</p><p>均值降噪在摄影中的应用：如果想要拍摄静止的建筑，但是周围很多游客等移动的物体，可以多拍几张利用均值降噪去除运动的物体，保留静止的部分</p><h4 id="加法运算应用---二次曝光">加法运算应用---二次曝光</h4><p>概念：将一幅图像内容加到另一幅图像上，实现二次曝光</p><p>对于两个图像<span class="math inline">\(A(x,y)\)</span>和<spanclass="math inline">\(B(x,y)\)</span>的均值有：</p><p><spanclass="math inline">\(C(x,y)=\frac{A(x,y)}{2}+\frac{B(x,y)}{2}\)</span></p><p>会得到二次曝光的效果</p><p>推广这个公式为：<span class="math inline">\(C(x,y)=\alphaA(x,y)+(1-\alpha)B(x,y)\)</span>，我们可以得到各种图像合成的效果</p><p>如果两张一样的图像进行二次曝光，可以处理较暗的图像，增加曝光，提亮暗部</p><p>控制好 <span class="math inline">\(\alpha\)</span> 还可以改变透明度，实现两张图片的合成效果</p><table><thead><tr><th>图片1</th><th>图片2</th><th>处理结果</th></tr></thead><tbody><tr><td><imgsrc="https://pic.imgdb.cn/item/671edb5cd29ded1a8ca7d90f.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671edb69d29ded1a8ca7de80.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671edb74d29ded1a8ca7e32e.png" /></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 加法运算应用——二次曝光</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 打开两张图片</span><br>image1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片3(1).png&#x27;</span>)<br>image2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片4.png&#x27;</span>)<br><br><span class="hljs-comment"># 确保两张图片尺寸相同</span><br><span class="hljs-keyword">if</span> image1.size!= image2.size:<br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;两张图片尺寸不同，无法进行逐像素相减。&quot;</span>)<br><br><span class="hljs-comment"># 创建一个新的图像用于存储结果</span><br>result_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, image1.size)<br><br><span class="hljs-comment"># 逐像素相减</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.width):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.height):<br>        pixel1 = image1.getpixel((x, y))<br>        pixel2 = image2.getpixel((x, y))<br>        new_pixel = <span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">min</span>(<span class="hljs-number">255</span>, <span class="hljs-built_in">int</span>(a/<span class="hljs-number">2</span> + b/<span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(pixel2, pixel1))<br>        result_image.putpixel((x, y), new_pixel)<br><br><span class="hljs-comment"># 保存结果图片</span><br>result_image.save(<span class="hljs-string">&#x27;二次曝光结果.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="减法运算应用---减去背景">减法运算应用---减去背景</h4><p>减法运算常用于去除不需要的叠加性图案</p><p>设：背景图像<spanclass="math inline">\(B(x,y)\)</span>，前景背景混合图像<spanclass="math inline">\(A(x,y)\)</span>。</p><p><span class="math inline">\({C(x,y)=A(x,y)-B(x,y)}\)</span>，<spanclass="math inline">\({C(x,y)}\)</span>为去除了背景的图像。</p><table><thead><tr><th>混合图像</th><th>背景图像</th><th>处理结果</th></tr></thead><tbody><tr><td><imgsrc="https://pic.imgdb.cn/item/671edbc7d29ded1a8ca8102f.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671edbd1d29ded1a8ca81829.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671edbdcd29ded1a8ca81f8c.png" /></td></tr></tbody></table><p>和老师给的效果不一样，可能是代码的问题 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 减法运算应用——减去背景</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 打开两张图片</span><br>image1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片1.png&#x27;</span>)<br>image2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片2.png&#x27;</span>)<br><br><span class="hljs-comment"># 确保两张图片尺寸相同</span><br><span class="hljs-keyword">if</span> image1.size!= image2.size:<br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;两张图片尺寸不同，无法进行逐像素相减。&quot;</span>)<br><br><span class="hljs-comment"># 创建一个新的图像用于存储结果</span><br>result_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, image1.size)<br><br><span class="hljs-comment"># 逐像素相减</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.width):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.height):<br>        pixel1 = image1.getpixel((x, y))<br>        pixel2 = image2.getpixel((x, y))<br>        new_pixel = <span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">abs</span>(a - b)) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(pixel2, pixel1))<br>        result_image.putpixel((x, y), new_pixel)<br><br><span class="hljs-comment"># 保存结果图片</span><br>result_image.save(<span class="hljs-string">&#x27;减去背景结果.png&#x27;</span>)<br></code></pre></td></tr></table></figure></p><h4 id="减法运算应用---运动检测">减法运算应用---运动检测</h4><p>如果有同一地区时间稍有差异的两张图像，那么就能够利用图像相减的方法，来获得运动物体的图像，即<code>差图像</code></p><h4 id="减法运算应用---梯度幅度">减法运算应用---梯度幅度</h4><p>图像的减法运算可用于得到图像梯度幅度，梯度幅度表示图像每点斜率的大小</p><p>梯度幅度的计算公式：</p><p><imgsrc="https://pic.imgdb.cn/item/671610c4d29ded1a8cf6aa6e.png" /></p><p>对于离散数字图像，梯度幅度的近似计算公式：</p><p><imgsrc="https://pic.imgdb.cn/item/671610a5d29ded1a8cf68ef3.png" /></p><p>梯度幅度在物体的边缘处很高，在均匀的内部梯度幅度很低，梯度图像常用来做轮廓特征的提取</p><h4 id="乘法运算应用---二值蒙板">乘法运算应用---二值蒙板</h4><p>用二值蒙板图像与原图像做乘法可实现图像的局部显示（遮掉图像的某些部分）</p><p>在需要被完整保留下来的区域，掩模图像的值为1，而在需要被遮掉的区域，掩模图像的值为0。原图像乘上掩模图像，可抹去图像的某些部分，使该部分为0。</p><p>注意：在实际编程中，为保证图像亮度在有效范围内，两幅图像对应位置处的像素的R、G、B三分量相乘之后，还需要除以亮度的最大值255。</p><p>灰度蒙板会比二值蒙板效果更好一点，一般会使用灰度蒙板！！！</p><table><thead><tr><th>二值蒙板</th><th>原图</th><th>处理结果</th></tr></thead><tbody><tr><td><imgsrc="https://pic.imgdb.cn/item/671edc4ad29ded1a8ca8704e.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671edc55d29ded1a8ca87689.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671edc63d29ded1a8ca87de1.png" /></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 乘法运算应用——二值蒙板</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 打开两张图片</span><br>image1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片7.png&#x27;</span>)<br>image2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片8.png&#x27;</span>)<br><br><span class="hljs-comment"># 创建一个新的图像用于存储结果</span><br>result_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, image1.size)<br><br><span class="hljs-comment"># 逐像素相减</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.width):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.height):<br>        pixel1 = image1.getpixel((x, y))<br>        pixel2 = image2.getpixel((x, y))<br>        new_pixel = <span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">int</span>(a * b /<span class="hljs-number">255</span>) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(pixel1, pixel2))<br>        result_image.putpixel((x, y), new_pixel)<br><br><span class="hljs-comment"># 保存结果图片</span><br>result_image.save(<span class="hljs-string">&#x27;二值蒙板.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h4id="乘法运算应用---正片叠底与滤色">乘法运算应用---“正片叠底”与“滤色”</h4><p>正片叠底： <span class="math display">\[[A(x, y) * B(x,y)]/255\]</span></p><p><code>模拟反光体</code>的颜色混合（相减混色），如打印机的油墨。</p><p>滤色：<span class="math display">\[255-{[255-A(x, y)] * [255-B(x,y)]}/255\]</span></p><p><code>模拟发光体</code>的颜色混合（相加混色），如显示器的光束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiply_blend</span>(<span class="hljs-params">pixel1, pixel2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">int</span>((a * b) / <span class="hljs-number">255</span>) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(pixel1, pixel2))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">screen_blend</span>(<span class="hljs-params">pixel1, pixel2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(<span class="hljs-number">255</span> - <span class="hljs-built_in">int</span>(((<span class="hljs-number">255</span> - a) * (<span class="hljs-number">255</span> - b)) / <span class="hljs-number">255</span>) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(pixel1, pixel2))<br></code></pre></td></tr></table></figure><p>正片叠底可以起到图像增强的效果，如前面提到的二次曝光后的图片，不是很清晰，可以两张一样的图片利用正片叠底来增强</p><table><thead><tr><th>原图</th><th>正片叠底一次</th><th>正片叠底两次</th><th>正片叠底三次</th></tr></thead><tbody><tr><td><imgsrc="https://pic.imgdb.cn/item/671edb74d29ded1a8ca7e32e.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671ee5b4d29ded1a8caee9f4.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671ee5fcd29ded1a8caf2a07.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671ee625d29ded1a8caf4aa2.png" /></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 乘法运算应用——“正片叠底”</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiply_blend</span>(<span class="hljs-params">pixel1, pixel2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">int</span>((a * b) / <span class="hljs-number">255</span>) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(pixel1, pixel2))<br><br><span class="hljs-comment"># 打开两张图片</span><br>image1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片9.png&#x27;</span>)<br>image2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片9.png&#x27;</span>)<br><br><span class="hljs-comment"># 创建新图像用于存储正片叠底结果</span><br>multiply_result_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, image1.size)<br><br><span class="hljs-comment"># 正片叠底</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.width):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.height):<br>        pixel1 = image1.getpixel((x, y))<br>        pixel2 = image2.getpixel((x, y))<br>        multiply_result_image.putpixel((x, y), multiply_blend(pixel1, pixel2))<br><br><span class="hljs-comment"># 保存结果图片</span><br>multiply_result_image.save(<span class="hljs-string">&#x27;图片11.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="正片叠底的基本原理与视觉效果">正片叠底的基本原理与视觉效果</h4><ul><li>基于像素值乘法与归一化：对于图像中每个对应位置的像素，正片叠底操作会将上层图像像素的RGB 通道值与下层图像对应像素的 RGB 通道值分别相乘，然后将结果除以255（针对 8 位图像深度，即 RGB 值范围为 0 - 255）</li><li>整体变暗效果：因为像素值相乘会使整体数值变小（除非像素值本身为255），所以正片叠底通常会使图像整体变暗，就好像透过有色玻璃观察图像一样，颜色变得更深沉浓郁。例如，白色（255,255, 255）与任何颜色进行正片叠底运算，结果都是该颜色本身；而黑色（0, 0,0）与任何颜色正片叠底都会得到黑色，这使得图像中的暗部区域在正片叠底后变得更暗</li></ul><h4 id="正片叠底的色彩混合表现">正片叠底的色彩混合表现</h4><ul><li>印刷与绘画领域：模拟油墨混合效果，当多种颜色油墨叠印时，由于油墨吸收光线而非反射光线，正片叠底模式符合这种物理特性，使颜色混合后变深变暗，例如黄色（255,255, 0）与青色（0, 255, 255）正片叠底后得到绿色（0, 255,0），且颜色比原来两种颜色都要暗</li><li>数字图像处理软件：常用于合成图像时，使添加的元素与背景自然融合，比如将一个带有半透明阴影的物体合成到背景图像上，使用正片叠底模式可让阴影看起来更真实，就像光线被物体遮挡后投射在背景上一样，增强了图像的层次感和立体感</li></ul><h4 id="滤色模式">滤色模式</h4><ul><li>是一种相加混色模式，与正片叠底的相减混色相反，它会使图像变亮，常用于模拟发光效果或增强图像中的亮部区域。例如，在处理夜景照片时，正片叠底可能用于加深天空等背景部分以突出前景灯光，而滤色模式则可用于增强灯光本身的亮度和光晕效果</li></ul><table><thead><tr><th>原图</th><th>滤色一次</th><th>滤色二次</th></tr></thead><tbody><tr><td><imgsrc="https://pic.imgdb.cn/item/671edbc7d29ded1a8ca8102f.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671eece9d29ded1a8cb3fab8.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/671eed07d29ded1a8cb41053.png" /></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 乘法运算应用——“滤色”</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">screen_blend</span>(<span class="hljs-params">pixel1, pixel2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(<span class="hljs-number">255</span> - <span class="hljs-built_in">int</span>(((<span class="hljs-number">255</span> - a) * (<span class="hljs-number">255</span> - b)) / <span class="hljs-number">255</span>) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(pixel1, pixel2))<br><br><span class="hljs-comment"># 打开两张图片</span><br>image1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片1.png&#x27;</span>)<br>image2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;图片1.png&#x27;</span>)<br><br><span class="hljs-comment"># 创建新图像用于存储滤色结果</span><br>screen_result_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, image1.size)<br><br><span class="hljs-comment"># 滤色</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.width):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(image1.height):<br>        pixel1 = image1.getpixel((x, y))<br>        pixel2 = image2.getpixel((x, y))<br>        screen_result_image.putpixel((x, y), screen_blend(pixel1, pixel2))<br><br><span class="hljs-comment"># 保存结果图片</span><br>screen_result_image.save(<span class="hljs-string">&#x27;图片13.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="除法运算应用">除法运算应用</h4><p>略...</p><h2 id="逻辑运算">逻辑运算</h2><h3 id="逻辑运算概述">逻辑运算概述</h3><p>两幅输入图象进行点对点的与、或、异或计算而得到输出图象,对整幅图的逻辑运算是逐像素进行的，数学表达式如下：</p><p><imgsrc="https://pic.imgdb.cn/item/67172bb8d29ded1a8ccafa1f.png" /></p><h4 id="求反运算">求反运算</h4><p><imgsrc="https://pic.imgdb.cn/item/67172c0ad29ded1a8ccbabab.png" /></p><p>求反运算的参数255与具体图像的通道数有关，不一定是255</p><p>求反运算的功能：</p><ul><li>获得彩色图像的阴图像（色调与灰度相反）</li><li>获得二值图像的补图像</li></ul><p><imgsrc="https://pic.imgdb.cn/item/67172c7cd29ded1a8ccc9c46.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/67172c8cd29ded1a8cccbb22.png" /></p><h4 id="与运算">与运算</h4><p><imgsrc="https://pic.imgdb.cn/item/67172ca5d29ded1a8cccee7a.png" /></p><p>与运算常用于二值图像，求解两幅图像的相交子集，如下例：</p><p><imgsrc="https://pic.imgdb.cn/item/67172cfbd29ded1a8ccdae16.png" /></p><h4 id="或运算">或运算</h4><p><imgsrc="https://pic.imgdb.cn/item/67172d1fd29ded1a8ccdf6d3.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/67172d31d29ded1a8cce2097.png" /></p><p>通常只用于二值图像，用来合并子图像</p><h4 id="异或运算">异或运算</h4><p>异或运算（像素值相同取0，不同取1）定义:</p><p><imgsrc="https://pic.imgdb.cn/item/67172e37d29ded1a8cd0419e.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/67172e53d29ded1a8cd07827.png" /></p><h2 id="几何运算">几何运算</h2><p>几何运算可以改变图像中各对象之间的空间关系，可以看成将各个物体在图像内运动</p><p>几何运算需要两个独立的算法， -首先需要一个算法来定义空间变换本身，用它来描述每个像素点如何从初始位置移动到终止位置-同时还需要一个灰度级的插值算法，很多时候输入图像和输出图像的像素点之间不是一一对应的关系（放大）</p><p>几何运算的数学描述：</p><p><imgsrc="https://pic.imgdb.cn/item/671730afd29ded1a8cd374a0.png" /></p><h3id="几何运算中涉及到的两种映射方式">几何运算中涉及到的两种映射方式</h3><h4 id="向前映射法像素移交">向前映射法（像素移交）</h4><p><img src="https://pic.imgdb.cn/item/671f1097d29ded1a8cd3f6b3.png" />- 从输入图像坐标计算出输出图像坐标。 -<strong>平移、镜像、转置</strong>采用这种方法。</p><h4 id="向后映射法像素填充">向后映射法（像素填充）</h4><p><img src="https://pic.imgdb.cn/item/671f10e5d29ded1a8cd44f41.png" />- 从输出图像坐标计算出输入图像坐标。 -<strong>缩放、旋转、拉伸</strong>采用这种方法。</p><h3 id="平移">1、平移</h3><p>输入像素与输出像素存在<strong>一一对应</strong>的关系，不需要插值计算</p><p>计算方法 <imgsrc="https://pic.imgdb.cn/item/671f113bd29ded1a8cd48516.png" /></p><p>矩阵表示如下 <imgsrc="https://pic.imgdb.cn/item/671f115bd29ded1a8cd49612.png" /></p><h3 id="镜像变换">2、镜像变换</h3><p>水平镜像计算公式：</p><p><imgsrc="https://pic.imgdb.cn/item/671f1196d29ded1a8cd4bdb0.png" /></p><p>垂直镜像计算公式：</p><p><imgsrc="https://pic.imgdb.cn/item/671f11a1d29ded1a8cd4c89d.png" /></p><p>注意水平镜像只需要变一半的像素即可！</p><p>矩阵表示如下：</p><p><imgsrc="https://pic.imgdb.cn/item/671f1249d29ded1a8cd5485f.png" /></p><p>输入像素与输出像素存在一一对应的关系，不需要插值计算</p><p>实例：</p><p><imgsrc="https://pic.imgdb.cn/item/671f12a2d29ded1a8cd58c2b.png" /></p><h3 id="图像转置">3、图像转置</h3><p>转置就是将图像像素的x坐标和y坐标互换，转置操作会改变图像的大小（因为涉及到了行对齐），所以需要重新分配内存给新的图像</p><p>矩阵表示如下：</p><p><imgsrc="https://pic.imgdb.cn/item/671f133dd29ded1a8cd602b6.png" /></p><p>输入像素与输出像素存在一一对应的关系，不需要插值计算</p><h3 id="缩放">4、缩放</h3><p>缩放操作将改变图像大小，产生的图像中的像素可能在原图像中找不到相应的像素点。因此需要进行插值计算</p><p>矩阵表示：</p><p><imgsrc="https://pic.imgdb.cn/item/671f139bd29ded1a8cd63a97.png" /></p><p>逆运算为：</p><p><imgsrc="https://pic.imgdb.cn/item/671f13b0d29ded1a8cd644e9.png" /></p><h3 id="旋转">5、旋转</h3><p><strong>改变图像大小</strong>，旋转产生的图像中的像素可能在原图像中找不到相应的像素点。需要进行插值计算</p><p><imgsrc="https://pic.imgdb.cn/item/671f13f1d29ded1a8cd66d5f.png" /></p><p>这里需要注意旋转操作的公式计算以及矩阵表达式</p><p>同时旋转需要重新计算图片的宽高，用下面的方法：</p><p><img src="https://pic.imgdb.cn/item/671f1458d29ded1a8cd6ad91.png" /><img src="https://pic.imgdb.cn/item/671f1469d29ded1a8cd6b97f.png" /><img src="https://pic.imgdb.cn/item/671f150ed29ded1a8cd727c2.png" /></p><p>TODO：这里其实有个疑问，就是按照公式来理解，旋转后新的图框应该是外切原图的，但是老师上课演示的程序好像不是这样，所以后面要自己代码实现一遍，看看是哪里的问题</p><p>下面的公式是为了找到原像素点与旋转后像素点之间的对应关系，注意不是一一对应！<img src="https://pic.imgdb.cn/item/671f160fd29ded1a8cd7d125.png" /></p><h3 id="拉伸">6、拉伸</h3><p>没有...</p><h3 id="插值算法">7、插值算法</h3><p>课上只介绍了两种常见插值算法</p><h4 id="最邻近插值0阶插值">（1）最邻近插值（0阶插值）</h4><p>令输出图像的灰度值等于离它所映射到的位置<strong>最近</strong>的输入像素的灰度值</p><h4id="双线性插值1阶插值期末考试必考内容">（2）双线性插值（1阶插值）期末考试必考内容</h4><p>原理图如下，其实就是空间线性变换，计算时小心点就行，比较好理解 <imgsrc="https://pic.imgdb.cn/item/671f173cd29ded1a8cd89089.png" /> <imgsrc="https://pic.imgdb.cn/item/671f17c9d29ded1a8cd8e734.png" /></p><p>最后总的表达式： <imgsrc="https://pic.imgdb.cn/item/671f17e8d29ded1a8cd8f8f3.png" /></p><h4 id="高阶插值">（3）高阶插值</h4><p>常见高阶插值的例子有：三次样条、Legendre中心函数和sin(ax)/ax函数，略过...</p><h2 id="灰度直方图">灰度直方图</h2><p>灰度直方图是灰度级的函数，描述的是图像中具有该灰度级的像素的个数</p><p>其中，横坐标表示的是灰度级，纵坐标表示的是该灰度级出现的频率（像素的个数或者像素个数与总数之比）</p><p>灰度直方图是图像的重要特征，反映了图像的灰度分布情况</p><table><thead><tr><th>原图像</th><th>灰度直方图</th></tr></thead><tbody><tr><td><imgsrc="https://pic.imgdb.cn/item/6730df1fd29ded1a8cb74cea.png" /></td><td><imgsrc="https://pic.imgdb.cn/item/6730df27d29ded1a8cb752ea.png" /></td></tr></tbody></table><p>对于彩色图像来说，可以利用三个通道的分通道直方图来表示对应颜色的像素级分布情况</p><h3 id="灰度直方图的计算方法">灰度直方图的计算方法</h3><p>Step1 初始化：H[k] = 0; k = 0, … ,L-1</p><p>Step2 统计： H [f(x, y)] ++; x = 0, … ,M-1, y = 0, … ,N-1</p><p>Step3 归一化：H [f(x, y)] /= M×N（归一化后的直方图为图像的概率密度函数PDF）</p><h3 id="灰度直方图的性质">灰度直方图的性质</h3><p>① 不表示图像的空间信息</p><pre><code class="hljs">直方图描述了每个灰度级具有的像素的个数，但不能为这些像素在图像中的位置提供任何线索。</code></pre><p>② 任一特定图像都有唯一直方图，但反之并不成立</p><pre><code class="hljs">例如，在图像中移动物体对直方图没有影响。</code></pre><p>③直方图的可相加性</p><pre><code class="hljs">如果一图像由两个不连接的区域组成，并且每个区域的直方图已知，则整幅图像的直方图是该两个区域的直方图之和。</code></pre><h3 id="灰度直方图的用途">灰度直方图的用途</h3><p>用途① -可以用来判断灰度直方图的量化是否恰当---高质量的图像可以实现全部或几乎全部的灰度级利用</p><p>用途② - 用来判断图像影调的明暗以及曝光效果</p><p><imgsrc="https://pic.imgdb.cn/item/673af50dd29ded1a8c6e9839.png" /></p><p>用途③ - 判断图像对比度</p><p><imgsrc="https://pic.imgdb.cn/item/673af547d29ded1a8c6ed1f8.png" /></p><p>用途④ - 边界阈值选择</p><p>假设图像的背景是浅色，物体是深色，对应的灰度直方图是双峰形状，选择谷作为灰度阈值可以实现物体的边界分割</p><p><imgsrc="https://pic.imgdb.cn/item/673af5f8d29ded1a8c6f7cfc.png" /></p><h2 id="点运算">点运算</h2><h3 id="什么是点运算">什么是点运算？</h3><ul><li>对于一幅输入的图像，产生一幅输出图像，输出图像的每个像素点的灰度值由输入像素点决定，可以理解为点运算就是改变一幅图像的灰度直方图</li></ul><p>点运算完全由灰度变换函数 gray-scale transformation,GST）来确定，是一个输入灰度级和输出灰度级之间的映射关系</p><h3 id="点运算特点">点运算特点</h3><p>又称为对比度增强，对比度拉伸或曲线变换。是数字图像处理软件的重要组成部分</p><p>特点：</p><ul><li>输入像素和输出像素一一对应</li><li>不改变图像的空间关系（非几何运算）</li></ul><h3 id="线性点运算案例分析">线性点运算案例分析</h3><p><imgsrc="https://pic.imgdb.cn/item/673af829d29ded1a8c713873.png" /></p><p>DA为输入点的灰度值，DB为相应输出点的灰度值</p><ul><li>若a = 1, b = 0，图像灰度值不发生任何变化；</li><li>若a = 1, b ≠ 0，图像灰度值上移或下移，即图像整体变亮或变暗；</li><li>若a &gt; 1，变亮，图像对比度增强；</li><li>若 0 &lt; a &lt; 1，变暗，图像对比度减弱；</li><li>若 a &lt; 0，暗区域变亮，亮区域变暗。</li><li>若a = -1, b = 255，反色</li></ul><h3 id="非线性点运算案例分析-gst">非线性点运算案例分析 GST</h3><p><imgsrc="https://pic.imgdb.cn/item/673afd6bd29ded1a8c75a882.png" /></p><p>其中，DA为输入点的灰度值，DB为相应输出点的灰度值，Dm为灰度级的最大值，参数C定义了中间灰度范围内的增加（C&gt; 0）或减少（C &lt; 0）的程度</p><p><imgsrc="https://pic.imgdb.cn/item/673afed0d29ded1a8c774979.png" /></p><h3 id="直方图均衡化">直方图均衡化</h3><p>目的：</p><ul><li>使一输入图象转换为在每一灰度级上都有相同的像素点数（即输出的直方图是平的）</li></ul><p>功效：</p><ul><li>自动地增加像素灰度的分布范围，达到增强整个图像对比度的效果</li></ul><p>应用：</p><ul><li>广泛应用在图像增强处理中。<ul><li>①提高图像的主观质量，在处理艺术图像时非常有用；</li><li>②经过直方图均衡化的图像对二值化阈值选取十分有利；</li><li>③有利于进行基于直方图的图像匹配</li></ul></li></ul><p>可以使用 累计分布函数 作为 直方图 变换为 均匀分布 的转换函数</p><p>累计分布函数的计算公式为：</p><p><imgsrc="https://pic.imgdb.cn/item/673b05d1d29ded1a8c800a8a.png" /></p><p>DA为输入点的灰度值，DB为相应输出点的灰度值，Dm为灰度级的最大值（通常即255），A0为图像面积，H(k)为输入图像灰度直方图</p><h3 id="直方图均衡化的计算">直方图均衡化的计算</h3><p>这部分内容是期末考试必考内容，10分左右，一定要会计算</p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROS实验报告二</title>
    <link href="/2024/10/18/ros/ros-shi-yan-bao-gao-er/"/>
    <url>/2024/10/18/ros/ros-shi-yan-bao-gao-er/</url>
    
    <content type="html"><![CDATA[<h2 id="topic-与-service">Topic 与 Service</h2><p>关于ros中的服务通信机制，是一种同步通信，相较于话题通信，区别如下：</p><p><imgsrc="https://pic.imgdb.cn/item/6711d193d29ded1a8c1e69d6.png" /></p><p><ahref="https://blog.csdn.net/shouwangyunkai666/article/details/96454543">ROS学习笔记6~Topic(话题)和Service(服务)的区别</a></p><p><strong>话题通信适用于不断更新的数据传输相关的应用场景</strong></p><table><thead><tr><th>对比项</th><th>发布/订阅</th><th>请求/响应</th></tr></thead><tbody><tr><td>通信模式</td><td>发布者发布消息，订阅者接收消息，多对多关系</td><td>客户端向服务器发送请求，服务器返回响应，一对多关系（一个Server）</td></tr><tr><td>同步性</td><td>异步</td><td>同步</td></tr><tr><td>底层协议</td><td>ROSTCP/ROSUDP</td><td>ROSTCP/ROSUDP</td></tr><tr><td>缓冲区</td><td>有</td><td>无</td></tr><tr><td>实时性</td><td>弱</td><td>强</td></tr><tr><td>节点关系</td><td>多对多</td><td>一对多</td></tr><tr><td>通信数据</td><td>msg</td><td>srv</td></tr><tr><td>使用场景</td><td>连续高频的数据发布与接收，如雷达、里程计</td><td>偶尔调用或执行某一项特定功能，如拍照、语音识别</td></tr></tbody></table><h3 id="topic通信存在缺陷">Topic通信存在缺陷</h3><p>(1)无法确认发布信息是否被收到</p><p>(2)有些类型的消息（例如相机节点发布的消息），按照一定频率发布，通常会占用比较大的带宽，造成资源浪费</p><p><ahref="https://tr-ros-tutorial.readthedocs.io/zh-cn/latest/_source/basics/1.5_ROS_Service.html#id1">ROSService</a></p><h3 id="service通信的特点">Service通信的特点</h3><p>(1)Service使用 请求-查询式的通信模型，只有接受请求才执行服务，简单而且高效</p><p>(2)Service通信实现的是 一对一通信，信息流是双向的，包含两部分，Client与Server</p><p>(3)Service是 同步 通信方式</p><figure><img src="https://pic.imgdb.cn/item/6711d323d29ded1a8c2200d8.png"alt="ROS Node Service通信的图形化表示" /><figcaption aria-hidden="true">ROS NodeService通信的图形化表示</figcaption></figure><p>服务通信较之于话题通信更简单些，理论模型如下图所示，该模型中涉及到三个角色:</p><ul><li>ROS master(管理者)</li><li>Server(服务端)</li><li>Client(客户端)</li></ul><p><imgsrc="https://pic.imgdb.cn/item/6711d455d29ded1a8c23b843.png" /></p><p>参考链接：http://www.autolabor.com.cn/book/ROSTutorials/di-2-zhang-ros-jia-gou-she-ji/23-fu-wu-tong-xin.html</p><h2 id="实验二要求">实验二要求</h2><p>实现一个复杂的服务（services）通信，机器视觉识别行人，并返回其坐标。实验报告需提交PDF，文件命名方式：学号+专业姓名+实验1。提交日期/方式：11.1号通过机房电脑系统提交。</p><p>要求一：自定义通信srv格式，分析services的通信机制。</p><p>要求二：需使用ament_python构建功能包，实现行人识别，并返回其中心点。</p><p>要求三：需使用ament_CMake构建功能包，实现行人识别，并返回其中心点。</p><p>要求四：PDF附上关键功能代码。</p><p>这里的行人检测可以借助于Opencv自带的函数功能，链接如下：https://blog.csdn.net/hasque2019/article/details/124427656是一个运动物体检测的功能</p><h3 id="使用python实现">使用python实现</h3><h4 id="创建功能包">创建功能包</h4><p>在homework工作空间下创建功能包hw_2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs markdown">jr<span class="hljs-emphasis">_hu@hu1scp:~/homework/src$ ros2 pkg create hw_</span>2 --build-type ament<span class="hljs-emphasis">_python --dependencies rclpy</span><br><span class="hljs-emphasis">going to create a new package</span><br><span class="hljs-emphasis">package name: hw_</span>2<br>destination directory: /home/jr<span class="hljs-emphasis">_hu/homework/src</span><br><span class="hljs-emphasis">package format: 3</span><br><span class="hljs-emphasis">version: 0.0.0</span><br><span class="hljs-emphasis">description: TODO: Package description</span><br><span class="hljs-emphasis">maintainer: [&#x27;jr_</span>hu <span class="language-xml">&lt;jr_hu@todo.todo&gt;</span>&#x27;]<br>licenses: [&#x27;TODO: License declaration&#x27;]<br>build type: ament<span class="hljs-emphasis">_python</span><br><span class="hljs-emphasis">dependencies: [&#x27;rclpy&#x27;]</span><br><span class="hljs-emphasis">creating folder ./hw_</span>2<br>creating ./hw<span class="hljs-emphasis">_2/package.xml</span><br><span class="hljs-emphasis">creating source folder</span><br><span class="hljs-emphasis">creating folder ./hw_</span>2/hw<span class="hljs-emphasis">_2</span><br><span class="hljs-emphasis">creating ./hw_</span>2/setup.py<br>creating ./hw<span class="hljs-emphasis">_2/setup.cfg</span><br><span class="hljs-emphasis">creating folder ./hw_</span>2/resource<br>creating ./hw<span class="hljs-emphasis">_2/resource/hw_</span>2<br>creating ./hw<span class="hljs-emphasis">_2/hw_</span>2/<span class="hljs-strong">__init__</span>.py<br>creating folder ./hw<span class="hljs-emphasis">_2/test</span><br><span class="hljs-emphasis">creating ./hw_</span>2/test/test<span class="hljs-emphasis">_copyright.py</span><br><span class="hljs-emphasis">creating ./hw_</span>2/test/test<span class="hljs-emphasis">_flake8.py</span><br><span class="hljs-emphasis">creating ./hw_</span>2/test/test<span class="hljs-emphasis">_pep257.py</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">[WARNING]: Unknown license &#x27;TODO: License declaration&#x27;.  This has been set in the package.xml, but no LICENSE file has been created.</span><br><span class="hljs-emphasis">It is recommended to use one of the ament license identitifers:</span><br><span class="hljs-emphasis">Apache-2.0</span><br><span class="hljs-emphasis">BSL-1.0</span><br><span class="hljs-emphasis">BSD-2.0</span><br><span class="hljs-emphasis">BSD-2-Clause</span><br><span class="hljs-emphasis">BSD-3-Clause</span><br><span class="hljs-emphasis">GPL-3.0-only</span><br><span class="hljs-emphasis">LGPL-3.0-only</span><br><span class="hljs-emphasis">MIT</span><br><span class="hljs-emphasis">MIT-0</span><br></code></pre></td></tr></table></figure><p>进入hw_2文件夹下，使用code打开文件 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">jr<span class="hljs-emphasis">_hu@hu1scp:~/homework/src$ cd hw_</span>2/<br>jr<span class="hljs-emphasis">_hu@hu1scp:~/homework/src/hw_</span>2$ code ..<br>jr<span class="hljs-emphasis">_hu@hu1scp:~/homework/src/hw_</span>2$ <br></code></pre></td></tr></table></figure></p><h4 id="编写客户端代码">编写客户端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> rclpy                                            <span class="hljs-comment"># ROS2 Python接口库</span><br><span class="hljs-keyword">from</span> rclpy.node <span class="hljs-keyword">import</span> Node                           <span class="hljs-comment"># ROS2 节点类</span><br><span class="hljs-keyword">from</span> learning_interface.srv <span class="hljs-keyword">import</span> GetObjectPosition    <span class="hljs-comment"># 自定义的服务接口</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">objectClient</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)                                                                  <span class="hljs-comment"># ROS2节点父类初始化</span><br>        self.client = self.create_client(GetObjectPosition, <span class="hljs-string">&#x27;get_target_position&#x27;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.client.wait_for_service(timeout_sec=<span class="hljs-number">1.0</span>):<br>            self.get_logger().info(<span class="hljs-string">&#x27;service not available, waiting again...&#x27;</span>)<br>        self.request = GetObjectPosition.Request()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send_request</span>(<span class="hljs-params">self</span>):<br>        self.request.get = <span class="hljs-literal">True</span><br>        self.future = self.client.call_async(self.request)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">args=<span class="hljs-literal">None</span></span>):<br>    rclpy.init(args=args)                             <span class="hljs-comment"># ROS2 Python接口初始化</span><br>    node = objectClient(<span class="hljs-string">&quot;service_client&quot;</span>)       <span class="hljs-comment"># 创建ROS2节点对象并进行初始化</span><br>    node.send_request()<br>    <br>    <span class="hljs-keyword">while</span> rclpy.ok():<br>        rclpy.spin_once(node)<br><br>        <span class="hljs-keyword">if</span> node.future.done():<br>            <span class="hljs-keyword">try</span>:<br>                response = node.future.result()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                node.get_logger().info(<br>                    <span class="hljs-string">&#x27;Service call failed %r&#x27;</span> % (e,))<br>            <span class="hljs-keyword">else</span>:<br>                node.get_logger().info(<br>                    <span class="hljs-string">&#x27;Result of object position:\n x: %d y: %d&#x27;</span> %<br>                    (response.x, response.y))<br>            <span class="hljs-keyword">break</span><br>    node.destroy_node()                              <span class="hljs-comment"># 销毁节点对象</span><br>    rclpy.shutdown()                                 <span class="hljs-comment"># 关闭ROS2 Python接口</span><br></code></pre></td></tr></table></figure><h4 id="编写服务代码">编写服务代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> rclpy                                           <span class="hljs-comment"># ROS2 Python接口库</span><br><span class="hljs-keyword">from</span> rclpy.node <span class="hljs-keyword">import</span> Node                            <span class="hljs-comment"># ROS2 节点类</span><br><span class="hljs-keyword">from</span> sensor_msgs.msg <span class="hljs-keyword">import</span> Image                      <span class="hljs-comment"># 图像消息类型</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np                                     <span class="hljs-comment"># Python数值计算库</span><br><span class="hljs-keyword">from</span> cv_bridge <span class="hljs-keyword">import</span> CvBridge                         <span class="hljs-comment"># ROS与OpenCV图像转换类</span><br><span class="hljs-keyword">import</span> cv2                                             <span class="hljs-comment"># Opencv图像处理库</span><br><span class="hljs-keyword">from</span> learning_interface.srv <span class="hljs-keyword">import</span> GetObjectPosition   <span class="hljs-comment"># 自定义的服务接口</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageSubscriber</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)                                          <span class="hljs-comment"># ROS2节点父类初始化</span><br>        self.sub = self.create_subscription(<br>            Image, <span class="hljs-string">&#x27;image_raw&#x27;</span>, self.listener_callback, <span class="hljs-number">10</span>)             <span class="hljs-comment"># 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度）</span><br>        self.cv_bridge = CvBridge()                                     <span class="hljs-comment"># 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换</span><br><br>        self.srv = self.create_service(GetObjectPosition,               <span class="hljs-comment"># 创建服务器对象（接口类型、服务名、服务器回调函数）</span><br>                                       <span class="hljs-string">&#x27;get_target_position&#x27;</span>,<br>                                       self.object_position_callback)    <br>        self.objectX = <span class="hljs-number">0</span><br>        self.objectY = <span class="hljs-number">0</span>            <br>                          <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">graying</span>(<span class="hljs-params">self, image</span>):<br>        height,width = image.shape[:<span class="hljs-number">2</span>]  <span class="hljs-comment"># 获取图像高、宽</span><br>        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)   <span class="hljs-comment"># 图像从BGR颜色模型转换为灰度模型</span><br>           <br>        <span class="hljs-comment"># 应用sobel算子通过计算图像的梯度来实现边缘检测</span><br>        sobelx = cv2.Sobel(gray,cv2.CV_64F,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,ksize=<span class="hljs-number">3</span>)<br>        sobely = cv2.Sobel(gray,cv2.CV_64F,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,ksize=<span class="hljs-number">3</span>)<br>        gradient_magnitude = cv2.magnitude(sobelx,sobely)<br>        _, thresh = cv2.threshold(gradient_magnitude,<span class="hljs-number">20</span>,<span class="hljs-number">255</span>,cv2.THRESH_BINARY)  <span class="hljs-comment"># 阈值处理</span><br>        cv2.imshow(<span class="hljs-string">&#x27;sobel edge detection&#x27;</span>,thresh)<br>        cv2.waitKey(<span class="hljs-number">5</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">object_detect</span>(<span class="hljs-params">self, image</span>):<br>        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><span class="hljs-comment">#创建混合高斯模型用于背景建模</span><br>        fgbg = cv2.createBackgroundSubtractorMOG2()<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>            fgmask = fgbg.apply(image)<br>        <span class="hljs-comment">#形态学开运算去噪点</span><br>            fgmask = cv2.morphologyEx(fgmask, cv2.MORPH_OPEN, kernel)<br>        <span class="hljs-comment">#寻找视频中的轮廓</span><br>            im, contours, hierarchy = cv2.findContours(fgmask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)<br><br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> contours:<br>            <span class="hljs-comment">#计算各轮廓的周长</span><br>                perimeter = cv2.arcLength(c,<span class="hljs-literal">True</span>)<br>                <span class="hljs-keyword">if</span> perimeter &gt; <span class="hljs-number">188</span>:<br>                <span class="hljs-comment">#找到一个直矩形（不会旋转）</span><br>                    x,y,w,h = cv2.boundingRect(c)<br>                <span class="hljs-comment">#画出这个矩形</span><br>                    cv2.rectangle(frame,(x,y),(x+w,y+h),(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>),<span class="hljs-number">2</span>)<br>                    self.objectX = <span class="hljs-built_in">int</span>(x+w/<span class="hljs-number">2</span>)<br>                    self.objectY = <span class="hljs-built_in">int</span>(y+h/<span class="hljs-number">2</span>)<br><br>            cv2.imshow(<span class="hljs-string">&#x27;frame&#x27;</span>,frame)<br>            cv2.imshow(<span class="hljs-string">&#x27;fgmask&#x27;</span>, fgmask)<br>            k = cv2.waitKey(<span class="hljs-number">150</span>) &amp; <span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> k == <span class="hljs-number">27</span>:<br>                <span class="hljs-keyword">break</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">listener_callback</span>(<span class="hljs-params">self, data</span>):<br>        self.get_logger().info(<span class="hljs-string">&#x27;Receiving video frame&#x27;</span>)               <span class="hljs-comment"># 输出日志信息，提示已进入回调函数</span><br>        image = self.cv_bridge.imgmsg_to_cv2(data, <span class="hljs-string">&#x27;bgr8&#x27;</span>)            <span class="hljs-comment"># 将ROS的图像消息转化成OpenCV图像</span><br>        self.object_detect(image)                                     <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">object_position_callback</span>(<span class="hljs-params">self, request, response</span>):            <span class="hljs-comment"># 创建回调函数，执行收到请求后对数据的处理</span><br>        <span class="hljs-keyword">if</span> request.get == <span class="hljs-literal">True</span>:<br>            response.x = self.objectX                                 <span class="hljs-comment"># 目标物体的XY坐标</span><br>            response.y = self.objectY<br>            self.get_logger().info(<span class="hljs-string">&#x27;Object position\nx: %d y: %d&#x27;</span> %<br>                                   (response.x, response.y))          <span class="hljs-comment"># 输出日志信息，提示已经反馈</span><br>        <span class="hljs-keyword">else</span>:<br>            response.x = <span class="hljs-number">0</span><br>            response.y = <span class="hljs-number">0</span><br>            self.get_logger().info(<span class="hljs-string">&#x27;Invalid command&#x27;</span>)                 <span class="hljs-comment"># 输出日志信息，提示已经反馈</span><br>        <span class="hljs-keyword">return</span> response<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">args=<span class="hljs-literal">None</span></span>):                                 <span class="hljs-comment"># ROS2节点主入口main函数</span><br>    rclpy.init(args=args)                            <span class="hljs-comment"># ROS2 Python接口初始化</span><br>    node = ImageSubscriber(<span class="hljs-string">&quot;service_server&quot;</span>)         <span class="hljs-comment"># 创建ROS2节点对象并进行初始化</span><br>    rclpy.spin(node)                                 <span class="hljs-comment"># 循环等待ROS2退出</span><br>    node.destroy_node()                              <span class="hljs-comment"># 销毁节点对象</span><br>    rclpy.shutdown()                                 <span class="hljs-comment"># 关闭ROS2 Python接口</span><br></code></pre></td></tr></table></figure><p>出现报错是因为cv版本与上述参考博客的版本不一</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ValueError: not enough values to unpack (expected 3, got 2)<br></code></pre></td></tr></table></figure><p>在OpenCV 4.x版本中，cv2.findContours 函数只返回两个值：contours 和hierarchy。而在OpenCV 3.x版本中，它返回三个值：image, contours, 和hierarchy</p><h4 id="修正后的服务代码">修正后的服务代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> rclpy                                           <span class="hljs-comment"># ROS2 Python接口库</span><br><span class="hljs-keyword">from</span> rclpy.node <span class="hljs-keyword">import</span> Node                            <span class="hljs-comment"># ROS2 节点类</span><br><span class="hljs-keyword">from</span> sensor_msgs.msg <span class="hljs-keyword">import</span> Image                      <span class="hljs-comment"># 图像消息类型</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np                                     <span class="hljs-comment"># Python数值计算库</span><br><span class="hljs-keyword">from</span> cv_bridge <span class="hljs-keyword">import</span> CvBridge                         <span class="hljs-comment"># ROS与OpenCV图像转换类</span><br><span class="hljs-keyword">import</span> cv2                                             <span class="hljs-comment"># Opencv图像处理库</span><br><span class="hljs-keyword">from</span> learning_interface.srv <span class="hljs-keyword">import</span> GetObjectPosition   <span class="hljs-comment"># 自定义的服务接口</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageSubscriber</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)                                          <span class="hljs-comment"># ROS2节点父类初始化</span><br>        self.sub = self.create_subscription(<br>            Image, <span class="hljs-string">&#x27;image_raw&#x27;</span>, self.listener_callback, <span class="hljs-number">10</span>)             <span class="hljs-comment"># 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度）</span><br>        self.cv_bridge = CvBridge()                                     <span class="hljs-comment"># 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换</span><br><br>        self.srv = self.create_service(GetObjectPosition,               <span class="hljs-comment"># 创建服务器对象（接口类型、服务名、服务器回调函数）</span><br>                                       <span class="hljs-string">&#x27;get_target_position&#x27;</span>,<br>                                       self.object_position_callback)    <br>        self.objectX = <span class="hljs-number">0</span><br>        self.objectY = <span class="hljs-number">0</span>            <br>                          <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">graying</span>(<span class="hljs-params">self, image</span>):<br>        height, width = image.shape[:<span class="hljs-number">2</span>]  <span class="hljs-comment"># 获取图像高、宽</span><br>        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)   <span class="hljs-comment"># 图像从BGR颜色模型转换为灰度模型</span><br>           <br>        <span class="hljs-comment"># 应用sobel算子通过计算图像的梯度来实现边缘检测</span><br>        sobelx = cv2.Sobel(gray, cv2.CV_64F, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, ksize=<span class="hljs-number">3</span>)<br>        sobely = cv2.Sobel(gray, cv2.CV_64F, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, ksize=<span class="hljs-number">3</span>)<br>        gradient_magnitude = cv2.magnitude(sobelx, sobely)<br>        _, thresh = cv2.threshold(gradient_magnitude, <span class="hljs-number">20</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)  <span class="hljs-comment"># 阈值处理</span><br>        cv2.imshow(<span class="hljs-string">&#x27;sobel edge detection&#x27;</span>, thresh)<br>        cv2.waitKey(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">object_detect</span>(<span class="hljs-params">self, image</span>):<br>        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br>        <span class="hljs-comment"># 创建混合高斯模型用于背景建模</span><br>        fgbg = cv2.createBackgroundSubtractorMOG2()<br><br>        fgmask = fgbg.apply(image)<br>        <span class="hljs-comment"># 形态学开运算去噪点</span><br>        fgmask = cv2.morphologyEx(fgmask, cv2.MORPH_OPEN, kernel)<br>        <span class="hljs-comment"># 寻找视频中的轮廓</span><br>        contours, hierarchy = cv2.findContours(fgmask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)<br><br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> contours:<br>            <span class="hljs-comment"># 计算各轮廓的周长</span><br>            perimeter = cv2.arcLength(c, <span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">if</span> perimeter &gt; <span class="hljs-number">2236.5</span>:   <span class="hljs-comment"># 这个参数需要根据设备和场景调整适配</span><br>                <span class="hljs-comment"># 找到一个直矩形（不会旋转）</span><br>                x, y, w, h = cv2.boundingRect(c)<br>                <span class="hljs-comment"># 画出这个矩形</span><br>                cv2.rectangle(image, (x, y), (x + w, y + h), (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br>                self.objectX = <span class="hljs-built_in">int</span>(x + w / <span class="hljs-number">2</span>)<br>                self.objectY = <span class="hljs-built_in">int</span>(y + h / <span class="hljs-number">2</span>)<br><br>        cv2.imshow(<span class="hljs-string">&#x27;frame&#x27;</span>, image)<br>        cv2.imshow(<span class="hljs-string">&#x27;fgmask&#x27;</span>, fgmask)<br>        k = cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">27</span>:<br>            cv2.destroyAllWindows()<br>            rclpy.shutdown()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">listener_callback</span>(<span class="hljs-params">self, data</span>):<br>        self.get_logger().info(<span class="hljs-string">&#x27;Receiving video frame&#x27;</span>)               <span class="hljs-comment"># 输出日志信息，提示已进入回调函数</span><br>        image = self.cv_bridge.imgmsg_to_cv2(data, <span class="hljs-string">&#x27;bgr8&#x27;</span>)            <span class="hljs-comment"># 将ROS的图像消息转化成OpenCV图像</span><br>        self.object_detect(image)                                     <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">object_position_callback</span>(<span class="hljs-params">self, request, response</span>):            <span class="hljs-comment"># 创建回调函数，执行收到请求后对数据的处理</span><br>        <span class="hljs-keyword">if</span> request.get == <span class="hljs-literal">True</span>:<br>            response.x = self.objectX                                 <span class="hljs-comment"># 目标物体的XY坐标</span><br>            response.y = self.objectY<br>            self.get_logger().info(<span class="hljs-string">&#x27;Object position\nx: %d y: %d&#x27;</span> %<br>                                   (response.x, response.y))          <span class="hljs-comment"># 输出日志信息，提示已经反馈</span><br>        <span class="hljs-keyword">else</span>:<br>            response.x = <span class="hljs-number">0</span><br>            response.y = <span class="hljs-number">0</span><br>            self.get_logger().info(<span class="hljs-string">&#x27;Invalid command&#x27;</span>)                 <span class="hljs-comment"># 输出日志信息，提示已经反馈</span><br>        <span class="hljs-keyword">return</span> response<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">args=<span class="hljs-literal">None</span></span>):                                 <span class="hljs-comment"># ROS2节点主入口main函数</span><br>    rclpy.init(args=args)                            <span class="hljs-comment"># ROS2 Python接口初始化</span><br>    node = ImageSubscriber(<span class="hljs-string">&quot;service_server&quot;</span>)         <span class="hljs-comment"># 创建ROS2节点对象并进行初始化</span><br>    rclpy.spin(node)                                 <span class="hljs-comment"># 循环等待ROS2退出</span><br>    node.destroy_node()                              <span class="hljs-comment"># 销毁节点对象</span><br>    rclpy.shutdown()                                 <span class="hljs-comment"># 关闭ROS2 Python接口</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>因为这个参数perimeter的阈值一直找不到合适的，多次尝试后，效果并不好，换一个尝试一下</p><h4 id="另一种思路的服务代码">另一种思路的服务代码</h4><p>参考链接：</p><p>https://blog.csdn.net/m0_57442556/article/details/141415970?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=141415970&amp;sharerefer=PC&amp;sharesource=m0_74235619&amp;sharefrom=from_link</p><p>这种行人检测效果略好一点，调相机或者本地视频都可以实现，需要注意视频的话最好用绝对地址</p><p>虽然没有达到理想的效果，但是也能凑合用,en...</p><p><imgsrc="https://pic.imgdb.cn/item/672335bdd29ded1a8c0fb40b.png" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> rclpy                                           <span class="hljs-comment"># ROS2 Python接口库</span><br><span class="hljs-keyword">from</span> rclpy.node <span class="hljs-keyword">import</span> Node                            <span class="hljs-comment"># ROS2 节点类</span><br><span class="hljs-keyword">from</span> cv_bridge <span class="hljs-keyword">import</span> CvBridge                         <span class="hljs-comment"># ROS与OpenCV图像转换类</span><br><span class="hljs-keyword">import</span> cv2                                             <span class="hljs-comment"># OpenCV图像处理库</span><br><span class="hljs-keyword">from</span> learning_interface.srv <span class="hljs-keyword">import</span> GetObjectPosition   <span class="hljs-comment"># 自定义的服务接口</span><br><span class="hljs-keyword">import</span> time                                            <span class="hljs-comment"># 用于添加延迟</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VideoProcessor</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)                                          <span class="hljs-comment"># ROS2节点父类初始化</span><br>        self.cv_bridge = CvBridge()                                     <span class="hljs-comment"># 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换</span><br><br>        self.srv = self.create_service(GetObjectPosition,               <span class="hljs-comment"># 创建服务器对象（接口类型、服务名、服务器回调函数）</span><br>                                       <span class="hljs-string">&#x27;get_target_position&#x27;</span>,<br>                                       self.object_position_callback)    <br>        self.objectX = <span class="hljs-number">0</span><br>        self.objectY = <span class="hljs-number">0</span><br>        self.video_path = <span class="hljs-string">&#x27;/home/jr_hu/homework_1/src/hw_2/hw_2/detect.mp4&#x27;</span>                      <span class="hljs-comment"># 视频文件路径</span><br>        self.cap = cv2.VideoCapture(self.video_path)                    <span class="hljs-comment"># 打开本地视频文件</span><br>        self.timer = self.create_timer(<span class="hljs-number">0.0002</span>, self.process_frame)           <span class="hljs-comment"># 创建定时器，定期处理视频帧</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">detect</span>(<span class="hljs-params">self, image, winStride, padding, scale, useMeanshiftGrouping</span>):<br>        hog = cv2.HOGDescriptor()   <span class="hljs-comment"># 初始化方向梯度直方图描述器</span><br>        hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())  <span class="hljs-comment"># 设置SVM为一个预先训练好的行人检测器</span><br>        (rects, weights) = hog.detectMultiScale(image,<br>                                                winStride=winStride,<br>                                                padding=padding,<br>                                                scale=scale,<br>                                                useMeanshiftGrouping=useMeanshiftGrouping)    <br>        <span class="hljs-keyword">for</span> (x, y, w, h) <span class="hljs-keyword">in</span> rects:  <br>            cv2.rectangle(image, (x, y), (x + w, y + h), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>            self.objectX = <span class="hljs-built_in">int</span>(x + w / <span class="hljs-number">2</span>)<br>            self.objectY = <span class="hljs-built_in">int</span>(y + h / <span class="hljs-number">2</span>)<br>            <br>        cv2.imshow(<span class="hljs-string">&quot;Detected People&quot;</span>, image)   <span class="hljs-comment"># 显示检测结果</span><br>        cv2.waitKey(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_frame</span>(<span class="hljs-params">self</span>):<br>        ret, frame = self.cap.read()           <span class="hljs-comment"># 从视频捕获一帧</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br>            self.get_logger().info(<span class="hljs-string">&#x27;Video ended, restarting...&#x27;</span>)  <span class="hljs-comment"># 视频结束，重新打开视频文件</span><br>            self.cap.release()                  <span class="hljs-comment"># 释放当前视频文件</span><br>            self.cap = cv2.VideoCapture(self.video_path)  <span class="hljs-comment"># 重新打开视频文件</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.cap.isOpened():<br>                self.get_logger().error(<span class="hljs-string">f&#x27;Failed to restart the video: <span class="hljs-subst">&#123;self.video_path&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 如果重新打开失败，输出错误信息</span><br>                <span class="hljs-keyword">return</span><br><br>            ret, frame = self.cap.read()        <span class="hljs-comment"># 重新读取第一帧</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br>                self.get_logger().error(<span class="hljs-string">&#x27;Failed to read the first frame after restarting.&#x27;</span>)  <span class="hljs-comment"># 如果重新读取第一帧失败，输出错误信息</span><br>                <span class="hljs-keyword">return</span><br><br>        winStride = (<span class="hljs-number">8</span>, <span class="hljs-number">8</span>)                     <span class="hljs-comment"># 每次行移动8个像素点，列移动8个像素点</span><br>        padding = (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)                       <span class="hljs-comment"># 边缘添加像素点 通常可取(8, 8) (16, 16) (24, 24) (32, 32)</span><br>        scale = <span class="hljs-number">1.01</span>                           <span class="hljs-comment"># 构造金字塔结构采取的比例值</span><br>        useMeanshiftGrouping = <span class="hljs-literal">False</span>           <span class="hljs-comment"># 消除重叠</span><br>        self.detect(frame, winStride, padding, scale, useMeanshiftGrouping)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">object_position_callback</span>(<span class="hljs-params">self, request, response</span>):            <span class="hljs-comment"># 创建回调函数，执行收到请求后对数据的处理</span><br>        <span class="hljs-keyword">if</span> request.get == <span class="hljs-literal">True</span>:<br>            response.x = self.objectX                                 <span class="hljs-comment"># 目标物体的XY坐标</span><br>            response.y = self.objectY<br>            self.get_logger().info(<span class="hljs-string">&#x27;Object position\nx: %d y: %d&#x27;</span> %<br>                                   (response.x, response.y))         <br>        <span class="hljs-keyword">else</span>:<br>            response.x = <span class="hljs-number">0</span><br>            response.y = <span class="hljs-number">0</span><br>            self.get_logger().info(<span class="hljs-string">&#x27;Invalid command&#x27;</span>)              <br>        <span class="hljs-keyword">return</span> response<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">args=<span class="hljs-literal">None</span></span>):                                 <span class="hljs-comment"># ROS2节点主入口main函数</span><br>    rclpy.init(args=args)                            <span class="hljs-comment"># ROS2 Python接口初始化</span><br>    node = VideoProcessor(<span class="hljs-string">&quot;video_processor&quot;</span>)         <span class="hljs-comment"># 创建ROS2节点对象并进行初始化</span><br>    rclpy.spin(node)                                 <span class="hljs-comment"># 循环等待ROS2退出</span><br>    node.cap.release()                               <span class="hljs-comment"># 释放视频文件</span><br>    node.destroy_node()                              <span class="hljs-comment"># 销毁节点对象</span><br>    cv2.destroyAllWindows()                          <span class="hljs-comment"># 关闭所有OpenCV窗口</span><br>    rclpy.shutdown()                                 <span class="hljs-comment"># 关闭ROS2 Python接口</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="使用cpp实现">使用cpp实现</h3><h4 id="安装必要的依赖">安装必要的依赖</h4><p>确保安装了ROS2和OpenCV，可以使用以下命令来安装OpenCV</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install ros-humble-image-common<br>sudo apt-get install libopencv-dev<br></code></pre></td></tr></table></figure><p><imgsrc="https://pic.imgdb.cn/item/67233551d29ded1a8c0f403d.png" /></p><h4 id="创建ros2工作空间">创建ROS2工作空间</h4><p>同前面的实验</p><h4 id="创建ros2包">创建ROS2包</h4><p>在ROS2工作空间中，创建一个名为 hw_2_cpp 的新包，并添加所需的依赖项。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ros2 pkg create --build-type ament_cmake hw_2_cpp --dependencies rclcpp cv_bridge sensor_msgs<br></code></pre></td></tr></table></figure> <imgsrc="https://pic.imgdb.cn/item/67233535d29ded1a8c0f22de.png" /></p><h4 id="编写c代码">编写C++代码</h4><p>在 hw_2_cpp 包中创建一个源文件 src/hw_2_cpp.cpp，并添加代码</p><p><imgsrc="https://pic.imgdb.cn/item/67233540d29ded1a8c0f2e83.png" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;rclcpp/rclcpp.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cv_bridge/cv_bridge.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sensor_msgs/msg/image.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/objdetect/objdetect.hpp&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::chrono_literals;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VideoProcessorNode</span> : <span class="hljs-keyword">public</span> rclcpp::Node &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">VideoProcessorNode</span>() : <span class="hljs-built_in">Node</span>(<span class="hljs-string">&quot;video_processor&quot;</span>) &#123;<br>        <span class="hljs-comment">// 初始化HOG描述符</span><br>        hog = cv::<span class="hljs-built_in">HOGDescriptor</span>();<br>        hog.<span class="hljs-built_in">setSVMDetector</span>(cv::HOGDescriptor::<span class="hljs-built_in">getDefaultPeopleDetector</span>());<br><br>        <span class="hljs-comment">// 打开视频文件</span><br>        video_path = <span class="hljs-string">&quot;/home/jr_hu/homework_1/src/hw_2/hw_2/detect.mp4&quot;</span>;<br>        cap.<span class="hljs-built_in">open</span>(video_path);<br>        <span class="hljs-keyword">if</span> (!cap.<span class="hljs-built_in">isOpened</span>()) &#123;<br>            <span class="hljs-built_in">RCLCPP_ERROR</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">get_logger</span>(), <span class="hljs-string">&quot;Failed to open video file: %s&quot;</span>, video_path.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 创建定时器，定期处理视频帧</span><br>        timer = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">create_wall_timer</span>(<span class="hljs-number">100</span>ms, std::<span class="hljs-built_in">bind</span>(&amp;VideoProcessorNode::process_frame, <span class="hljs-keyword">this</span>));<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    cv::HOGDescriptor hog;<br>    cv::VideoCapture cap;<br>    std::string video_path;<br>    rclcpp::TimerBase::SharedPtr timer;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_frame</span><span class="hljs-params">()</span> </span>&#123;<br>        cv::Mat frame;<br>        <span class="hljs-type">bool</span> ret = cap.<span class="hljs-built_in">read</span>(frame);<br>        <span class="hljs-keyword">if</span> (!ret) &#123;<br>            <span class="hljs-built_in">RCLCPP_INFO</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">get_logger</span>(), <span class="hljs-string">&quot;Video ended, restarting...&quot;</span>);<br>            cap.<span class="hljs-built_in">release</span>();<br>            std::this_thread::<span class="hljs-built_in">sleep_for</span>(<span class="hljs-number">1</span>s);<br>            cap.<span class="hljs-built_in">open</span>(video_path);<br>            <span class="hljs-keyword">if</span> (!cap.<span class="hljs-built_in">isOpened</span>()) &#123;<br>                <span class="hljs-built_in">RCLCPP_ERROR</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">get_logger</span>(), <span class="hljs-string">&quot;Failed to restart the video: %s&quot;</span>, video_path.<span class="hljs-built_in">c_str</span>());<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            ret = cap.<span class="hljs-built_in">read</span>(frame);<br>            <span class="hljs-keyword">if</span> (!ret) &#123;<br>                <span class="hljs-built_in">RCLCPP_ERROR</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">get_logger</span>(), <span class="hljs-string">&quot;Failed to read the first frame after restarting.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">detect</span>(frame);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">detect</span><span class="hljs-params">(cv::Mat &amp;image)</span> </span>&#123;<br>        std::vector&lt;cv::Rect&gt; rects;<br>        std::vector&lt;<span class="hljs-type">double</span>&gt; weights;<br>        hog.<span class="hljs-built_in">detectMultiScale</span>(image, rects, weights);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;rect : rects) &#123;<br>            cv::<span class="hljs-built_in">rectangle</span>(image, rect, cv::<span class="hljs-built_in">Scalar</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>);<br>            <span class="hljs-type">int</span> objectX = rect.x + rect.width / <span class="hljs-number">2</span>;<br>            <span class="hljs-type">int</span> objectY = rect.y + rect.height / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">RCLCPP_INFO</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">get_logger</span>(), <span class="hljs-string">&quot;Object position: x=%d, y=%d&quot;</span>, objectX, objectY);<br>        &#125;<br><br>        cv::<span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Detected People&quot;</span>, image);<br>        cv::<span class="hljs-built_in">waitKey</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span> </span>&#123;<br>    rclcpp::<span class="hljs-built_in">init</span>(argc, argv);<br>    rclcpp::<span class="hljs-built_in">spin</span>(std::<span class="hljs-built_in">make_shared</span>&lt;VideoProcessorNode&gt;());<br>    rclcpp::<span class="hljs-built_in">shutdown</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="编译和运行">编译和运行</h4><p>编辑 CMakeLists.txt 文件，确保包含必要的编译选项</p><p>发现出现了报错， CMake 无法找到 OpenCV4 的配置文件</p><p>直接全文件搜索：opencvconfig 得到路径/usr/lib/x86_64-linux-gnu/cmake/opencv4</p><p>就可以在CMakeLists.txt文件里手动设置 CMAKE_PREFIX_PATH 环境变量<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置 CMAKE_PREFIX_PATH</span><br><span class="hljs-built_in">set</span>(CMAKE_PREFIX_PATH <span class="hljs-variable">$&#123;CMAKE_PREFIX_PATH&#125;</span> /usr/lib/x86_64-linux-gnu/cmake/opencv4)<br></code></pre></td></tr></table></figure></p><p>同时在终端设置CMAKE_PREFIX_PATH 环境变量 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CMAKE_PREFIX_PATH=<span class="hljs-variable">$CMAKE_PREFIX_PATH</span>:/usr/lib/x86_64-linux-gnu/cmake/opencv4<br></code></pre></td></tr></table></figure></p><p>CMakeLists.txt完整代码</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.8</span>)<br><span class="hljs-keyword">project</span>(hw_2_cpp)<br><br><span class="hljs-comment"># 设置 CMAKE_PREFIX_PATH</span><br><span class="hljs-keyword">set</span>(CMAKE_PREFIX_PATH <span class="hljs-variable">$&#123;CMAKE_PREFIX_PATH&#125;</span> /usr/lib/x86_64-linux-gnu/cmake/opencv4)<br><br><span class="hljs-keyword">if</span>(CMAKE_COMPILER_IS_GNUCXX <span class="hljs-keyword">OR</span> CMAKE_CXX_COMPILER_ID <span class="hljs-keyword">MATCHES</span> <span class="hljs-string">&quot;Clang&quot;</span>)<br>  <span class="hljs-keyword">add_compile_options</span>(-Wall -Wextra -Wpedantic)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># find dependencies</span><br><span class="hljs-keyword">find_package</span>(ament_cmake REQUIRED)<br><span class="hljs-keyword">find_package</span>(rclcpp REQUIRED)<br><span class="hljs-keyword">find_package</span>(cv_bridge REQUIRED)<br><span class="hljs-keyword">find_package</span>(sensor_msgs REQUIRED)<br><span class="hljs-keyword">find_package</span>(OpenCV REQUIRED)  <br><br><span class="hljs-keyword">add_executable</span>(hw_2_cpp src/hw_2_cpp.cpp)<br><br>ament_target_dependencies(hw_2_cpp rclcpp cv_bridge sensor_msgs)<br><br><span class="hljs-keyword">target_link_libraries</span>(hw_2_cpp <span class="hljs-variable">$&#123;OpenCV_LIBS&#125;</span>)  <span class="hljs-comment"># 链接 OpenCV 库</span><br><br><span class="hljs-keyword">install</span>(TARGETS<br>  hw_2_cpp<br>  DESTINATION lib/<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>)<br><br><span class="hljs-keyword">if</span>(BUILD_TESTING)<br>  <span class="hljs-keyword">find_package</span>(ament_lint_auto REQUIRED)<br>  <span class="hljs-comment"># the following line skips the linter which checks for copyrights</span><br>  <span class="hljs-comment"># comment the line when a copyright and license is added to all source files</span><br>  <span class="hljs-keyword">set</span>(ament_cmake_copyright_FOUND <span class="hljs-keyword">TRUE</span>)<br>  <span class="hljs-comment"># the following line skips cpplint (only works in a git repo)</span><br>  <span class="hljs-comment"># comment the line when this package is in a git repo and when</span><br>  <span class="hljs-comment"># a copyright and license is added to all source files</span><br>  <span class="hljs-keyword">set</span>(ament_cmake_cpplint_FOUND <span class="hljs-keyword">TRUE</span>)<br>  ament_lint_auto_find_test_dependencies()<br><span class="hljs-keyword">endif</span>()<br><br>ament_package()<br></code></pre></td></tr></table></figure><p>清理构建目录并重新构建 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入工作空间</span><br><span class="hljs-built_in">rm</span> -rf src/hw_2_cpp/build<br>colcon build --packages-select hw_2_cpp<br><span class="hljs-built_in">source</span> install/setup.bash<br>ros2 run hw_2_cpp hw_2_cpp<br></code></pre></td></tr></table></figure></p><p>运行结果展示 <imgsrc="https://pic.imgdb.cn/item/67233578d29ded1a8c0f6876.png" /></p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实验报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MercuryX1调试手册</title>
    <link href="/2024/10/17/mercuryx1-diao-shi-shou-ce/"/>
    <url>/2024/10/17/mercuryx1-diao-shi-shou-ce/</url>
    
    <content type="html"><![CDATA[<h2 id="参考链接">参考链接：</h2><ul><li>https://docs.elephantrobotics.com/docs/Mercury_X1_cn/7-ExamplesRobotsUsing/大象机器人ROS开发手册参考</li><li>https://docs.elephantrobotics.com/docs/gitbook/7-ApplicationBasePython/基于python开发使用</li><li>http://github.com/elephantrobotics/mercury_x1_ros ROS1项目地址</li><li>https://github.com/elephantrobotics/pymycobot机械臂API驱动库地址</li><li>https://www.cnblogs.com/yanqingyang/p/9823527.html解决了<code>roscore</code>端口不匹配的问题</li></ul><h3 id="与初始化上电下电有关">与初始化、上电下电有关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymycobot <span class="hljs-keyword">import</span> Mercury<br><br><span class="hljs-comment">#  初始化</span><br>ml = Mercury(<span class="hljs-string">&#x27;/dev/left_arm&#x27;</span>)<br>mr = Mercury(<span class="hljs-string">&#x27;/dev/right_arm&#x27;</span>)<br><br><span class="hljs-comment">#  上电</span><br>ml.power_on()<br>mr.power_on()<br><br><span class="hljs-comment">#  断电</span><br>ml.power_off()<br>mr.power_off()<br></code></pre></td></tr></table></figure><h3 id="与关节控制有关">与关节控制有关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  释放所有关节</span><br>release_all_servos()<br><br><span class="hljs-comment">#  锁上所有关节</span><br>focus_all_servos()<br></code></pre></td></tr></table></figure><h3 id="与关节角度有关">与关节角度有关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  获取全关节角度</span><br>get_angles()<br><br><span class="hljs-comment">#  获取单关节角度</span><br>get_angle()<br><br><span class="hljs-comment"># 控制全关节旋转</span><br>send_angles(angles, speed)<br><br><span class="hljs-comment">#  控制单关节旋转</span><br>send_angle(<span class="hljs-built_in">id</span>, degree, speed)<br></code></pre></td></tr></table></figure><h3 id="轴版本手臂关节活动范围">7轴版本手臂关节活动范围</h3><table><thead><tr><th>关节 id</th><th>角度</th></tr></thead><tbody><tr><td>1</td><td>-165 ~ 165</td></tr><tr><td>2</td><td>-55 ~ 95</td></tr><tr><td>3</td><td>-165 ~ 165</td></tr><tr><td>4</td><td>-180 ~ 10</td></tr><tr><td>5</td><td>-165 ~ 165</td></tr><tr><td>6</td><td>-20 ~ 273</td></tr><tr><td>7</td><td>-180 ~ 180</td></tr></tbody></table><h3 id="与base坐标有关">与Base坐标有关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取机器人Base坐标</span><br>get_base_coords()<br><br><span class="hljs-comment"># 控制机械臂末端沿指定轴运动到目标位置</span><br>send_base_coord(axis, coord, speed)<br><span class="hljs-comment"># axis：轴号，1-6对应[x, y, z, rx, ry, rz]</span><br><span class="hljs-comment"># coord: 坐标值(float)</span><br><span class="hljs-comment"># speed: (int) 1-100</span><br><br><span class="hljs-comment"># 控制机械臂末端运动到指定坐标</span><br>send_base_coords(coords, speed, mode)<br><span class="hljs-comment"># coords: ： 坐标值列表 [x,y,z,rx,ry,rz],length6</span><br><span class="hljs-comment"># 速度(int): 1 ~ 100</span><br></code></pre></td></tr></table></figure><h3 id="与异常检查有关">与异常检查有关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  获取上位机状态</span><br>get_robot_status()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习实验6</title>
    <link href="/2024/10/16/ji-qi-xue-xi/ji-qi-xue-xi-shi-yan-6/"/>
    <url>/2024/10/16/ji-qi-xue-xi/ji-qi-xue-xi-shi-yan-6/</url>
    
    <content type="html"><![CDATA[<p>本次实验需要构造一个简单的 <code>softmax</code>分类模型，先复习一下基础知识</p><p><imgsrc="https://pic.imgdb.cn/item/670f9ae6d29ded1a8c2de4eb.png" /></p><p>利用softmax进行预测，得到预测的分类结果</p><p><imgsrc="https://pic.imgdb.cn/item/670f9b13d29ded1a8c2e11e6.png" /></p><p>对于损失函数的定义如下：</p><p>对损失函数的定义需要重点关注！！！</p><p><imgsrc="https://pic.imgdb.cn/item/670f9b68d29ded1a8c2e6d37.png" /></p><p>有了损失函数和梯度就可以构建模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cost_gradient</span>(<span class="hljs-params">W, X, Y, n</span>):<br>    G = (<span class="hljs-number">1</span> / n) * np.dot(X.T, predict(X, W) - Y)  <span class="hljs-comment"># 计算梯度</span><br>    j = -np.<span class="hljs-built_in">sum</span>(Y * np.log(predict(X, W))) / n<br><br>    <span class="hljs-keyword">return</span> (j, G)<br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Softmax</span>(<span class="hljs-params">z</span>):<br>    exp_scores = np.exp(z)<br>    <span class="hljs-keyword">return</span> exp_scores / np.<span class="hljs-built_in">sum</span>(exp_scores, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">X,W</span>):<br>    <span class="hljs-keyword">return</span> Softmax(np.dot(X,W))    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cost_gradient</span>(<span class="hljs-params">W, X, Y, n</span>):<br>    G = (<span class="hljs-number">1</span> / n) * np.dot(X.T, predict(X, W) - Y)<br>    j = -np.<span class="hljs-built_in">sum</span>(Y * np.log(predict(X, W))) / n<br><br>    <span class="hljs-keyword">return</span> (j, G)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">W, X, Y, n, lr, iterations</span>):<br>    J = np.zeros([iterations, <span class="hljs-number">1</span>])<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>        (J[i], G) = cost_gradient(W, X, Y, n)<br>        W = W - lr*G<br><br>    <span class="hljs-keyword">return</span> (W,J)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">W, X, Y</span>):<br>    Y_hat = predict(X,W)  <span class="hljs-comment">###### Output Y_hat by the trained model</span><br>    pred = np.argmax(Y_hat, axis=<span class="hljs-number">1</span>)<br>    label = np.argmax(Y, axis=<span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>-np.mean(np.equal(pred, label)))<br><br>iterations = <span class="hljs-number">150000</span> <span class="hljs-comment">###### Training loops</span><br>lr = <span class="hljs-number">0.00025</span> <span class="hljs-comment">###### Learning rate</span><br><br>data = np.loadtxt(<span class="hljs-string">&#x27;SR.txt&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br>n = data.shape[<span class="hljs-number">0</span>]<br>X = np.concatenate([np.ones([n, <span class="hljs-number">1</span>]),<br>                    np.expand_dims(data[:,<span class="hljs-number">0</span>], axis=<span class="hljs-number">1</span>),<br>                    np.expand_dims(data[:,<span class="hljs-number">1</span>], axis=<span class="hljs-number">1</span>),<br>                    np.expand_dims(data[:,<span class="hljs-number">2</span>], axis=<span class="hljs-number">1</span>)],<br>                   axis=<span class="hljs-number">1</span>)<br>Y = data[:, <span class="hljs-number">3</span>].astype(np.int32)<br>c = np.<span class="hljs-built_in">max</span>(Y)+<span class="hljs-number">1</span><br>Y = np.eye(c)[Y]<br><br>W = np.random.random([X.shape[<span class="hljs-number">1</span>], c])<br><br>(W,J) = train(W, X, Y, n, lr, iterations)<br><br>plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(iterations), J)<br><br><span class="hljs-built_in">print</span>(error(W,X,Y))<br><span class="hljs-comment"># 0.021333333333333315</span><br></code></pre></td></tr></table></figure><p>loss 曲线</p><p><imgsrc="https://pic.imgdb.cn/item/670f9cc7d29ded1a8c2fc119.png" /></p><p>经过训练，模型在测试集上的正确率是 0.0213左右，但是这里想要设计一个优化算法用来寻找最优的学习率，常见的寻参方法有网格搜索或随机搜索</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Softmax</span>(<span class="hljs-params">z</span>):<br>    exp_scores = np.exp(z - np.<span class="hljs-built_in">max</span>(z, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>))  <span class="hljs-comment"># 防止数值溢出</span><br>    <span class="hljs-keyword">return</span> exp_scores / np.<span class="hljs-built_in">sum</span>(exp_scores, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">X, W</span>):<br>    <span class="hljs-keyword">return</span> Softmax(np.dot(X, W))    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cost_gradient</span>(<span class="hljs-params">W, X, Y, n</span>):<br>    G = (<span class="hljs-number">1</span> / n) * np.dot(X.T, predict(X, W) - Y)<br>    j = -np.<span class="hljs-built_in">sum</span>(Y * np.log(predict(X, W))) / n<br><br>    <span class="hljs-keyword">return</span> (j, G)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">W, X, Y, n, lr, iterations</span>):<br>    J = np.zeros([iterations, <span class="hljs-number">1</span>])<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>        (J[i], G) = cost_gradient(W, X, Y, n)<br>        W = W - lr * G<br><br>    <span class="hljs-keyword">return</span> (W, J)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">W, X, Y</span>):<br>    Y_hat = predict(X, W)<br>    pred = np.argmax(Y_hat, axis=<span class="hljs-number">1</span>)<br>    label = np.argmax(Y, axis=<span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> - np.mean(np.equal(pred, label)))<br><br><span class="hljs-comment"># 参数设置</span><br>iterations = <span class="hljs-number">200000</span>  <span class="hljs-comment"># 训练轮数</span><br>learning_rates = [<span class="hljs-number">0.0001</span>, <span class="hljs-number">0.00025</span>, <span class="hljs-number">0.0005</span>, <span class="hljs-number">0.001</span>, <span class="hljs-number">0.002</span>]  <span class="hljs-comment"># 学习率候选列表</span><br><br><span class="hljs-comment"># 加载数据</span><br>data = np.loadtxt(<span class="hljs-string">&#x27;SR.txt&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br>n = data.shape[<span class="hljs-number">0</span>]<br>X = np.concatenate([np.ones([n, <span class="hljs-number">1</span>]),<br>                    np.expand_dims(data[:, <span class="hljs-number">0</span>], axis=<span class="hljs-number">1</span>),<br>                    np.expand_dims(data[:, <span class="hljs-number">1</span>], axis=<span class="hljs-number">1</span>),<br>                    np.expand_dims(data[:, <span class="hljs-number">2</span>], axis=<span class="hljs-number">1</span>)],<br>                   axis=<span class="hljs-number">1</span>)<br>Y = data[:, <span class="hljs-number">3</span>].astype(np.int32)<br>c = np.<span class="hljs-built_in">max</span>(Y) + <span class="hljs-number">1</span><br>Y = np.eye(c)[Y]<br><br><span class="hljs-comment"># 初始化权重</span><br>W = np.random.random([X.shape[<span class="hljs-number">1</span>], c])<br><br><span class="hljs-comment"># 网格搜索最佳学习率</span><br>best_lr = <span class="hljs-literal">None</span><br>best_error = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br><span class="hljs-keyword">for</span> lr <span class="hljs-keyword">in</span> learning_rates:<br>    (W, J) = train(W.copy(), X, Y, n, lr, iterations)<br>    err = error(W, X, Y)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Learning rate <span class="hljs-subst">&#123;lr&#125;</span>: Error = <span class="hljs-subst">&#123;err&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> err &lt; best_error:<br>        best_lr = lr<br>        best_error = err<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Best learning rate: <span class="hljs-subst">&#123;best_lr&#125;</span>, Best error: <span class="hljs-subst">&#123;best_error&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 使用最佳学习率重新训练模型</span><br>(W, J) = train(W, X, Y, n, best_lr, iterations)<br><br><span class="hljs-comment"># 绘制损失函数变化图</span><br>plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(iterations), J)<br>plt.xlabel(<span class="hljs-string">&#x27;Iterations&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Loss&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Loss over Iterations with Best Learning Rate&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 输出最终误差</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Final error with best learning rate: <span class="hljs-subst">&#123;error(W, X, Y)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输出结果</span><br>Learning rate <span class="hljs-number">0.0001</span>: Error = <span class="hljs-number">0.02733333333333332</span><br>Learning rate <span class="hljs-number">0.00025</span>: Error = <span class="hljs-number">0.021333333333333315</span><br>Learning rate <span class="hljs-number">0.0005</span>: Error = <span class="hljs-number">0.021333333333333315</span><br>Learning rate <span class="hljs-number">0.001</span>: Error = <span class="hljs-number">0.021333333333333315</span><br>Learning rate <span class="hljs-number">0.002</span>: Error = <span class="hljs-number">0.020000000000000018</span><br>Best learning rate: <span class="hljs-number">0.002</span>, Best error: <span class="hljs-number">0.020000000000000018</span><br></code></pre></td></tr></table></figure><p>loss = 0.021333333333333315</p><p><imgsrc="https://pic.imgdb.cn/item/670fa158d29ded1a8c346ea2.png" /></p><p>其实感觉效果也一般...</p><p>应该只能优化到这种水平了</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>码题集周赛1</title>
    <link href="/2024/10/15/ma-ti-ji-zhou-sai-1/"/>
    <url>/2024/10/15/ma-ti-ji-zhou-sai-1/</url>
    
    <content type="html"><![CDATA[<h3 id="第一题">第一题</h3><p><imgsrc="https://pic.imgdb.cn/item/670e5cc9d29ded1a8c3d2318.png" /></p><p>使用cpp来实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    std::complex&lt;<span class="hljs-type">double</span>&gt; modules[<span class="hljs-number">200</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        std::cin &gt;&gt; a &gt;&gt; b;<br>        modules[i] = std::<span class="hljs-built_in">complex</span>&lt;<span class="hljs-type">double</span>&gt;(a, b);<br>    &#125;<br>    <span class="hljs-type">double</span> max_power = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>            <span class="hljs-type">double</span> power = std::<span class="hljs-built_in">abs</span>(modules[i] * modules[j]);<br>            <span class="hljs-keyword">if</span> (power &gt; max_power) &#123;<br>                max_power = power;<br>            &#125;<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; std::fixed &lt;&lt; std::<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">9</span>) &lt;&lt; max_power &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二题">第二题</h3><p><imgsrc="https://pic.imgdb.cn/item/670e5d8ed29ded1a8c3dec90.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670e5da9d29ded1a8c3e0c37.png" /></p><p>使用python实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python">n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>roads = [<span class="hljs-built_in">set</span>() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]  <br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    roads[u].add(v)<br>    roads[v].add(u)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">map_state</span>(<span class="hljs-params">roads</span>):<br>    state = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> roads[i]:<br>            <span class="hljs-keyword">if</span> i &lt; j:<br>                state.append((i, j))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">frozenset</span>(state)<br><br>seen_states = <span class="hljs-built_in">set</span>()  <br>seen_states.add(map_state(roads))  <br><br>q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()) <br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>    operation = <span class="hljs-built_in">input</span>().split()<br>    <br>    <span class="hljs-keyword">if</span> operation[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;add&#x27;</span>: <br>        u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, operation[<span class="hljs-number">1</span>:])<br>        roads[u].add(v)<br>        roads[v].add(u)<br>    <br>    <span class="hljs-keyword">elif</span> operation[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;del&#x27;</span>:  <br>        u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, operation[<span class="hljs-number">1</span>:])<br>        roads[u].remove(v)<br>        roads[v].remove(u)<br>    <br>    <span class="hljs-keyword">elif</span> operation[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;pop&#x27;</span>:  <br>        u = <span class="hljs-built_in">int</span>(operation[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(roads[u]):  <br>            roads[v].remove(u)<br>        roads[u].clear()  <br>    <br>    current_state = map_state(roads)<br>    <br>    <span class="hljs-keyword">if</span> current_state <span class="hljs-keyword">in</span> seen_states:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;old&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;new&quot;</span>)<br>        seen_states.add(current_state)<br></code></pre></td></tr></table></figure><h3 id="第三题">第三题</h3><p><imgsrc="https://pic.imgdb.cn/item/670e852bd29ded1a8c622cd2.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670e853cd29ded1a8c623e26.png" /></p><p>题目稍微有点复杂，但是仔细想想还是挺简单的一题，需要换一种思路，不要太关注具体细节，盯着结果看会想通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><br><span class="hljs-comment"># 创建图的邻接表</span><br>graph = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><br><span class="hljs-comment"># 输入每条边的信息</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    graph[u].append(v)<br><br><span class="hljs-comment"># 输入小码弟和小码妹的初始位置</span><br>x, y = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">start</span>):<br>    q = deque([(start, <span class="hljs-number">0</span>)])<br>    visited = [<span class="hljs-literal">False</span>] * (n + <span class="hljs-number">1</span>)<br>    visited[start] = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">while</span> q:<br>        curr, turns = q.popleft()<br>        <span class="hljs-keyword">if</span> curr == n:<br>            <span class="hljs-keyword">return</span> turns <br>        <span class="hljs-keyword">for</span> next_node <span class="hljs-keyword">in</span> graph[curr]:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> visited[next_node]:<br>                visited[next_node] = <span class="hljs-literal">True</span><br>                q.append((next_node, turns + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>a = bfs(x)  <span class="hljs-comment"># 小码弟需要的最短回合</span><br>b = bfs(y)  <span class="hljs-comment"># 小码妹需要的最短回合</span><br><br><span class="hljs-keyword">if</span>(a!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> b!=-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span>(a&gt;b):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>*b)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>*a-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">if</span>(a==-<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>*b)<br>    <span class="hljs-keyword">if</span>(b==-<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>*a-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="第四题">第四题</h3><p><imgsrc="https://pic.imgdb.cn/item/670fc9abd29ded1a8c55bc64.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670fc9d4d29ded1a8c55de4a.png" /></p><p>下面的代码可以实现，但是时间复杂度不满足题目要求，确实想不到怎么优化了...</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>s = <span class="hljs-built_in">input</span>()<br>graph = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>    u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    graph[u].append(v)<br>    graph[v].append(u)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_balanced</span>(<span class="hljs-params">string</span>):<br>    stack = []<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> string:<br>        <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;(&#123;[&#x27;</span>:<br>            stack.append(char)<br>        <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;)&#125;]&#x27;</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> stack:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            top = stack.pop()<br>            <span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">and</span> top!= <span class="hljs-string">&#x27;(&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">and</span> top!= <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-keyword">and</span> top!= <span class="hljs-string">&#x27;[&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> stack<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">node, parent, path</span>):<br>    count = <span class="hljs-number">0</span><br>    path += s[node - <span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 提前判断，如果当前路径明显不平衡，直接返回 0</span><br>    stack = []<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> path:<br>        <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;(&#123;[&#x27;</span>:<br>            stack.append(char)<br>        <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;)&#125;]&#x27;</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> stack:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            top = stack.pop()<br>            <span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">and</span> top!= <span class="hljs-string">&#x27;(&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">and</span> top!= <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-keyword">and</span> top!= <span class="hljs-string">&#x27;[&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> is_balanced(path):<br>        count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> neighbor <span class="hljs-keyword">in</span> graph[node]:<br>        <span class="hljs-keyword">if</span> neighbor!= parent:<br>            count += dfs(neighbor, node, path)<br>    <span class="hljs-keyword">return</span> count<br><br>total_count = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    total_count += dfs(i, -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(total_count)<br></code></pre></td></tr></table></figure><p>第四题官方提供的解法:</p><p>题解：</p><p>从树上的每个结点开始都进行一次dfs，求出以该结点为出发点的平衡路径数量，最终的答案就是每个结点出发的路径数量之和。</p><p>在dfs时，使用一个栈维护括号序列的匹配。搜索到一个结点时，把该节点上的字符压入栈顶；当栈顶的两个元素发生匹配时，将栈顶的两个元素弹出。在dfs回溯时撤销对栈的操作即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">5e3</span> + <span class="hljs-number">10</span>;<br>string s;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt;<span class="hljs-built_in">g</span>(maxn);<br>vector&lt;<span class="hljs-type">int</span>&gt; stk;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span> </span><br><span class="hljs-function"></span>&#123;    <br>    <span class="hljs-type">int</span> poped = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (stk.<span class="hljs-built_in">empty</span>()) <br>    &#123;        <br>        stk.<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[stk.<span class="hljs-built_in">back</span>()] == <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; s[u] == <span class="hljs-string">&#x27;)&#x27;</span>) <br>    &#123;        <br>        poped = stk.<span class="hljs-built_in">back</span>();        <br>        stk.<span class="hljs-built_in">pop_back</span>();    <br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[stk.<span class="hljs-built_in">back</span>()] == <span class="hljs-string">&#x27;[&#x27;</span> &amp;&amp; s[u] == <span class="hljs-string">&#x27;]&#x27;</span>) <br>    &#123;        <br>        poped = stk.<span class="hljs-built_in">back</span>();        <br>        stk.<span class="hljs-built_in">pop_back</span>();    <br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[stk.<span class="hljs-built_in">back</span>()] == <span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp; s[u] == <span class="hljs-string">&#x27;&#125;&#x27;</span>) <br>    &#123;        <br>        poped = stk.<span class="hljs-built_in">back</span>();        <br>        stk.<span class="hljs-built_in">pop_back</span>();    <br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;        <br>        stk.<span class="hljs-built_in">push_back</span>(u);    <br>    &#125;    <br>    <span class="hljs-keyword">if</span> (stk.<span class="hljs-built_in">empty</span>()) <br>    &#123;        <br>        ans++;    <br>    &#125;    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : g[u])  <span class="hljs-keyword">if</span> (v != fa)<br>    &#123;        <br>        <span class="hljs-built_in">dfs</span>(v, u);    <br>    &#125;    <br>    <span class="hljs-keyword">if</span> (poped == <span class="hljs-number">-1</span>) <br>    &#123;        <br>        stk.<span class="hljs-built_in">pop_back</span>();    <br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;        <br>        stk.<span class="hljs-built_in">push_back</span>(poped);    <br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <br>    <span class="hljs-type">int</span> n;    <br>    cin &gt;&gt; n;    <br>    cin &gt;&gt; s;    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) <br>    &#123;        <br>        <span class="hljs-type">int</span> u, v;        <br>        cin &gt;&gt; u &gt;&gt; v;        <br>        u--;        <br>        v--;        <br>        g[u].<span class="hljs-built_in">push_back</span>(v);        <br>        g[v].<span class="hljs-built_in">push_back</span>(u);    <br>    &#125;    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;        <br>        <span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">-1</span>);    <br>    &#125;    <br>    cout &lt;&lt; ans &lt;&lt; endl;&#125;<br></code></pre></td></tr></table></figure><h3 id="第五题">第五题</h3><p><imgsrc="https://pic.imgdb.cn/item/670fcd1cd29ded1a8c589dd0.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670fcd29d29ded1a8c58a654.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670fcd39d29ded1a8c58b1a2.png" /></p><p>直接让ai写的代码没有问题，但是会超时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>parent_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_san_value_for_collapse</span>(<span class="hljs-params">node</span>):<br>    san_value = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> parent_list[i - <span class="hljs-number">2</span>] == node:<br>            san_value += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> san_value<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">collapse</span>(<span class="hljs-params">u</span>):<br>    parent = parent_list[u - <span class="hljs-number">2</span>]<br>    san_value = find_san_value_for_collapse(u)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> parent_list[i - <span class="hljs-number">2</span>] == u:<br>            parent_list[i - <span class="hljs-number">2</span>] = parent<br>    <span class="hljs-keyword">return</span> san_value<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_san_value_for_reconstruct</span>(<span class="hljs-params">u, v</span>):<br>    san_value = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> parent_list[i - <span class="hljs-number">2</span>] == u:<br>            san_value += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> san_value<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reconstruct</span>(<span class="hljs-params">u, v</span>):<br>    san_value = find_san_value_for_reconstruct(u, v)<br>    parent_list[u - <span class="hljs-number">2</span>] = v<br>    <span class="hljs-keyword">return</span> san_value<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>    operation = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    <span class="hljs-keyword">if</span> operation[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:<br>        u = operation[<span class="hljs-number">1</span>]<br>        <span class="hljs-built_in">print</span>(collapse(u))<br>    <span class="hljs-keyword">elif</span> operation[<span class="hljs-number">0</span>] == <span class="hljs-number">2</span>:<br>        u, v = operation[<span class="hljs-number">1</span>], operation[<span class="hljs-number">2</span>]<br>        <span class="hljs-built_in">print</span>(reconstruct(u, v))<br></code></pre></td></tr></table></figure><p>官方题解如下：</p><p>题解：</p><p>建立双向链表维护邻接表。对于一次坍塌操作，相当于把当前结点的链表接到父结点的链表上。对于一次重构操作，相当于从父结点的链表中删除当前结点，再把当前结点加入另一个链表中。</p><p>儿子结点的个数比较容易维护，同时我们还需要维护每个结点的父节点。在坍塌操作后，当前结点的所有儿子结点的父节点都会发生变化，如果暴力修改这些结点的父节点会导致超时。</p><p>这里我们使用一个巧妙的解决方法：在坍塌操作后，我们建立一个新的结点u'，拷贝被坍塌结点u的所有信息，最后使用并查集将被坍塌结点u合并入父亲结点fa中。之后所有关于u的操作都在u'上进行。</p><p>如果遇到了对u的儿子的操作，首先在并查集中查找其真正的父结点fa，随后再进行链表操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> nex[maxn], pre[maxn], h[maxn], t[maxn], sz[maxn], f[maxn];<br><span class="hljs-type">int</span> vf[maxn], id[maxn];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;    <br>    <span class="hljs-keyword">return</span> vf[x] == x ? x : vf[x] = <span class="hljs-built_in">find</span>(vf[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;    <br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);    <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);    <br>    <span class="hljs-type">int</span> n;    <br>    cin &gt;&gt; n;    <br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;        <br>        <span class="hljs-type">int</span> fa;        <br>        cin &gt;&gt; fa;        <br>        f[i] = fa;        <br>        nex[i] = h[fa];        <br>        pre[h[fa]] = i;        <br>        <span class="hljs-keyword">if</span> (!t[fa]) t[fa] = i;         <br>        h[fa] = i;        <br>        sz[fa]++;    <br>    &#125;    <br>    <span class="hljs-type">int</span> ids = n;    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) vf[i] = i, id[i] = i;    <br>    <span class="hljs-type">int</span> q;    <br>    cin &gt;&gt; q;    <br>    <span class="hljs-keyword">while</span> (q--) &#123;        <br>        <span class="hljs-type">int</span> opt;        <br>        cin &gt;&gt; opt;        <br>        <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">1</span>) <br>        &#123;            <br>            <span class="hljs-type">int</span> _u;            <br>            cin &gt;&gt; _u;            <br>            <span class="hljs-type">int</span> u = id[_u];            <br>            cout &lt;&lt; sz[u] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;            <br>            <span class="hljs-type">int</span> fa = <span class="hljs-built_in">find</span>(f[u]); <span class="hljs-comment">// 需要通过find的方式找到真实的父亲 </span><br>            <span class="hljs-keyword">if</span> (t[u]) &#123; <span class="hljs-comment">// u 有儿子，否则不进行操作                </span><br>                nex[t[u]] = h[fa];                <br>                pre[h[fa]] = t[u];                <br>                h[fa] = h[u];                <br>                sz[fa] += sz[u];                <br>                vf[u] = fa; <span class="hljs-comment">// 将所有儿子的父节点设置为 fa                </span><br>                id[_u] = ++ids; <span class="hljs-comment">// 丢弃结点u，建立新结点                </span><br>                nex[pre[u]] = ids;                <br>                pre[ids] = pre[u];                <br>                pre[nex[u]] = ids;                <br>                nex[ids] = nex[u];                <br>                sz[ids] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 新的u不存在儿子结点，sz为0                </span><br>                f[ids] = fa;                <br>                vf[ids] = ids;            <br>            &#125;       <br>        &#125;<span class="hljs-keyword">else</span>&#123;            <br>            <span class="hljs-type">int</span> _u, _v;            <br>            cin &gt;&gt; _u &gt;&gt; _v;            <br>            <span class="hljs-type">int</span> u = id[_u], v = id[_v];            <br>            cout &lt;&lt; sz[u] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;            <br>            <span class="hljs-type">int</span> fa = <span class="hljs-built_in">find</span>(f[u]); <span class="hljs-comment">// 需要通过find的方式找到真实的父亲            </span><br>            nex[pre[u]] = nex[u];            <br>            pre[nex[u]] = pre[u];            <br>            sz[fa] -= <span class="hljs-number">1</span>;            <br>            sz[v] += <span class="hljs-number">1</span>;            <br>            f[u] = v;            <br>            nex[u] = h[v];            <br>            pre[h[v]] = u;            <br>            <span class="hljs-keyword">if</span> (!t[v]) t[v] = u;            <br>            h[v] = u;        <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>码蹄集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理实验1</title>
    <link href="/2024/10/15/shu-zi-tu-xiang-chu-li/shu-zi-tu-xiang-chu-li-shi-yan-1/"/>
    <url>/2024/10/15/shu-zi-tu-xiang-chu-li/shu-zi-tu-xiang-chu-li-shi-yan-1/</url>
    
    <content type="html"><![CDATA[<p>本次实验课实现了对于16色图像、256色图像、24位真彩图像的读取显示，以及灰度变换功能，对于不同深度的图像结构有了进一步的了解，部分代码展示如下，便于温习巩固</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><br>BITMAPINFO* lpBitsInfo = <span class="hljs-literal">NULL</span>;<br><br>BOOL <span class="hljs-title function_">LoadBmpFile</span><span class="hljs-params">(<span class="hljs-type">char</span>* BmpFileName)</span><br>&#123;<br>FILE* fp;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> == (fp = fopen(BmpFileName,<span class="hljs-string">&quot;rb&quot;</span>)))<br><span class="hljs-keyword">return</span> FALSE;<br><br>BITMAPFILEHEADER bf;<br>BITMAPINFOHEADER bi;<br><br>fread(&amp;bf,<span class="hljs-number">14</span>,<span class="hljs-number">1</span>,fp);<br>fread(&amp;bi,<span class="hljs-number">40</span>,<span class="hljs-number">1</span>,fp);<br><br>DWORD NumColors;<br><span class="hljs-keyword">if</span> (bi.biClrUsed != <span class="hljs-number">0</span>)<br>NumColors = bi.biClrUsed;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">switch</span>(bi.biBitCount)  <span class="hljs-comment">//图像用到的颜色的位数</span><br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <span class="hljs-comment">// 表示二值图像</span><br>NumColors = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-comment">// 表示16色</span><br>NumColors = <span class="hljs-number">16</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:  <span class="hljs-comment">// 256色</span><br>NumColors = <span class="hljs-number">256</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">24</span>: <span class="hljs-comment">// 24位真彩</span><br>NumColors = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>DWORD PalSize = NumColors * <span class="hljs-number">4</span>;  <span class="hljs-comment">//调色板的大小</span><br>DWORD ImgSize = (bi.biWidth * bi.biBitCount + <span class="hljs-number">31</span> )/<span class="hljs-number">32</span> * <span class="hljs-number">4</span> * bi.biHeight; <br>DWORD Size = <span class="hljs-number">40</span> + PalSize + ImgSize;   <span class="hljs-comment">//信息头+调色板+信息</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == (lpBitsInfo = (BITMAPINFO*)<span class="hljs-built_in">malloc</span>(Size)))<br><span class="hljs-keyword">return</span> FALSE;<br><br>fseek(fp,<span class="hljs-number">14</span>,SEEK_SET);  <span class="hljs-comment">//确保指针指向信息头起始位置</span><br>fread((<span class="hljs-type">char</span>*)lpBitsInfo,Size,<span class="hljs-number">1</span>,fp);<br><br>lpBitsInfo-&gt;bmiHeader.biClrUsed = NumColors;<br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Gray</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 获取原始图像的宽度</span><br>    <span class="hljs-type">int</span> w = lpBitsInfo-&gt;bmiHeader.biWidth;  <br>    <span class="hljs-comment">// 获取原始图像的高度</span><br>    <span class="hljs-type">int</span> h = lpBitsInfo-&gt;bmiHeader.biHeight;<br>    <span class="hljs-comment">// 计算原始图像每行的字节数，考虑到字节对齐</span><br>    <span class="hljs-type">int</span> LineBytes = (w * lpBitsInfo-&gt;bmiHeader.biBitCount + <span class="hljs-number">31</span> )/ <span class="hljs-number">32</span> * <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 定位到原始图像的像素数据起始位置，跳过颜色表</span><br>    BYTE* lpBits = (BYTE*)&amp;lpBitsInfo-&gt;bmiColors[lpBitsInfo-&gt;bmiHeader.biClrUsed];<br><br>    <span class="hljs-comment">// 计算灰度图像每行需要的字节数，同样进行字节对齐</span><br>    <span class="hljs-type">int</span> LineBytes_gray = (w * <span class="hljs-number">8</span> + <span class="hljs-number">31</span>)/ <span class="hljs-number">32</span> * <span class="hljs-number">4</span>;  <br>    <span class="hljs-comment">// 为灰度图像分配内存空间，包括信息头、颜色表和像素数据</span><br>    BITMAPINFO* lpBitsInfo_gray = (BITMAPINFO*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span> + <span class="hljs-number">1024</span> + LineBytes_gray * h);<br><br>    <span class="hljs-comment">// 复制原始图像的信息头到灰度图像的信息头</span><br>    <span class="hljs-built_in">memcpy</span>(lpBitsInfo_gray, lpBitsInfo, <span class="hljs-number">40</span>);      <br>    <span class="hljs-comment">// 设置灰度图像的位深度为 8，表示每个像素用一个字节表示，对应 256 种灰度值</span><br>    lpBitsInfo_gray-&gt;bmiHeader.biBitCount = <span class="hljs-number">8</span>;   <br>    <span class="hljs-comment">// 设置灰度图像的颜色表中颜色的数量为 256</span><br>    lpBitsInfo_gray-&gt;bmiHeader.biClrUsed = <span class="hljs-number">256</span>;  <br><br>    <span class="hljs-comment">// 初始化灰度图像的颜色表，每个颜色表项的红、绿、蓝值都相同，范围从 0 到 255</span><br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)  <br>    &#123;<br>        lpBitsInfo_gray-&gt;bmiColors[i].rgbRed = i;<br>        lpBitsInfo_gray-&gt;bmiColors[i].rgbGreen = i;<br>        lpBitsInfo_gray-&gt;bmiColors[i].rgbBlue = i;<br>        lpBitsInfo_gray-&gt;bmiColors[i].rgbReserved = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 定位到灰度图像的像素数据起始位置，跳过颜色表</span><br>    BYTE* lpBits_gray = (BYTE*)&amp;lpBitsInfo_gray-&gt;bmiColors[<span class="hljs-number">256</span>];<br><br>    <span class="hljs-comment">// 定义指向当前像素的指针</span><br>    BYTE *pixel;<br><br>    <span class="hljs-comment">// 根据原始图像的位深度进行不同的处理</span><br>    <span class="hljs-keyword">switch</span>(lpBitsInfo-&gt;bmiHeader.biBitCount)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-comment">// 16 色图像灰度化</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; h; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; w; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(j % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)   <span class="hljs-comment">// 如果当前列索引是奇数，表示当前字节的低 4 位</span><br>                &#123;<br>                    <span class="hljs-comment">// 定位到包含低 4 位像素值的字节位置</span><br>                    pixel = lpBits + LineBytes * (h - <span class="hljs-number">1</span> - i) + j / <span class="hljs-number">2</span>;<br>                    <span class="hljs-comment">// 获取当前字节的低 4 位</span><br>                    BYTE lowFourBits = *pixel &amp; <span class="hljs-number">0x0F</span>;<br>                    <span class="hljs-comment">// 根据低 4 位像素值在颜色表中找到对应的颜色，并获取红、绿、蓝值</span><br>                    <span class="hljs-type">int</span> R = lpBitsInfo-&gt;bmiColors[lowFourBits].rgbRed;<br>                    <span class="hljs-type">int</span> G = lpBitsInfo-&gt;bmiColors[lowFourBits].rgbGreen;<br>                    <span class="hljs-type">int</span> B = lpBitsInfo-&gt;bmiColors[lowFourBits].rgbBlue;<br>                    <span class="hljs-comment">// 计算红、绿、蓝值的平均值作为灰度值</span><br>                    <span class="hljs-type">int</span> avg = (R + B + G) / <span class="hljs-number">3</span>;<br>                    <span class="hljs-comment">// 定位到灰度图像当前像素位置</span><br>                    pixel = lpBits_gray + LineBytes_gray * (h - <span class="hljs-number">1</span> - i) + j;<br>                    <span class="hljs-comment">// 将计算得到的灰度值存储到灰度图像中</span><br>                    *pixel = avg;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">// 如果当前列索引是偶数，表示当前字节的高 4 位</span><br>                    <span class="hljs-comment">// 定位到包含高 4 位像素值的字节位置</span><br>                    pixel = lpBits + LineBytes * (h - <span class="hljs-number">1</span> - i) + j / <span class="hljs-number">2</span>;<br>                    <span class="hljs-comment">// 获取当前字节的高 4 位</span><br>                    BYTE highFourBits = *pixel &gt;&gt; <span class="hljs-number">4</span>;<br>                    <span class="hljs-comment">// 根据高 4 位像素值在颜色表中找到对应的颜色，并获取红、绿、蓝值</span><br>                    <span class="hljs-type">int</span> R = lpBitsInfo-&gt;bmiColors[highFourBits].rgbRed;<br>                    <span class="hljs-type">int</span> G = lpBitsInfo-&gt;bmiColors[highFourBits].rgbGreen;<br>                    <span class="hljs-type">int</span> B = lpBitsInfo-&gt;bmiColors[highFourBits].rgbBlue;<br>                    <span class="hljs-comment">// 计算红、绿、蓝值的平均值作为灰度值</span><br>                    <span class="hljs-type">int</span> avg = (R + B + G) / <span class="hljs-number">3</span>;<br>                    <span class="hljs-comment">// 定位到灰度图像当前像素位置</span><br>                    pixel = lpBits_gray + LineBytes_gray * (h - <span class="hljs-number">1</span> - i) + j;<br>                    <span class="hljs-comment">// 将计算得到的灰度值存储到灰度图像中</span><br>                    *pixel = avg;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:  <span class="hljs-comment">// 256 色图像灰度化</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; h; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; w; j++)<br>            &#123;<br>                <span class="hljs-comment">// 定位到原始图像当前像素位置</span><br>                pixel = lpBits + LineBytes * (h - <span class="hljs-number">1</span> - i) + j;<br>                <span class="hljs-comment">// 根据当前像素值在颜色表中找到对应的颜色，并获取红、绿、蓝值</span><br>                <span class="hljs-type">int</span> R = lpBitsInfo-&gt;bmiColors[*pixel].rgbRed;<br>                <span class="hljs-type">int</span> G = lpBitsInfo-&gt;bmiColors[*pixel].rgbGreen;<br>                <span class="hljs-type">int</span> B = lpBitsInfo-&gt;bmiColors[*pixel].rgbBlue;<br>                <span class="hljs-comment">// 计算红、绿、蓝值的平均值作为灰度值</span><br>                <span class="hljs-type">int</span> avg = (R + B + G) / <span class="hljs-number">3</span>;<br>                <span class="hljs-comment">// 定位到灰度图像当前像素位置</span><br>                pixel = lpBits_gray + LineBytes_gray * (h - <span class="hljs-number">1</span> - i) + j;<br>                <span class="hljs-comment">// 将计算得到的灰度值存储到灰度图像中</span><br>                *pixel = avg;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">24</span>: <span class="hljs-comment">// 24 位真彩图像灰度化</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; h; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; w; j++)<br>            &#123;<br>                <span class="hljs-comment">// 分别定位到当前像素的蓝、绿、红通道的位置</span><br>                BYTE *B = lpBits + LineBytes * (h - <span class="hljs-number">1</span> - i) + j * <span class="hljs-number">3</span>;<br>                BYTE *G = B + <span class="hljs-number">1</span>;<br>                BYTE *R = G + <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// 计算红、绿、蓝值的平均值作为灰度值</span><br>                <span class="hljs-type">int</span> avg = (*R + *B + *G)/<span class="hljs-number">3</span>;<br>                <span class="hljs-comment">// 定位到灰度图像当前像素位置</span><br>                pixel = lpBits_gray + LineBytes_gray * (h - <span class="hljs-number">1</span> - i) + j;<br>                <span class="hljs-comment">// 将计算得到的灰度值存储到灰度图像中</span><br>                *pixel = avg;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 释放原始图像的内存空间</span><br>    <span class="hljs-built_in">free</span>(lpBitsInfo);<br>    <span class="hljs-comment">// 将灰度图像的信息结构体指针赋值给全局变量，替换原始图像的信息结构体指针</span><br>    lpBitsInfo = lpBitsInfo_gray;<br>&#125;<br></code></pre></td></tr></table></figure><p>画程序的流程图或N-S图</p><p>使用在线工具：https://mermaid.nodejs.cn/intro/</p><pre><code class=" mermaid">graph TDA[开始] --&gt; B[打开位图文件]B --&gt; C&#123;文件打开成功？&#125;C -- 是 --&gt; D[读取位图文件头]D --&gt; E[读取位图信息头]E --&gt; F[确定颜色数量]F --&gt; G[计算调色板大小]G --&gt; H[计算图像大小]H --&gt; I[分配内存]I --&gt; J[读取位图信息]J --&gt; K[设置位图信息头中的颜色使用量]K --&gt; L[结束]C -- 否 --&gt; M[返回FALSE]</code></pre><p><imgsrc="https://pic.imgdb.cn/item/671c585ad29ded1a8cbeaef3.png" /></p><pre><code class=" mermaid">graph TDA[开始] --&gt; B[获取位图宽度和高度]B --&gt; C[计算每行字节数]C --&gt; D[定位到像素数据]D --&gt; E[计算灰度图像每行字节数]E --&gt; F[分配灰度图像内存]F --&gt; G[复制位图信息头]G --&gt; H[设置灰度图像位深度]H --&gt; I[设置灰度图像颜色表大小]I --&gt; J[初始化灰度图像颜色表]J --&gt; K[定位到灰度图像像素数据]K --&gt; L&#123;根据位图位深度处理每个像素&#125;L --&gt;|4位图像| M[处理每个像素的高低4位]M --&gt; N[计算灰度值并存储]L --&gt;|8位图像| O[直接处理每个像素]O --&gt; P[计算灰度值并存储]L --&gt;|24位图像| Q[处理每个像素的RGB值]Q --&gt; R[计算灰度值并存储]N --&gt; S[释放原始位图内存]P --&gt; SR --&gt; SS --&gt; T[更新位图信息指针]T --&gt; U[结束]graph TDA[开始] --&gt; B&#123;位图信息为空？&#125;B -- 是 --&gt; C[返回]B -- 否 --&gt; D[获取位图宽度和高度]D --&gt; E[计算每行字节数]E --&gt; F[定位到像素数据]F --&gt; G&#123;坐标超出边界？&#125;G -- 是 --&gt; H[返回]G -- 否 --&gt; I&#123;根据位图位深度获取像素值&#125;I --&gt;|1位图像| J&#123;是前景点？&#125;J -- 是 --&gt; K[前景点]J -- 否 --&gt; L[背景点]I --&gt;|4位图像| M&#123;处理每个像素的高低4位&#125;M --&gt; N[获取RGB值并存储]I --&gt;|8位图像| O[直接处理每个像素]O --&gt; P&#123;是否为灰度值？&#125;P -- 是 --&gt; Q[存储灰度值]P -- 否 --&gt; R[获取RGB值并存储]I --&gt;|24位图像| S[处理每个像素的RGB值]S --&gt; T[获取RGB值并存储]K --&gt; U[将结果存储到字符串中]L --&gt; UN --&gt; UQ --&gt; UR --&gt; UT --&gt; UU --&gt; V[结束]</code></pre>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实验课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二章：色彩模型</title>
    <link href="/2024/10/15/shu-zi-tu-xiang-chu-li/di-er-zhang-se-cai-mo-xing/"/>
    <url>/2024/10/15/shu-zi-tu-xiang-chu-li/di-er-zhang-se-cai-mo-xing/</url>
    
    <content type="html"><![CDATA[<h2 id="第二章色彩模型">第二章：色彩模型</h2><h3 id="面向设备的色彩模型">面向设备的色彩模型</h3><p>面向设备的色彩模型有 RGB 和 CMYK 等</p><h4 id="rgb色彩模型">RGB色彩模型</h4><p><imgsrc="https://pic.imgdb.cn/item/676f57b0d0e0a243d4ebd5a7.png" /></p><p>RGB模型是基于仿生学原理，人的视网膜有三种细胞，分别对红、绿、蓝三种颜色敏感（其中绿色最敏感）。这三种颜色的光通过相加，可以混合出绝大部分肉眼能看到的颜色</p><p>使用最广泛的色彩模型。非常适合在输出显示场合使用，如彩色电视机的显像管、计算机的显示器</p><h4 id="rgb模型的扩展-彩色电视模型">RGB模型的扩展-彩色电视模型</h4><ul><li>YIQ:北美电视系统</li><li>YUV:欧洲电视系统（我国）</li><li>YCbCr:DVD等消费类视频产品，也是jpg文件格式的色彩模型</li></ul><p>上述拓展模型中，Y代表亮度，剩下的代表色度，分开的意义是为了更好的适应人眼感知，更好的压缩数据（在传输中）</p><p>人眼对于色彩的感知不敏感，但是对于亮度非常敏感</p><h4 id="cmyk模型">CMYK模型</h4><p><imgsrc="https://pic.imgdb.cn/item/676f57a4d0e0a243d4ebd5a4.png" /></p><p>画画需要的颜色：青黄紫白黑,前三种颜色就是取自CMYK色彩模型中</p><p>颜色： 青---C 品红（紫色）---M 黄色---Y 黑色---K</p><p>显示设备是发光体，打印设备是反光体，刚好反着来</p><p>补色原理：<code>红-青、绿-紫（洋红）、蓝-黄</code></p><p>橡皮泥中的红色和绿色混在一起，会得到黑色，因为全部颜色的光都被吸收了</p><p>打印机想要打印蓝色；因为蓝色与黄色互补，用青色（吸收红光）和洋红混合得到蓝（黄色的补色）</p><p>光的合成：红光+绿光=黄光，吸收黄光，得到蓝光</p><p>CMYK色彩模型中添加黑色的原因是因为单独提取纯度很高的黑色比较困难，不如直接多加一个黑色</p><h4 id="cmyk调色案例">CMYK调色案例</h4><ul><li>CMYK模型中，在青色通道涂黑（表示喷了很多青色油墨），结果是该区域变青</li><li>在青色通道变白（表示不喷青色油墨），该区域会变红(青色的补色)</li></ul><h3 id="面向视觉感知的颜色模型">面向视觉感知的颜色模型</h3><h4 id="hsi">HSI</h4><p>色调 H</p><ul><li>色调（色相）表示光的颜色，它由光的波长决定。例如自然界中的七色光就分别对应着不同的色调，每种色调分别对应着不同的波长。</li><li>在通常的使用中，色调是由颜色名称标识的，比如红、橙或绿色。</li></ul><p>饱和度 S</p><ul><li>饱和度指颜色的纯度（鲜艳程度），它由主波长的纯光谱色与白光的比例决定，也就是说，夹杂白光的多少。越接近光谱色、白光比例越小，则饱和度越高，色彩越鲜艳醒目；距离光谱色越远、白光比例越大，饱和度越低，色彩越平淡晦暗，越不鲜艳。<br /></li><li>如对白光来讲，它的色饱和度为0（没有色彩），纯色的色饱和度是100%，指该彩色中不含白光。</li></ul><p>亮度 I</p><ul><li>亮度表示某种颜色在人眼视觉上引起的明暗程度，它由光的强度（能量）决定：光的强亮越大，景物就越亮；光的强度越小，景物就越暗。</li><li>对于灰度图象而言，亮度就是图像的灰度值。</li></ul><p>HSI是最直观的色彩描述方法。用色调（Hue）、色饱和度（Saturation）和亮度（Intensity）来描述色彩。它与人类颜色视觉感知非常接近，但独立于设备（设备造不出来，仅存在于软件中）,因为没有一个设备能够同时感受色调、饱和度和亮度这三种属性</p><p><imgsrc="https://pic.imgdb.cn/item/676f4329d0e0a243d4ebd25f.png" /></p><p>HSI模型中的曲线越瘦代表颜色的饱和度越高（越纯净），曲线越高代表颜色的亮度越高，曲线的位置代表着色调信息</p><p>在上图中，白光代表一条水平直线，纯色光代表一垂直直线</p><p>HSI与RGB之间的转换公式</p><p><imgsrc="https://pic.imgdb.cn/item/676f6134d0e0a243d4ebd710.png" /></p><h4 id="lab">LAB</h4><p>L表示亮度，A赋予了从红到绿的所有颜色，B赋予了从黄到蓝的所有颜色，该模型覆盖了全部的可见光色谱。</p><p>该模型与设备无关（仅存在于数学/软件中）。没有提供直接显示的格式，必须要转换到其它色彩空间来显示。</p><p><imgsrc="https://pic.imgdb.cn/item/676f65fcd0e0a243d4ebd7b9.png" /></p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROS实验报告一</title>
    <link href="/2024/10/14/ros/ros-shi-yan-bao-gao-yi/"/>
    <url>/2024/10/14/ros/ros-shi-yan-bao-gao-yi/</url>
    
    <content type="html"><![CDATA[<h2 id="ros实验一记录">ROS实验一记录</h2><h3 id="实验一要求">实验一要求</h3><p>实现一个复杂的话题（topics）通信，（若无法实现要求一，可使用本地图片）。实验报告需提交PDF，文件命名方式：学号+专业姓名+实验1。提交日期/方式：10.25号通过机房电脑系统提交。</p><p>要求一：需实现Ubuntu调用笔记本摄像头。</p><p>要求二：需实时对拍摄得的图片进行图像处理（灰度化，边缘检测，方式不限）。</p><p>要求三：提交的报告需附关键功能代码，以及处理前后的图片，并阐述清楚如何使用话题通信传输图片。</p><p>要求四：需通过实验分析话题通信是否存在数据丢失，队列参数的影响。</p><h3 id="创建工作空间以及功能包">1、创建工作空间以及功能包</h3><p><imgsrc="https://pic.imgdb.cn/item/670d09f8d29ded1a8c23598b.png" /></p><h3 id="创建并编写源码文件">2、创建并编写源码文件</h3><p>（1）在发布者节点中，先实现对于Ubuntu中笔记本摄像头的调用，然后将读取的图片转为ROS的图像消息</p><p><imgsrc="https://pic.imgdb.cn/item/670d0a27d29ded1a8c23a59e.png" /></p><p>在订阅者节点中，直接展示ROS的图像信息</p><p><imgsrc="https://pic.imgdb.cn/item/670d0a45d29ded1a8c23cad1.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670d0a50d29ded1a8c23d70f.png" /></p><p>（2）在订阅者节点中，先实现对ROS图像消息的接收，并转为OpenCV图像，然后对于得到的图像分别调用灰度化处理函数、边缘检测函数实现作业要求</p><h4 id="灰度化处理">灰度化处理</h4><p>这里需要明确灰度化函数的常见处理手法，参考这篇博客：</p><p>https://zhuanlan.zhihu.com/p/658406188</p><p>这里我选择使用cv中自带的函数实现灰度化，效果如下：</p><p><imgsrc="https://pic.imgdb.cn/item/670d0aa8d29ded1a8c243c6c.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670d0abbd29ded1a8c24533d.png" /></p><h4 id="边缘检测">边缘检测</h4><p>参考这篇教程：</p><p>https://blog.csdn.net/G_redsky/article/details/136357836</p><p>方案1，使用Canny边缘检测</p><p><imgsrc="https://pic.imgdb.cn/item/670d0addd29ded1a8c24812e.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670d0ae9d29ded1a8c2491db.png" /></p><p>方案2，使用Sobel算子检测，Sobel算子通过计算图像的梯度来检测边缘</p><p><imgsrc="https://pic.imgdb.cn/item/670d0afdd29ded1a8c24a7b0.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670d0b07d29ded1a8c24b30c.png" /></p><p>方案3：使用Laplacian算子实现边缘检测，Laplacian算子是一种二阶导数算子，用于强调图像中的快速变化区域</p><p><imgsrc="https://pic.imgdb.cn/item/670d0b22d29ded1a8c24d14d.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670d0b2bd29ded1a8c24dbe4.png" /></p><h3 id="配置编译文件">3、配置编译文件</h3><p><imgsrc="https://pic.imgdb.cn/item/670d0b40d29ded1a8c24f1eb.png" /></p><h3 id="编译">4、编译</h3><p>编译时遇到报错：</p><p><imgsrc="https://pic.imgdb.cn/item/670d0b5ad29ded1a8c250ec4.png" /></p><p>查找相关链接：</p><p>https://github.com/macs3-project/MACS/issues/49</p><p><imgsrc="https://pic.imgdb.cn/item/670d0b6dd29ded1a8c2523f2.png" /></p><p>解决方案如下：</p><p>将setup.py中的相关代码注释</p><p><imgsrc="https://pic.imgdb.cn/item/670d0b80d29ded1a8c2539d2.png" /></p><p>然后又出现新的报错：</p><p><imgsrc="https://pic.imgdb.cn/item/670d0b8fd29ded1a8c254d23.png" /></p><p>查找相关链接：</p><p>https://blog.csdn.net/2302_76761277/article/details/140596436</p><p>解决方案如下：</p><p>报错原因是setuptools版本问题，安装70.0.0指定版本即可</p><p><imgsrc="https://pic.imgdb.cn/item/670d0ba5d29ded1a8c25688b.png" /></p><p>编译成功：</p><p><imgsrc="https://pic.imgdb.cn/item/670d0bb3d29ded1a8c257630.png" /></p><h3 id="运行话题">5、运行话题</h3><p>（1）发布者话题</p><p><imgsrc="https://pic.imgdb.cn/item/670d0bccd29ded1a8c259535.png" /></p><p>（2）订阅者话题</p><p><imgsrc="https://pic.imgdb.cn/item/670d0bded29ded1a8c25a8c9.png" /></p><h3id="ros使用话题通信传输图片原理阐释">6、ROS使用话题通信传输图片原理阐释</h3><p>ROS 的话题通信是一种发布 /订阅模式的通信机制，一个节点可以发布特定主题的消息，而其他节点可以订阅该主题以接收这些消息。</p><p>对于传输图片来说，，在ROS中有专门的图像消息类型来表示图像数据，在代码中，使用到的是sensor_msgs/Image，首先需要使用cv_bridge将ROS与OpenCV图像进行互相转换，然后利用创建的Image类型的节点发布图像信息，以此来实现图像传输功能</p><p>对于订阅者节点来说，当订阅者接收到图像消息时，回调函数会被触发。在回调函数中，使用cv_bridge将ROS 图像消息转换为 OpenCV 图像格式，然后可以使用 OpenCV的函数对图像进行显示或处理。</p><h3id="分析话题通信是否存在数据丢失以及队列参数的影响">7、分析话题通信是否存在数据丢失，以及队列参数的影响。</h3><p>在ROS中，我们可以使用 ROS的日志记录功能或自定义的日志文件来记录数据。检查记录的数据，看是否存在消息丢失的情况。如果订阅者接收到的消息数量与发布者发送的消息数量不一致，那么可能存在数据丢失。</p><p>同时在ROS中，话题通信的队列参数决定了订阅者可以缓存的未处理消息的数量，我们可以设置不同的队列参数值，例如较小的值如1、5、10，以及较大的值如 50、100等，分别比较不同队列参数下的数据丢失情况。理论上应该观察到较小队列参数时更容易出现数据丢失，而较大队列参数能够减少数据丢失的可能性。</p><p>发布者的消息队列与订阅者的消息队列的不同之处：</p><p>（1）发布者的消息队列主要用于存储待发布的消息；</p><p>（2）订阅者的消息队列主要用于存储已经接收到但是还未被处理的消息</p><p>当发布者的发布频率为0.01，队列参数为1时，发现出现了多次通信数据的丢失，结果如下图，红色点为丢失的数据点：</p><p><imgsrc="https://pic.imgdb.cn/item/67111d6ed29ded1a8c5e0518.png" /></p><p>当队列参数为3时，发现还是存在一些通信数据的丢失，但是数量少于参数为1的情况</p><p><imgsrc="https://pic.imgdb.cn/item/67111d80d29ded1a8c5e125d.png" /></p><p>当队列参数为5时，发现没有通信数据的丢失</p><p><imgsrc="https://pic.imgdb.cn/item/67111d9ad29ded1a8c5e2985.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/67111da9d29ded1a8c5e3629.png" /></p><p>通过上述的简单实验，发现队列参数的设置对于通信数据的丢失会产生一定的影响，当队列参数设置较小时，可能会出现通信数据的丢失。</p><p>同时，发现发布者的发布频率对于通信来说同样至关重要，当频率设置较小时（如0.01），发现会产生数据丢失，但是当频率设置较大时（如0.1），发现即使队列参数较小，也可能不会出现数据丢失。</p><p>综上，通过实验，我们发现发布频率以及队列参数对于通信数据是否丢失至关重要。</p><p>涉及到的代码如下</p><p>发布者代码 <code>message_pub.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> rclpy<br><span class="hljs-keyword">from</span> rclpy.node <span class="hljs-keyword">import</span> Node<br><span class="hljs-keyword">from</span> std_msgs.msg <span class="hljs-keyword">import</span> String<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PublisherNode</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__(<span class="hljs-string">&#x27;publisher_node&#x27;</span>)<br>        self.publisher_ = self.create_publisher(String, <span class="hljs-string">&#x27;my_topic&#x27;</span>, <span class="hljs-number">10</span>)<br>        <span class="hljs-comment"># 创建一个定时器，每.01秒钟触发一次回调</span><br>        self.timer = self.create_timer(<span class="hljs-number">0.01</span>, self.publish_message)<br>        self.count = <span class="hljs-number">0</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">publish_message</span>(<span class="hljs-params">self</span>):<br>        msg = String()<br>        msg.data = <span class="hljs-built_in">str</span>(self.count)<br>        self.publisher_.publish(msg)<br>        self.get_logger().info(<span class="hljs-string">f&#x27;Published: <span class="hljs-subst">&#123;self.count&#125;</span>&#x27;</span>)<br>        self.count += <span class="hljs-number">1</span><br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">args=<span class="hljs-literal">None</span></span>):<br>    rclpy.init(args=args)<br>    node = PublisherNode()<br>    <span class="hljs-keyword">try</span>:<br>        rclpy.spin(node)<br>    <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>        <span class="hljs-keyword">pass</span><br>    node.destroy_node()<br>    rclpy.shutdown()<br></code></pre></td></tr></table></figure></p><p>订阅者代码 <code>message_sub.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> rclpy<br><span class="hljs-keyword">from</span> rclpy.node <span class="hljs-keyword">import</span> Node<br><span class="hljs-keyword">from</span> std_msgs.msg <span class="hljs-keyword">import</span> String<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubscriberNode</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__(<span class="hljs-string">&#x27;subscriber_node&#x27;</span>)<br>        self.subscription = self.create_subscription(<br>            String,<br>            <span class="hljs-string">&#x27;my_topic&#x27;</span>,<br>            self.listener_callback,<br>            <span class="hljs-number">10</span>)<br>        self.log_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;log.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">listener_callback</span>(<span class="hljs-params">self, msg</span>):<br>        self.get_logger().info(<span class="hljs-string">f&#x27;Received: <span class="hljs-subst">&#123;msg.data&#125;</span>&#x27;</span>)<br>        self.log_file.write(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;msg.data&#125;</span>\n&#x27;</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close_log_file</span>(<span class="hljs-params">self</span>):<br>        self.log_file.close()<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">args=<span class="hljs-literal">None</span></span>):<br>    rclpy.init(args=args)<br>    node = SubscriberNode()<br>    rclpy.spin(node)<br>    node.close_log_file()<br>    node.destroy_node()<br>    rclpy.shutdown()<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实验报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习实验5</title>
    <link href="/2024/10/10/ji-qi-xue-xi/ji-qi-xue-xi-shi-yan-5/"/>
    <url>/2024/10/10/ji-qi-xue-xi/ji-qi-xue-xi-shi-yan-5/</url>
    
    <content type="html"><![CDATA[<p><imgsrc="https://pic.imgdb.cn/item/670e43e7d29ded1a8c1f4470.png" /></p><p>首先尝试使用粒子群算法求解正则项的系数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_data</span>(<span class="hljs-params">addr</span>):<br>    data = np.loadtxt(addr, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br>    n = data.shape[<span class="hljs-number">0</span>]<br>    X = np.ones([n, <span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> power <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            X = np.concatenate([X, np.expand_dims(np.power(data[:,i], power), axis=<span class="hljs-number">1</span>)], axis=<span class="hljs-number">1</span>)<br>    Y = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;train&quot;</span> <span class="hljs-keyword">in</span> addr:<br>        Y = np.expand_dims(data[:, -<span class="hljs-number">1</span>], axis=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> (X,Y,n)<br><br><span class="hljs-comment"># def cost_gradient(W, X, Y, n, lambd):  # L2 正则</span><br><span class="hljs-comment">#     Y_hat = 1 / (1 + np.exp(-X @ W))</span><br><span class="hljs-comment">#     cost_first_term = -np.sum(Y * np.log(Y_hat) + (1 - Y) * np.log(1 - Y_hat)) / (2 * n)</span><br><span class="hljs-comment">#     reg_term = lambd / 2 * np.sum(W[1:] ** 2)</span><br><span class="hljs-comment">#     j = cost_first_term + reg_term</span><br><span class="hljs-comment">#     G = np.zeros_like(W)</span><br><span class="hljs-comment">#     G = (X.T @ (Y_hat - Y)) / n</span><br><span class="hljs-comment">#     G[1:] += lambd * W[1:]</span><br><span class="hljs-comment">#     return (j, G)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cost_gradient</span>(<span class="hljs-params">W, X, Y, n, lambd</span>):  <span class="hljs-comment"># L1 正则</span><br>    Y_hat = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-X @ W))<br>    cost_first_term = -np.<span class="hljs-built_in">sum</span>(Y * np.log(Y_hat) + (<span class="hljs-number">1</span> - Y) * np.log(<span class="hljs-number">1</span> - Y_hat)) / (<span class="hljs-number">2</span> * n)<br>    <span class="hljs-comment"># L1 正则化项</span><br>    reg_term = lambd * np.<span class="hljs-built_in">sum</span>(np.<span class="hljs-built_in">abs</span>(W[<span class="hljs-number">1</span>:]))<br>    j = cost_first_term + reg_term<br>    G = np.zeros_like(W)<br>    G = (X.T @ (Y_hat - Y)) / n<br>    <span class="hljs-comment"># L1 正则化项的梯度</span><br>    G[<span class="hljs-number">1</span>:] += lambd * np.sign(W[<span class="hljs-number">1</span>:])<br>    <span class="hljs-keyword">return</span> (j, G)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">W, X, Y, lr, n, iterations, lambd</span>):<br>    J = np.zeros([iterations, <span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>        (J[i], G) = cost_gradient(W, X, Y, n, lambd)<br>        W = W - lr*G<br>    err = error(W, X, Y)<br>    <span class="hljs-keyword">return</span> (W,J,err)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">W, X, Y</span>):<br>    Y_hat = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-X@W))<br>    Y_hat[Y_hat&lt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">0</span><br>    Y_hat[Y_hat&gt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>-np.mean(np.equal(Y_hat, Y)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">W</span>):<br>    (X, _, _) = read_data(<span class="hljs-string">&quot;test_data.csv&quot;</span>)<br>    Y_hat = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-X@W))<br>    Y_hat[Y_hat&lt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">0</span><br>    Y_hat[Y_hat&gt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">1</span><br>    idx = np.expand_dims(np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">201</span>), axis=<span class="hljs-number">1</span>)<br>    np.savetxt(<span class="hljs-string">&quot;predict.csv&quot;</span>, np.concatenate([idx, Y_hat], axis=<span class="hljs-number">1</span>), header = <span class="hljs-string">&quot;Index,ID&quot;</span>, comments=<span class="hljs-string">&#x27;&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Particle</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_dimensions</span>):<br>        self.position = np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">0.05</span>, size=num_dimensions)<br>        self.velocity = np.random.uniform(-<span class="hljs-number">0.001</span>, <span class="hljs-number">0.001</span>, size=num_dimensions)<br>        self.best_position = self.position.copy()<br>        self.best_cost = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_position</span>(<span class="hljs-params">self</span>):<br>        self.position = self.position + self.velocity<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_best</span>(<span class="hljs-params">self, cost_function</span>):<br>        current_cost = cost_function(self.position)<br>        <span class="hljs-keyword">if</span> current_cost &lt; self.best_cost:<br>            self.best_position = self.position.copy()<br>            self.best_cost = current_cost<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">particle_swarm_optimization</span>(<span class="hljs-params">X, Y, n</span>):<br>    num_particles = <span class="hljs-number">10</span><br>    num_iterations = <span class="hljs-number">30</span><br>    dimensions = <span class="hljs-number">1</span><br>    particles = [Particle(dimensions) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_particles)]<br>    global_best_position = particles[<span class="hljs-number">0</span>].best_position.copy()<br>    global_best_cost = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cost_function</span>(<span class="hljs-params">lambd</span>):<br>        W = np.random.random([X.shape[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>])<br>        (W, J, err) = train(W, X, Y, <span class="hljs-number">0.0001</span>, n, <span class="hljs-number">100000</span>, lambd)<br>        <span class="hljs-keyword">return</span> err<br><br>    <span class="hljs-keyword">for</span> iteration <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_iterations):<br>        <span class="hljs-keyword">for</span> particle <span class="hljs-keyword">in</span> particles:<br>            <span class="hljs-comment"># 更新粒子的速度和位置</span><br>            r1, r2 = np.random.random(), np.random.random()<br>            particle.velocity = <span class="hljs-number">0.5</span> * particle.velocity + <span class="hljs-number">1.5</span> * r1 * (particle.best_position - particle.position) + <span class="hljs-number">1.5</span> * r2 * (global_best_position - particle.position)<br>            particle.update_position()<br>            <span class="hljs-comment"># 更新个体最佳位置和全局最佳位置</span><br>            particle.update_best(cost_function)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前粒子位置：&quot;</span>,particle.best_position)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前粒子误差：&quot;</span>,particle.best_cost)<br>            <span class="hljs-keyword">if</span> particle.best_cost &lt; global_best_cost:<br>                global_best_position = particle.best_position.copy()<br>                global_best_cost = particle.best_cost<br><br>    <span class="hljs-keyword">return</span> global_best_position[<span class="hljs-number">0</span>], global_best_cost<br><br>(X, Y, n) = read_data(<span class="hljs-string">&quot;train.csv&quot;</span>)<br>best_lambda, best_cost = particle_swarm_optimization(X, Y, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Best lambda: <span class="hljs-subst">&#123;best_lambda&#125;</span>, Best cost: <span class="hljs-subst">&#123;best_cost&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><imgsrc="https://pic.imgdb.cn/item/670e4456d29ded1a8c1fcc22.png" /></p><p>知道了大概的位置后，尝试带入构造好的模型进行求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_data</span>(<span class="hljs-params">addr</span>):<br>    data = np.loadtxt(addr, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br>    n = data.shape[<span class="hljs-number">0</span>]<br>    <br>    <span class="hljs-comment">###### You may modify this section to change the model</span><br>    X = np.ones([n, <span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> power <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            X = np.concatenate([X, np.expand_dims(np.power(data[:,i], power), axis=<span class="hljs-number">1</span>)], axis=<span class="hljs-number">1</span>)<br> <br>    Y = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;train&quot;</span> <span class="hljs-keyword">in</span> addr:<br>        Y = np.expand_dims(data[:, -<span class="hljs-number">1</span>], axis=<span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-keyword">return</span> (X,Y,n)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cost_gradient</span>(<span class="hljs-params">W, X, Y, n, lambd</span>):  <span class="hljs-comment"># L1 正</span><br>    Y_hat = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-X @ W))<br>    cost_first_term = -np.<span class="hljs-built_in">sum</span>(Y * np.log(Y_hat) + (<span class="hljs-number">1</span> - Y) * np.log(<span class="hljs-number">1</span> - Y_hat)) / (<span class="hljs-number">2</span> * n)<br>    <span class="hljs-comment"># L1 正则化项</span><br>    reg_term = lambd * np.<span class="hljs-built_in">sum</span>(np.<span class="hljs-built_in">abs</span>(W[<span class="hljs-number">1</span>:]))<br>    j = cost_first_term + reg_term<br>    G = np.zeros_like(W)<br>    G = (X.T @ (Y_hat - Y)) / n<br>    <span class="hljs-comment"># L1 正则化项的梯度</span><br>    G[<span class="hljs-number">1</span>:] += lambd * np.sign(W[<span class="hljs-number">1</span>:])<br>    <span class="hljs-keyword">return</span> (j, G)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">W, X, Y, lr, n, iterations, lambd</span>):<br>    J = np.zeros([iterations, <span class="hljs-number">1</span>])<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>        (J[i], G) = cost_gradient(W, X, Y, n, lambd)<br>        W = W - lr*G<br>    err = error(W, X, Y)<br>    <br>    <span class="hljs-keyword">return</span> (W,J,err)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">W, X, Y</span>):<br>    Y_hat = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-X@W))<br>    Y_hat[Y_hat&lt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">0</span><br>    Y_hat[Y_hat&gt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>-np.mean(np.equal(Y_hat, Y)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">W</span>):<br>    (X, _, _) = read_data(<span class="hljs-string">&quot;test_data.csv&quot;</span>)<br>    <br>    Y_hat = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-X@W))<br>    Y_hat[Y_hat&lt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">0</span><br>    Y_hat[Y_hat&gt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">1</span><br>    <br>    idx = np.expand_dims(np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">201</span>), axis=<span class="hljs-number">1</span>)<br>    np.savetxt(<span class="hljs-string">&quot;predict.csv&quot;</span>, np.concatenate([idx, Y_hat], axis=<span class="hljs-number">1</span>), header = <span class="hljs-string">&quot;Index,ID&quot;</span>, comments=<span class="hljs-string">&#x27;&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br>    <br>iterations = <span class="hljs-number">100000</span>   <span class="hljs-comment">###### Training loops</span><br>lr = <span class="hljs-number">0.0001</span>    <span class="hljs-comment">###### Learning rate</span><br>lambd = <span class="hljs-number">0.0349708</span>  <span class="hljs-comment"># 用粒子群算法得到</span><br><br>(X, Y, n) = read_data(<span class="hljs-string">&quot;train.csv&quot;</span>)<br>W = np.random.random([X.shape[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>])<br><br>(W,J,err) = train(W, X, Y, lr, n, iterations, lambd)<br><span class="hljs-built_in">print</span>(err)<br><br>plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(iterations), J)<br><br>predict(W)<br></code></pre></td></tr></table></figure><p>最后效果大概在误差 0.035 左右，公榜正确率为 0.96</p><p><imgsrc="https://pic.imgdb.cn/item/670e4498d29ded1a8c2026be.png" /></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第六讲_正则化</title>
    <link href="/2024/10/09/ji-qi-xue-xi/di-liu-jiang-zheng-ze-hua/"/>
    <url>/2024/10/09/ji-qi-xue-xi/di-liu-jiang-zheng-ze-hua/</url>
    
    <content type="html"><![CDATA[<h2 id="第六讲regularization-正则化">第六讲：Regularization 正则化</h2><p>回顾模型<code>过拟合</code>的原因： - 模型过于复杂，参数多，可能性多- 训练集、测试集数据量太少，无法完全覆盖所有情况</p><h3 id="l2-正则化">L^2 正则化</h3><p><ahref="https://blog.csdn.net/m0_74235619/article/details/140866152?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=140866152&amp;sharerefer=PC&amp;sharesource=m0_74235619&amp;sharefrom=from_link">正则化（Regularization）</a></p><p><imgsrc="https://pic.imgdb.cn/item/66ec274af21886ccc005e3ce.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/66ec297af21886ccc0082ac8.png" /></p><p>还是需要调参</p><h3 id="l1-正则化">L^1 正则化</h3><p><imgsrc="https://pic.imgdb.cn/item/66ec3e6cf21886ccc020b51d.png" /></p><p>L1正则化做特征选择</p><p><imgsrc="https://pic.imgdb.cn/item/66ec3f85f21886ccc0221f27.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/66ec3fd5f21886ccc0227a01.png" /></p><p>计算L1正则的偏导</p><p><imgsrc="https://pic.imgdb.cn/item/66ec4076f21886ccc0232363.png" /></p><ul><li>正则化的作用是防止模型过拟合，通过对模型的参数进行约束，使得模型更加简单和稳定</li><li>正则化可能使得一些原本可能较大的系数变小，避免了模型过度依赖某些特征，从而提高了模型的泛化能力</li></ul><p>关于正则化的问题写了另一篇笔记在这里：</p><p>https://blog.csdn.net/m0_74235619/article/details/140866152?spm=1001.2014.3001.5501</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第五讲_多分类回归</title>
    <link href="/2024/09/25/ji-qi-xue-xi/di-wu-jiang-duo-fen-lei-hui-gui/"/>
    <url>/2024/09/25/ji-qi-xue-xi/di-wu-jiang-duo-fen-lei-hui-gui/</url>
    
    <content type="html"><![CDATA[<h2 id="多分类问题">多分类问题</h2><p>Softmax regression</p><p>如手写字体识别等</p><h3 id="数据">数据</h3><p>x可以多维，一个y（不同的类用不同的数值表示）</p><p>首先需要将<code>y</code>的标签转换为<code>one-hot</code>向量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-comment"># 创建原始张量</span><br>y = torch.tensor([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><span class="hljs-comment"># 创建一个全零的 one - hot 编码张量</span><br>y_onehot = torch.zeros(<span class="hljs-built_in">len</span>(y), <span class="hljs-number">3</span>)<br><span class="hljs-comment"># 执行 scatter 操作来进行 one - hot 编码</span><br>y_onehot.scatter_(<span class="hljs-number">1</span>, y.unsqueeze(<span class="hljs-number">1</span>), <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(y_onehot)<br><span class="hljs-comment"># tensor([[1., 0., 0.],</span><br><span class="hljs-comment">#         [0., 1., 0.],</span><br><span class="hljs-comment">#         [0., 0., 1.]])</span><br></code></pre></td></tr></table></figure>三种类别的空间距离是相等的，消除了数值之间的差异带来的影响</p><h3 id="模型">模型</h3><p>使用三个线性模型来实现（有几个类型就用几个线性模型）</p><p>公式：</p><p><imgsrc="https://pic.imgdb.cn/item/66ebb613f21886ccc09414e9.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/66ebdfd3f21886ccc0c07cfd.png" /></p><p>对于每个模型来说，实现的功能都是判断是否属于对应的一类（属于/不属于），是一个二分类问题</p><p>很多个二分类合在一起构成一个多分类问题</p><h3 id="softmax-function---激活函数">Softmax Function---激活函数</h3><p>使用<code>Sotfmax函数</code>，把线性模型的<code>输出</code>转化为<code>概率</code></p><p>需要将输出的z转为正数，但是不能改变数值之间的大小关系，所以使用 <spanclass="math display">\[e^z\]</span> 来表示</p><p><imgsrc="https://pic.imgdb.cn/item/66ebe2e7f21886ccc0c432d4.png" /></p><p>同时要注意概率求和结果为 1</p><p>softmax函数---可以理解为<code>激活函数</code></p><p><imgsrc="https://pic.imgdb.cn/item/66ebe5c9f21886ccc0c8669a.png" /></p><h3 id="损失函数">损失函数</h3><p>交叉熵损失函数 <code>Cross entropy</code></p><p>公式</p><ul><li><p>损失函数： <imgsrc="https://pic.imgdb.cn/item/66ebe955f21886ccc0cbbd82.png"alt="![alt text](https://pic.imgdb.cn/item/66ebe7dbf21886ccc0ca4669.png)" /></p></li><li><p>代价函数： <imgsrc="https://pic.imgdb.cn/item/66ebe97af21886ccc0cbe1b6.png" /></p></li></ul><h3 id="优化算法">优化算法</h3><p>优化算法还是跟之前一样，使用<code>梯度下降</code></p><h4 id="计算梯度">计算梯度</h4><p><imgsrc="https://pic.imgdb.cn/item/66ec055cf21886ccc0e47c1e.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/66ec0da8f21886ccc0eb779b.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/66ec0f03f21886ccc0ec9e3f.png" /></p><p>总结一下：</p><p><imgsrc="https://pic.imgdb.cn/item/66ec1091f21886ccc0ee3cf1.png" /></p><h3 id="第五讲补充">第五讲补充</h3><h4 id="k-nearest-neighbors">K Nearest Neighbors</h4><p><code>K近邻算法</code>是一种<code>分类</code>算法，其基本思想是：</p><ol type="1"><li>找出距离待测数据最近的K个样本点；</li><li>统计这K个样本点中属于不同类别的样本点个数；</li><li>将待测数据分配到距离最近的K个样本点中<code>类别数最多</code>的那个类别中。</li><li>K的选取：</li></ol><ul><li>K的选取一般取奇数，因为偶数个样本点中，类别数相同的概率较小---这句话没搞懂，老师也没说，不具有科学性</li></ul><p>算法的缺点是计算量比较大，比较费时间</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第四讲_模型选择</title>
    <link href="/2024/09/20/ji-qi-xue-xi/di-si-jiang-mo-xing-xuan-ze/"/>
    <url>/2024/09/20/ji-qi-xue-xi/di-si-jiang-mo-xing-xuan-ze/</url>
    
    <content type="html"><![CDATA[<h3 id="十折交叉验证的概念">十折交叉验证的概念</h3><p>一般实验中不会做这么多折，一般5折或者3折交叉验证</p><h3 id="偏差和方差">偏差和方差</h3><figure><img src="https://pic.imgdb.cn/item/66ebb05cf21886ccc08f2819.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><ol type="1"><li>偏差：模型预测值与真实值之间的误差，越小越好。</li><li>方差：模型预测值与真实值之间的方差，越小越好。</li></ol><h3 id="欠拟合">欠拟合</h3><ul><li>使用更加复杂的模型</li><li>增加更多的维度（特征）</li></ul><h3 id="过拟合">过拟合</h3><ul><li>收集更多的数据可以优化</li><li>降低模型复杂度</li><li>regularization 正则化</li></ul><h3id="面对欠拟合和过拟合问题对应的解决策略">面对欠拟合和过拟合问题，对应的解决策略</h3><p>对于过拟合的问题：</p><p>从数据的角度：增加训练数据；从模型选择的角度：选择更加合适、简单的模型；从损失函数的角度：使用正则化表达式</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第三讲_逻辑回归</title>
    <link href="/2024/09/18/ji-qi-xue-xi/di-san-jiang-luo-ji-hui-gui/"/>
    <url>/2024/09/18/ji-qi-xue-xi/di-san-jiang-luo-ji-hui-gui/</url>
    
    <content type="html"><![CDATA[<h2 id="逻辑回归">逻辑回归</h2><p>参考链接：<ahref="https://blog.csdn.net/weixin_45707277/article/details/120397276?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=120397276&amp;sharerefer=PC&amp;sharesource=m0_74235619&amp;sharefrom=from_link">机器学习：逻辑回归</a></p><p>逻辑回归是一个分类算法</p><p>对于分类问题的分类： - 二分类 - 多分类</p><p>逻辑回归是一个简单的二分类问题</p><p>分类和回归的区别： - 分类的结果取值只有两个 0 或 1 -回归的结果取值可以是全体实数</p><h3 id="数据">数据</h3><p>可以有多个维度（特征），和线性回归类似</p><h3 id="模型">模型</h3><p>使用的是线性模型：</p><p>基础模型：</p><ul><li><span class="math inline">\(z=W^TX+b\)</span></li></ul><p>sigmoid function:也叫激活函数</p><ul><li><spanclass="math inline">\(sigmoid(z)=\frac{1}{1+e^{-z}}\)</span></li></ul><p><imgsrc="https://pic.imgdb.cn/item/66f12ae4f21886ccc09ddef9.png" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):  <span class="hljs-comment"># sigmoid函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>/(<span class="hljs-number">1</span>+np.exp(-x))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid_derivative</span>(<span class="hljs-params">x</span>): <span class="hljs-comment"># sigmoid函数导数</span><br>    <span class="hljs-keyword">return</span> x*(<span class="hljs-number">1</span>-x)  <span class="hljs-comment"># 这个也需要记一下</span><br></code></pre></td></tr></table></figure><ul><li><span class="math inline">\(\hat{y}=sigmoid(z)\)</span></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">modlel_predict</span>(<span class="hljs-params">x, theta</span>):<br>    <span class="hljs-keyword">return</span> sigmoid(np.dot(x, theta))<br></code></pre></td></tr></table></figure><p><imgsrc="https://pic.imgdb.cn/item/66f12c1df21886ccc09f0b62.png" /></p><h3 id="损失函数">损失函数</h3><p><imgsrc="https://pic.imgdb.cn/item/670f3f29d29ded1a8cd94ba0.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670f3f47d29ded1a8cd9627d.png" /></p><p>Cross-entropy loss function: 交叉熵损失函数</p><ul><li><spanclass="math inline">\(L_i=-y_i\log(\hat{y_i})-(1-y_i)\log(1-\hat{y_i})\)</span></li></ul><p><span class="math inline">\(y_i\)</span> 等于 1 时激活 <spanclass="math inline">\(log(\hat{y_i})\)</span> 值，<spanclass="math inline">\(y_i\)</span> 等于 0 时激活 <spanclass="math inline">\(log(1-\hat{y_i})\)</span></p><p><imgsrc="https://pic.imgdb.cn/item/66f12c79f21886ccc09f5af1.png" /></p><p>代价函数如下：</p><ul><li><spanclass="math inline">\(L=\frac{1}{n}\sum_{i=1}^nL_i\)</span></li></ul><p>计算梯度公式：</p><ul><li><p><span class="math inline">\(\frac{\partial L_i}{\partialW_i}=\frac{\partial L_i}{\partial \hat{y}}\frac{\partial\hat{y}}{\partial z} \frac{\partial z}{\partialW_i}=(\hat{y_i}-y_i)x_i\)</span></p></li><li><p><span class="math inline">\(\frac{\partial L_i}{\partialb}=(\hat{y_i}-y_i)\)</span></p></li></ul><p>更新公式：</p><ul><li><p><span class="math inline">\(W_i=W_i-\alpha\frac{\partialL}{\partialW_i}=W_i-\frac{\alpha}{n}\sum_{i=1}^{n}(\hat{y_i}-y_i)x_i\)</span></p></li><li><p><span class="math inline">\(b=b-\alpha\frac{\partial L}{\partialb}=b-\frac{\alpha}{n}\sum_{i=1}^{n}(\hat{y_i}-y_i)\)</span></p></li></ul><h3 id="模型总结">模型总结</h3><p><imgsrc="https://pic.imgdb.cn/item/66f13518f21886ccc0a89f01.png" /></p><h3 id="补充的内容">补充的内容：</h3><p>注意：在很多分类场景当中我们不一定只关注预测的准确率，而是关注在所有样本中，目标群体是否被全部预测出来</p><p>使用混淆矩阵对分类问题进行评估 <imgsrc="https://pic.imgdb.cn/item/670f3f60d29ded1a8cd97124.png" /></p><p>准确率和召回率： <imgsrc="https://pic.imgdb.cn/item/670f3f7ad29ded1a8cd98038.png" /> <imgsrc="https://pic.imgdb.cn/item/670f3fa8d29ded1a8cd999b5.png" /></p><p>F1 反应了模型的稳健性 <imgsrc="https://pic.imgdb.cn/item/66ea37b9f21886ccc0140c32.png"alt="alt text" /></p><h3 id="样本不均衡问题下的评估">样本不均衡问题下的评估</h3><p>假设这样一个情况，如果99个样本癌症，1个样本非癌症，不管怎样我全都预测正例(默认癌症为正例),准确率就为99%但是这样效果并不好，这就是样本不均衡下的评估问题</p><h3 id="过采样与欠采样">过采样与欠采样</h3><p>这部分内容是参考了杭电高飞老师的课件，没有做很详细的笔记</p><h3 id="补充的资料">补充的资料：</h3><p>由 Softmax 想到的（二）—— Logistic 回归的 Loss函数为什么长成那个样子？</p><p>https://sakigami-yang.me/2017/08/10/thinking-from-softmax-02/</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线性回归模型中的常见图表</title>
    <link href="/2024/09/11/ji-qi-xue-xi/xian-xing-hui-gui-mo-xing-ke-shi-hua-zong-jie/"/>
    <url>/2024/09/11/ji-qi-xue-xi/xian-xing-hui-gui-mo-xing-ke-shi-hua-zong-jie/</url>
    
    <content type="html"><![CDATA[<h2id="近期课堂上学习了线性回归模型同时也读到了很好的一篇文章尝试对于里面的部分内容进行复现说明简单总结附上链接httpsmp.weixin.qq.comsqazbl3yy30x7w9nkl9hb0a">近期课堂上学习了线性回归模型，同时也读到了很好的一篇文章，尝试对于里面的部分内容进行复现说明，简单总结，附上链接：https://mp.weixin.qq.com/s/qAzbL3YY30X7W9NkL9hb0A</h2><h3 id="线性趋势线图">线性趋势线图</h3><figure><img src="https://pic.imgdb.cn/item/66e19db9d9c307b7e93db595.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>线性趋势线图用于可视化数据集中自变量和因变量之间的线性关系，以及线性回归模型拟合的效果</p><ul><li>反映线性关系</li><li>反映拟合效果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_diabetes<br><span class="hljs-comment"># 导入数据集</span><br>diabetes = load_diabetes() <br>X = diabetes.data[:, <span class="hljs-number">2</span>] <span class="hljs-comment"># 设第三个变量为X</span><br>y = diabetes.target  <br><br><span class="hljs-comment"># 利用公式实现线性回归算法拟合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linear_regression</span>(<span class="hljs-params">X,y</span>):<br>    X_mean = <span class="hljs-built_in">sum</span>(X)/<span class="hljs-built_in">len</span>(X)<br>    y_mean = <span class="hljs-built_in">sum</span>(y)/<span class="hljs-built_in">len</span>(y)<br><br>    <span class="hljs-comment"># 求解斜率和截距</span><br>    numerator = <span class="hljs-built_in">sum</span>((X-X_mean) * (y-y_mean))<br>    denominator = <span class="hljs-built_in">sum</span>((X-X_mean)**<span class="hljs-number">2</span>)<br>    slope = numerator / denominator  <span class="hljs-comment"># 斜率</span><br>    intercept = y_mean - slope * X_mean  <span class="hljs-comment"># 截距</span><br><br>    <span class="hljs-keyword">return</span> slope, intercept<br><br>slope,intercept  = linear_regression(X,y)<br><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>sns.regplot(x=X,y=y,color=<span class="hljs-string">&#x27;red&#x27;</span>,scatter_kws=&#123;<span class="hljs-string">&#x27;color&#x27;</span>:<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>:<span class="hljs-number">10</span>&#125;)  <span class="hljs-comment"># 设置 ci = None，不显示置信区间</span><br><span class="hljs-comment"># scatter_kws和line_kws分别用于设置数据点和趋势线的颜色等属性</span><br>plt.xlabel(<span class="hljs-string">&#x27;X&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Linear trend line plot&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h3 id="残差图">残差图</h3><figure><img src="https://pic.imgdb.cn/item/66e1a945d9c307b7e95272a9.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>残差图：残差是预测值和真实值之间的差值，残差图是残差和自变量之间的散点图，残差图可以反映线性回归模型的拟合效果，如果残差图没有集中，说明模型可能存在偏差，需要调整模型参数。</p><ul><li>在理想情况下，残差应该随机地分布在横轴上，没有明显的模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_diabetes<br><span class="hljs-comment"># 导入数据集</span><br>diabetes = load_diabetes() <br>X = diabetes.data[:, <span class="hljs-number">2</span>] <span class="hljs-comment"># 设第三个变量为X</span><br>y = diabetes.target  <br><br><span class="hljs-comment"># 利用公式实现线性回归算法拟合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linear_regression</span>(<span class="hljs-params">X,y</span>):<br>    X_mean = <span class="hljs-built_in">sum</span>(X)/<span class="hljs-built_in">len</span>(X)<br>    y_mean = <span class="hljs-built_in">sum</span>(y)/<span class="hljs-built_in">len</span>(y)<br><br>    <span class="hljs-comment"># 求解斜率和截距</span><br>    numerator = <span class="hljs-built_in">sum</span>((X-X_mean) * (y-y_mean))<br>    denominator = <span class="hljs-built_in">sum</span>((X-X_mean)**<span class="hljs-number">2</span>)<br>    slope = numerator / denominator  <span class="hljs-comment"># 斜率</span><br>    intercept = y_mean - slope * X_mean  <span class="hljs-comment"># 截距</span><br><br>    <span class="hljs-keyword">return</span> slope, intercept<br><br><span class="hljs-comment"># 获取回归直线的斜率和截距</span><br>slope,intercept  = linear_regression(X,y)<br><br><span class="hljs-comment"># 计算预测值</span><br>y_pred = slope * X + intercept<br><br><span class="hljs-comment"># 计算残差</span><br>residuals = y - y_pred<br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 绘制残差图</span><br>plt.scatter(X, residuals, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br>plt.axhline(y=<span class="hljs-number">0</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>) <span class="hljs-comment"># 添加水平参考线</span><br>plt.xlabel(<span class="hljs-string">&#x27;X label&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Residuals&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Residual plot&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h3 id="正态概率图">正态概率图</h3><figure><img src="https://pic.imgdb.cn/item/66e1ac75d9c307b7e958973f.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>正态概率图（Normal probabilityplot）是一种用于检验数据是否符合正态分布的图表</p><ul><li>这里检验模型的残差是否符合正态分布</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 部分代码同上...</span><br><br><span class="hljs-keyword">import</span> scipy.stats <span class="hljs-keyword">as</span> stats<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 计算残差</span><br>residuals = y - y_pred<br><br><span class="hljs-comment"># 绘制正态概率图</span><br>stats.probplot(residuals, dist=<span class="hljs-string">&quot;norm&quot;</span>, plot=plt)<br>plt.xlabel(<span class="hljs-string">&#x27;Theoretical quantiles&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Ordered residuals&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Normal probability plot&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h3 id="学习曲线">学习曲线</h3><figure><img src="https://pic.imgdb.cn/item/66e1b11ed9c307b7e96297c2.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>学习曲线（Learningcurve）是一种展示模型在训练集和验证集上表现随训练样本数量变化的图表。它通常将训练集和验证集的误差（如均方误差）或准确率作为纵轴，训练样本数量作为横轴，可以帮助我们分析模型的<code>拟合情况</code>和<code>泛化能力</code>。</p><p><code>在线性回归中，学习曲线可以帮助我们判断模型是否过拟合或欠拟合</code>。 当模型在训练集上表现良好但在验证集上表现较差时，可能存在过拟合；而当模型在两个集合上表现都较差时，可能存在欠拟合。通过观察学习曲线，可以调整模型的复杂度或者增加训练样本数量来改善模型的表现。</p><ul><li>学习曲线可以帮助我们分析模型在不同训练样本数量下的表现，进而判断模型是否过拟合或欠拟合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_diabetes<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> learning_curve<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 加载数据</span><br>diabetes = load_diabetes()<br>X = diabetes.data[:,<span class="hljs-number">2</span>] <span class="hljs-comment"># 选择一个特征</span><br>y = diabetes.target<br><br><span class="hljs-comment"># 创建线性回归模型并训练</span><br>model = LinearRegression()<br><br><span class="hljs-comment"># 计算学习曲线</span><br>train_sizes,train_scores,valid_scores = learning_curve(model,X[:,np.newaxis],y,train_sizes=[<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>],cv=<span class="hljs-number">5</span>)  <span class="hljs-comment"># 训练样本数量为50、100、200、300</span><br>  <br><span class="hljs-comment"># 计算训练集和验证集的平均误差</span><br>train_mean=np.mean(train_scores,axis=<span class="hljs-number">1</span>)<br>train_std=np.std(train_scores,axis=<span class="hljs-number">1</span>)<br>valid_mean=np.mean(valid_scores,axis=<span class="hljs-number">1</span>)<br>valid_std=np.std(valid_scores,axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 绘制学习曲线</span><br>plt.figure()<br>plt.title(<span class="hljs-string">&quot;Learning Curve&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Training examples&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Score&quot;</span>)<br>plt.grid()  <span class="hljs-comment"># 显示网格</span><br>plt.fill_between(train_sizes,train_mean-train_std,train_mean+train_std,alpha=<span class="hljs-number">0.1</span>,color=<span class="hljs-string">&quot;r&quot;</span>)  <span class="hljs-comment"># 填充训练集的误差</span><br>plt.fill_between(train_sizes,valid_mean-valid_std,valid_mean+valid_std,alpha=<span class="hljs-number">0.1</span>,color=<span class="hljs-string">&quot;g&quot;</span>)  <span class="hljs-comment"># 填充验证集的误差</span><br>plt.plot(train_sizes,train_mean,<span class="hljs-string">&quot;o-&quot;</span>,color=<span class="hljs-string">&quot;r&quot;</span>,label=<span class="hljs-string">&quot;Training score&quot;</span>)  <span class="hljs-comment"># 绘制训练集的得分</span><br>plt.plot(train_sizes,valid_mean,<span class="hljs-string">&quot;o-&quot;</span>,color=<span class="hljs-string">&quot;g&quot;</span>,label=<span class="hljs-string">&quot;Cross-validation score&quot;</span>)  <span class="hljs-comment"># 绘制验证集的得分(使用交叉验证)</span><br>plt.legend(loc=<span class="hljs-string">&quot;best&quot;</span>)  <span class="hljs-comment"># 显示图例</span><br>plt.show()  <span class="hljs-comment"># 显示图</span><br></code></pre></td></tr></table></figure><p>还有一些感觉用处不大就不详细学习了，日后有需要再看</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二讲_线性回归</title>
    <link href="/2024/09/11/ji-qi-xue-xi/di-er-jiang-xian-xing-hui-gui/"/>
    <url>/2024/09/11/ji-qi-xue-xi/di-er-jiang-xian-xing-hui-gui/</url>
    
    <content type="html"><![CDATA[<h2 id="线性回归模型-linear-regression">线性回归模型 linearregression</h2><p>第一步：数据集 dataset 维度--&gt;自变量的个数维度大于等于三，统一叫<code>超平面</code>，公式上很直观</p><p>第二步：parameters 参数--&gt;<code>权重和常数项</code></p><p>第三步：损失函数 loss function --&gt; MSE 均方误差<code>损失函数其实就是复合函数</code></p><p>均方误差（Mean SquaredError，MSE）是一种常用的衡量估计量与被估计量之间差异程度的指标。</p><p><strong>一、定义</strong></p><p>均方误差是各数据偏离真实值的距离平方和的平均数，即：</p><p><spanclass="math inline">\(MSE=\frac{1}{n}\sum_{i=1}^{n}(y_i-\hat{y_i})^2\)</span></p><p>其中，<span class="math inline">\(n\)</span> 是样本数量，<spanclass="math inline">\(y_i\)</span> 是 真实值，<spanclass="math inline">\(\hat{y_i}\)</span> 是估计值。</p><p><strong>二、特点</strong></p><ol type="1"><li>非负性：均方误差的值始终是非负的，当且仅当估计值与真实值完全相等时，均方误差为零。</li><li>对误差的放大作用：由于计算的是误差的平方，所以对较大的误差会给予更大的权重，这使得均方误差对异常值比较敏感。</li></ol><p><strong>三、应用场景</strong></p><ol type="1"><li>回归分析：在机器学习和统计学的回归问题中，均方误差常被用作损失函数，通过最小化均方误差来优化模型参数，使模型的预测值尽可能接近真实值。</li><li>信号处理：用于评估信号重建或滤波的效果。</li><li>质量控制：在工业生产中，可以用来衡量产品的质量与标准值之间的差异。</li></ol><p>例如，在房价预测问题中，使用均方误差作为损失函数，通过不断调整模型参数，使得模型预测的房价与实际房价之间的均方误差最小化，从而提高房价预测的准确性。</p><h3 id="模型">模型</h3><p>选择线性模型，一元一次方程</p><h3id="线性回归模型的损失函数是均方误差的一半">线性回归模型的损失函数是<code>均方误差的一半</code></h3><figure><img src="https://pic.imgdb.cn/item/66ec12f1f21886ccc0f0c21a.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>损失函数是针对每个样本点计算：</p><p><spanclass="math inline">\(\frac{1}{2}MSE=\frac{1}{2}(y_i-\hat{y_i})^2\)</span></p><p>代价函数是损失函数求和并取均值（取均值消除样本数量的影响）：</p><p><spanclass="math inline">\(\frac{1}{2}MSE=\frac{1}{2}\times\frac{1}{n}\sum_{i=1}^{n}(y_i-\hat{y_i})^2\)</span></p><p><code>损失函数</code> 相对 <code>代价函数</code>要重要一点!</p><p>因为损失函数是标准，损失函数更重要，损失函数确定好了，代价函数无非就是对于损失函数的求和</p><p>复习数学知识：</p><h3 id="优化算法---梯度下降法">优化算法---梯度下降法</h3><p>梯度下降法的思想是基于损失函数的梯度（或者说斜率）来更新参数，以达到最小化损失函数的目的</p><p>参数空间和特征空间的概念</p><p>学习率：https://blog.csdn.net/m17635262186/article/details/136134379（【python机器学习】——梯度下降法）</p><p>学习率是<code>超参数</code>，是人自己设置的，而不是机器自己学习能够得到的</p><h3 id="梯度下降算法常见的三种类型">梯度下降算法常见的三种类型：</h3><ul><li>全量梯度下降</li><li>随机梯度下降</li><li>小批量梯度下降</li></ul><p>一、全量梯度下降：</p><p>每次迭代都使用<code>整个训练数据集</code>来计算损失函数关于模型参数的梯度，<code>内存需求量大</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 全量梯度下降 参考：http://t.csdnimg.cn/mK1HJ</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment">#创建数据集X，y</span><br>np.random.seed(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 设置随机数种子为 1，确保每次运行代码时生成的随机数具有可重复性</span><br>X = np.random.rand(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br>y = <span class="hljs-number">4</span>+<span class="hljs-number">3</span>*X+np.random.randn(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)  <span class="hljs-comment"># 随机噪声 np.random.randn(100,1), 随机噪声符合标准正态分布</span><br>X_b = np.c_[np.ones((<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)),X]  <span class="hljs-comment"># 对输入特征 X 进行处理，在其左侧添加一列全为 1 的向量，得到 X_b,这是为了在进行线性回归时考虑截距项（即当 X 为 0 时的 y 值）</span><br><br><span class="hljs-comment">#创建超参数</span><br>learning_rate = <span class="hljs-number">0.001</span><br>n_iterations = <span class="hljs-number">10000</span><br><br><span class="hljs-comment">#1.初始化θ，W0...Wn，标准正态分布创建W</span><br>theta = np.random.randn(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)   <span class="hljs-comment"># 包含了截距和斜率两项</span><br><br><span class="hljs-comment">#4.判断是否收敛，一般不会设定阈值，而是直接采用设置相对大的迭代次数，保证可以收敛</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_iterations):<br>    <span class="hljs-comment">#2.求梯度 计算gradient</span><br>    gradients = X_b.T.dot((X_b.dot(theta)-y))<br>    <span class="hljs-comment">#3.应用梯度下降法的公式去调整θ值，θt+1=θt-η*gradient</span><br>    theta = theta-learning_rate*gradients<br><span class="hljs-built_in">print</span>(theta)<br><br>plt.scatter(X, y)<br>plt.plot(X, X_b.dot(theta), color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;X&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Scatter Plot of y vs X&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><figure><img src="https://pic.imgdb.cn/item/66e193bbd9c307b7e92a4fa9.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>二、随机梯度下降：</p><p>梯度下降算法每次从训练集中<code>随机选择一个样本</code>来进行学习，每次的学习是非常快的，并且可以进行在线更新，但是也有缺点，在于每次更新可能并不会按照正确的方向进行，带来优化波动。</p><ul><li>当训练数据集非常大时，随机梯度下降是一种常用的优化算法。它可以在每次迭代中<code>快速处理少量样本</code>，从而<code>减少计算时间</code>和<code>内存需求</code></li><li>在在线学习场景中，数据不断地到来，随机梯度下降可以<code>实时地</code>根据新数据更新模型参数，适用于处理动态变化的数据集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>X = <span class="hljs-number">2</span>*np.random.rand(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br>y = <span class="hljs-number">4</span>+<span class="hljs-number">2</span>*X+np.random.randn(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br><br>X_b = np.c_[np.ones((<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)),X]<br><br>n_epoches = <span class="hljs-number">10000</span>   <span class="hljs-comment"># epoches表示迭代的轮数，一个 epoch 是指将整个训练数据集完整地遍历一次</span><br>m = <span class="hljs-number">100</span><br>learing_rate = <span class="hljs-number">0.001</span><br>theta = np.random.randn(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> epoche <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_epoches):   <span class="hljs-comment"># 迭代 n_epoches 次</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):    <span class="hljs-comment"># 遍历 m 个样本</span><br>        random_index = np.random.randint(m)   <span class="hljs-comment">#有放回的采样</span><br>        xi = X_b[random_index:random_index+<span class="hljs-number">1</span>]<br>        yi = y[random_index:random_index+<span class="hljs-number">1</span>]<br>        gradients = xi.T.dot(xi.dot(theta)-yi)<br>        theta = theta - learing_rate*gradients<br><br><span class="hljs-built_in">print</span>(theta)<br><br>plt.scatter(x=X,y=y)<br>plt.plot(X,X_b.dot(theta),color=<span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;X&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><figure><img src="https://pic.imgdb.cn/item/66e245ffd9c307b7e9228998.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>三、小批量梯度下降算法</p><p>小批量梯度下降优化算法是一种优化算法，结合了全量梯度和随机梯度下降的优点，广泛应用于机器学习和深度学习中</p><ul><li>第一步将数据集划分为若干个小的批量<code>mini-batch</code>，每个小批量包含一定数量的样本</li><li>小批量梯度下降算法在每次迭代中使用一个<code>小批量的样本</code>来进行计算，既不像全量梯度下降算法需要计算整个数据集的梯度，也不像随机梯度下降算法只使用一个样本（可能会导致更新方向的不稳定性）</li></ul><h3 id="年9月11日晚-实验课的作业">2024年9月11日晚 实验课的作业：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cost_gradient</span>(<span class="hljs-params">W, X, Y, n</span>):<br>      G = X.T.dot(X.dot(W)-Y)   <span class="hljs-comment">###### Gradient  </span><br>      j = (<span class="hljs-number">1</span>/n)*np.<span class="hljs-built_in">sum</span>((X.dot(W)-Y)**<span class="hljs-number">2</span>)   <span class="hljs-comment">###### cost with respect to current W </span><br>      <br>      <span class="hljs-keyword">return</span> (j, G)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gradientDescent</span>(<span class="hljs-params">W, X, Y, lr, iterations</span>):<br>      n = np.size(Y)<br>      J = np.zeros([iterations, <span class="hljs-number">1</span>]) <br>      <br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>          (J[i], G) = cost_gradient(W, X, Y, n)<br>          W = W - lr * G  <span class="hljs-comment">###### Update W based on gradient</span><br><br>      <span class="hljs-keyword">return</span> (W,J)<br><br>iterations = <span class="hljs-number">10</span> <span class="hljs-comment">###### Training loops</span><br>lr = <span class="hljs-number">0.00001</span>   <span class="hljs-comment">###### Learning rate</span><br><br>data = np.loadtxt(<span class="hljs-string">&#x27;LR.txt&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br>n = np.size(data[:, <span class="hljs-number">1</span>])<br>W = np.zeros([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br>X = np.c_[np.ones([n, <span class="hljs-number">1</span>]), data[:,<span class="hljs-number">0</span>]]<br>Y = data[:, <span class="hljs-number">1</span>].reshape([n, <span class="hljs-number">1</span>])<br><br>(W,J) = gradientDescent(W, X, Y, lr, iterations)<br><br><span class="hljs-comment">#Draw figure</span><br>plt.figure()<br>plt.plot(data[:,<span class="hljs-number">0</span>], data[:,<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;rx&#x27;</span>)<br>plt.plot(data[:,<span class="hljs-number">0</span>], np.dot(X,W))<br><br>plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(iterations), J) <br></code></pre></td></tr></table></figure><figure><img src="https://pic.imgdb.cn/item/66e19300d9c307b7e9295d64.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/66e192eed9c307b7e9294842.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h3 id="梯度下降模型的局限">梯度下降模型的局限</h3><p>1、如果梯度在某点为0，则无法确定参数的更新方向，导致梯度下降算法无法收敛。</p><p>2、梯度下降算法在某些情况下可能无法收敛到最优解，例如在非凸函数上，或者当函数的梯度存在非线性项时。</p><h3 id="线性回归模型总结">线性回归模型总结</h3><p>四个部分：</p><ul><li><p>数据</p></li><li><p>模型</p></li><li><p>损失函数/代价函数</p></li><li><p>优化算法</p></li></ul><p>对于后面的每一个模型，都需要按照这四个部分进行学习，非常重要，一定要掌握！！！</p><h2 id="补充的内容">补充的内容：</h2><h3id="最小二乘法与梯度下降算法辨析">最小二乘法与梯度下降算法辨析：</h3><p>二者都是用于求解回归问题的常用方法，它们的主要区别如下：</p><p><strong>一、原理</strong></p><ol type="1"><li>最小二乘法：通过最小化误差的平方和来确定数据的<code>最佳拟合直线或曲线</code>。它<code>基于解析的方法</code>，<code>直接求解</code>使误差平方和最小的<code>参数值</code>。</li></ol><ul><li><p>对于线性回归问题，最小二乘法可以通过求解正规方程来得到参数的解析解。即对于线性模型<span class="math inline">\(y = w_1x_1 + w_2x_2 +... + w_nx_n +b\)</span>，最小二乘法通过最小化实际值 <spanclass="math inline">\(y\)</span> 与预测值 <spanclass="math inline">\(\hat{y}\)</span> 之间的误差平方和 <spanclass="math inline">\(S=\sum_{i=1}^{m}(y_i-\hat{y}_i)^2\)</span>，其中<span class="math inline">\(m\)</span> 是样本数量，<spanclass="math inline">\(\hat{y}=w_1x_{1i}+w_2x_{2i}+...+w_nx_{ni}+b\)</span>，来确定参数<span class="math inline">\(w_1,w_2,...,w_n,b\)</span> 的值。</p><ul><li><p>要点一：最小二乘法是直接求解参数</p></li><li><p>要点二：最小二乘法是解方程</p></li></ul></li></ul><ol start="2" type="1"><li>梯度下降算法：是一种<code>迭代优化算法</code>，通过不断地沿着目标函数的负梯度方向更新参数，以逐渐减小目标函数的值。</li></ol><ul><li><p>在回归问题中，目标函数通常是误差平方和。对于线性回归，目标函数为<spanclass="math inline">\(S=\sum_{i=1}^{m}(y_i-\hat{y}_i)^2\)</span>，其中<spanclass="math inline">\(\hat{y}=w_1x_{1i}+w_2x_{2i}+...+w_nx_{ni}+b\)</span>。梯度下降算法从初始的参数值开始，每次迭代计算目标函数关于参数的梯度，然后沿着负梯度方向更新参数，即<span class="math inline">\(w_j = w_j-\alpha\frac{\partial S}{\partialw_j}\)</span>，其中 <span class="math inline">\(\alpha\)</span>是学习率，控制每次更新的步长。</p><ul><li><p>梯度下降算法的目标函数的均方误差和，这样就与最小二乘法非常相似，但最小二乘法是直接求解参数，而梯度下降算法是迭代求解参数。</p></li><li><p>是一种迭代优化算法，线性非线性的回归问题都可以使用梯度下降算法。</p></li></ul></li></ul><p><strong>二、二者的优缺点</strong></p><ol type="1"><li>最小二乘法：<ul><li>优点：如果数据满足一定的条件（如线性独立、满秩等），可以直接得到全局最优解，计算速度快。</li><li>缺点：当数据量很大或特征维度很高时，计算正规方程的逆矩阵可能会非常<code>耗时</code>甚至不可行，并且<code>对异常值比较敏感</code>。</li></ul></li><li>梯度下降算法：<ul><li>优点：适用于大规模数据和高维度问题，<code>可以通过调整学习率等参数来控制算法的收敛速度和性能</code>。对异常值相对不那么敏感。</li><li>缺点：<code>需要选择合适的学习率</code>，学习率过大可能导致算法不收敛，学习率过小则收敛速度会很慢。并且只能得到局部最优解，可能会陷入局部极小值。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROS</title>
    <link href="/2024/08/07/ros/ros/"/>
    <url>/2024/08/07/ros/ros/</url>
    
    <content type="html"><![CDATA[<p>记录学习ROS的历程</p><p>涉及到的学习网站：</p><p>b站古月居ROS21讲：https://www.bilibili.com/video/BV1zt411G7Vn?p=7&amp;spm_id_from=pageDriver&amp;vd_source=6a7595d8dfd01dbd88c8324012f0aaf0</p><p>鱼香ROS教程文档：fishros.com</p><p>ROS2社区：fishros.org.cn</p><p>【Autolabor初级教程】ROS机器人入门https://www.bilibili.com/video/BV1Ci4y1L7ZZ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=4bec64424204f10ec2154c3469a097cf</p><p>待补充...</p><hr /><h3 id="ros2-指令"><code>ROS2</code> 指令</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">colcon build</span><br></code></pre></td></tr></table></figure><p>构建 ROS工作空间，对工作空间中的所有包或者指定的包进行编译、链接等构建操作</p><h3 id="ros核心概念介绍">ROS核心概念介绍</h3><p>ROS（Robot OperatingSystem，机器人操作系统）是一个用于机器人的开源元操作系统。它提供了一系列的工具和库，帮助开发者更方便地创建机器人应用程序。以下是ROS 的一些核心概念：</p><p><strong>一、节点（Node）</strong> - <strong>定义</strong>：节点是 ROS中执行计算任务的基本单元，一个程序的一次运行实例就是一个节点。每个节点都可以完成特定的功能，比如一个节点可以控制机器人的移动，另一个节点可以处理传感器数据。- <strong>特点和作用</strong>： -节点之间相互独立，可以分别编写、编译和测试，提高了代码的可维护性和可扩展性。- 节点之间通过主题（Topic）、服务（Service）或参数服务器（ParameterServer）进行通信，降低了系统的耦合度，便于系统的功能扩展和修改。 -例如，在一个自动驾驶机器人系统中，可能有一个节点负责感知环境（如激光雷达数据处理节点），另一个节点负责路径规划，还有一个节点负责控制车辆的运动。这些节点可以独立开发和调试，只要它们遵循统一的通信协议，就可以协同工作。</p><p><strong>二、主题（Topic）</strong> -<strong>定义</strong>：主题是节点之间发布（Publish）和订阅（Subscribe）消息的一种通信机制。一个主题就是一个消息通道，发布者将消息发送到主题上，订阅者从主题上接收消息。- <strong>特点和作用</strong>： -主题是一种异步通信方式，发布者和订阅者不需要直接知道对方的存在，只要它们关注的主题名称相同，就可以进行通信。-主题支持一对多和多对多的通信模式，即一个主题可以有多个发布者和多个订阅者。这使得信息可以在多个节点之间共享，非常适合用于传感器数据的分发和处理结果的广播等场景。-例如，在一个机器人视觉系统中，摄像头节点可以将采集到的图像数据作为消息发布到一个名为“/camera/image”的主题上，而多个图像处理节点可以同时订阅这个主题，获取图像数据进行不同的处理任务。</p><p><strong>三、消息（Message）</strong> -<strong>定义</strong>：消息是节点之间通过主题进行通信的数据载体。它定义了一种特定的数据结构，包含了节点之间传递的具体信息。- <strong>特点和作用</strong>： - 消息具有明确的数据类型和格式，ROS支持多种标准数据类型（如整数、浮点数、字符串等），也允许用户自定义消息类型。- 消息的定义在.msg文件中进行，通过编译系统生成相应的代码，供节点使用。这样可以确保节点之间的数据交互具有一致性和可读性。-例如，一个激光雷达节点发布的消息可能包含激光雷达的扫描角度、距离等信息，这些信息按照特定的消息格式组织，订阅该消息的节点可以根据消息的定义正确地解析和处理数据。</p><p><strong>四、服务（Service）</strong> -<strong>定义</strong>：服务是一种同步的请求-响应通信机制。一个服务由一对节点组成，一个节点提供服务（服务器），另一个节点请求服务（客户端）。- <strong>特点和作用</strong>： -服务是基于请求和响应的模式，客户端向服务器发送请求，服务器处理请求并返回响应。这种通信方式适用于需要获取特定结果或执行一次性任务的场景。- 服务的定义在.srv文件中，包含请求和响应的数据结构。与主题不同，服务通常用于执行特定的操作，如获取机器人的当前状态、控制机器人执行某个动作等。-例如，一个机器人系统中可能有一个提供“获取机器人位置”服务的节点，其他节点可以作为客户端向该服务发送请求，获取机器人的当前位置信息。</p><p><strong>五、包（Package）</strong> - <strong>定义</strong>：包是 ROS中组织代码和资源的基本单元。一个包可以包含 ROS节点、消息、服务、配置文件、启动文件等。 - <strong>特点和作用</strong>：- 包将相关的功能和资源集中在一起，便于代码的管理、共享和复用。 -包具有一定的组织结构，通常包含src（源代码）、include（头文件）、msg（消息定义文件）、srv（服务定义文件）、launch（启动文件）等目录。-例如，一个机器人导航包可能包含路径规划节点、地图构建节点、导航相关的消息和服务定义文件，以及启动整个导航系统的启动文件。通过将这些功能封装在一个包中，可以方便地在不同的机器人项目中复用和扩展导航功能。</p><p><strong>六、工作空间（Workspace）</strong> -<strong>定义</strong>：工作空间是开发 ROS应用程序的一个环境，它包含一系列的 ROS 包。 -<strong>特点和作用</strong>： - 工作空间允许开发者同时管理多个 ROS包，进行代码的编译、构建和测试。 - 通常一个工作空间包含一个 src目录（用于存放源代码）和一个 build目录（用于存放编译过程中生成的中间文件）以及一个 devel目录（用于存放可执行文件和库文件）。 -例如，开发者可以在一个工作空间中创建多个自己开发的 ROS包，以及集成一些第三方的 ROS 包，通过设置环境变量，使 ROS能够找到工作空间中的包和代码，进行开发和调试工作。</p><p><strong>七、参数服务器（Parameter Server）</strong> -<strong>定义</strong>：参数服务器是一个存储 ROS系统中参数的集中式数据库。节点可以在参数服务器上存储和获取参数值。 -<strong>特点和作用</strong>： -参数服务器提供了一种全局共享参数的方式，方便节点之间共享配置信息和动态调整参数。-参数可以是各种数据类型，如整数、浮点数、字符串、列表等。节点可以在运行时动态地修改参数值，其他相关节点可以及时获取到参数的变化。-例如，在一个机器人系统中，可以在参数服务器上存储机器人的运动速度、传感器的配置参数等，不同的节点可以根据需要获取这些参数，并根据实际情况进行调整。</p><p><strong>八、动作（Action）</strong> -<strong>定义</strong>：动作是一种扩展的通信机制，结合了主题和服务的特点，用于实现长时间运行、有反馈的任务。- <strong>特点和作用</strong>： -动作通常用于需要一段时间才能完成的任务，例如机器人的自主导航任务，任务执行过程中可以不断反馈任务的进度和状态信息。-动作由一个动作服务器和一个或多个动作客户端组成。动作服务器负责执行任务，动作客户端可以发送任务请求并接收任务的反馈和结果。-例如，一个机器人执行搬运任务，动作客户端发送搬运任务请求给动作服务器，动作服务器在执行任务过程中可以不断发布任务的进度（如已搬运的物品数量、剩余距离等），任务完成后返回最终的结果（如任务成功或失败的状态）。</p><p><strong>九、启动文件（Launch File）</strong> -<strong>定义</strong>：启动文件是一种用于启动 ROS节点和设置系统参数的配置文件。它使用 XML格式编写，可以同时启动多个节点，并指定节点的参数和运行环境。 -<strong>特点和作用</strong>： - 启动文件简化了 ROS系统的启动过程，避免了在命令行中逐个启动节点和设置参数的繁琐操作。 -可以在启动文件中设置节点的名称、主题名称、参数值等，还可以定义节点之间的通信关系和启动顺序。-例如，在一个机器人系统的启动文件中，可以同时启动摄像头节点、图像处理节点、运动控制节点等，并设置它们之间的主题连接和参数配置，确保整个系统能够正确地协同工作。</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>智能优化算法---遗传算法（GA）</title>
    <link href="/2024/07/31/zhi-neng-you-hua-suan-fa-yi-chuan-suan-fa-ga/"/>
    <url>/2024/07/31/zhi-neng-you-hua-suan-fa-yi-chuan-suan-fa-ga/</url>
    
    <content type="html"><![CDATA[<h1 id="说明">说明</h1><p>基础内容源自<strong>智能优化算法及其MATLAB实例（第二版）源程序</strong></p><p>源程序为 matlab 代码，笔者在此基础上将 matlab 代码转化为 python代码实现</p><h1 id="一标准遗传算法求函数极值">一、标准遗传算法求函数极值</h1><h2 id="ga21.m">GA21.m</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%标准遗传算法求函数极值%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><br><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>初始化参数<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">clear all;              %</span>清除所有变量<br>close all;              %清图<br>clc;                    %清屏<br><span class="hljs-variable constant_">NP</span>=<span class="hljs-number">50</span>;                  %种群数量<br>L=<span class="hljs-number">20</span>;                   %二进制数串长度<br><span class="hljs-title class_">Pc</span>=<span class="hljs-number">0.8</span>;                 %交叉率<br><span class="hljs-title class_">Pm</span>=<span class="hljs-number">0.1</span>;                 %变异率<br>G=<span class="hljs-number">100</span>;                  %最大遗传代数<br><span class="hljs-title class_">Xs</span>=<span class="hljs-number">10</span>;                  %上限<br><span class="hljs-title class_">Xx</span>=<span class="hljs-number">0</span>;                   %下限<br>f=randint(<span class="hljs-variable constant_">NP</span>,L);        %随机获得初始种群<br>% 现在比较新的 matlab 版本中，需要将 randint 函数换成 randi 函数<br><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%遗传算法循环<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><br><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span><span class="hljs-symbol">:G</span><br>    <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>将二进制解码为定义域范围内十进制<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">    for i=1:NP</span><br><span class="hljs-string">        U=f(i,:);</span><br><span class="hljs-string">        m=0;</span><br><span class="hljs-string">        for j=1:L</span><br><span class="hljs-string">            m=U(j)*2^(j-1)+m;</span><br><span class="hljs-string">        end</span><br><span class="hljs-string">        x(i)=Xx+m*(Xs-Xx)/(2^L-1);</span><br><span class="hljs-string">        Fit(i)= func1(x(i));</span><br><span class="hljs-string">    end</span><br><span class="hljs-string">    maxFit=max(Fit);           %</span>最大值<br>    minFit=min(<span class="hljs-title class_">Fit</span>);           %最小值<br>    rr=find(<span class="hljs-title class_">Fit</span>==maxFit);<br>    fBest=f(rr(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-symbol">:</span>);        %历代最优个体   <br>    xBest=x(rr(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br>    <span class="hljs-title class_">Fit</span>=(<span class="hljs-title class_">Fit</span>-minFit)/(maxFit-minFit);  %归一化适应度值<br>    <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>基于轮盘赌的复制操作<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%<br>    sum_Fit=sum(<span class="hljs-title class_">Fit</span>);<br>    fitvalue=<span class="hljs-title class_">Fit</span>./sum_Fit;<br>    fitvalue=cumsum(fitvalue);<br>    ms=sort(rand(<span class="hljs-variable constant_">NP</span>,<span class="hljs-number">1</span>));<br>    fiti=<span class="hljs-number">1</span>;<br>    newi=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> newi&lt;=<span class="hljs-variable constant_">NP</span><br>        <span class="hljs-keyword">if</span> (ms(newi))&lt;fitvalue(fiti)<br>            nf(newi,<span class="hljs-symbol">:</span>)=f(fiti,<span class="hljs-symbol">:</span>);<br>            newi=newi+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            fiti=fiti+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span>   <br>    <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%基于概率的交叉操作<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><br>    <span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:NP</span><br>        p=rand;<br>        <span class="hljs-keyword">if</span> p&lt;<span class="hljs-title class_">Pc</span><br>            q=randint(<span class="hljs-number">1</span>,L);<br>            <span class="hljs-keyword">for</span> j=<span class="hljs-number">1</span><span class="hljs-symbol">:L</span><br>                <span class="hljs-keyword">if</span> q(j)==<span class="hljs-number">1</span>;<br>                    temp=nf(i+<span class="hljs-number">1</span>,j);<br>                    nf(i+<span class="hljs-number">1</span>,j)=nf(i,j);<br>                    nf(i,j)=temp;<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%基于概率的变异操作<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">    i=1;</span><br><span class="hljs-string">    while i&lt;=round(NP*Pm)</span><br><span class="hljs-string">        h=randint(1,1,[1,NP]);      %</span>随机选取一个需要变异的染色体<br>        <span class="hljs-keyword">for</span> j=<span class="hljs-number">1</span><span class="hljs-symbol">:round</span>(L*<span class="hljs-title class_">Pm</span>)         <br>            g=randint(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,[<span class="hljs-number">1</span>,L]);   %随机需要变异的基因数<br>            nf(h,g)=~nf(h,g);<br>        <span class="hljs-keyword">end</span><br>        i=i+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br>    f=nf;<br>    f(<span class="hljs-number">1</span>,<span class="hljs-symbol">:</span>)=fBest;                   %保留最优个体在新种群中<br>    trace(k)=maxFit;                %历代最优适应度<br><span class="hljs-keyword">end</span><br>xBest;                              %最优个体<br>figure<br>plot(trace)<br>xlabel(<span class="hljs-string">&#x27;迭代次数&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;目标函数值&#x27;</span>)<br>title(<span class="hljs-string">&#x27;适应度进化曲线&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="func1.m">func1.m</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%适应度函数<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%<br>function result=func1(x)<br>fit= x+<span class="hljs-number">10</span>*sin(<span class="hljs-number">5</span>*x)+<span class="hljs-number">7</span>*cos(<span class="hljs-number">4</span>*x);<br>result=fit;<br></code></pre></td></tr></table></figure><h2 id="ga21.py">GA21.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-comment"># 用来正常显示中文标签及负号</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>]=[<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span> <br><br><span class="hljs-comment"># 定义目标函数 func1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x+<span class="hljs-number">10</span>*sin(<span class="hljs-number">5</span>*x)+<span class="hljs-number">7</span>*cos(<span class="hljs-number">4</span>*x)  <span class="hljs-comment"># func1.m 对应的适应度函数</span><br><br><span class="hljs-comment"># 初始化参数</span><br>NP = <span class="hljs-number">50</span>  <span class="hljs-comment"># 种群数量</span><br>L = <span class="hljs-number">20</span>   <span class="hljs-comment"># 二进制数串长度</span><br>Pc = <span class="hljs-number">0.8</span> <span class="hljs-comment"># 交叉率</span><br>Pm = <span class="hljs-number">0.1</span> <span class="hljs-comment"># 变异率</span><br>G = <span class="hljs-number">100</span>  <span class="hljs-comment"># 最大遗传代数</span><br>Xs = <span class="hljs-number">10</span>  <span class="hljs-comment"># 上限</span><br>Xx = <span class="hljs-number">0</span>   <span class="hljs-comment"># 下限</span><br><br><span class="hljs-comment"># 随机获得初始种群</span><br>f = np.random.randint(<span class="hljs-number">2</span>, size=(NP, L))   <span class="hljs-comment"># 表示生成一个(NP, L)形状的二维数组,元素只能为0、1</span><br><br><span class="hljs-comment"># 遗传算法循环</span><br>trace = np.zeros(G)  <span class="hljs-comment"># 创建一个全为0的数组</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(G):<br>    <span class="hljs-comment"># 将二进制解码为定义域范围内十进制</span><br>    x = np.zeros(NP)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NP):<br>        m = np.<span class="hljs-built_in">sum</span>(f[i,:] * <span class="hljs-number">2</span> ** np.arange(L)[::-<span class="hljs-number">1</span>])   <span class="hljs-comment"># 计算二进制数组f[i,:]的十进制等价值</span><br>        x[i] = Xx + m * (Xs - Xx) / (<span class="hljs-number">2</span>**L - <span class="hljs-number">1</span>)    <span class="hljs-comment"># 将十进制数映射到区间上下界</span><br>        Fit = np.array([func1(xi) <span class="hljs-keyword">for</span> xi <span class="hljs-keyword">in</span> x])   <span class="hljs-comment"># 计算适应度值</span><br><br>    maxFit = np.<span class="hljs-built_in">max</span>(Fit)           <span class="hljs-comment"># 最大值</span><br>    minFit = np.<span class="hljs-built_in">min</span>(Fit)           <span class="hljs-comment"># 最小值</span><br>    rr = np.where(Fit == maxFit)[<span class="hljs-number">0</span>]   <span class="hljs-comment"># 使用np.where函数来找出数组Fit中等于maxFit的元素的索引，np.where会返回一个元组，其中包含行号和列号，[0]表示行号</span><br>    fBest = f[rr[<span class="hljs-number">0</span>], :]            <span class="hljs-comment"># 历代最优个体 </span><br>    xBest = x[rr[<span class="hljs-number">0</span>]]               <span class="hljs-comment"># 最大适应度个体对应的数值（自变量）</span><br>    Fit = (Fit - minFit) / (maxFit - minFit)  <span class="hljs-comment"># 归一化适应度值</span><br><br>    <span class="hljs-comment"># 基于轮盘赌的复制操作</span><br>    sum_Fit = np.<span class="hljs-built_in">sum</span>(Fit)<br>    fitvalue = Fit / sum_Fit<br>    fitvalue = np.cumsum(fitvalue)  <span class="hljs-comment"># 计算归一化适应度值的累积和</span><br>    ms = np.sort(np.random.rand(NP))<br>    fiti = <span class="hljs-number">0</span><br>    newi = <span class="hljs-number">0</span><br>    nf = np.zeros((NP, L), dtype=<span class="hljs-built_in">int</span>)  <span class="hljs-comment"># 创建一个大小为(NP, L)的零矩阵nf，用于存储新种群的个体</span><br>    <span class="hljs-keyword">while</span> newi &lt; NP:<br>        <span class="hljs-keyword">if</span> ms[newi] &lt; fitvalue[fiti]:<br>            nf[newi, :] = f[fiti, :]<br>            newi += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            fiti += <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 基于概率的交叉操作</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, NP, <span class="hljs-number">2</span>):<br>        p = np.random.rand()<br>        <span class="hljs-keyword">if</span> p &lt; Pc:<br>            q = np.random.randint(<span class="hljs-number">1</span>, L + <span class="hljs-number">1</span>)<br>            mask = np.random.randint(<span class="hljs-number">1</span>, L + <span class="hljs-number">1</span>, size=L) == q<br>            nf[i, mask], nf[i + <span class="hljs-number">1</span>, mask] = nf[i + <span class="hljs-number">1</span>, mask], nf[i, mask]<br><br>    <span class="hljs-comment"># 基于概率的变异操作</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt;= <span class="hljs-built_in">round</span>(NP * Pm):<br>        h = np.random.randint(<span class="hljs-number">1</span>, NP + <span class="hljs-number">1</span>) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">round</span>(L * Pm)):<br>            g = np.random.randint(<span class="hljs-number">1</span>, L + <span class="hljs-number">1</span>) - <span class="hljs-number">1</span><br>            nf[h, g] = <span class="hljs-number">1</span> - nf[h, g]<br>        i += <span class="hljs-number">1</span><br><br>    f = nf<br>    f[<span class="hljs-number">0</span>, :] = fBest  <span class="hljs-comment"># 保留最优个体在新种群中</span><br>    trace[k] = maxFit  <span class="hljs-comment"># 历代最优适应度</span><br><br><span class="hljs-comment"># 输出最优个体</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xBest:&quot;</span>, xBest)<br><br><span class="hljs-comment"># 绘图</span><br>plt.plot(trace)<br>plt.xlabel(<span class="hljs-string">&#x27;迭代次数&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;目标函数值&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;适应度进化曲线&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">xBest: <span class="hljs-number">7.8567865913263235</span><br></code></pre></td></tr></table></figure><figure><img src="https://pic.imgdb.cn/item/66a91e7ed9c307b7e97303a7.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h1 id="二实值遗传算法求函数极值">二、实值遗传算法求函数极值</h1><h2 id="ga22.m">GA22.m</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%实值遗传算法求函数极值%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%初始化%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%<br>clear all;                           %清除所有变量<br>close all;                           %清图<br>clc;                                 %清屏<br>D=<span class="hljs-number">10</span>;                                %基因数目    <br><span class="hljs-variable constant_">NP</span>=<span class="hljs-number">100</span>;                              %染色体数目<br><span class="hljs-title class_">Xs</span>=<span class="hljs-number">20</span>;                               %上限          <br><span class="hljs-title class_">Xx</span>=-<span class="hljs-number">20</span>;                              %下限<br>G=<span class="hljs-number">1000</span>;                              %最大遗传代数<br>f=zeros(D,<span class="hljs-variable constant_">NP</span>);                       %初始种群赋空间<br>nf=zeros(D,<span class="hljs-variable constant_">NP</span>);                      %子种群赋空间<br><span class="hljs-title class_">Pc</span>=<span class="hljs-number">0.8</span>;                              %交叉概率<br><span class="hljs-title class_">Pm</span>=<span class="hljs-number">0.1</span>;                              %变异概率<br>f=rand(D,<span class="hljs-variable constant_">NP</span>)*(<span class="hljs-title class_">Xs</span>-<span class="hljs-title class_">Xx</span>)+<span class="hljs-title class_">Xx</span>;             %随机获得初始种群<br><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%按适应度升序排列<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">for np=1:NP</span><br><span class="hljs-string">    MSLL(np)=func2(f(:,np));</span><br><span class="hljs-string">end</span><br><span class="hljs-string">[SortMSLL,Index]=sort(MSLL);                            </span><br><span class="hljs-string">Sortf=f(:,Index);</span><br><span class="hljs-string">%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%遗传算法循环<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">for gen=1:G</span><br><span class="hljs-string">    %</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%采用君主方案进行选择交叉操作<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%<br>    <span class="hljs-title class_">Emper</span>=<span class="hljs-title class_">Sortf</span>(<span class="hljs-symbol">:</span>,<span class="hljs-number">1</span>);                      %君主染色体<br>    <span class="hljs-title class_">NoPoint</span>=round(D*<span class="hljs-title class_">Pc</span>);                   %每次交叉点的个数<br>    <span class="hljs-title class_">PoPoint</span>=randint(<span class="hljs-title class_">NoPoint</span>,<span class="hljs-variable constant_">NP</span>/<span class="hljs-number">2</span>,[<span class="hljs-number">1</span> D]);   %交叉基因的位置<br>    nf=<span class="hljs-title class_">Sortf</span>;<br>    <span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span><span class="hljs-symbol">:NP/</span><span class="hljs-number">2</span><br>        nf(<span class="hljs-symbol">:</span>,<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>)=<span class="hljs-title class_">Emper</span>;<br>        nf(<span class="hljs-symbol">:</span>,<span class="hljs-number">2</span>*i)=<span class="hljs-title class_">Sortf</span>(<span class="hljs-symbol">:</span>,<span class="hljs-number">2</span>*i);<br>        <span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span><span class="hljs-symbol">:NoPoint</span><br>            nf(<span class="hljs-title class_">PoPoint</span>(k,i),<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>)=nf(<span class="hljs-title class_">PoPoint</span>(k,i),<span class="hljs-number">2</span>*i);<br>            nf(<span class="hljs-title class_">PoPoint</span>(k,i),<span class="hljs-number">2</span>*i)=<span class="hljs-title class_">Emper</span>(<span class="hljs-title class_">PoPoint</span>(k,i));<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%变异操作%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><br>    <span class="hljs-keyword">for</span> m=<span class="hljs-number">1</span><span class="hljs-symbol">:NP</span><br>        <span class="hljs-keyword">for</span> n=<span class="hljs-number">1</span><span class="hljs-symbol">:D</span><br>            r=rand(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> r&lt;<span class="hljs-title class_">Pm</span><br>                nf(n,m)=rand(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)*(<span class="hljs-title class_">Xs</span>-<span class="hljs-title class_">Xx</span>)+<span class="hljs-title class_">Xx</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>子种群按适应度升序排列<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><br>    <span class="hljs-keyword">for</span> np=<span class="hljs-number">1</span><span class="hljs-symbol">:NP</span> <br>          <span class="hljs-variable constant_">NMSLL</span>(np)=func2(nf(<span class="hljs-symbol">:</span>,np));   <br>    <span class="hljs-keyword">end</span><br>    [<span class="hljs-title class_">NSort</span>MSLL,<span class="hljs-title class_">Index</span>]=sort(<span class="hljs-variable constant_">NMSLL</span>);           <br>    <span class="hljs-title class_">NSortf</span>=nf(<span class="hljs-symbol">:</span>,<span class="hljs-title class_">Index</span>);<br>    <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%产生新种群<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">    f1=[Sortf,NSortf];                %</span>子代和父代合并<br>    <span class="hljs-variable constant_">MSLL1</span>=[<span class="hljs-title class_">Sort</span>MSLL,<span class="hljs-title class_">NSort</span>MSLL];       %子代和父代的适应度值合并<br>    [<span class="hljs-title class_">SortMSLL1</span>,<span class="hljs-title class_">Index</span>]=sort(<span class="hljs-variable constant_">MSLL1</span>);    %适应度按升序排列<br>    <span class="hljs-title class_">Sortf1</span>=f1(<span class="hljs-symbol">:</span>,<span class="hljs-title class_">Index</span>);               %按适应度排列个体<br>    <span class="hljs-title class_">Sort</span>MSLL=<span class="hljs-title class_">SortMSLL1</span>(<span class="hljs-number">1</span><span class="hljs-symbol">:NP</span>);         %取前<span class="hljs-variable constant_">NP</span>个适应度值<br>    <span class="hljs-title class_">Sortf</span>=<span class="hljs-title class_">Sortf1</span>(<span class="hljs-symbol">:</span>,<span class="hljs-number">1</span><span class="hljs-symbol">:NP</span>);             %取前<span class="hljs-variable constant_">NP</span>个个体<br>    trace(gen)=<span class="hljs-title class_">Sort</span>MSLL(<span class="hljs-number">1</span>);           %历代最优适应度值<br><span class="hljs-keyword">end</span><br><span class="hljs-title class_">Bestf</span>=<span class="hljs-title class_">Sortf</span>(<span class="hljs-symbol">:</span>,<span class="hljs-number">1</span>);                     %最优个体 <br>trace(<span class="hljs-keyword">end</span>)                            %最优值<br>figure<br>plot(trace)<br>xlabel(<span class="hljs-string">&#x27;迭代次数&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;目标函数值&#x27;</span>)<br>title(<span class="hljs-string">&#x27;适应度进化曲线&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="ga22.py">GA22.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这里需要补一个对应的python代码</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 定义目标函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> np.<span class="hljs-built_in">sum</span>(x**<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 初始化参数</span><br>D = <span class="hljs-number">10</span>  <span class="hljs-comment"># 基因数目</span><br>NP = <span class="hljs-number">100</span>  <span class="hljs-comment"># 染色体数目</span><br>Xs = <span class="hljs-number">20</span>  <span class="hljs-comment"># 上限</span><br>Xx = -<span class="hljs-number">20</span>  <span class="hljs-comment"># 下限</span><br>G = <span class="hljs-number">1000</span>  <span class="hljs-comment"># 最大遗传代数</span><br>Pc = <span class="hljs-number">0.8</span>  <span class="hljs-comment"># 交叉概率</span><br>Pm = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># 变异概率</span><br><br><span class="hljs-comment"># 随机获得初始种群</span><br>f = np.random.rand(D, NP) * (Xs - Xx) + Xx<br><br><span class="hljs-comment"># 按适应度升序排列</span><br>MSLL = np.array([func2(f[:, np]) <span class="hljs-keyword">for</span> np <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NP)])    <span class="hljs-comment"># 对每一列应用函数func2,接收一列数据并返回一个值,所以MSLL是一个一维数组</span><br>Index = np.argsort(MSLL)   <span class="hljs-comment"># 对一维数组进行排序，得到一个一维整数数组</span><br>Sortf = f[:, Index]     <span class="hljs-comment"># Sortf是一个与f形状相同的数组，但它的列按照MSLL中值的升序排序</span><br><br><span class="hljs-comment"># 遗传算法循环</span><br>trace = []<br><span class="hljs-keyword">for</span> gen <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(G):<br>    <span class="hljs-comment"># 采用君主方案进行选择交叉操作</span><br>    Emper = Sortf[:, <span class="hljs-number">0</span>]  <span class="hljs-comment"># 君主染色体</span><br>    NoPoint = <span class="hljs-built_in">round</span>(D * Pc)  <span class="hljs-comment"># 每次交叉点的个数</span><br>    PoPoint = np.random.randint(<span class="hljs-number">0</span>, D, (NoPoint, NP // <span class="hljs-number">2</span>))  <span class="hljs-comment"># 交叉基因的位置</span><br>    nf = Sortf.copy()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NP // <span class="hljs-number">2</span>):<br>        nf[:, <span class="hljs-number">2</span>*i] = Emper<br>        nf[:, <span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>] = Sortf[:, <span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NoPoint):<br>            nf[PoPoint[k, i], <span class="hljs-number">2</span>*i] = nf[PoPoint[k, i], <span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>]<br>            nf[PoPoint[k, i], <span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>] = Emper[PoPoint[k, i]]<br><br>    <span class="hljs-comment"># 变异操作</span><br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NP):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(D):<br>            <span class="hljs-keyword">if</span> np.random.rand() &lt; Pm:<br>                nf[n, m] = np.random.rand() * (Xs - Xx) + Xx<br><br>    <span class="hljs-comment"># 子种群按适应度升序排列</span><br>    NMSLL = np.array([func2(nf[:, np]) <span class="hljs-keyword">for</span> np <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NP)])<br>    Index = np.argsort(NMSLL)<br>    NSortf = nf[:, Index]<br><br>    <span class="hljs-comment"># 产生新种群</span><br>    f1 = np.hstack((Sortf, NSortf))  <span class="hljs-comment"># 子代和父代合并</span><br>    MSLL1 = np.hstack((MSLL, NMSLL))  <span class="hljs-comment"># 子代和父代的适应度值合并</span><br>    Index = np.argsort(MSLL1)  <span class="hljs-comment"># 适应度按升序排列</span><br>    Sortf1 = f1[:, Index]  <span class="hljs-comment"># 按适应度排列个体</span><br>    SortMSLL = MSLL1[Index][:NP]  <span class="hljs-comment"># 取前NP个适应度值</span><br>    Sortf = Sortf1[:, :NP]  <span class="hljs-comment"># 取前NP个个体</span><br>    trace.append(SortMSLL[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 历代最优适应度值</span><br><br>Bestf = Sortf[:, <span class="hljs-number">0</span>]  <span class="hljs-comment"># 最优个体</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优值:&quot;</span>, trace[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 绘制适应度进化曲线</span><br>plt.plot(trace)<br>plt.xlabel(<span class="hljs-string">&#x27;迭代次数&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;目标函数值&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;适应度进化曲线&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="三遗传算法解决tsp问题">三、遗传算法解决TSP问题</h1><h2 id="ga23.m">GA23.m</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%遗传算法解决<span class="hljs-variable constant_">TSP</span>问题<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">clear all;                      %</span>清除所有变量<br>close all;                      %清图<br>clc;                            %清屏<br>C=[<span class="hljs-number">1304</span> <span class="hljs-number">2312</span>;<span class="hljs-number">3639</span> <span class="hljs-number">1315</span>;<span class="hljs-number">4177</span> <span class="hljs-number">2244</span>;<span class="hljs-number">3712</span> <span class="hljs-number">1399</span>;<span class="hljs-number">3488</span> <span class="hljs-number">1535</span>;<span class="hljs-number">3326</span> <span class="hljs-number">1556</span>;...<br>    <span class="hljs-number">3238</span> <span class="hljs-number">1229</span>;<span class="hljs-number">4196</span> <span class="hljs-number">1044</span>;<span class="hljs-number">4312</span>  <span class="hljs-number">790</span>;<span class="hljs-number">4386</span>  <span class="hljs-number">570</span>;<span class="hljs-number">3007</span> <span class="hljs-number">1970</span>;<span class="hljs-number">2562</span> <span class="hljs-number">1756</span>;...<br>    <span class="hljs-number">2788</span> <span class="hljs-number">1491</span>;<span class="hljs-number">2381</span> <span class="hljs-number">1676</span>;<span class="hljs-number">1332</span>  <span class="hljs-number">695</span>;<span class="hljs-number">3715</span> <span class="hljs-number">1678</span>;<span class="hljs-number">3918</span> <span class="hljs-number">2179</span>;<span class="hljs-number">4061</span> <span class="hljs-number">2370</span>;...<br>    <span class="hljs-number">3780</span> <span class="hljs-number">2212</span>;<span class="hljs-number">3676</span> <span class="hljs-number">2578</span>;<span class="hljs-number">4029</span> <span class="hljs-number">2838</span>;<span class="hljs-number">4263</span> <span class="hljs-number">2931</span>;<span class="hljs-number">3429</span> <span class="hljs-number">1908</span>;<span class="hljs-number">3507</span> <span class="hljs-number">2376</span>;...<br>    <span class="hljs-number">3394</span> <span class="hljs-number">2643</span>;<span class="hljs-number">3439</span> <span class="hljs-number">3201</span>;<span class="hljs-number">2935</span> <span class="hljs-number">3240</span>;<span class="hljs-number">3140</span> <span class="hljs-number">3550</span>;<span class="hljs-number">2545</span> <span class="hljs-number">2357</span>;<span class="hljs-number">2778</span> <span class="hljs-number">2826</span>;...<br>    <span class="hljs-number">2370</span> <span class="hljs-number">2975</span>];                 %<span class="hljs-number">31</span>个省会城市坐标<br>N=size(C,<span class="hljs-number">1</span>);                    %<span class="hljs-variable constant_">TSP</span>问题的规模,即城市数目<br>D=zeros(N);                     %任意两个城市距离间隔矩阵<br><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>求任意两个城市距离间隔矩阵<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><br><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span><span class="hljs-symbol">:N</span><br>    <span class="hljs-keyword">for</span> j=<span class="hljs-number">1</span><span class="hljs-symbol">:N</span><br>        D(i,j)=((C(i,<span class="hljs-number">1</span>)-C(j,<span class="hljs-number">1</span>))^<span class="hljs-number">2</span>+(C(i,<span class="hljs-number">2</span>)-C(j,<span class="hljs-number">2</span>))^<span class="hljs-number">2</span>)^<span class="hljs-number">0.5</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-variable constant_">NP</span>=<span class="hljs-number">200</span>;                          %种群规模<br>G=<span class="hljs-number">1000</span>;                          %最大遗传代数<br>f=zeros(<span class="hljs-variable constant_">NP</span>,N);                   %用于存储种群<br>F=[];                            %种群更新中间存储<br><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span><span class="hljs-symbol">:NP</span><br>    f(i,<span class="hljs-symbol">:</span>)=randperm(N);          %随机生成初始种群<br><span class="hljs-keyword">end</span><br>R=f(<span class="hljs-number">1</span>,<span class="hljs-symbol">:</span>);                        %存储最优种群<br>len=zeros(<span class="hljs-variable constant_">NP</span>,<span class="hljs-number">1</span>);                 %存储路径长度<br>fitness=zeros(<span class="hljs-variable constant_">NP</span>,<span class="hljs-number">1</span>);             %存储归一化适应值<br>gen=<span class="hljs-number">0</span>;<br><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%遗传算法循环<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">while gen&lt;G</span><br><span class="hljs-string">    %</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%计算路径长度%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%<br>    <span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span><span class="hljs-symbol">:NP</span><br>        len(i,<span class="hljs-number">1</span>)=D(f(i,N),f(i,<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> j=<span class="hljs-number">1</span><span class="hljs-symbol">:</span>(N-<span class="hljs-number">1</span>)<br>            len(i,<span class="hljs-number">1</span>)=len(i,<span class="hljs-number">1</span>)+D(f(i,j),f(i,j+<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    maxlen=max(len);              %最长路径<br>    minlen=min(len);              %最短路径<br>    <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%更新最短路径<span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%</span><br><span class="hljs-string">    rr=find(len==minlen);</span><br><span class="hljs-string">    R=f(rr(1,1),:);</span><br><span class="hljs-string">    %</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%计算归一化适应值%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%<br>    <span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span><span class="hljs-symbol">:length</span>(len)<br>        fitness(i,<span class="hljs-number">1</span>)=(<span class="hljs-number">1</span>-((len(i,<span class="hljs-number">1</span>)-minlen)/(maxlen-minlen+<span class="hljs-number">0.001</span>)));<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%选择操作%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span>%<br>    nn=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span><span class="hljs-symbol">:NP</span><br>        <span class="hljs-keyword">if</span> fitness(i,<span class="hljs-number">1</span>)&gt;=rand<br>            nn=nn+<span class="hljs-number">1</span>;<br>            F(nn,<span class="hljs-symbol">:</span>)=f(i,<span class="hljs-symbol">:</span>);<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    [aa,bb]=size(F);<br>    <span class="hljs-keyword">while</span> aa&lt;<span class="hljs-variable constant_">NP</span><br>        nnper=randperm(nn);<br>        A=F(nnper(<span class="hljs-number">1</span>),<span class="hljs-symbol">:</span>);<br>        B=F(nnper(<span class="hljs-number">2</span>),<span class="hljs-symbol">:</span>);<br>        <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%交叉操作%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><br>        W=ceil(N/<span class="hljs-number">10</span>);              %交叉点个数<br>        p=unidrnd(N-W+<span class="hljs-number">1</span>);          %随机选择交叉范围，从p到p+W<br>        <span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span><span class="hljs-symbol">:W</span><br>            x=find(A==B(p+i-<span class="hljs-number">1</span>));<br>            y=find(B==A(p+i-<span class="hljs-number">1</span>));<br>            temp=A(p+i-<span class="hljs-number">1</span>);<br>            A(p+i-<span class="hljs-number">1</span>)=B(p+i-<span class="hljs-number">1</span>); <br>            B(p+i-<span class="hljs-number">1</span>)=temp;<br>            temp=A(x); <br>            A(x)=B(y); <br>            B(y)=temp;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%变异操作%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><span class="hljs-string">%%%</span><br>        p1=floor(<span class="hljs-number">1</span>+N*rand());<br>        p2=floor(<span class="hljs-number">1</span>+N*rand());<br>        <span class="hljs-keyword">while</span> p1==p2<br>            p1=floor(<span class="hljs-number">1</span>+N*rand());<br>            p2=floor(<span class="hljs-number">1</span>+N*rand());<br>        <span class="hljs-keyword">end</span><br>        tmp=A(p1); <br>        A(p1)=A(p2); <br>        A(p2)=tmp;<br>        tmp=B(p1); <br>        B(p1)=B(p2); <br>        B(p2)=tmp;<br>        F=[F;A;B];<br>        [aa,bb]=size(F);<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> aa&gt;<span class="hljs-variable constant_">NP</span><br>        F=F(<span class="hljs-number">1</span><span class="hljs-symbol">:NP</span>,<span class="hljs-symbol">:</span>);             %保持种群规模为n<br>    <span class="hljs-keyword">end</span><br>    f=F;                         %更新种群<br>    f(<span class="hljs-number">1</span>,<span class="hljs-symbol">:</span>)=R;                    %保留每代最优个体<br>    clear F;<br>    gen=gen+<span class="hljs-number">1</span><br>    <span class="hljs-title class_">Rlength</span>(gen)=minlen;<br><span class="hljs-keyword">end</span><br>figure<br><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span><span class="hljs-symbol">:N-</span><span class="hljs-number">1</span><br>    plot([C(R(i),<span class="hljs-number">1</span>),C(R(i+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)],[C(R(i),<span class="hljs-number">2</span>),C(R(i+<span class="hljs-number">1</span>),<span class="hljs-number">2</span>)],<span class="hljs-string">&#x27;bo-&#x27;</span>);<br>    hold on;<br><span class="hljs-keyword">end</span><br>plot([C(R(N),<span class="hljs-number">1</span>),C(R(<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)],[C(R(N),<span class="hljs-number">2</span>),C(R(<span class="hljs-number">1</span>),<span class="hljs-number">2</span>)],<span class="hljs-string">&#x27;ro-&#x27;</span>);<br>title([<span class="hljs-string">&#x27;优化最短距离:&#x27;</span>,num2str(minlen)]);<br>figure<br>plot(<span class="hljs-title class_">Rlength</span>)<br>xlabel(<span class="hljs-string">&#x27;迭代次数&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;目标函数值&#x27;</span>)<br>title(<span class="hljs-string">&#x27;适应度进化曲线&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66aa5e49d9c307b7e9720751.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/66aa5e5fd9c307b7e9721c09.png"alt="alt text" /></p><p><img src="https://pic.imgdb.cn/item/66aa60e6d9c307b7e975c644.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/66aa60fed9c307b7e975e3a3.png"alt="alt text" /></p><h2 id="ga23.py">GA23.py</h2><p>对应的python脚本如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 数据初始化</span><br>C = np.array([<br>    [<span class="hljs-number">1304</span>, <span class="hljs-number">2312</span>], [<span class="hljs-number">3639</span>, <span class="hljs-number">1315</span>], [<span class="hljs-number">4177</span>, <span class="hljs-number">2244</span>], [<span class="hljs-number">3712</span>, <span class="hljs-number">1399</span>], [<span class="hljs-number">3488</span>, <span class="hljs-number">1535</span>],<br>    [<span class="hljs-number">3326</span>, <span class="hljs-number">1556</span>], [<span class="hljs-number">3238</span>, <span class="hljs-number">1229</span>], [<span class="hljs-number">4196</span>, <span class="hljs-number">1044</span>], [<span class="hljs-number">4312</span>,  <span class="hljs-number">790</span>], [<span class="hljs-number">4386</span>,  <span class="hljs-number">570</span>],<br>    [<span class="hljs-number">3007</span>, <span class="hljs-number">1970</span>], [<span class="hljs-number">2562</span>, <span class="hljs-number">1756</span>], [<span class="hljs-number">2788</span>, <span class="hljs-number">1491</span>], [<span class="hljs-number">2381</span>, <span class="hljs-number">1676</span>], [<span class="hljs-number">1332</span>,  <span class="hljs-number">695</span>],<br>    [<span class="hljs-number">3715</span>, <span class="hljs-number">1678</span>], [<span class="hljs-number">3918</span>, <span class="hljs-number">2179</span>], [<span class="hljs-number">4061</span>, <span class="hljs-number">2370</span>], [<span class="hljs-number">3780</span>, <span class="hljs-number">2212</span>], [<span class="hljs-number">3676</span>, <span class="hljs-number">2578</span>],<br>    [<span class="hljs-number">4029</span>, <span class="hljs-number">2838</span>], [<span class="hljs-number">4263</span>, <span class="hljs-number">2931</span>], [<span class="hljs-number">3429</span>, <span class="hljs-number">1908</span>], [<span class="hljs-number">3507</span>, <span class="hljs-number">2376</span>], [<span class="hljs-number">3394</span>, <span class="hljs-number">2643</span>],<br>    [<span class="hljs-number">3439</span>, <span class="hljs-number">3201</span>], [<span class="hljs-number">2935</span>, <span class="hljs-number">3240</span>], [<span class="hljs-number">3140</span>, <span class="hljs-number">3550</span>], [<span class="hljs-number">2545</span>, <span class="hljs-number">2357</span>], [<span class="hljs-number">2778</span>, <span class="hljs-number">2826</span>],<br>    [<span class="hljs-number">2370</span>, <span class="hljs-number">2975</span>]<br>])  <span class="hljs-comment"># 31个省会城市坐标</span><br><br>N = C.shape[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 城市数目</span><br>D = np.zeros((N, N))  <span class="hljs-comment"># 距离矩阵</span><br><br><span class="hljs-comment"># 计算距离矩阵</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>        D[i, j] = np.sqrt((C[i, <span class="hljs-number">0</span>] - C[j, <span class="hljs-number">0</span>])**<span class="hljs-number">2</span> + (C[i, <span class="hljs-number">1</span>] - C[j, <span class="hljs-number">1</span>])**<span class="hljs-number">2</span>)<br><br>NP = <span class="hljs-number">200</span>  <span class="hljs-comment"># 种群规模</span><br>G = <span class="hljs-number">1000</span>  <span class="hljs-comment"># 最大遗传代数</span><br><br><span class="hljs-comment"># 初始化种群</span><br>f = np.array([np.random.permutation(N) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NP)])<br>R = f[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 存储最优种群</span><br>len_paths = np.zeros(NP)  <span class="hljs-comment"># 路径长度</span><br>fitness = np.zeros(NP)  <span class="hljs-comment"># 适应值</span><br><br>gen = <span class="hljs-number">0</span><br><span class="hljs-comment"># 遗传算法主循环</span><br>Rlength = []<br><br><span class="hljs-keyword">while</span> gen &lt; G:<br>    <span class="hljs-comment"># 计算路径长度</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NP):<br>        path = f[i]<br>        len_paths[i] = D[path[-<span class="hljs-number">1</span>], path[<span class="hljs-number">0</span>]]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N - <span class="hljs-number">1</span>):<br>            len_paths[i] += D[path[j], path[j + <span class="hljs-number">1</span>]]<br><br>    maxlen = np.<span class="hljs-built_in">max</span>(len_paths)  <span class="hljs-comment"># 最长路径</span><br>    minlen = np.<span class="hljs-built_in">min</span>(len_paths)  <span class="hljs-comment"># 最短路径</span><br><br>    <span class="hljs-comment"># 更新最短路径</span><br>    best_index = np.argmin(len_paths)<br>    R = f[best_index]<br><br>    <span class="hljs-comment"># 计算归一化适应值</span><br>    fitness = <span class="hljs-number">1</span> - ((len_paths - minlen) / (maxlen - minlen + <span class="hljs-number">0.001</span>))<br><br>    <span class="hljs-comment"># 选择操作</span><br>    F = f[fitness &gt;= np.random.rand(NP)]<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(F) &lt; NP:<br>        nnper = np.random.permutation(<span class="hljs-built_in">len</span>(F))<br>        A = F[nnper[<span class="hljs-number">0</span>]]<br>        B = F[nnper[<span class="hljs-number">1</span>]]<br><br>        <span class="hljs-comment"># 交叉操作</span><br>        W = np.ceil(N / <span class="hljs-number">10</span>).astype(<span class="hljs-built_in">int</span>)  <span class="hljs-comment"># 交叉点个数</span><br>        p = np.random.randint(<span class="hljs-number">0</span>, N - W + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 选择交叉点</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(W):<br>            x = np.where(A == B[p + i])[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>            y = np.where(B == A[p + i])[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>            A[p + i], B[p + i] = B[p + i], A[p + i]<br>            A[x], B[y] = B[y], A[x]<br><br>        <span class="hljs-comment"># 变异操作</span><br>        p1, p2 = np.random.choice(N, <span class="hljs-number">2</span>, replace=<span class="hljs-literal">False</span>)<br>        A[p1], A[p2] = A[p2], A[p1]<br>        B[p1], B[p2] = B[p2], B[p1]<br><br>        F = np.vstack([F, A, B])<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(F) &gt; NP:<br>        F = F[:NP]  <span class="hljs-comment"># 保持种群规模</span><br><br>    f = F  <span class="hljs-comment"># 更新种群</span><br>    f[<span class="hljs-number">0</span>] = R  <span class="hljs-comment"># 保留每代最优个体</span><br><br>    gen += <span class="hljs-number">1</span><br>    Rlength.append(minlen)<br><br><span class="hljs-comment"># 绘图</span><br>plt.figure()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N - <span class="hljs-number">1</span>):<br>    plt.plot([C[R[i], <span class="hljs-number">0</span>], C[R[i + <span class="hljs-number">1</span>], <span class="hljs-number">0</span>]], [C[R[i], <span class="hljs-number">1</span>], C[R[i + <span class="hljs-number">1</span>], <span class="hljs-number">1</span>]], <span class="hljs-string">&#x27;bo-&#x27;</span>)<br>plt.plot([C[R[-<span class="hljs-number">1</span>], <span class="hljs-number">0</span>], C[R[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>]], [C[R[-<span class="hljs-number">1</span>], <span class="hljs-number">1</span>], C[R[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>]], <span class="hljs-string">&#x27;ro-&#x27;</span>)<br>plt.title(<span class="hljs-string">f&#x27;优化最短距离: <span class="hljs-subst">&#123;minlen:<span class="hljs-number">.2</span>f&#125;</span>&#x27;</span>)<br>plt.show()<br><br>plt.figure()<br>plt.plot(Rlength)<br>plt.xlabel(<span class="hljs-string">&#x27;迭代次数&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;目标函数值&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;适应度进化曲线&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure></p><figure><img src="https://pic.imgdb.cn/item/66aa6163d9c307b7e976470b.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>发现写的 python 脚本运行效果不好，不如 matlab 脚本</p><p>从网上找了一段python代码来比较下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 遗传算法求解TSP问题完整代码：</span><br><span class="hljs-comment"># 参考链接：http://t.csdnimg.cn/J1jSj</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> random<br><br>coord = np.array([<br>    [<span class="hljs-number">1304</span>, <span class="hljs-number">2312</span>], [<span class="hljs-number">3639</span>, <span class="hljs-number">1315</span>], [<span class="hljs-number">4177</span>, <span class="hljs-number">2244</span>], [<span class="hljs-number">3712</span>, <span class="hljs-number">1399</span>], [<span class="hljs-number">3488</span>, <span class="hljs-number">1535</span>],<br>    [<span class="hljs-number">3326</span>, <span class="hljs-number">1556</span>], [<span class="hljs-number">3238</span>, <span class="hljs-number">1229</span>], [<span class="hljs-number">4196</span>, <span class="hljs-number">1044</span>], [<span class="hljs-number">4312</span>,  <span class="hljs-number">790</span>], [<span class="hljs-number">4386</span>,  <span class="hljs-number">570</span>],<br>    [<span class="hljs-number">3007</span>, <span class="hljs-number">1970</span>], [<span class="hljs-number">2562</span>, <span class="hljs-number">1756</span>], [<span class="hljs-number">2788</span>, <span class="hljs-number">1491</span>], [<span class="hljs-number">2381</span>, <span class="hljs-number">1676</span>], [<span class="hljs-number">1332</span>,  <span class="hljs-number">695</span>],<br>    [<span class="hljs-number">3715</span>, <span class="hljs-number">1678</span>], [<span class="hljs-number">3918</span>, <span class="hljs-number">2179</span>], [<span class="hljs-number">4061</span>, <span class="hljs-number">2370</span>], [<span class="hljs-number">3780</span>, <span class="hljs-number">2212</span>], [<span class="hljs-number">3676</span>, <span class="hljs-number">2578</span>],<br>    [<span class="hljs-number">4029</span>, <span class="hljs-number">2838</span>], [<span class="hljs-number">4263</span>, <span class="hljs-number">2931</span>], [<span class="hljs-number">3429</span>, <span class="hljs-number">1908</span>], [<span class="hljs-number">3507</span>, <span class="hljs-number">2376</span>], [<span class="hljs-number">3394</span>, <span class="hljs-number">2643</span>],<br>    [<span class="hljs-number">3439</span>, <span class="hljs-number">3201</span>], [<span class="hljs-number">2935</span>, <span class="hljs-number">3240</span>], [<span class="hljs-number">3140</span>, <span class="hljs-number">3550</span>], [<span class="hljs-number">2545</span>, <span class="hljs-number">2357</span>], [<span class="hljs-number">2778</span>, <span class="hljs-number">2826</span>],<br>    [<span class="hljs-number">2370</span>, <span class="hljs-number">2975</span>]<br>])  <span class="hljs-comment"># 31个省会城市坐标</span><br>w, h = coord.shape<br>coordinates = np.zeros((w, h), <span class="hljs-built_in">float</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>        coordinates[i, j] = <span class="hljs-built_in">float</span>(coord[i, j])<br><br><span class="hljs-comment"># 得到距离矩阵</span><br>distance = np.zeros((w, w))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        distance[i, j] = distance[j, i] = np.linalg.norm(coordinates[i] - coordinates[j])<br><br><span class="hljs-comment"># 种群数</span><br>count = <span class="hljs-number">300</span><br><span class="hljs-comment"># 进化次数</span><br>iter_time = <span class="hljs-number">1000</span><br><span class="hljs-comment"># 最优选择概率</span><br>retain_rate = <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 适应度前30%可以活下来</span><br><span class="hljs-comment"># 弱者生存概率</span><br>random_select_rate = <span class="hljs-number">0.5</span><br><span class="hljs-comment"># 变异</span><br>mutation_rate = <span class="hljs-number">0.1</span><br><span class="hljs-comment"># 改良</span><br>gailiang_N = <span class="hljs-number">3000</span><br><span class="hljs-comment"># 适应度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_total_distance</span>(<span class="hljs-params">x</span>):<br>    dista = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x)):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(x) - <span class="hljs-number">1</span>:<br>            dista += distance[x[i]][x[<span class="hljs-number">0</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            dista += distance[x[i]][x[i + <span class="hljs-number">1</span>]]<br>    <span class="hljs-keyword">return</span> dista<br><br><span class="hljs-comment"># 初始种群的改良</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gailiang</span>(<span class="hljs-params">x</span>):<br>    distance = get_total_distance(x)<br>    gailiang_num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> gailiang_num &lt; gailiang_N:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            a = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x) - <span class="hljs-number">1</span>)<br>            b = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x) - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> a != b:<br>                <span class="hljs-keyword">break</span><br>        new_x = x.copy()<br>        temp_a = new_x[a]<br>        new_x[a] = new_x[b]<br>        new_x[b] = temp_a<br>        <span class="hljs-keyword">if</span> get_total_distance(new_x) &lt; distance:<br>            x = new_x.copy()<br>        gailiang_num += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 自然选择</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nature_select</span>(<span class="hljs-params">population</span>):<br>    grad = [[x, get_total_distance(x)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> population]<br>    grad = [x[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(grad, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])]<br>    <span class="hljs-comment"># 强者</span><br>    retain_length = <span class="hljs-built_in">int</span>(retain_rate * <span class="hljs-built_in">len</span>(grad))<br>    parents = grad[: retain_length]<br>    <span class="hljs-comment"># 生存下来的弱者</span><br>    <span class="hljs-keyword">for</span> ruozhe <span class="hljs-keyword">in</span> grad[retain_length:]:<br>        <span class="hljs-keyword">if</span> random.random() &lt; random_select_rate:<br>            parents.append(ruozhe)<br>    <span class="hljs-keyword">return</span> parents<br><br><span class="hljs-comment"># 交叉繁殖</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crossover</span>(<span class="hljs-params">parents</span>):<br>    target_count = count - <span class="hljs-built_in">len</span>(parents)<br>    children = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(children) &lt; target_count:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            male_index = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(parents)-<span class="hljs-number">1</span>)<br>            female_index = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(parents)-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> male_index != female_index:<br>                <span class="hljs-keyword">break</span><br>        male = parents[male_index]<br>        female = parents[female_index]<br>        left = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(male) - <span class="hljs-number">2</span>)<br>        right = random.randint(left, <span class="hljs-built_in">len</span>(male) - <span class="hljs-number">1</span>)<br>        gen_male = male[left:right]<br>        gen_female = female[left:right]<br>        child_a = []<br>        child_b = []<br><br>        len_ca = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> male:<br>            <span class="hljs-keyword">if</span> len_ca == left:<br>                child_a.extend(gen_female)<br>                len_ca += <span class="hljs-built_in">len</span>(gen_female)<br>            <span class="hljs-keyword">if</span> g <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> gen_female:<br>                child_a.append(g)<br>                len_ca += <span class="hljs-number">1</span><br><br>        len_cb = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> female:<br>            <span class="hljs-keyword">if</span> len_cb == left:<br>                child_b.extend(gen_male)<br>                len_cb += <span class="hljs-built_in">len</span>(gen_male)<br>            <span class="hljs-keyword">if</span> g <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> gen_male:<br>                child_b.append(g)<br>                len_cb += <span class="hljs-number">1</span><br><br>        children.append(child_a)<br>        children.append(child_b)<br>    <span class="hljs-keyword">return</span> children<br><br><span class="hljs-comment"># 变异操作</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mutation</span>(<span class="hljs-params">children</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(children)):<br>        <span class="hljs-keyword">if</span> random.random() &lt; mutation_rate:<br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                u = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(children[i]) - <span class="hljs-number">1</span>)<br>                v = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(children[i]) - <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">if</span> u != v:<br>                    <span class="hljs-keyword">break</span><br>            temp_a = children[i][u]<br>            children[i][u] = children[i][v]<br>            children[i][v] = temp_a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_result</span>(<span class="hljs-params">population</span>):<br>    grad = [[x, get_total_distance(x)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> population]<br>    grad = <span class="hljs-built_in">sorted</span>(grad, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> grad[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], grad[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br><br>population = []<br><span class="hljs-comment"># 初始化种群</span><br>index = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(count):<br>    x = index.copy()<br>    random.shuffle(x)<br>    gailiang(x)<br>    population.append(x)<br><br>distance_list = []<br>result_cur_best, dist_cur_best = get_result(population)<br>distance_list.append(dist_cur_best)<br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; iter_time:<br>    <span class="hljs-comment"># 自然选择</span><br>    parents = nature_select(population)<br><br>    <span class="hljs-comment"># 繁殖</span><br>    children = crossover(parents)<br><br>    <span class="hljs-comment"># 变异</span><br>    mutation(children)<br><br>    <span class="hljs-comment"># 更新</span><br>    population = parents + children<br><br>    result_cur_best, dist_cur_best = get_result(population)<br>    distance_list.append(dist_cur_best)<br>    i = i + <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(result_cur_best)<br>    <span class="hljs-built_in">print</span>(dist_cur_best)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result_cur_best)):<br>    result_cur_best[i] += <span class="hljs-number">1</span><br><br>result_path = result_cur_best<br>result_path.append(result_path[<span class="hljs-number">0</span>])<br><br><span class="hljs-built_in">print</span>(result_path)<br><br><span class="hljs-comment"># 画图</span><br><br>X = []<br>Y = []<br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> result_path:<br>    X.append(coordinates[index-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>])<br>    Y.append(coordinates[index-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = <span class="hljs-string">&#x27;SimHei&#x27;</span>  <span class="hljs-comment"># 设置中文显示</span><br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br>plt.figure(<span class="hljs-number">1</span>)<br>plt.plot(X, Y, <span class="hljs-string">&#x27;-o&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(X)):<br>    plt.text(X[i] + <span class="hljs-number">0.05</span>, Y[i] + <span class="hljs-number">0.05</span>, <span class="hljs-built_in">str</span>(result_path[i]), color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;横坐标&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;纵坐标&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;轨迹图&#x27;</span>)<br><br>plt.figure(<span class="hljs-number">2</span>)<br>plt.plot(np.array(distance_list))<br>plt.title(<span class="hljs-string">&#x27;优化过程&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;最优值&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;代数(&#123;&#125;-&gt;&#123;&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>, iter_time))<br>plt.show()<br></code></pre></td></tr></table></figure><figure><img src="https://pic.imgdb.cn/item/66aa6359d9c307b7e9781845.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>这个明显效果好一些</p><p>对于上述tsp问题，还可以使用蚁群算法解决，参考：http://t.csdnimg.cn/C5NqG</p>]]></content>
    
    
    <categories>
      
      <category>算法优化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法刷题记录</title>
    <link href="/2024/07/08/python/suan-fa-shua-ti-ji-lu/"/>
    <url>/2024/07/08/python/suan-fa-shua-ti-ji-lu/</url>
    
    <content type="html"><![CDATA[<p>算法刷题记录</p><p>希望能够有所改变！</p><h2 id="数位递增的数">1、数位递增的数</h2><p><ahref="https://www.lanqiao.cn/problems/145/learning/?page_size=10&amp;first_category_id=1&amp;tags=%E7%9C%81%E6%A8%A1%E6%8B%9F%E8%B5%9B&amp;origin=cup">题目链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解法一</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>    x = <span class="hljs-built_in">str</span>(i)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x)-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> x[j] &gt; x[j+<span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        ans += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解法二</span><br><span class="hljs-keyword">import</span> sys<br><br>num = <span class="hljs-number">0</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    c = i<br>    b = sys.maxsize  <span class="hljs-comment"># 获取最大整数值sys.maxsize</span><br>    <span class="hljs-keyword">while</span> c &gt; <span class="hljs-number">0</span>:<br>        a = c % <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> a &gt; b:<br>            <span class="hljs-keyword">break</span><br>        b = a<br>        c //= <span class="hljs-number">10</span>  <span class="hljs-comment"># 使用整数除法</span><br>    <span class="hljs-keyword">if</span> c == <span class="hljs-number">0</span>:<br>        num += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><h2 id="凯撒加密">2、凯撒加密</h2><p><ahref="https://www.lanqiao.cn/problems/154/learning/?page_size=10&amp;first_category_id=1&amp;tags=%E7%9C%81%E6%A8%A1%E6%8B%9F%E8%B5%9B&amp;origin=cup">题目链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">c = <span class="hljs-built_in">input</span>()  <span class="hljs-comment"># 直接读取输入</span><br>new_c = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> c:<br>    <span class="hljs-comment"># 计算下一个字符的ASCII值，并确保在有效的ASCII字符范围内</span><br>    new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char)-<span class="hljs-number">97</span>+<span class="hljs-number">3</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span>)<br>    new_c += new_char<br><br><span class="hljs-built_in">print</span>(new_c)<br></code></pre></td></tr></table></figure><h2 id="最大距离">3、最大距离</h2><p><ahref="https://www.lanqiao.cn/problems/155/learning/?page_size=10&amp;first_category_id=1&amp;tags=%E7%9C%81%E6%A8%A1%E6%8B%9F%E8%B5%9B&amp;origin=cup&amp;page=1">题目链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>max_num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,n):<br>        max_num = <span class="hljs-built_in">max</span>(max_num,<span class="hljs-built_in">abs</span>(j-i) + <span class="hljs-built_in">abs</span>(s[j]-s[i]))<br><span class="hljs-built_in">print</span>(max_num)<br></code></pre></td></tr></table></figure><h2 id="反倍数">4、反倍数</h2><p><ahref="https://www.lanqiao.cn/problems/152/learning/?page_size=10&amp;first_category_id=1&amp;tags=%E7%9C%81%E6%A8%A1%E6%8B%9F%E8%B5%9B&amp;origin=cup&amp;page=1">题目链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>ans = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> i%s[<span class="hljs-number">0</span>]!=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i%s[<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i%s[<span class="hljs-number">2</span>]!=<span class="hljs-number">0</span>:<br>        ans += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="洁净数">5、洁净数</h2><p><ahref="https://www.lanqiao.cn/problems/153/learning/?page_size=10&amp;first_category_id=1&amp;tags=%E7%9C%81%E6%A8%A1%E6%8B%9F%E8%B5%9B&amp;origin=cup&amp;page=1">题目链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不太聪明的版本,这里会运行超时</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>n= <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>ans=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    i_str = <span class="hljs-built_in">str</span>(i)<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(i_str)&gt;<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(i_str) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(i_str) != <span class="hljs-number">2</span>:<br>            ans += <span class="hljs-number">1</span><br><br>        a=<span class="hljs-built_in">int</span>(i_str[-<span class="hljs-number">1</span>])  <span class="hljs-comment"># 取个位数</span><br>        <span class="hljs-keyword">if</span> a == <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            i_str = i_str[:-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 去掉最后一位数</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 参考别人的版本，使用到了判断字符或字符串是否在目标中</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>count=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>      <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;2&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(i):<br>          <span class="hljs-keyword">continue</span><br>      <span class="hljs-keyword">else</span>:<br>          count=count+<span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(count)<br></code></pre></td></tr></table></figure><h2 id="确定字符串是否包含唯一字符">6、确定字符串是否包含唯一字符</h2><p><ahref="https://www.lanqiao.cn/problems/202/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解法一：使用字典来计算各个字符出现的次数，再单独使用一个循环来判断是否有不唯一的字符出现</span><br>c = <span class="hljs-built_in">input</span>().strip()<br>n = <span class="hljs-built_in">len</span>(c)<br>count = &#123;&#125;  <span class="hljs-comment"># 初始化计数器字典</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">if</span> c[i] <span class="hljs-keyword">in</span> count:<br>        count[c[i]] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        count[c[i]] = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 检查是否有重复的字符</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(value &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> count.values()):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br></code></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解法二：set(s) 将字符串 s 转换成一个集合，集合中的元素是唯一的，这意味着所有重复的字符都会被移除</span><br>s=<span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(s))==<span class="hljs-built_in">len</span>(s):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;YES&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NO&#x27;</span>) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解法三：类似解法一，换了一种表达方式，使用列表来存储数据</span><br>s = <span class="hljs-built_in">input</span>()<br>s = s.upper()<br>d = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> d:<br>        d.append(i)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解法四：从第一个字符开始判断字符串中有几个该字符出现</span><br><span class="hljs-comment"># 使用到了str.count(sub)方法来计算子字符串sub在字符串s中出现的次数</span><br>s = <span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">if</span> s.count(word) != <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> word == s[-<span class="hljs-number">1</span>]:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br></code></pre></td></tr></table></figure><h2id="确定字符串是否是另一个的排列">7、确定字符串是否是另一个的排列</h2><p><ahref="https://www.lanqiao.cn/problems/203/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解法一：使用字段来统计字符出现的次数，字典的键是字符，值是出现的次数</span><br>s1 = <span class="hljs-built_in">input</span>()<br>s2 = <span class="hljs-built_in">input</span>()<br><br>count1 = &#123;&#125;<br>count2 = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s1:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> count1:<br>        count1[i]=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        count1[i]+=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s2:<br>    <span class="hljs-keyword">if</span> j <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> count2:<br>        count2[j]=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        count2[j]+=<span class="hljs-number">1</span><br>        <br><span class="hljs-keyword">if</span> count1==count2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解法二：将输入转换为列表，并使用sort()方法进行排序，确保列表中的字符按照升序排列，然后比较两个列表是否完全相同即可</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>s1 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">input</span>())<br>s2 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">input</span>())<br>s1.sort()<br>s2.sort()<br><span class="hljs-keyword">if</span> s1 == s2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解法三：确保两个字符串的长度一定相同，并且每个字符出现的次数也相同，同样可以保证两个字符串是一致的</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>a=<span class="hljs-built_in">input</span>()<br>b=<span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> a.count(i)!=b.count(i) <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(a)!=<span class="hljs-built_in">len</span>(b): <br>        s=<span class="hljs-string">&#x27;NO&#x27;</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        s=<span class="hljs-string">&#x27;YES&#x27;</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h2 id="压缩字符串">8、压缩字符串</h2><p><ahref="https://www.lanqiao.cn/problems/204/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>s=<span class="hljs-built_in">input</span>()<br>count=&#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> count:<br>        count[i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        count[i]+=<span class="hljs-number">1</span><br><br>ss=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> count:<br>    <span class="hljs-keyword">if</span> count[i]&gt;<span class="hljs-number">1</span>:  <span class="hljs-comment"># 如果字符出现次数大于1</span><br>        ss += i + <span class="hljs-built_in">str</span>(count[i])<br>    <span class="hljs-keyword">else</span>:<br>        ss += i   <span class="hljs-comment"># 若只出现一次，那么数字1可以省略</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ss)&lt;<span class="hljs-built_in">len</span>(s):  <span class="hljs-comment"># 如果输入的字符串可以压缩，输出压缩的字符串</span><br>    <span class="hljs-built_in">print</span>(ss)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)   <span class="hljs-comment"># 否则输出NO</span><br></code></pre></td></tr></table></figure><p>但是上述解法不具备普遍性，比如：<br />测试 AAABBWWWWFFAAAAAAAVVQQQQER 输出是 A10B2W4F2V2Q4ER 但是正确答案是A3B2W4F2A7V2Q4ER</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 优化版</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>s = <span class="hljs-built_in">input</span>()<br>compressed = <span class="hljs-string">&quot;&quot;</span><br>count = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    <span class="hljs-comment"># 如果当前字符与下一个字符相同，则增加计数----使用这种思路就可以解决上面提到的问题了</span><br>    <span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> s[i] == s[i + <span class="hljs-number">1</span>]:<br>        count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 否则，将字符和计数添加到压缩字符串中</span><br>        <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">1</span>:<br>            compressed += s[i] + <span class="hljs-built_in">str</span>(count)<br>        <span class="hljs-keyword">else</span>:<br>            compressed += s[i]<br>        count = <span class="hljs-number">1</span>  <span class="hljs-comment"># 重置计数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(compressed) &lt; <span class="hljs-built_in">len</span>(s):  <br>    <span class="hljs-built_in">print</span>(compressed)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="fizz-buzz经典问题">9、Fizz Buzz经典问题</h2><p><ahref="https://www.lanqiao.cn/problems/253/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> n % <span class="hljs-number">3</span>==<span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">5</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FizzBuzz&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fizz&quot;</span>)<br><span class="hljs-keyword">elif</span> n % <span class="hljs-number">5</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Buzz&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(n)<br></code></pre></td></tr></table></figure><h2 id="反转字符串中的字符">10、反转字符串中的字符</h2><p><ahref="https://www.lanqiao.cn/problems/250/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 我的解</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>s = <span class="hljs-built_in">input</span>()<br>ss=<span class="hljs-string">&#x27;&#x27;</span><br>n=<span class="hljs-built_in">len</span>(s)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    ss+=s[n-<span class="hljs-number">1</span>-i]<br><span class="hljs-built_in">print</span>(ss)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 参考解1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">input</span>())))<br></code></pre></td></tr></table></figure><ul><li>input()：用于获取用户输入的内容<br /></li><li>reversed()：这是一个内置函数，它会返回输入内容的反转迭代器<br /></li><li>"".join()：它将可迭代对象（这里就是反转后的内容）中的元素用空字符串连接起来，形成一个新的字符串并输出</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">s= <span class="hljs-string">&#x27;abcde&#x27;</span><br><span class="hljs-built_in">print</span>((<span class="hljs-built_in">reversed</span>(s)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">reversed</span>(s)))<br><br><span class="hljs-comment"># &lt;reversed object at 0x00000150B401DC10&gt;</span><br><span class="hljs-comment"># edcba</span><br></code></pre></td></tr></table></figure><p>不得不说，这个方法太牛了！</p><p>提问：什么是迭代器？</p><p>迭代器是一种可以遍历一个集合（如列表、字符串等）的对象。</p><p>它具有以下特点： 1. 它提供了一种按顺序访问集合中元素的方式。 2.可以逐个获取元素，而无需一次性获取所有元素。 3. 通常通过特定的方法（如<code>next()</code> ）来获取下一个元素。</p><p>迭代器使得可以高效地遍历大型集合，而无需将所有元素一次性加载到内存中。在Python中，很多内置的数据结构都可以返回迭代器，比如列表、元组、字典等。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 参考解2</span><br>x=<span class="hljs-built_in">input</span>()<br>y=x[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><p>y=x[::-1]：这里使用了切片操作，[::-1] 表示以步长为 -1 对 x进行切片，也就是将 x 中的字符顺序反转，得到反转后的字符串并赋值给 y</p><p>其实可以在此基础上进一步优化： <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>()[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure> 不愧是python</p><h2 id="找到给定字符串中的不同字符">11、找到给定字符串中的不同字符</h2><p><ahref="https://www.lanqiao.cn/problems/251/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py">a=<span class="hljs-built_in">input</span>()<br>b=<span class="hljs-built_in">input</span>()<br>c=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>  <span class="hljs-keyword">if</span> a.count(i)==b.count(i):<br>      <span class="hljs-keyword">continue</span><br>  <span class="hljs-keyword">else</span>:<br>      <span class="hljs-built_in">print</span>(i)<br>      c=<span class="hljs-number">1</span><br>      <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>   <span class="hljs-keyword">if</span> c==<span class="hljs-number">1</span>:<br>       <span class="hljs-keyword">break</span><br>   <span class="hljs-keyword">else</span>:<br>       <span class="hljs-keyword">if</span> b.count(i)==a.count(i):<br>        <span class="hljs-keyword">continue</span><br>       <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h2 id="查找两个总和为特定值的索引">12、查找两个总和为特定值的索引</h2><p><ahref="https://www.lanqiao.cn/problems/252/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())  <span class="hljs-comment"># 给定数组的长度</span><br>s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">if</span> k-i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-built_in">print</span>(s.index(i),s.index(k-i))<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="实现选择排序">13、实现选择排序</h2><p><ahref="https://www.lanqiao.cn/problems/297/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><ul><li>解1 <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">n=<span class="hljs-built_in">input</span>()<br>s=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>s.sort()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,s)))<br></code></pre></td></tr></table></figure></li></ul><p>这样写其实没有用到选择排序，有点取巧了，要是老实按照题目的意思应该是下面的做法</p><p>选择排序的工作原理是每一次从需要排序的数据元素中选出最小的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排列完毕</p><ul><li>解2 <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">selection_sort</span>(<span class="hljs-params">arr</span>):<br>    n = <span class="hljs-built_in">len</span>(arr)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        min_idx = i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> arr[j] &lt; arr[min_idx]:<br>                min_idx = j<br>        arr[i], arr[min_idx] = arr[min_idx], arr[i]<br>    <span class="hljs-keyword">return</span> arr<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>arr = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>sorted_arr = selection_sort(arr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, sorted_arr)))<br></code></pre></td></tr></table></figure></li></ul><p>这行代码 <code>arr[i], arr[min_idx] = arr[min_idx], arr[i]</code> 是Python 中的一种特殊的赋值方式，称为“多元赋值”或“并行赋值”。</p><p>它的作用是将数组 <code>arr</code> 中索引为 <code>i</code>的元素和索引为 <code>min_idx</code> 的元素的值进行交换。</p><p>比如说，如果 <code>arr[i]</code> 的值是 5 ，<code>arr[min_idx]</code>的值是 3 ，那么执行这行代码后，<code>arr[i]</code> 的值会变成 3，<code>arr[min_idx]</code> 的值会变成 5 。</p><p>这种赋值方式可以<code>在一行代码中简洁地完成两个变量值的交换</code>，而无需使用临时变量来辅助。例如，如果使用传统的方式交换两个变量的值，可能会这样写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">temp = arr[i]<br>arr[i] = arr[min_idx]<br>arr[min_idx] = temp<br></code></pre></td></tr></table></figure><p>但使用多元赋值就可以直接一步完成交换，使代码更加简洁和高效。</p><ul><li>解3 <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">select_sort_simple</span>(<span class="hljs-params">li</span>):      <span class="hljs-comment"># 复杂度是 O(n**2)</span><br>    li_new=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(li)):<br>        min_val=<span class="hljs-built_in">min</span>(li)           <span class="hljs-comment">#找最小值则需要遍历一遍  O(n)</span><br>        li_new.append(min_val)<br>        li.remove(min_val)          <span class="hljs-comment"># 删除的时候还需要遍历一遍 O(n)</span><br>    <span class="hljs-keyword">return</span> li_new<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>li=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> select_sort_simple(li):<br>    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><p>这种实现方式虽然能达到排序的目的，但由于频繁使用了查找最小值和删除元素的操作，导致时间复杂度较高，不是一种高效的选择排序实现方式。</p><h2 id="k倍区间">14、K倍区间</h2><p><ahref="https://www.lanqiao.cn/problems/97/learning/?page=1&amp;first_category_id=1&amp;second_category_id=3">题目链接</a></p><p>暴力解法如下，使用双重循环遍历，但是会超时</p><ul><li>解1 <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>N,K = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>a = [<span class="hljs-number">0</span>] * N<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    a[i] = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    temp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,N):<br>        temp += a[j]<br>        <span class="hljs-keyword">if</span> temp % K == <span class="hljs-number">0</span>:<br>            ans += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure></li><li>解2</li></ul><p>使用了<code>前缀和</code>的思想来解决，参考代码如下：<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[1 2 3 4 5]</span><br><span class="hljs-string">前缀和[1 3 6 10 15]</span><br><span class="hljs-string">对2(k)取余数[1 1 0 0 1]会发现余数为0&gt;&gt;说明该位置的前缀和能被k整除；余数相减为0的，两两组合C（3，2）。c(n,2)等于（n-1）*n/2</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>n,k=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>ls=[<span class="hljs-number">0</span>]*k        <span class="hljs-comment">#创建一个长度为k的0列表存储对前缀和取余后余数的种类个数</span><br>ans=<span class="hljs-number">0</span>           <span class="hljs-comment">#接收结果</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  ans+=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())    <span class="hljs-comment">#计算前缀和</span><br>  ls[ans%k]+=<span class="hljs-number">1</span>    <span class="hljs-comment">#前缀和余数为0的个数有多少，余数为1的有多少...</span><br>ans=ls[<span class="hljs-number">0</span>]     <span class="hljs-comment">#先得出余数为0的个数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ls)):<br>  <span class="hljs-keyword">if</span> ls[i]&gt;<span class="hljs-number">0</span>:    <span class="hljs-comment">#说明该余数出现过</span><br>    ans+=ls[i]*(ls[i]-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure></p><h2 id="实现插入排序">15、实现插入排序</h2><p><ahref="https://www.lanqiao.cn/problems/298/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br>s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>    key = s[i]<br>    j = i - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s[j] &gt; key:<br>        s[j + <span class="hljs-number">1</span>] = s[j]<br>        j -= <span class="hljs-number">1</span><br>    s[j + <span class="hljs-number">1</span>] = key<br><br>output_str = <span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, s))<br><span class="hljs-built_in">print</span>(output_str)<br></code></pre></td></tr></table></figure><p>对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入</p><h2 id="实现快速排序">16、实现快速排序</h2><p><ahref="https://www.lanqiao.cn/problems/299/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>arr = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_sort</span>(<span class="hljs-params">arr</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> arr<br>    pivot = arr[<span class="hljs-built_in">len</span>(arr) // <span class="hljs-number">2</span>]<br>    left = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr <span class="hljs-keyword">if</span> x &lt; pivot]<br>    middle = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr <span class="hljs-keyword">if</span> x == pivot]<br>    right = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr <span class="hljs-keyword">if</span> x &gt; pivot]<br>    <span class="hljs-keyword">return</span> quick_sort(left) + middle + quick_sort(right)<br><br>sorted_arr = quick_sort(arr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,sorted_arr)))<br></code></pre></td></tr></table></figure><p>在这个快速排序的实现中，首先选择一个枢轴元素（这里选择中间元素），然后将列表分为小于枢轴、等于枢轴和大于枢轴的三部分，接着对小于和大于枢轴的部分<code>递归</code>地进行快速排序，最后将它们组合起来。</p><h2 id="实现归并排序">17、实现归并排序</h2><p><ahref="https://www.lanqiao.cn/problems/300/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><figure><img src="https://pic.imgdb.cn/item/66b3a9b2d9c307b7e9d0986c.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>arr = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_sort</span>(<span class="hljs-params">arr</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> arr<br><br>    <span class="hljs-comment"># 将数组分为两部分</span><br>    mid = <span class="hljs-built_in">len</span>(arr) // <span class="hljs-number">2</span><br>    left_half = arr[:mid]<br>    right_half = arr[mid:]<br><br>    <span class="hljs-comment"># 递归地对两部分进行分解</span><br>    left_half = merge_sort(left_half)<br>    right_half = merge_sort(right_half)<br><br>    <span class="hljs-comment"># 合并并排序两个子数组</span><br>    <span class="hljs-keyword">return</span> merge(left_half, right_half)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">left, right</span>):<br>    result = []<br>    i = j = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 比较左右两部分的元素，将较小的元素添加到结果中</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(left) <span class="hljs-keyword">and</span> j &lt; <span class="hljs-built_in">len</span>(right):<br>        <span class="hljs-keyword">if</span> left[i] &lt; right[j]:<br>            result.append(left[i])<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            result.append(right[j])<br>            j += <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 将剩余的元素添加到结果中</span><br>    result.extend(left[i:])<br>    result.extend(right[j:])<br>    <span class="hljs-keyword">return</span> result<br><br>sorted_arr=merge_sort(arr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,sorted_arr)))<br></code></pre></td></tr></table></figure><h2 id="实现基数排序">18、实现基数排序</h2><p><ahref="https://www.lanqiao.cn/problems/301/learning/?page=1&amp;first_category_id=1&amp;second_category_id=6">题目链接</a></p><p>实现基数排序算法。基数排序的介绍如下：</p><p>1、将整数按位数切割,然后将数值统一为同样的数位长度，数位较短的数前面补零。</p><p>2、从最低位开始，依次进行一次排序。</p><p>3、从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 法1</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>L=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>buts=[[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>( <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">max</span>(L))))]<span class="hljs-comment">#决定最大桶子数量</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  buts[<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(L[i]))-<span class="hljs-number">1</span>].append(L[i])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> buts:<br>  i.sort()<br>ook=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> buts:<br>  ook+=i<br><span class="hljs-built_in">print</span>(*ook)<br></code></pre></td></tr></table></figure><p>方法2：</p><p>以下是 Python 实现的基数排序代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">radix_sort</span>(<span class="hljs-params">arr</span>):<br>    max_value = <span class="hljs-built_in">max</span>(arr)<br>    exp = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> max_value // exp &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># 初始化 10 个桶（每个桶代表一个数位 0-9）</span><br>        buckets = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><br>        <span class="hljs-comment"># 将元素放入相应的桶中</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> arr:<br>            digit = (num // exp) % <span class="hljs-number">10</span><br>            buckets[digit].append(num)<br><br>        <span class="hljs-comment"># 从桶中取出元素，按顺序重新排列数组</span><br>        arr = [item <span class="hljs-keyword">for</span> bucket <span class="hljs-keyword">in</span> buckets <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> bucket]<br><br>        <span class="hljs-comment"># 移动到下一个数位</span><br>        exp *= <span class="hljs-number">10</span><br><br>    <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure><p>以下是对代码的解释：</p><ol type="1"><li>首先找到数组中的最大值<code>max_value</code>，这是为了确定排序的位数。</li><li>进入一个循环，循环的条件是<code>max_value // exp &gt; 0</code>。<code>exp</code> 初始为1，每次循环后乘以 10，用于依次处理个位、十位、百位等。</li><li>在每次循环中：<ul><li>创建 10 个空桶，用于存储不同数位的值。</li><li>遍历数组中的每个元素，计算当前数位的值（通过<code>(num // exp) % 10</code>），并将元素放入相应的桶中。</li><li>然后从桶中依次取出元素，重新排列数组。</li><li>最后更新 <code>exp</code> 到下一个数位。</li></ul></li></ol><p>示例用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = [<span class="hljs-number">170</span>, <span class="hljs-number">45</span>, <span class="hljs-number">75</span>, <span class="hljs-number">90</span>, <span class="hljs-number">802</span>, <span class="hljs-number">24</span>, <span class="hljs-number">2</span>, <span class="hljs-number">66</span>]<br>sorted_arr = radix_sort(arr)<br><span class="hljs-built_in">print</span>(sorted_arr)<br></code></pre></td></tr></table></figure><p>基数排序是一种非比较型整数排序算法，它的时间复杂度为 <spanclass="math inline">\(O(d(n + k))\)</span>，其中 <spanclass="math inline">\(n\)</span> 是待排序元素个数，<spanclass="math inline">\(k\)</span> 是进制数（通常是 10），<spanclass="math inline">\(d\)</span> 是最大数的位数。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cpp基础</title>
    <link href="/2024/07/06/cpp/cpp-ji-chu/"/>
    <url>/2024/07/06/cpp/cpp-ji-chu/</url>
    
    <content type="html"><![CDATA[<h3 id="参考连接">参考连接：</h3><ul><li>学校课程23版https://www.bilibili.com/video/BV1WG411d7ui/?pop_share=1&amp;vd_source=2ea044642ac564524fdce3b964e1b2ae</li><li>课本教材 https://github.com/ShujiaHuang/Cpp-Primer-Plus-6th</li></ul><h2 id="第一讲">第一讲</h2><h3 id="程序运行流程">程序运行流程</h3><p>编译-运行（从硬盘到内存再一条一条给CPU执行）</p><ul><li>1、<code>内存</code>很重要</li><li>2、程序存储在硬盘上</li><li>3、在CPU上一条一条指令执行</li></ul><p>注意：为什么中间加一步<code>内存</code>?---硬盘读取速率太慢了</p><p>四大金刚 - 数据结构 - 算法分析 - 操作系统 - 计算机网络</p><p>内存中的存储形式：二进制数</p><h3 id="地址的概念">地址的概念</h3><p>32位操作系统是2^32个地址<br />64位操作系统同理</p><h3 id="编译原理">编译原理</h3><p><code>compiling vs interpretation</code><br />编译器将源代码编译成机器码，而解释器则将源代码直接运行在计算机上</p><h2 id="第二讲">第二讲</h2><h3 id="data-types">data types</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  <span class="hljs-comment">//对应c语言中的stdio.h---printf();</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <span class="hljs-comment">//std表示文件夹，封装好的代码</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>   <span class="hljs-comment">//程序从main()函数开始、结束</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//在操作系统眼中，我们的程序就是一个函数，即：main()函数</span><br>    <span class="hljs-comment">// if__name__ = __ main__ 表示判断是否直接运行含有main()函数的程序，还是引用其他程序</span><br>    <br>    <span class="hljs-comment">//写的每一个常量都是有类型的！</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;2:    &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2l:   &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(<span class="hljs-number">2l</span>).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2.0f: &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(<span class="hljs-number">2.0f</span>).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2.0:  &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(<span class="hljs-number">2.0</span>).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<span class="hljs-comment">//注意2.0是double，默认是双精度</span><br><br>    <span class="hljs-comment">//字符常量赋值给字符类型</span><br>    <span class="hljs-type">char</span> a = <span class="hljs-string">&#x27;x&#x27;</span>;<br>    <span class="hljs-comment">//注意不能写成 char a = &quot;x&quot;---单字符char不能用双引号赋值</span><br>    <span class="hljs-comment">//双引号&quot;x&quot;表示一个字符串，&#x27;x&#x27;表示一个字符</span><br>    <span class="hljs-comment">//字符串用 \0 结束</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br>    <span class="hljs-comment">//科学计数法</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;.145:     &quot;</span>&lt;&lt;<span class="hljs-number">.145</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2.145E-1: &quot;</span> &lt;&lt; <span class="hljs-number">2.145E-1</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2.145e2:  &quot;</span> &lt;&lt; <span class="hljs-number">2.145e2</span> &lt;&lt; endl;<br><br>    <span class="hljs-comment">//把b定义为常量，不能修改</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> b = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// b = 2;  会报错</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//变量</span><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//1、变量类型：int</span><br>    <span class="hljs-comment">//2、变量名：a</span><br>    <span class="hljs-comment">//3、变量地址：内存中的地址</span><br>    <span class="hljs-comment">//4、变量值：1</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>   </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">3.6</span>;<br>    <span class="hljs-type">float</span> b = <span class="hljs-number">5</span> / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">5</span> % <span class="hljs-number">2</span>;<br>    <span class="hljs-type">float</span> d = <span class="hljs-number">5</span> / <span class="hljs-number">2.0</span>;  <span class="hljs-comment">//类型会向上转换</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;d = &quot;</span> &lt;&lt; d &lt;&lt; endl;<br><br>    <span class="hljs-type">int</span> e = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> f = (++e) * <span class="hljs-number">2</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;e = &quot;</span> &lt;&lt; e &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;f = &quot;</span> &lt;&lt; f &lt;&lt; endl;<br><br>    <span class="hljs-type">int</span> g = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> h = (g++) * <span class="hljs-number">2</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;g = &quot;</span> &lt;&lt; g &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;h = &quot;</span> &lt;&lt; h &lt;&lt; endl;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="条件表达式">条件表达式</h3><p>在计算机中，0 代表假，非 0 代表真</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//0代表假，非0代表真</span><br>    <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> z = <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">//cout &lt;&lt; (x = y) &lt;&lt; endl;   //这是一个赋值的表达式，表示 x 等于 2，注意这里会对后续 x 的值产生影响</span><br>    cout &lt;&lt; (x == y) &lt;&lt; endl;<br>    cout &lt;&lt; (<span class="hljs-string">&#x27;a&#x27;</span> == <span class="hljs-number">97</span>) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;a=&quot;</span> &lt;&lt; x++ + y &lt;&lt; endl;  <span class="hljs-comment">//表示x++ +y</span><br>    <span class="hljs-comment">//2</span><br>    <span class="hljs-comment">//0</span><br>    <span class="hljs-comment">//1</span><br>    <span class="hljs-comment">//a = 3</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if-判断语句">if 判断语句</h3><p>这里就不记代码了</p><h3 id="循环语句">循环语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)<br>    &#123;<br>        a += i;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    <br>&#125;<br><span class="hljs-comment">// a = 3</span><br></code></pre></td></tr></table></figure><p>for 循环与 while 循环类似，可以相互转换</p><p>这里就不记代码了，偷点懒...</p><h3 id="循环嵌套">循环嵌套</h3><p>略...</p><h3 id="break-与-continue">break 与 continue</h3><p><code>break</code> 表示结束当前循环，<code>continue</code>表示跳过本次循环</p><h3 id="switch-与-case">switch 与 case</h3><p>选择语句执行，需要配合<code>break</code>食用</p><h2 id="第二讲实验记录">第二讲实验记录</h2><p>第一题写的不好，一开始看错题了，回去好好改一下</p><p>请注意，本题的目标是对原始的字符数组进行修正！！！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Delete all lowercase ‘d’ from a string, e.g. input the string “abcdabcd” and output “abcabc”. Note that the string is a C string, which means it is an array of characters ending with ‘\0’.</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;abcdabcd&quot;</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] != <span class="hljs-string">&#x27;d&#x27;</span>) &#123;<br>            str[j++] = str[i];<br>        &#125;<br>        i++;<br>        <span class="hljs-keyword">if</span> (i == len - <span class="hljs-number">1</span> &amp;&amp; str[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>            str[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br>    str[j] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len;i++)<br>        cout &lt;&lt; str[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>这里优化了一下：</p><p>但是实际上这里还有有问题，对于原始数组还是没有进行完全的修改（\0后面还有字符，只是没有输出出来！！！）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;abcdabcdd&quot;</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] != <span class="hljs-string">&#x27;d&#x27;</span>) &#123;<br>            str[j++] = str[i];<br>        &#125;<br>        i++;<br>    &#125;<br>    str[j] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (str[t] != <span class="hljs-string">&#x27;\0&#x27;</span>)   <span class="hljs-comment">//因为考虑到字符数组中间也有\0这一字符，所以选择遇到第一个\0时跳出循环，停止输出</span><br>    &#123;<br>        cout &lt;&lt; str[t];<br>        t += <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//注意上面的解法是不对的...</span><br></code></pre></td></tr></table></figure><p>最终的版本：这下应该是比较合理的了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;abcdddabcd&quot;</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-built_in">strlen</span>(str)) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] != <span class="hljs-string">&#x27;d&#x27;</span>) &#123;<br>            str[j++] = str[i];<br>        &#125;<br>        i++;<br>    &#125;<br>    str[j] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-built_in">strlen</span>(str);i++)   <span class="hljs-comment">//因为strlen只能读取到第一个\0为止，因此在上面的版本基础上进一步进行了优化</span><br>        cout &lt;&lt; str[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>第二题：本题比较简单，没有什么坑，只需要遍历一遍数组，然后根据比较的结果进行替换即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Find the second largest value in an array. For example, if you have the array &#123;1, 4, 2, 3, 5&#125;, which returns 4.</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> a[n];<br><span class="hljs-type">int</span> first = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> second = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin &gt;&gt; a[i];<br><span class="hljs-keyword">if</span> (a[i] &gt; second &amp;&amp; a[i] &lt; first)<br>&#123;<br>second = a[i];<br>&#125;<br><span class="hljs-keyword">if</span> (a[i] &gt; first)<br>&#123;<br>second = first;<br>first = a[i];<br>&#125;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;the secode largest num is : &quot;</span> &lt;&lt; second &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三问感觉写的也有点问题，有点局限了，没有考虑特殊情况</p><p>如果这个数组中出现了两个<code>出现次数为奇数</code>的情况怎么办？？？</p><p>这种情况下就不能简答的使用异或操作了，因为两个奇数异或的结果是0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// There are N positive integers in an array. Only one of them appears an odd number of times. The others appear an even number of times. Find the number that appears an odd number of times and output it. For example, input an array &#123;1, 2, 4, 3, 3, 1, 3, 4, 2&#125;, then output 3. </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">9</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; N;i++)<br>&#123;<br>cin &gt;&gt; a[i];<br>result ^= a[i];<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;the odd num is : &quot;</span>&lt;&lt;result &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三讲">第三讲</h2><h3 id="array">array</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>   </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span>* p1 = &amp;a;<span class="hljs-comment">//p1也算一个变量，特点也一样</span><br>    <span class="hljs-comment">//类型是int* 名字是p1，值是变量a的地址</span><br><br>    <span class="hljs-comment">//&amp;a表示取地址：取变量的地址</span><br>    <span class="hljs-comment">//*p1表示取内容：取当前地址保存的内容</span><br>    <span class="hljs-comment">//int*不是一个操作符，是一个类型</span><br>    <span class="hljs-comment">//a和*p1都表示一个房子，基本没有区别</span><br>    cout &lt;&lt; p1 &lt;&lt; endl;<br>    cout &lt;&lt; &amp;a &lt;&lt; endl;<br>    cout &lt;&lt; *p1 &lt;&lt; endl;<br><br>    cout &lt;&lt; &amp;(*p1) &lt;&lt; endl;  <span class="hljs-comment">//等价于a的地址</span><br>    cout &lt;&lt; *(&amp;a) &lt;&lt; endl;   <span class="hljs-comment">//等级于a</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 0000006D754FF8A4</span><br><span class="hljs-comment">// 0000006D754FF8A4</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 0000006D754FF8A4</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//数组的基本用法---一维</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>   </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<span class="hljs-comment">//定义一个变量，初始化为5</span><br><br>    cout &lt;&lt; a &lt;&lt; endl;  <span class="hljs-comment">//打印数组第一个元素的地址</span><br>    cout &lt;&lt; a[<span class="hljs-number">0</span>] &lt;&lt; endl; <span class="hljs-comment">//打印第一个元素的值</span><br>    cout &lt;&lt; b &lt;&lt; endl;  <span class="hljs-comment">//打印 5</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;++i)<br>    &#123;<br>        cout &lt;&lt; a[i] &lt;&lt; endl;  <span class="hljs-comment">//打印5个0</span><br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;array size:          &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(a) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;array element size:  &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;number of elements:  &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(a) / <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br>    cout &lt;&lt; a[<span class="hljs-number">5</span>] &lt;&lt; endl;  <span class="hljs-comment">//等价于下面的</span><br>    cout &lt;&lt; *(a + <span class="hljs-number">5</span>) &lt;&lt; endl;  <span class="hljs-comment">//表示地址可以直接相加</span><br>    <span class="hljs-comment">//因为操作系统会预留一部分内存空间，所以超出一点不会报错，但是读取会出现问题</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 000000EF0CAFF9E8</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 5</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// array size:          20</span><br><span class="hljs-comment">// array element size:  4</span><br><span class="hljs-comment">// number of elements:  5</span><br><span class="hljs-comment">// -858993460</span><br><span class="hljs-comment">// -858993460</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//二维数组：在内存中不存在二维数组，还是用一维数组来表示二维的概念，示例如下：</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-type">int</span> b[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">2</span>;j++)<br>        &#123;<br>            cout &lt;&lt; a[i * <span class="hljs-number">2</span> + j];<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-comment">//同下：</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">2</span>;j++)<br>        &#123;<br>            cout &lt;&lt; b[i][j];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 123456</span><br><span class="hljs-comment">// 123456</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> a[] = <span class="hljs-string">&quot;jinan&quot;</span>;<br>    <span class="hljs-type">char</span> b[] = <span class="hljs-string">&quot;jinan&quot;</span>;<br>    <br>    <span class="hljs-keyword">if</span> (a == b) &#123; <span class="hljs-comment">// == 比较的是存储的具体内容是否一样</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;true&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;false&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-comment">//a b 表示的其实是一个指针---比较的是数组的地址</span><br><br>    string c = <span class="hljs-string">&quot;jinan&quot;</span>;  <span class="hljs-comment">//string 运算符重载 可以解决上述问题</span><br>    string d = <span class="hljs-string">&quot;jinan&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (c == d) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;true&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;false&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>char[] 的比较：a == b 比较的是数组的地址，而不是数组的内容</p><p>string 的比较：c == d 比较的是字符串的内容，因为 string 类重载了 ==运算符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//char a[5] = &quot;jinan&quot;;  //这里会报错，字符串数组必须以\0结束</span><br>    <span class="hljs-type">char</span> b[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;jinan&quot;</span>;<br>    cout &lt;&lt; b &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//jinan</span><br></code></pre></td></tr></table></figure><h2 id="第四讲">第四讲</h2><h3 id="function">Function</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;X&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">fun4</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a * a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">fun1</span>();<br>    <span class="hljs-built_in">fun2</span>(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">fun3</span>();<br>    cout &lt;&lt; c &lt;&lt; endl;<br><br>    <span class="hljs-type">float</span> f = <span class="hljs-built_in">fun4</span>(<span class="hljs-number">2.0</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;f = &quot;</span> &lt;&lt; f &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// Hello!</span><br><span class="hljs-comment">// a = 2</span><br><span class="hljs-comment">// X</span><br><span class="hljs-comment">// f = 4</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//变量的作用域</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> c;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;fun():a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;fun():b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;fun():c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;main():a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br>    <span class="hljs-built_in">fun</span>(<span class="hljs-number">4</span>);<br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (;i &lt; <span class="hljs-number">1</span>;i++)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;for():a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;main():i = &quot;</span> &lt;&lt; i &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> c = <span class="hljs-number">5</span>;<br><span class="hljs-comment">// main():a = 3</span><br><span class="hljs-comment">// fun():a = 4</span><br><span class="hljs-comment">// fun():b = 2</span><br><span class="hljs-comment">// fun():c = 5</span><br><span class="hljs-comment">// for():a = 3</span><br><span class="hljs-comment">// main():i = 1</span><br></code></pre></td></tr></table></figure><p>将循环用递归来表示： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//循环</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">iteration</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> sum;<br>  <span class="hljs-keyword">for</span>(sum=<span class="hljs-number">1</span>;a&gt;<span class="hljs-number">1</span>;a--)<br>  &#123;<br>    sum *= a;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-comment">//递归</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">recursion</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> a*<span class="hljs-built_in">recursion</span>(a<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-comment">// 函数重载</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">float</span> a,<span class="hljs-type">float</span> b=<span class="hljs-number">3.3f</span>)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-comment">//开辟栈区域</span><br>  cout&lt;&lt;<span class="hljs-built_in">iteration</span>(<span class="hljs-number">5</span>)&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-built_in">recursion</span>(<span class="hljs-number">5</span>)&lt;&lt;endl;<br><br>  cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">1.1f</span>,<span class="hljs-number">2.2f</span>)&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">1.1f</span>)&lt;&lt;endl;  <span class="hljs-comment">//b是默认值</span><br>&#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//区别</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> <span class="hljs-comment">//系统的</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span>  <span class="hljs-comment">//自己写的</span></span><br></code></pre></td></tr></table></figure><h3 id="指针基础">指针基础 ⭐⭐⭐⭐⭐</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span>* p1 = &amp;a;<br><br>    <span class="hljs-type">int</span>* p2 = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//NULL表示0</span><br>    p2 = p1;<br>    <span class="hljs-type">int</span>** p3 = &amp;p2;<br>    <span class="hljs-comment">// **P3与a和*p2等价</span><br><br>    cout &lt;&lt; p2 &lt;&lt; endl;  <span class="hljs-comment">//p2存的值是a的地址</span><br>    cout &lt;&lt; &amp;p2 &lt;&lt; endl;  <span class="hljs-comment">//表示p2的地址</span><br>    cout &lt;&lt; p3 &lt;&lt; endl;   <span class="hljs-comment">//p3表示p2的地址</span><br>    cout &lt;&lt; *p3 &lt;&lt; endl;  <span class="hljs-comment">//p3取值是p2存的值 就是a的地址</span><br>&#125;<br><span class="hljs-comment">// 1、4是相同的，2、3是相同的输出</span><br><span class="hljs-comment">// 0000003DE04FF994</span><br><span class="hljs-comment">// 0000003DE04FF9D8</span><br><span class="hljs-comment">// 0000003DE04FF9D8</span><br><span class="hljs-comment">// 0000003DE04FF994</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> b[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br><span class="hljs-type">int</span>* p4 = b;<br>cout &lt;&lt; b &lt;&lt; endl;    <br>cout &lt;&lt; b[<span class="hljs-number">2</span>] &lt;&lt; endl; <br>cout &lt;&lt; *(b + <span class="hljs-number">2</span>) &lt;&lt; endl;  <br>cout &lt;&lt; *(++p4) &lt;&lt; endl;   <br>cout &lt;&lt; *(p4++) &lt;&lt; endl;  <br>cout &lt;&lt; *(p4 - <span class="hljs-number">2</span>) &lt;&lt; endl;  <br>&#125;<br><span class="hljs-comment">// 输出如下：</span><br><span class="hljs-comment">// 0000002829EFFAA8</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>指针数组和数组指针的区别一定要搞懂！！！ <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> x * y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> c[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125; &#125;;<br><span class="hljs-built_in">int</span>(*p6)[<span class="hljs-number">2</span>] = c;    <span class="hljs-comment">//数组指针  指向连续数组的指针</span><br><br><span class="hljs-type">int</span>* p5[<span class="hljs-number">3</span>] = &#123; c[<span class="hljs-number">0</span>],c[<span class="hljs-number">1</span>],c[<span class="hljs-number">2</span>] &#125;;<br><span class="hljs-type">int</span>** p7 = p5;   <span class="hljs-comment">// 指针数组：指向不连续数组的指针</span><br><br>  <span class="hljs-comment">// 上述概念存疑，待定</span><br><br><span class="hljs-comment">//二维数组可以理解为数组指针！！！</span><br><br><span class="hljs-comment">//二重指针不一点是连续的，这是与数组的区别,证明如下：</span><br><span class="hljs-type">int</span>* p8 = &amp;c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;++i)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">2</span>;++j)<br>&#123;<br>cout &lt;&lt; p8[i * <span class="hljs-number">2</span> + j];<br>&#125;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//函数的指针</span><br><span class="hljs-built_in">int</span>(*f)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);<br>f = add;   <span class="hljs-comment">//回调函数，实现的原理就是函数指针</span><br>cout &lt;&lt; <span class="hljs-built_in">f</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) &lt;&lt; endl;<br><br>f = mul;<br>cout &lt;&lt; <span class="hljs-built_in">f</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> c[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span> &#125;;<br><br>    <span class="hljs-type">int</span>* x = &amp;a, * y = &amp;b;<br>    <span class="hljs-type">int</span> t = *x;<br>    *x = *y;<br>    *y = t;<br>    cout &lt;&lt; *x &lt;&lt; *y &lt;&lt; endl;<br>    cout &lt;&lt; a &lt;&lt; b &lt;&lt; endl;  <span class="hljs-comment">//ab会受影响</span><br>&#125;<br><span class="hljs-comment">// 21</span><br><span class="hljs-comment">// 21</span><br><span class="hljs-comment">// 通过指针操作实现了两个整数变量a和b的值交换</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = x;<br>    x = y;<br>    y = t;<br>    cout &lt;&lt; <span class="hljs-string">&quot;(x,y) = (&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> c[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span> &#125;;<br><br>    <span class="hljs-built_in">swap</span>(a, b);<br>    cout &lt;&lt; <span class="hljs-string">&quot;(a,b) = (&quot;</span>&lt;&lt;a &lt;&lt;<span class="hljs-string">&quot;,&quot;</span> &lt;&lt; b&lt;&lt;<span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">// (x,y) = (2,1)</span><br><span class="hljs-comment">// (a,b) = (1,2)</span><br><span class="hljs-comment">// 这种情况下ab不变</span><br></code></pre></td></tr></table></figure><h2 id="第三讲实验记录">第三讲实验记录</h2><p>第三次实验课只有一道题，但是这题感觉难度比较大，因为老师的要求比较高，一开始使用的第二种方法，需要两次遍历加上循环输出，老师认为还有更好的方法，所以尝试使用了第一种，只需要一次遍历，但是使用到了两个指针，类似快慢指针的解法，老师认为还可以优化，后面就没有好的想法了，后面复习的话需要认真看看这道题！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">//解法一</span><br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br>    <span class="hljs-type">bool</span> found = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">1</span>, right = <span class="hljs-number">1</span>, sum = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (right &lt; N/<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (sum &lt; N) &#123;<br>            right++;<br>            sum += right;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; N) &#123;<br>            sum -= left;<br>            left++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            found = <span class="hljs-literal">true</span>;<br>            cout &lt;&lt; N &lt;&lt; <span class="hljs-string">&quot;=&quot;</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = left; i &lt; right; i++) &#123;<br>                cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;+&quot;</span>;<br>            &#125;<br>            cout &lt;&lt; right &lt;&lt; endl;<br>            sum -= left;<br>            left++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!found)<br>        cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  <span class="hljs-comment">//解法二</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;n=&quot;</span> &lt;&lt; n &lt;&lt; endl;<br>    <span class="hljs-type">bool</span> find = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (;j &lt; n;j++)<br>        &#123;<br>            <span class="hljs-type">int</span> sum =(i + j) * (j - i + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (sum == n)<br>            &#123;<br>                find = <span class="hljs-literal">true</span>;<br>                cout &lt;&lt; <span class="hljs-string">&quot;100=&quot;</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i;k &lt; j;k++)<br>                &#123;<br>                    cout &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot;+&quot;</span>;<br>                &#125;<br>                cout &lt;&lt; j &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (find == <span class="hljs-literal">false</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第四讲实验记录">第四讲实验记录</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 第一题使用递归设计一个斐波那契数列即可</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (N == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (N == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Fibonacci</span>(N - <span class="hljs-number">1</span>) + <span class="hljs-built_in">Fibonacci</span>(N - <span class="hljs-number">2</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> N = <span class="hljs-number">5</span>;<br>cout &lt;&lt; <span class="hljs-built_in">Fibonacci</span>(N) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 第二题需要对有序数组进行插入操作，使用到了二分遍历找到插入点，然后从后往前进行插入，提供了vector版本</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> size, <span class="hljs-type">int</span> num)</span> </span>&#123;<br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> right = size - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br><span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (arr[mid] == num) &#123;<br><span class="hljs-keyword">return</span> mid;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; num) &#123;<br>left = mid + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>right = mid - <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> left;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> num)</span>  <span class="hljs-comment">//使用vector来实现</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> right = arr.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt;= right)<br>&#123;<br><span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (arr[mid] &lt; num) &#123;<br>left = mid + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>right = mid - <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> left;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// 静态二分法实现</span><br><span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">int</span> size = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br><span class="hljs-type">int</span> num = <span class="hljs-number">12</span>;<br><br><span class="hljs-type">int</span> insertPoint = <span class="hljs-built_in">binarySearch</span>(arr, size, num);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = size; j &gt; insertPoint; j--) &#123;<br>arr[j] = arr[j - <span class="hljs-number">1</span>];<br>&#125;<br>arr[insertPoint] = num;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; size + <span class="hljs-number">1</span>;i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; endl;<br>&#125;<br><br>  <span class="hljs-comment">//answer2 vector实现</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt;arr = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">int</span> num = <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> insertPoint = <span class="hljs-built_in">binarySearch</span>(arr, num); <span class="hljs-comment">// 找到插入点</span><br>arr.<span class="hljs-built_in">insert</span>(arr.<span class="hljs-built_in">begin</span>() + insertPoint, num); <span class="hljs-comment">//插入</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; element : arr)<br>&#123;<br>std::cout &lt;&lt; element &lt;&lt;std::endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 第三题是个数学题</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]);i++)<br>&#123;<br>sum += arr[i];<br>&#125;<br>cout &lt;&lt; ((<span class="hljs-number">0</span>+<span class="hljs-number">9</span>) * <span class="hljs-number">10</span>) / <span class="hljs-number">2</span> - sum &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第五讲实验记录">第五讲实验记录</h2><p><imgsrc="https://pic.imgdb.cn/item/670e32ced29ded1a8c0966f1.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670e32dfd29ded1a8c0979d0.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670e32e9d29ded1a8c098769.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670e32f4d29ded1a8c0994a8.png" /></p><p><imgsrc="https://pic.imgdb.cn/item/670e32ffd29ded1a8c09a0b0.png" /></p><h2 id="第五讲">第五讲</h2><p>栈空间 -函数调用的时候，函数的参数会复制一份，然后调用函数，函数执行完毕，函数的参数就结束了，函数的返回值也会复制一份，然后返回到调用者，调用者再根据返回值进行赋值。函数也可以没有返回值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>   <span class="hljs-comment">//函数的重载</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = x;<br>    x = y;<br>    y = t;<br>    cout &lt;&lt; <span class="hljs-string">&quot;(x,y) = (&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* x, <span class="hljs-type">int</span>* y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = *x;<br>    *x = *y;<br>    *y = t;<br>    cout &lt;&lt; <span class="hljs-string">&quot;(x,y) = (&quot;</span> &lt;&lt; *x &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; *y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> c[])</span> <span class="hljs-comment">//c和cpp中没有传数组这一说，其实传递的是指针 *c</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = c[<span class="hljs-number">0</span>];  <span class="hljs-comment">//c[0] = *(c+0) = *c  语法糖</span><br>    c[<span class="hljs-number">0</span>] = c[<span class="hljs-number">1</span>]; <span class="hljs-comment">//c[1] = *(c+1)  指针后移</span><br>    c[<span class="hljs-number">1</span>] = t;<br>    cout &lt;&lt; <span class="hljs-string">&quot;(c[0],c[1]) = (&quot;</span> &lt;&lt; c[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; c[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;size(c) = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(c) &lt;&lt; endl;  <span class="hljs-comment">//为了证明传入的c是一个指针，在32位系统中，指针是4字节，32位</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> c[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span> &#125;;<br>    <span class="hljs-built_in">swap</span>(a, b);<br>    cout &lt;&lt; <span class="hljs-string">&quot;(a,b) = (&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-comment">//(x, y) = (2, 1)</span><br>    <span class="hljs-comment">//(a, b) = (1, 2)</span><br><br>    <span class="hljs-built_in">swap</span>(&amp;a, &amp;b);<br>    cout &lt;&lt; <span class="hljs-string">&quot;(a,b) = (&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-comment">//(x, y) = (2, 1)</span><br>    <span class="hljs-comment">//(a, b) = (2, 1)</span><br><br>    <span class="hljs-built_in">swap</span>(c);<br>    cout &lt;&lt; <span class="hljs-string">&quot;(c[0],c[1]) = (&quot;</span> &lt;&lt; c[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; c[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;size(c) = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(c) &lt;&lt; endl;  <span class="hljs-comment">//这里的c是一个数组，2个int，大小共8字节</span><br>    <span class="hljs-comment">//(c[0], c[1]) = (2, 1)</span><br>    <span class="hljs-comment">//size(c) = 4</span><br>    <span class="hljs-comment">//(c[0], c[1]) = (2, 1)</span><br>    <span class="hljs-comment">//size(c) = 8</span><br>&#125;<br></code></pre></td></tr></table></figure><p>指针基础</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br>    <span class="hljs-type">int</span>* b = a;<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//依次执行...</span><br>    c = *(b + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// a[0],a[1],a[2] = 1,2,3</span><br>    <span class="hljs-comment">// *b = 1</span><br>    <span class="hljs-comment">// c = 2</span><br>    c = *b + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// a[0],a[1],a[2] = 1,2,3</span><br>    <span class="hljs-comment">// *b = 1</span><br>    <span class="hljs-comment">// c = 2</span><br>    c = *(++b);<br>    <span class="hljs-comment">// a[0],a[1],a[2] = 1,2,3</span><br>    <span class="hljs-comment">// *b = 2</span><br>    <span class="hljs-comment">// c = 2</span><br>    c = *(b++);<br>    <span class="hljs-comment">// a[0],a[1],a[2] = 1,2,3</span><br>    <span class="hljs-comment">// *b = 2</span><br>    <span class="hljs-comment">// c = 1</span><br>    c = ++(*b);<br>    <span class="hljs-comment">// 这个判断错了！！！</span><br>    <span class="hljs-comment">// a[0],a[1],a[2] = 2,2,3</span><br>    <span class="hljs-comment">// *b = 2</span><br>    <span class="hljs-comment">// c = 2</span><br>    c = (*b)++;<br>    <span class="hljs-comment">// 这个判断错了！！！</span><br>    <span class="hljs-comment">// a[0],a[1],a[2] = 2,2,3</span><br>    <span class="hljs-comment">// *b = 2</span><br>    <span class="hljs-comment">// c = 1</span><br><br>    cout &lt;&lt; <span class="hljs-string">&quot;a[0],a[1],a[2] = &quot;</span> &lt;&lt; a[<span class="hljs-number">0</span>] &lt;&lt;<span class="hljs-string">&quot;,&quot;</span> &lt;&lt; a[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&quot;,&quot;</span> &lt;&lt; a[<span class="hljs-number">2</span>] &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*b = &quot;</span> &lt;&lt; *b &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>指针与函数的结合应用 ⭐⭐⭐⭐⭐ <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  x += <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun2</span><span class="hljs-params">(<span class="hljs-type">int</span> x[])</span></span><br><span class="hljs-function"></span>&#123;<br>  x[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">return</span> *x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">fun3</span><span class="hljs-params">(<span class="hljs-type">int</span>* p)</span> </span>&#123;<br>*p += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">fun4</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>x += <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span>* p = &amp;x;<br><span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> d = <span class="hljs-number">1</span>,e = <span class="hljs-number">0</span>,*f = <span class="hljs-literal">NULL</span>;<br>  e = <span class="hljs-built_in">fun1</span>(d);<br>  cout&lt;&lt;<span class="hljs-string">&quot;d =&quot;</span>&lt;&lt;d&lt;&lt;<span class="hljs-string">&quot; e =&quot;</span>&lt;&lt;e&lt;&lt;endl;  <span class="hljs-comment">// d=1 e=3</span><br>  <br>  d = <span class="hljs-number">1</span>;<br>  e = <span class="hljs-built_in">fun2</span>(&amp;d);  <span class="hljs-comment">//传递的是d的地址，所以e=3</span><br>  cout&lt;&lt;<span class="hljs-string">&quot;d =&quot;</span>&lt;&lt;d&lt;&lt;<span class="hljs-string">&quot; e =&quot;</span>&lt;&lt;e&lt;&lt;endl;  <span class="hljs-comment">// d=3 e=3</span><br>  <br>  d = <span class="hljs-number">1</span>;<br>  f = <span class="hljs-built_in">fun3</span>(&amp;d);<br>  cout&lt;&lt;<span class="hljs-string">&quot;d =&quot;</span>&lt;&lt;d&lt;&lt;<span class="hljs-string">&quot; f =&quot;</span>&lt;&lt;*f&lt;&lt;endl; <span class="hljs-comment">// d=3 f=3</span><br><br>  d = <span class="hljs-number">1</span>;<br>  f = <span class="hljs-built_in">fun4</span>(d);<br>  cout &lt;&lt; <span class="hljs-string">&quot;d =&quot;</span> &lt;&lt; d &lt;&lt; <span class="hljs-string">&quot; f =&quot;</span> &lt;&lt; *f &lt;&lt; endl;  <span class="hljs-comment">// d=1  f 是一个不知道的值，表示临时变量 x 的地址，fun4 栈空间结束后，f 的值是随机的</span><br>  <span class="hljs-comment">// 注意，在release模式下，f 的值是3，release模式下不会主动清楚找不到的指针</span><br>&#125;<br></code></pre></td></tr></table></figure> ⭐⭐⭐⭐⭐ 内容：</p><p>堆空间：程序在，堆空间就在，程序结束了，堆空间就结束了</p><p>c语言分配堆空间：malloc 函数</p><p>c语言程序中，释放堆空间：free函数, malloc生成空间后必须用free释放，防止内存过大</p><p>在cpp中，使用<code>new</code>和<code>delete</code>来实现堆空间的分配和释放</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 创建一个int类型的变量，变量a的值是1 ，可以理解为一个函数 int --- 构造函数</span><br>  <span class="hljs-type">int</span>* p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">// 分配了1个int大小的内存，返回的是首地址，存的值是1</span><br>  <span class="hljs-type">int</span>* p2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">3</span>];  <span class="hljs-comment">// 分配了3个int大小的内存，返回的是首地址，表示一个数组，未赋值</span><br>  <span class="hljs-comment">// 注意：堆空间创建时，少了变量名这一属性</span><br>  <span class="hljs-comment">// 堆空间的变量没有名字，只能通过 *p1 *p2 指针来访问</span><br>  <span class="hljs-comment">// 创建的指针 *p1  *p2 在栈空间，指向的int在堆空间</span><br><br>  <span class="hljs-keyword">delete</span> p1;   <span class="hljs-comment">// 释放p1指向的内存，删除一个堆块</span><br>  <span class="hljs-keyword">delete</span>[] p2; <span class="hljs-comment">// 释放p2指向的内存，删除数组</span><br><br>  <span class="hljs-comment">// 当删除p1时，实际上删除的只是p1指向的堆空间，p1指针本身没有被删除，所以可以再次使用p1</span><br>  p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 释放了p1指向的内存，重新分配了内存，p1指向新的内存</span><br>  cout &lt;&lt; <span class="hljs-string">&quot;p1 =&quot;</span> &lt;&lt; *p1 &lt;&lt; endl; <span class="hljs-comment">// p1 = 2</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-type">int</span> b = a;<br>  <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-type">int</span>* p = &amp;a;<br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span>  <span class="hljs-comment">//fun3与fun2写法是一样的</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<br>  <span class="hljs-type">int</span>* p = &amp;a;<br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun4</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);  <span class="hljs-comment">//创建的是堆空间，不会自动释放，需要手动释放</span><br>  <span class="hljs-keyword">return</span> *p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">//问题一</span><br>  <span class="hljs-type">int</span> a = <span class="hljs-built_in">fun1</span>();<br>  cout &lt;&lt; <span class="hljs-string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">// a=10</span><br><br>  <span class="hljs-comment">//问题二</span><br>  <span class="hljs-type">int</span>* p = <span class="hljs-built_in">fun2</span>();<br>  cout &lt;&lt; <span class="hljs-string">&quot;p=&quot;</span> &lt;&lt; *p &lt;&lt; endl; <span class="hljs-comment">// 答案是不知道</span><br>  <span class="hljs-comment">// fun2的栈空间已经结束，p指向了fun2的栈空间，所以p的值是不确定，但是，在release模式下，p的值是10</span><br><br>  <span class="hljs-comment">//问题三</span><br>  <span class="hljs-type">int</span>* p = <span class="hljs-built_in">fun4</span>();<br>  cout &lt;&lt; <span class="hljs-string">&quot;p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;  <span class="hljs-comment">// p=10</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="memory-leak">memory leak</h3><p>内存泄漏是指程序在申请内存后，无法释放已分配的内存空间，导致程序运行过程中可用内存逐渐减少的现象。长时间运行或大量数据处理的应用程序特别容易出现内存泄漏问题。</p><h3 id="引用数据类型">引用数据类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// ① 定义 普通 类型 变量</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">8</span>;<br><span class="hljs-comment">// ② 定义 引用类型变量, 格式 : 类型名称&amp; 变量名 = 对应类型变量名称 ;</span><br><span class="hljs-type">int</span>&amp; b = a;<br></code></pre></td></tr></table></figure><p>int&amp; 是引用数据类型 , b 是 a 的引用;</p><p>引用数据类型的本质是：给变量 a 所在内存赋予另外一个别名 b</p><p>引用数据类型的使用方法 : 直接当做原来的变量使用即可,可以替换原来变量的位置使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 1. 修改引用类型变量值 , 引用类型做参数 , 修改引用值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quote</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; b)</span> </span>&#123;<br>  <span class="hljs-comment">//修改引用类型变量值</span><br>  b = <span class="hljs-number">888</span>;<br>&#125;<br><br><span class="hljs-comment">// 2. 打印引用数据类型的修改结果 , 结果是 b 被修改成了 888</span><br>cout &lt;&lt; b &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="第六讲实验记录">第六讲实验记录</h2><p>第一题： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">stu</span> &#123;<br>    string name;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> gender;<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">// 判断学号是否冲突</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isIDConflict</span><span class="hljs-params">(<span class="hljs-type">int</span> newID, stu student[], <span class="hljs-type">int</span> count)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>        <span class="hljs-keyword">if</span> (student[i].id == newID) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 添加学生</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Addstu</span><span class="hljs-params">(stu student[], <span class="hljs-type">int</span>&amp; count)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入学生姓名：&quot;</span>;<br>    cin &gt;&gt; student[count].name;<br>    <span class="hljs-type">int</span> newID;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入学生学号（确保唯一）：&quot;</span>;<br>    cin &gt;&gt; newID;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isIDConflict</span>(newID, student, count)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;该学号已存在，请重新输入学生学号：&quot;</span>;<br>        cin &gt;&gt; newID;<br>    &#125;<br>    student[count].id = newID;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入学生性别：&quot;</span>;<br>    cin &gt;&gt; student[count].gender;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入学生年龄：&quot;</span>;<br>    cin &gt;&gt; student[count].age;<br>    count++;<br>&#125;<br><br><span class="hljs-comment">// 查找学生</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Findstu</span><span class="hljs-params">(<span class="hljs-type">int</span> ID, stu student[], <span class="hljs-type">int</span> count)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>        <span class="hljs-keyword">if</span> (student[i].id == ID) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;学生姓名：&quot;</span> &lt;&lt; student[i].name &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;学生学号：&quot;</span> &lt;&lt; student[i].id &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;学生性别：&quot;</span> &lt;&lt; student[i].gender &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;学生年龄：&quot;</span> &lt;&lt; student[i].age &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == count - <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;未找到该学号的学生。\n&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 修改学生</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Modifystu</span><span class="hljs-params">(<span class="hljs-type">int</span> ID, stu student[], <span class="hljs-type">int</span> count)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>        <span class="hljs-keyword">if</span> (student[i].id == ID) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入新的学生姓名：&quot;</span>;<br>            cin &gt;&gt; student[i].name;<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入新的学生性别：&quot;</span>;<br>            cin &gt;&gt; student[i].gender;<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入新的学生年龄：&quot;</span>;<br>            cin &gt;&gt; student[i].age;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == count - <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;未找到该学号的学生，无法修改。\n&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 删除学生</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Deletestu</span><span class="hljs-params">(<span class="hljs-type">int</span> ID, stu student[], <span class="hljs-type">int</span>&amp; count)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>        <span class="hljs-keyword">if</span> (student[i].id == ID) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; count - <span class="hljs-number">1</span>; j++) &#123;<br>                student[j] = student[j + <span class="hljs-number">1</span>];<br>            &#125;<br>            count--;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == count - <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;未找到该学号的学生，无法删除。\n&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 显示所有学生</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Showstu</span><span class="hljs-params">(stu student[], <span class="hljs-type">int</span> count)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;目前没有学生信息。\n&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;学生姓名：&quot;</span> &lt;&lt; student[i].name &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;学生学号：&quot;</span> &lt;&lt; student[i].id &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;学生性别：&quot;</span> &lt;&lt; student[i].gender &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;学生年龄：&quot;</span> &lt;&lt; student[i].age &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">&quot;------------------------&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    stu student[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> studentCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> studentID;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;1. 添加学生&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;2. 查找学生&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;3. 修改学生&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;4. 删除学生&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;5. 显示所有学生&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;6. 退出&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入你的选择：&quot;</span>;<br>        cin &gt;&gt; choice;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">Addstu</span>(student, studentCount);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要查找的学生学号：&quot;</span>;<br>            cin &gt;&gt; studentID;<br>            <span class="hljs-built_in">Findstu</span>(studentID, student, studentCount);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要修改的学生学号：&quot;</span>;<br>            cin &gt;&gt; studentID;<br>            <span class="hljs-built_in">Modifystu</span>(studentID, student, studentCount);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要删除的学生学号：&quot;</span>;<br>            cin &gt;&gt; studentID;<br>            <span class="hljs-built_in">Deletestu</span>(studentID, student, studentCount);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-built_in">Showstu</span>(student, studentCount);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;无效选择，请重新输入。&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>第二题 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">fun</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 如果数组长度小于3</span><br><br>    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 先对数组进行排序</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">2</span>; ++i) &#123;<br>        <span class="hljs-comment">// 跳过重复元素</span><br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-type">int</span> left = i + <span class="hljs-number">1</span>, right = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> sum = nums[i] + nums[left] + nums[right];<br>            <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>) &#123;<br>                ++left; <span class="hljs-comment">// 如果总和小于0，移动左指针以增加总和</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) &#123;<br>                --right; <span class="hljs-comment">// 如果总和大于0，移动右指针以减少总和</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 找到一个解</span><br>                result.<span class="hljs-built_in">push_back</span>(&#123; nums[i], nums[left], nums[right] &#125;);<br>                <span class="hljs-comment">// 跳过重复元素</span><br>                <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="hljs-number">1</span>]) ++left;<br>                <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="hljs-number">1</span>]) --right;<br>                ++left;<br>                --right;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; x = &#123; <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-4</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; results = <span class="hljs-built_in">fun</span>(x);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; result : results) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;[&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; result.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            cout &lt;&lt; result[i];<br>            <span class="hljs-keyword">if</span> (i &lt; result.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot;, &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;]&#x27;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="第六讲">第六讲</h2><p>结构体:结构体只能定义变量，没有方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//定义一个结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>&#123;<br>  <span class="hljs-type">char</span> a;  <span class="hljs-comment">//成员变量  或者属性，1字节</span><br>  <span class="hljs-type">int</span> y;   <span class="hljs-comment">// 4字节</span><br>  <span class="hljs-type">short</span> z;  <span class="hljs-comment">// 2字节</span><br>&#125;;<br><br><span class="hljs-comment">//为什么需要结构体，因为基本数据类型不够用</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">B</span>&#123;<br>  <span class="hljs-type">char</span> a;<br>  <span class="hljs-type">short</span> b;<br>  <span class="hljs-type">int</span> c;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> a;  <span class="hljs-comment">//创建一个A类型的变量a，a是一个创建的对象</span><br>  a.a = <span class="hljs-string">&#x27;a&#x27;</span>;  <span class="hljs-comment">// 对 对象a的属性进行赋值</span><br>  a.y = <span class="hljs-number">1</span>;<br>  a.z = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存对齐的概念:</p><p>结构体中的每一个属性在内存中需要实现内存对齐，即按照最长的字节长度进行填补</p><p>在上面的例子中，对象 a 的内存是12个字节</p><p>但是用上面结构体 B 创建的对象，只需要占用8字节内存，节约了内存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span>&#123;<br>  string name;<br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">char</span> gender;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span> t;<br>  t.name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>  t.age = <span class="hljs-number">35</span>;<br>  t.gender = <span class="hljs-string">&#x27;M&#x27;</span>;<br>  cout&lt;&lt;t.name&lt;&lt;endl;<br>  cout&lt;&lt;t.age&lt;&lt;endl;<br>  cout&lt;&lt;t.gender&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-built_in">sizeof</span>(t)&lt;&lt;endl;  <span class="hljs-comment">// 输出为28,这里好像是不随name的长度变化的</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对于结构体的定义已经对象的创建可以简化如下： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span>&#123;<br>  string name;<br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">char</span> gender;<br>&#125;T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  T t = &#123;<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;; <span class="hljs-comment">// 创建对象并初始化</span><br>  cout&lt;&lt;t.name&lt;&lt;endl;<br>  cout&lt;&lt;t.age&lt;&lt;endl;<br>  cout&lt;&lt;t.gender&lt;&lt;endl;<br><br>  <span class="hljs-comment">//创建结构体数组</span><br>  T t[<span class="hljs-number">2</span>] = &#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">35</span>,<span class="hljs-string">&#x27;M&#x27;</span>&#125;, &#123;<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>创建指针结构体 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span>&#123;<br>  string name;<br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">char</span> gender;<br>&#125;T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  T p = &#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">35</span>,<span class="hljs-string">&#x27;M&#x27;</span>&#125;;<br>  T* p1 = &amp;p;<br>  cout&lt;&lt;p1-&gt;name&lt;&lt;endl;  <span class="hljs-comment">//注意对于指针结构体的属性访问使用不同的方法</span><br>  cout&lt;&lt;p1-&gt;age&lt;&lt;endl;<br>  cout&lt;&lt;p1-&gt;gender&lt;&lt;endl;<br><br>  <span class="hljs-comment">//类似于堆的创建方法</span><br>  T* p2 = <span class="hljs-keyword">new</span> T; <span class="hljs-comment">//创建一个对象，并分配内存，返回的是首地址</span><br><br>  <span class="hljs-comment">//等价</span><br>  p1-&gt;name = (*p1).name;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>结构体与函数的结合应用 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span>&#123;<br>  string name;<br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">char</span> gender;<br>&#125;T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(T t)</span></span><br><span class="hljs-function"></span>&#123;<br>  t.name = <span class="hljs-string">&quot;lisi&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">(T* t)</span></span><br><span class="hljs-function"></span>&#123;<br>  t-&gt;name = <span class="hljs-string">&quot;lisi&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  T t1 = &#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">35</span>,<span class="hljs-string">&#x27;M&#x27;</span>&#125;;<br>  <span class="hljs-built_in">fun1</span>(t1);<br>  cout&lt;&lt;t1.name&lt;&lt;endl; <span class="hljs-comment">// zhangsan 注意这里还是zhangsan 不变，栈空间的参数发生了改变，但是不影响main空间的参数</span><br><br>  <span class="hljs-built_in">fun2</span>(&amp;t1);<br>  cout&lt;&lt;t1.name&lt;&lt;endl; <span class="hljs-comment">// lisi 这里已经变成lisi了，因为指针的参数发生了改变，所以main空间中的参数也发生了改变</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>共用体：多个变量共享一个内存空间，解决内存不足的问题，已经被淘汰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">union</span> <span class="hljs-title class_">info</span><br>&#123;<br>  <span class="hljs-type">char</span> gender;  <span class="hljs-comment">//1字节</span><br>  <span class="hljs-type">int</span> age;      <span class="hljs-comment">//4字节</span><br>  <span class="hljs-type">double</span> score;  <span class="hljs-comment">//8字节</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  info stu;<br>  cout&lt;&lt;<span class="hljs-built_in">sizeof</span>(stu)&lt;&lt;endl;  <span class="hljs-comment">// 一共只有8字节，属性里面最大的那个，同时只能有一个起作用</span><br>  stu.age = <span class="hljs-number">18</span>;<br>  cout&lt;&lt;stu.age&lt;&lt;endl;<br>  stu.gender = <span class="hljs-string">&#x27;m&#x27;</span>;<br>  cout&lt;&lt;stu.gender&lt;&lt;endl;<br>  stu.score = <span class="hljs-number">99.9</span>;<br>  cout&lt;&lt;stu.score&lt;&lt;endl;<br>  cout&lt;&lt;stu.age&lt;&lt;endl; <span class="hljs-comment">// 这里无法打印age属性</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第七讲-面向对象编程">第七讲 面向对象编程</h2><h3 id="类与对象">类与对象 ⭐⭐⭐⭐⭐</h3><p>定义一个类,类除了有属性，还有行为（函数） <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;  <span class="hljs-comment">//类名</span><br><span class="hljs-keyword">public</span>:  <span class="hljs-comment">//使用public，表示属性和函数都可以被外部访问</span><br>  <span class="hljs-type">int</span> age;  <span class="hljs-comment">// 属性</span><br>  <span class="hljs-type">char</span> gender;<br>  string name;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show1</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//方法</span><br>    cout&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;gender&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;age&lt;&lt;endl;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show2</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//只声明函数，后面再定义具体的内容</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Student::show2</span><span class="hljs-params">()</span></span>&#123;<br>  cout&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;gender&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;age&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Student s1;<br>  s1.age=<span class="hljs-number">18</span>;<br>  s1.gender=<span class="hljs-string">&#x27;m&#x27;</span>;<br>  s1.name=<span class="hljs-string">&quot;zhangsan&quot;</span>;<br><br>  s1.<span class="hljs-built_in">show1</span>();<br>  s1.<span class="hljs-built_in">show2</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure></p><p>构造函数：给对象赋值 ⭐⭐⭐⭐⭐</p><p>构造函数的两个特点： - 不需要返回值 - 函数的名字与类名保持一致</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> id;<br><br>  <span class="hljs-comment">// 三种构造函数</span><br>  <span class="hljs-comment">// 构造函数的名字必须与类的名字相同！！！</span><br><br>  <span class="hljs-comment">// 第一种，无参构造函数/默认构造函数</span><br>  <span class="hljs-built_in">Student</span>()&#123;<br>    id=<span class="hljs-number">0</span>;<span class="hljs-comment">//给属性一个默认值</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;Student()&quot;</span>&lt;&lt;endl;<span class="hljs-comment">//这个输出用来表示调用了该函数</span><br>  &#125;<br><br>  <span class="hljs-comment">// 第二种，带参构造函数</span><br>  <span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> i)&#123;<br>    id=i;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Student(int i)&quot;</span>&lt;&lt;endl;<br>  &#125;<br><br>  <span class="hljs-comment">// 第三种，复制构造函数，也叫拷贝构造函数</span><br>  <span class="hljs-built_in">Student</span>(<span class="hljs-type">const</span> Student &amp;s)&#123;<br>    id=s.id;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Student(const Student &amp;s)&quot;</span>&lt;&lt;endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(Student s)</span></span><br><span class="hljs-function"></span>&#123;<br>&#125;<br><br><span class="hljs-function">Student <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Student s1 = <span class="hljs-built_in">Student</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//函数体里调用有参构造</span><br>  <span class="hljs-keyword">return</span> s1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// 下面三种方法都可以实现：创建对象并使用无参构造函数</span><br>  Student s1; <span class="hljs-comment">// 创建对象时会自动调用无参构造函数</span><br>  Student s2 = <span class="hljs-built_in">Student</span>();  <span class="hljs-comment">// 逻辑同上一行，创建对象，调用无参构造函数i</span><br>  Student s3 = &#123;&#125;;  <span class="hljs-comment">// 逻辑同上</span><br>  cout&lt;&lt;<span class="hljs-string">&quot;s1.id=&quot;</span>&lt;&lt;s1.id&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;s2.id=&quot;</span>&lt;&lt;s2.id&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;s3.id=&quot;</span>&lt;&lt;s3.id&lt;&lt;endl;<br><br>  <span class="hljs-comment">// 下面三种方法都可以实现：创建对象并使用有参构造函数</span><br>  <span class="hljs-function">Student <span class="hljs-title">s4</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>  Student s5 = <span class="hljs-built_in">Student</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//第二种方式更优</span><br>  Student s6 = &#123;<span class="hljs-number">1</span>&#125;;<br>  cout&lt;&lt;<span class="hljs-string">&quot;s4.id=&quot;</span>&lt;&lt;s4.id&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;s5.id=&quot;</span>&lt;&lt;s5.id&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;s6.id=&quot;</span>&lt;&lt;s6.id&lt;&lt;endl;<br><br>  <span class="hljs-comment">// 下面四种方法都可以实现拷贝构造函数的调用</span><br>  Student s1;<br><br>  <span class="hljs-function">Student <span class="hljs-title">s7</span><span class="hljs-params">(s1)</span></span>;<br>  Student s8 = <span class="hljs-built_in">Student</span>(s1);<br>  Student s9 = &#123;s1&#125;;<br>  Student s10 = s1; <span class="hljs-comment">//也是调用了拷贝构造函数，等价于： Student s10 = Student(s1) = Student s1;</span><br><br>  <span class="hljs-comment">// s1 s2 s4 s5 s7 s8 s10 必须要记住！！！</span><br><br>  <span class="hljs-comment">// 容易混淆的点</span><br>  Student s1; <span class="hljs-comment">// 调用一次无参构造函数</span><br>  Student s2; <span class="hljs-comment">// 调用一次无参构造函数</span><br>  s2 = s1;    <span class="hljs-comment">// 只是执行了赋值的操作,注意没有调用拷贝构造函数</span><br><br>  <span class="hljs-comment">// 容易混淆的点 </span><br>  <span class="hljs-built_in">Student</span>(s1) = Student s1;  <span class="hljs-comment">// 两者之间是等价的关系！！！但是前者比较怪，一般不用</span><br><br>  <span class="hljs-built_in">fun1</span>(<span class="hljs-built_in">Student</span>(s1))  <span class="hljs-comment">//这里调用的是拷贝构造函数，需要注意！！！</span><br><br>  Student s2 = <span class="hljs-built_in">fun2</span>();  <span class="hljs-comment">//mian空间调用了拷贝构造函数</span><br>  <span class="hljs-comment">//这里逻辑同下</span><br>  Student s2;  <span class="hljs-comment">//无参构造</span><br>  s2 = <span class="hljs-built_in">fun2</span>(); <span class="hljs-comment">// main空间调用了拷贝构造函数，因为对于fun2的返回值来说，需要在main空间调用拷贝构造开辟空间，然后复制给s2；函数空间调用了有参构造</span><br>&#125;<br></code></pre></td></tr></table></figure><p>一共有7种形式的构造函数，需要记住</p><p>当我们创建一个类时，系统会默认帮助我们创建一个无参构造函数和一个拷贝构造函数</p><p>但是当写了带参构造函数后，默认的无参构造函数和拷贝构造函数就没有了，必须自己加上</p><p>当写了拷贝构造函数，默认的无参构造和带参构造就没有了</p><p>下面的输出结果是0，可能是编译器进行了某些未定义行为的初始化操作，但这并不是标准所保证的行为<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><br><span class="hljs-comment">//Student() &#123;</span><br><span class="hljs-comment">//id = 0;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;Student()&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//Student(int _id) &#123;</span><br><span class="hljs-comment">//id = _id;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;Student(int _id)&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//Student(const Student&amp; s) &#123;</span><br><span class="hljs-comment">//id = s.id;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;Student(const Student &amp; s)&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Student s1 = <span class="hljs-built_in">Student</span>();<br>cout &lt;&lt; s1.id &lt;&lt; endl;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="例题分析">例题分析：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><br><span class="hljs-built_in">Student</span>() &#123;<br>id = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span>* id;<br><br><span class="hljs-built_in">Teacher</span>() &#123;<br>id = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>);<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Student s1;<br>Student* s2 = &amp;s1;  <span class="hljs-comment">//s2是个指针，等于s1的地址，s2字节数与操作系统位数有关</span><br>Student* s3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Student</span>();  <span class="hljs-comment">//s3是堆空间的一个指针，调用的是无参构造函数</span><br>Student&amp; s4 = s1;  <span class="hljs-comment">//s4是个引用，不会调用任何函数</span><br><br>Student s5[<span class="hljs-number">3</span>] = &#123; <span class="hljs-built_in">Student</span>(), <span class="hljs-built_in">Student</span>(), <span class="hljs-built_in">Student</span>() &#125;;<span class="hljs-comment">//s5是一个类数组</span><br>Student* s6[<span class="hljs-number">3</span>] = &#123; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Student</span>(), <span class="hljs-keyword">new</span> <span class="hljs-built_in">Student</span>(), <span class="hljs-keyword">new</span> <span class="hljs-built_in">Student</span>() &#125;; <span class="hljs-comment">//指针数组，数组里的每个元素都是指针</span><br><br>Teacher* t3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Teacher</span>();  <span class="hljs-comment">//与s3不同点是，t3指向堆空间，类内部是也指针，也指向堆空间</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="析构函数">析构函数 ⭐⭐⭐⭐⭐</h4><p>析构函数是一个成员函数，在对象超出范围或通过调用 delete 或 delete[]显式销毁对象时，会自动调用析构函数。 析构函数与类同名，前面带有波形符(~)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><br><span class="hljs-built_in">Student</span>() &#123;<br>id = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//id = int(0);</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Student()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Student</span>() &#123;  <span class="hljs-comment">//析构函数是一个成员函数，在对象超出范围或通过调用 delete 或 delete[] 显式销毁对象时，会自动调用析构函数。 析构函数与类同名，前面带有波形符 (~)</span><br>cout &lt;&lt; <span class="hljs-string">&quot;~Student()&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span>* age;<br><br><span class="hljs-built_in">Teacher</span>() &#123;<br>age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//指向堆空间的变量</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Teacher()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Teacher</span>() &#123;   <span class="hljs-comment">//为了删除对象创建的函数，析构函数---先删除属性，再回收内存</span><br><span class="hljs-keyword">delete</span> age;  <span class="hljs-comment">// 释放堆空间 防止内存泄漏，删除age指针指向的堆内存，先删内存再删房子</span><br>cout &lt;&lt; <span class="hljs-string">&quot;~Teacher()&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//用来显示析构函数</span><br>Student s = <span class="hljs-built_in">Student</span>();<br><span class="hljs-keyword">return</span> &amp;s.id;<span class="hljs-comment">//返回值是id的地址，但是id是局部变量，会超出范围，返回的地址是无效的</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>Teacher t = <span class="hljs-built_in">Teacher</span>();<br><span class="hljs-keyword">return</span> t.age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>Teacher t = <span class="hljs-built_in">Teacher</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Student s = <span class="hljs-built_in">Student</span>();  <span class="hljs-comment">//调用构造函数创建对象</span><br><br><span class="hljs-type">int</span>* id = <span class="hljs-built_in">test1</span>();<br>  cout &lt;&lt; *id &lt;&lt; endl;<span class="hljs-comment">//无法实现取内容，因为输出的结果是未知，但是会调用构造函数和析构函数</span><br>  <br><span class="hljs-type">int</span>* age = <span class="hljs-built_in">test2</span>();<span class="hljs-comment">// age = t.age age指针指向堆空间</span><br>cout &lt;&lt; *age &lt;&lt; endl;<span class="hljs-comment">//可以实现取内容，值为0，也会调用构造函数和析构函数</span><br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//在堆空间会造成内存泄漏！！！</span><br><span class="hljs-built_in">test3</span>();<br>&#125;<br><br>  <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-comment">//在这之后调用析构函数</span><br>  <span class="hljs-comment">//因为s是main栈空间的临时变量，所以会在main函数退出时调用析构函数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果未定义析构函数，编译器会提供一个默认的析构函数；对于某些类来说，这就足够了。当类维护必须显式释放的资源（例如系统资源的句柄，或指向在类的实例被销毁时应释放的内存的指针）时，你需要定义一个自定义的析构函数。</p><h2 id="第八讲">第八讲</h2><h3 id="深拷贝和浅拷贝">深拷贝和浅拷贝 ⭐⭐⭐⭐⭐</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><br><span class="hljs-built_in">Student</span>() &#123;<br>id = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Student()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Student</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;~Student()&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span>* age;<br><br><span class="hljs-built_in">Teacher</span>() &#123;<br>age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">// </span><br>cout &lt;&lt; <span class="hljs-string">&quot;Teacher()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Teacher</span>() &#123;<br><span class="hljs-keyword">delete</span> age;<br>cout &lt;&lt; <span class="hljs-string">&quot;~Teacher()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">Teacher</span>(<span class="hljs-type">const</span> Teacher&amp; t) &#123;  <span class="hljs-comment">// 自己写一个拷贝函数，来实现深拷贝</span><br>age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*t.age);   <span class="hljs-comment">// 深拷贝的话会自己再堆空间创建新的变量，而不是两个对象共享一个堆空间的变量</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Teacher(const Teacher &amp; s)&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>Student s1;<br><span class="hljs-function">Student <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;  <span class="hljs-comment">// 浅拷贝</span><br><br>cout &lt;&lt; s1.id &lt;&lt; endl;<br>cout &lt;&lt; s2.id &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// 在堆空间创建对象</span><br>Teacher t1;<br><span class="hljs-function">Teacher <span class="hljs-title">t2</span><span class="hljs-params">(t1)</span></span>;  <span class="hljs-comment">// 还是浅拷贝</span><br><br>cout &lt;&lt; *t1.age &lt;&lt; endl;<br>cout &lt;&lt; *t2.age &lt;&lt; endl;  <span class="hljs-comment">//程序结束时会重复删除一个堆空间的变量，出现问题</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">test1</span>();<br><span class="hljs-comment">//test2();</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用深拷贝还是浅拷贝，需要根据实际情况来决定！！！</p><h3 id="初始化列表">初始化列表 ⭐⭐⭐</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><br><span class="hljs-built_in">Student</span>() : <span class="hljs-built_in">id</span>(<span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 初始化id属性</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Student() : id(0)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Student</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;~Student()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> _id) : <span class="hljs-built_in">id</span>(_id) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Student(int _id) : id(_id)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">Student</span>(<span class="hljs-type">const</span> Student&amp; s) : <span class="hljs-built_in">id</span>(s.id) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Student(const Student&amp; s) : id(s.id)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>Student&amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-type">const</span> Student&amp; s) &#123;<br>id = s.id;<br>cout &lt;&lt; <span class="hljs-string">&quot;operator = (const Student&amp; s)&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher1</span> &#123;<br><span class="hljs-keyword">public</span>:<br>Student s;<br><br><span class="hljs-built_in">Teacher1</span>(Student&amp; _s) &#123;  <span class="hljs-comment">// 这个是有参构造函数</span><br>s = _s;   <span class="hljs-comment">// 如果不使用初始化列表，会先调用stu的无参构造函数，初始化一个stu，然后再调用Teacher的有参构造函数，会多一步</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Teacher1(Student&amp; _s)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Teacher1</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;~Teacher1()&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher2</span> &#123;<br><span class="hljs-keyword">public</span>:<br>Student s;<br><br><span class="hljs-built_in">Teacher2</span>(Student&amp; _s) : <span class="hljs-built_in">s</span>(_s) &#123;  <span class="hljs-comment">// 使用初始化列表来实现有参构造</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Teacher2(Student&amp; _s): s(_s)&quot;</span> &lt;&lt; endl;  <span class="hljs-comment">// 使用初始化列表，会先调用stu的拷贝构造函数，再调用Teacher的有参构造函数</span><br>&#125;<br><br>~<span class="hljs-built_in">Teacher2</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;~Teacher2()&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>Student s;<br><br><span class="hljs-function">Teacher1 <span class="hljs-title">t1</span><span class="hljs-params">(s)</span></span>;<br><span class="hljs-comment">//Teacher2 t2(s);</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">test</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化列表可以提高效率，原理不是很重要</p><h3 id="this指针-与-连锁调用">this指针 与 连锁调用 ⭐⭐⭐⭐⭐</h3><p>this最大的作用，将当前对象与类中的对应调用的函数联系起来，this指针指向调用这个函数的对象，this指针传入调用的函数（没有写出来），从而实现了链接</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><br><span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> id) &#123;<br><span class="hljs-comment">// id = id;  // 这里如果不用this指针会冲突，指代不明</span><br><span class="hljs-keyword">this</span>-&gt;id = id;   <span class="hljs-comment">//this指针指向调用这个函数的对象</span><br>&#125;<br><br><span class="hljs-built_in">Student</span>(<span class="hljs-type">const</span> Student&amp; s) &#123;  <span class="hljs-comment">// 隐藏的内容：Student(const Student&amp; s, Student* this) &#123; </span><br>id = s.id;<br>cout &lt;&lt; <span class="hljs-string">&quot;Student(const Student&amp; s)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function">Student&amp; <span class="hljs-title">id_plus1</span><span class="hljs-params">(Student&amp; s)</span> </span>&#123;  <span class="hljs-comment">// 返回值是Student&amp;，所以可以链式调用</span><br>id += s.id;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-function">Student* <span class="hljs-title">id_plus2</span><span class="hljs-params">(Student&amp; s)</span> </span>&#123;  <span class="hljs-comment">// 返回值是Student*，所以可以链式调用</span><br>id += s.id;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-function">Student <span class="hljs-title">id_plus3</span><span class="hljs-params">(Student&amp; s)</span> </span>&#123;  <span class="hljs-comment">// 返回值是Student，所以不能链式调用</span><br>id += s.id;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;   <span class="hljs-comment">// 返回时会创建一个临时变量Student，不能链式调用</span><br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Student <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;  <span class="hljs-comment">// 当前调用有参构造函数的对象是s1，因此上面对应函数中的this指针指向s1   完整的内容应该为：Student s1(18,&amp;s1);</span><br>cout &lt;&lt; s1.id &lt;&lt; endl;<br><br><span class="hljs-function">Student <span class="hljs-title">s2</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br>s2.<span class="hljs-built_in">id_plus1</span>(s1).<span class="hljs-built_in">id_plus1</span>(s1);   <span class="hljs-comment">// 可以连锁调用  结果为：54</span><br>s2.<span class="hljs-built_in">id_plus2</span>(s1)-&gt;<span class="hljs-built_in">id_plus2</span>(s1);  <span class="hljs-comment">// 可以连锁调用  结果为：54</span><br>s2.<span class="hljs-built_in">id_plus3</span>(s1).<span class="hljs-built_in">id_plus3</span>(s1);   <span class="hljs-comment">// 不能连锁调用  结果为：36</span><br>  <span class="hljs-comment">//对于第三种情况的解读：</span><br>  <span class="hljs-comment">// Student T = *this       T.id_plus3(s1)       第二个s1的id加到了这个临时变量T中，而不是s2中</span><br><br>cout &lt;&lt; s2.id &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第九讲">第九讲</h2><h3 id="const-关键字">const 关键字 ⭐</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> age;  <span class="hljs-comment">// mutable关键字，表示这个变量是可变的，可以突破const的限制，可以修改</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> hands;<span class="hljs-comment">//Cannot modify this variable</span><br><span class="hljs-comment">//const int hands = 2;</span><br><br><span class="hljs-built_in">Student</span>() : <span class="hljs-built_in">hands</span>(<span class="hljs-number">2</span>) &#123;  <span class="hljs-comment">// 因为是const类型的hands,不能赋值，所以使用初始化列表的方式实现</span><br>id = <span class="hljs-number">1</span>;<br>age = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-comment">//No modification in the function</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify1</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;  <span class="hljs-comment">// const 函数中不能修改任何东西，包括const类型的变量</span><br>id = <span class="hljs-number">100</span>;<br>age = <span class="hljs-number">18</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify2</span><span class="hljs-params">()</span> </span>&#123;<br>id = <span class="hljs-number">100</span>;<br>age = <span class="hljs-number">18</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> b = <span class="hljs-number">1</span>;   <span class="hljs-comment">// 表示这个常量不能修改</span><br>b = <span class="hljs-number">2</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* c = &amp;a;  <span class="hljs-comment">// 表示指针指向的内容不能修改，但是指针指向的地址可以修改</span><br>*c = <span class="hljs-number">2</span>;<br>c = &amp;b;<br><br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> d = &amp;a;  <span class="hljs-comment">// 表示指针指向的地方不能修改，但是指向的内容可以修改</span><br>d = &amp;b;<br>*d = <span class="hljs-number">2</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* <span class="hljs-type">const</span> e = &amp;a;  <span class="hljs-comment">// 都不能修改</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; f = a;  <span class="hljs-comment">// 引用类型本来就做为别名，不能在指向别的地方，所以这里实现的是指向的内容不能修改</span><br>f = <span class="hljs-number">2</span>;<br><br><span class="hljs-type">const</span> Student s;<br>s.id = <span class="hljs-number">100</span>;<br>s.age = <span class="hljs-number">18</span>;<br><br>s.<span class="hljs-built_in">modify1</span>();<br>s.<span class="hljs-built_in">modify2</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="static关键字原理">static关键字原理 ⭐⭐</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">char</span> color;<br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> eyes;<br><br>  <span class="hljs-built_in">Student</span>():<span class="hljs-built_in">color</span>(<span class="hljs-string">&#x27;b&#x27;</span>) &#123;&#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">()</span> </span>&#123;<br>    color = <span class="hljs-string">&#x27;w&#x27;</span>;<br>    eyes = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 如果修改静态属性，所有的实例都会跟着改</span><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">revise</span><span class="hljs-params">()</span>   <span class="hljs-comment">// 静态成员函数是共享的</span></span><br><span class="hljs-function">  </span>&#123;<br>    color = <span class="hljs-string">&#x27;r&#x27;</span>;  <span class="hljs-comment">// 静态方法不能修改实例属性，只能修改静态属性，原理上是因为静态方法没有this指针！！！</span><br>    eyes = <span class="hljs-number">10</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> Student::eyes = <span class="hljs-number">2</span>;   <span class="hljs-comment">// 静态成员变量的初始化在外面实现!!!</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Student s1;<br>  Student s2;<br><br>  s1.eyes = <span class="hljs-number">3</span>;<br><br>  Student::<span class="hljs-built_in">revise</span>();  <span class="hljs-comment">// 可以通过类别来调用函数，注意没有传入当前对象，不需要实例</span><br>  <span class="hljs-comment">// 静态函数可以修改静态属性，但是不能修改实例属性</span><br>  s1.<span class="hljs-built_in">revise</span>(); <span class="hljs-comment">// 也是只能修改静态属性</span><br><br>  s.<span class="hljs-built_in">modify</span>(); <span class="hljs-comment">// 可以利用一个实例对动态属性以及静态属性进行修改</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">char</span> color;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> n_eyes;<br><br><span class="hljs-built_in">Student</span>() : <span class="hljs-built_in">color</span>(<span class="hljs-string">&#x27;b&#x27;</span>) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">()</span> </span>&#123;<br>color = <span class="hljs-string">&#x27;w&#x27;</span>;<br>n_eyes = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">revise</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//color = &#x27;r&#x27;;   // 不能修改实例属性，没有传入this指针</span><br>n_eyes = <span class="hljs-number">10</span>;   <span class="hljs-comment">// 静态函数可以修改静态属性，但是不能修改实例属性</span><br>&#125;<br>&#125;;<br><br><span class="hljs-type">int</span> Student::n_eyes = <span class="hljs-number">2</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Student s;<br>Student s1;<br><br>Student::n_eyes = <span class="hljs-number">5</span>;   <span class="hljs-comment">// 通过类修改静态属性</span><br>s1.n_eyes = <span class="hljs-number">5</span>;   <span class="hljs-comment">//   通过一个实例对象来修改静态属性</span><br><br>Student::<span class="hljs-built_in">revise</span>();    <span class="hljs-comment">// 一个静态的函数，所有对象共用一个函数</span><br>s1.<span class="hljs-built_in">revise</span>();<br><br>s.<span class="hljs-built_in">modify</span>();<br><br>cout &lt;&lt; Student::n_eyes &lt;&lt; endl;<br>cout &lt;&lt; s.color &lt;&lt; endl;<br>cout &lt;&lt; s.n_eyes &lt;&lt; endl;<br>cout &lt;&lt; s1.color &lt;&lt; endl;<br>cout &lt;&lt; s1.n_eyes &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分析对象的大小">分析对象的大小</h3><p>总结：</p><ul><li>当一个对象没有任何属性和方法时，占用内存 1 字节</li><li>类中的static属性不占用任何空间，static属性单独存储</li><li>类中的任何函数（动态函数和静态函数）都不占用类的空间存储</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;  <span class="hljs-comment">// 普通属性跟着实例走</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> age;  <span class="hljs-comment">// static属性不影响对象大小，不跟实例走</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">// 增加一个函数对象的大小不变，在调用函数时利用传入的this指针来绑定</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">// 同样不增加对象的大小</span><br>&#125;;<br><br><span class="hljs-type">int</span> Student::age = <span class="hljs-number">18</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Student s;  <span class="hljs-comment">// 当没有任何属性或者方法时，内存大小为1字节来占位</span><br>  <span class="hljs-comment">// 当加入int属性后对象4字节</span><br>  <span class="hljs-comment">// 当加入static属性后，对象还是4字节，因为static属性不参与实例的创建</span><br>  <span class="hljs-comment">// 函数以及static函数都不影响实例对象的大小</span><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(s) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="friend-关键字">friend 关键字 ⭐⭐</h3><p>总结:</p><ul><li>友元函数需要注意下面三种定义形式</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> age;  <span class="hljs-comment">//私有属性，其他对象无法访问</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">good_friend</span><span class="hljs-params">(Student&amp; s)</span></span>;  <span class="hljs-comment">//1、申明外面的某个函数为friend</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>;<span class="hljs-comment">//2、申明Teacher类为friend</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><br><span class="hljs-built_in">Student</span>() : <span class="hljs-built_in">age</span>(<span class="hljs-number">18</span>), <span class="hljs-built_in">id</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ask</span><span class="hljs-params">(Teacher&amp; t)</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br><span class="hljs-type">int</span> age;  <span class="hljs-comment">// 不写也是默认为private属性</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">Student::ask</span><span class="hljs-params">(Teacher&amp; t)</span></span>;<span class="hljs-comment">//3、申明某个类别里面的成员函数为friend</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><br><span class="hljs-built_in">Teacher</span>() : <span class="hljs-built_in">age</span>(<span class="hljs-number">18</span>), <span class="hljs-built_in">id</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ask</span><span class="hljs-params">(Student&amp; s)</span> </span>&#123;<br>cout &lt;&lt; s.id &lt;&lt; endl;<br>cout &lt;&lt; s.age &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Student::ask</span><span class="hljs-params">(Teacher&amp; t)</span> </span>&#123;  <span class="hljs-comment">// student的函数ask可以在外面定义，为了防止类别定义的嵌套问题，类别里面申明，外面定义会比较好</span><br>cout &lt;&lt; t.id &lt;&lt; endl;<br>cout &lt;&lt; t.age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">good_friend</span><span class="hljs-params">(Student&amp; s)</span> </span>&#123;<br>cout &lt;&lt; s.id &lt;&lt; endl;<br>cout &lt;&lt; s.age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Student s;<br>Teacher t;<br><br><span class="hljs-built_in">good_friend</span>(s);<br>t.<span class="hljs-built_in">ask</span>(s);<br>s.<span class="hljs-built_in">ask</span>(t);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第十讲">第十讲</h2><h3id="面向对象编程的第二特性---继承inheritance">面向对象编程的第二特性---继承（inheritance）</h3><p>面向对象编程的三大特性：封装、继承、多态</p><table><thead><tr><th>特性</th><th>核心思想</th><th>优点</th></tr></thead><tbody><tr><td>封装</td><td>隐藏内部实现，暴露必要接口</td><td>提高安全性，降低耦合性</td></tr><tr><td>继承</td><td>子类继承父类的属性和方法，支持代码复用和扩展</td><td>提高代码复用性，支持层次化设计</td></tr><tr><td>多态</td><td>同一接口在不同对象中有不同实现</td><td>提高灵活性和可扩展性，支持面向接口编程</td></tr></tbody></table><p>继承是指一个类（子类）可以继承另一个类（父类）的属性和方法，并可以在子类中添加新的属性和方法，或者重写父类的方法，提高代码的复用性</p><p>子类继承父类，会继承父类的所有成员变量和成员函数，同时子类也可以添加新的属性和方法，或者重写父类的方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;  <span class="hljs-comment">//学生</span><br><span class="hljs-keyword">public</span>:<br>string name;<br><span class="hljs-type">char</span> gender;<br><span class="hljs-type">int</span> age;<br>string major;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123; <span class="hljs-comment">//老师</span><br><span class="hljs-keyword">public</span>:<br>string name;<br><span class="hljs-type">char</span> gender;<br><span class="hljs-type">int</span> age;<br>string title;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Programmer</span> &#123; <span class="hljs-comment">//程序员</span><br><span class="hljs-keyword">public</span>:<br>string name;<br><span class="hljs-type">char</span> gender;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> hair;<br>&#125;;<br><span class="hljs-comment">// 三个类别都有特性和共性，共性可以继承实现</span><br><span class="hljs-comment">// 三个类都继承：人 </span><br><br><span class="hljs-comment">// 子类继承父类，“人”是父类（基类，baseclass）</span><br><span class="hljs-comment">// 子类也叫派生类</span><br><br><span class="hljs-comment">// 下面是使用继承的方式来实现上面一样的功能</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>string name;<br><span class="hljs-type">char</span> gender;<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> : <span class="hljs-keyword">public</span> Person &#123;  <span class="hljs-comment">//public Person 表示使用共有继承（所有属性和方法）</span><br><span class="hljs-keyword">public</span>:<br>string major;  <span class="hljs-comment">//只需要定义私有属性，其他属性都从父类继承下来</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> : <span class="hljs-keyword">public</span> Person &#123;<br><span class="hljs-keyword">public</span>:<br>string title;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Programmer</span> : <span class="hljs-keyword">public</span> Person &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> hair;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Student s;<br>s.major = <span class="hljs-string">&quot;CS&quot;</span>;<br>Teacher t;<br>t.title = <span class="hljs-string">&quot;Prof.&quot;</span>;<br>Programmer p;<br>p.hair = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; s.major &lt;&lt; endl;<br>cout &lt;&lt; t.title &lt;&lt; endl;<br>cout &lt;&lt; p.hair &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="权限控制的三个关键字">权限控制的三个关键字 ⭐⭐⭐</h3><p>private:：私有属性，其他对象无法访问</p><p>protected:：受保护属性，其他对象无法访问，但是子类可以访问</p><p>public:：公共属性，其他对象都可以访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> password;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">float</span> age;<br><span class="hljs-keyword">public</span>:<br>string name;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fatherShow</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// 自己可以访问所有权限的属性</span><br>cout &lt;&lt; password &lt;&lt; endl;<br>cout &lt;&lt; age &lt;&lt; endl;<br>cout &lt;&lt; name &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Father &#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sonShow</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; password &lt;&lt; endl;  <span class="hljs-comment">//不能访问父类的private属性</span><br>cout &lt;&lt; age &lt;&lt; endl;  <span class="hljs-comment">//可以访问protected属性</span><br>cout &lt;&lt; name &lt;&lt; endl;  <span class="hljs-comment">//可以访问public属性</span><br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Father f = <span class="hljs-built_in">Father</span>();<br>cout &lt;&lt; f.password &lt;&lt; endl; <span class="hljs-comment">//在类之外，不能访问</span><br>cout &lt;&lt; f.age &lt;&lt; endl; <span class="hljs-comment">///在类之外，不能访问</span><br>cout &lt;&lt; f.name &lt;&lt; endl; <span class="hljs-comment">// 谁都可以访问</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三种继承方式">三种继承方式 ⭐⭐⭐⭐</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> a;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> c;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son1</span> : <span class="hljs-keyword">public</span> Father &#123;  <span class="hljs-comment">// 共有继承：所有的属性和方法都从父类继承下来，但是子类仍然无法访问 private 属性</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; c &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son2</span> : <span class="hljs-keyword">protected</span> Father &#123; <span class="hljs-comment">//受保护继承：所有的属性和方法都从父类继承下来，但是 private 属性变成自己的 protected 属性</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; c &lt;&lt; endl;  <span class="hljs-comment">// 不能访问</span><br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son3</span> : <span class="hljs-keyword">private</span> Father &#123; <span class="hljs-comment">//  私有继承：所有的属性和方法都从父类继承下来，public 和 protected 属性都变成自己的 private 属性</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; c &lt;&lt; endl;  <span class="hljs-comment">// 不能访问</span><br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GrandSon</span> : <span class="hljs-keyword">public</span> Son3 &#123; <span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; c &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Father f;<br>cout &lt;&lt; f.a &lt;&lt; endl;  <span class="hljs-comment">//可以访问public</span><br>cout &lt;&lt; f.b &lt;&lt; endl;  <span class="hljs-comment">//不能访问</span><br>cout &lt;&lt; f.c &lt;&lt; endl;  <span class="hljs-comment">//不能访问</span><br><br>Son1 s1;<br>cout &lt;&lt; s1.a &lt;&lt; endl; <span class="hljs-comment">//可以访问public</span><br>cout &lt;&lt; s1.b &lt;&lt; endl; <span class="hljs-comment">//不能访问</span><br>cout &lt;&lt; s1.c &lt;&lt; endl; <span class="hljs-comment">//不能访问</span><br><br>Son2 s2;<br>cout &lt;&lt; s2.a &lt;&lt; endl; <span class="hljs-comment">//不行</span><br>cout &lt;&lt; s2.b &lt;&lt; endl; <span class="hljs-comment">//不能访问</span><br>cout &lt;&lt; s2.c &lt;&lt; endl; <span class="hljs-comment">//不能访问</span><br><br>Son3 s3;<br>cout &lt;&lt; s3.a &lt;&lt; endl; <span class="hljs-comment">// 不行</span><br>cout &lt;&lt; s3.b &lt;&lt; endl; <span class="hljs-comment">// 不行</span><br>cout &lt;&lt; s3.c &lt;&lt; endl; <span class="hljs-comment">// 不行</span><br>&#125;<br></code></pre></td></tr></table></figure><p><imgsrc="https://pic1.imgdb.cn/item/6777a402d0e0a243d4ee8afe.png" /></p><h3id="继承中的构造函数和析构函数顺序">继承中的构造函数和析构函数顺序</h3><p>子类、父类的构造函数只负责创建自己的属性，析构函数同理，但是顺序先后有所不同，需要注意：</p><ul><li>构造函数是父类先、子类后</li><li>析构函数是子类先、父类后</li></ul><p>类似数据结构:栈</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Father</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Father()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Father</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;~Father()&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Father &#123;  <span class="hljs-comment">// 继承父类的所有的属性和方法（包括构造函数和析构函数）</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Son</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;~Son()&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//Father f;</span><br>Son s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">test</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>继承的思想:is a <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">son</span> : <span class="hljs-keyword">public</span> Father&#123;&#125;<br></code></pre></td></tr></table></figure></p><p>或者另一种方式：包含的方式 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>&#123;<br><span class="hljs-keyword">public</span>:<br>Father s;<br><br><span class="hljs-built_in">Son</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Son</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;~Son()&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br>Son s1;<br>s1.s.a = <span class="hljs-number">10</span>;  <span class="hljs-comment">//访问父类的属性，比较繁琐</span><br></code></pre></td></tr></table></figure></p><h3 id="override">override ⭐⭐⭐⭐⭐</h3><p>子类继承父类后，可以重写该方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">char</span> dream;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">char</span> dream;<br><br><span class="hljs-built_in">Father</span>() : <span class="hljs-built_in">dream</span>(<span class="hljs-string">&#x27;b&#x27;</span>) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Father::study() &quot;</span> &lt;&lt; <span class="hljs-string">&quot;biology&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">study</span><span class="hljs-params">(string a)</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Father::study(string a) &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Father &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">char</span> dream;<br><br><span class="hljs-built_in">Son</span>() : <span class="hljs-built_in">dream</span>(<span class="hljs-string">&#x27;c&#x27;</span>) &#123;&#125;  <span class="hljs-comment">// override 父类的属性</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;   <span class="hljs-comment">// override 父类的study()函数，不带参的那个函数</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Son::study() &quot;</span> &lt;&lt; <span class="hljs-string">&quot;computer science&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//cl /d1 reportSingleClassLayout[class] file_name  //一个查看继承结构的工具</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Son s;<br><br>cout &lt;&lt; s.dream &lt;&lt; endl;<br>cout &lt;&lt; s.Father::dream &lt;&lt; endl;  <span class="hljs-comment">// 通过这种方式可以访问利用子类来访问父类的属性</span><br>cout &lt;&lt; s.Son::dream &lt;&lt; endl;     <span class="hljs-comment">// 输出效果同第一种，是一种显示的调用子类的属性</span><br><br>s.<span class="hljs-built_in">study</span>();<br>s.Father::<span class="hljs-built_in">study</span>();<br>s.Son::<span class="hljs-built_in">study</span>();<br><br>s.<span class="hljs-built_in">study</span>(<span class="hljs-string">&quot;music&quot;</span>);  <span class="hljs-comment">//子类带参的函数study没有复写，所以不能这样使用</span><br>s.Father::<span class="hljs-built_in">study</span>(<span class="hljs-string">&quot;music&quot;</span>);  <span class="hljs-comment">//父类的带参函数可以使用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>子类 Son 重写了父类 Father 的同名函数study()，导致父类的所有重载函数被隐藏。这是 C++ 的一个特性，称为名称隐藏（Name Hiding）</p><h3 id="多重继承">多重继承 ⭐⭐⭐</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> height;<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mother</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> beauty;<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Father, <span class="hljs-keyword">public</span> Mother &#123;  <span class="hljs-comment">// 同时继承父亲和母亲的类</span><br>&#125;;<br><br><span class="hljs-comment">//cl /d1 reportSingleClassLayout[class] file_name</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Son s;<br><br>  s.Father::age = <span class="hljs-number">45</span>;<br>s.Mother::age = <span class="hljs-number">40</span>;<br><br>cout &lt;&lt; s.age &lt;&lt; endl;  <span class="hljs-comment">// 报错！！！  age属性是重名的，需要单独访问，如下：</span><br>cout &lt;&lt; s.Father::age &lt;&lt; endl;  <span class="hljs-comment">// 45</span><br>cout &lt;&lt; s.Mother::age &lt;&lt; endl;  <span class="hljs-comment">// 40</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第十一讲">第十一讲</h2><h3 id="菱形继承">菱形继承 ⭐⭐⭐⭐⭐</h3><p>尽量不要用，关系比较复杂</p><h3 id="虚继承">虚继承</h3><p>虚继承指的的并不是真的继承父类的属性，而是子类一个指针指向父类的对应属性，因此可以实现多个指针指向一个属性（地址），实现了多重继承，子类和父类在内存上是共用的</p><p>虚继承是为了解决菱形继承问题而提出的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Yang</span>: <span class="hljs-keyword">public</span> Animal &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tuo</span>: <span class="hljs-keyword">public</span> Animal &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">YangTuo</span> : <span class="hljs-keyword">public</span> Yang, <span class="hljs-keyword">public</span> Tuo &#123;&#125;; <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>YangTuo s;<br><br>s.age = <span class="hljs-number">18</span>;    <span class="hljs-comment">// 这行会直接报错，因为不知道子类的age指代哪个父类</span><br>  <span class="hljs-comment">// 所以只能分开访问：</span><br>s.Yang::age = <span class="hljs-number">18</span>; <br>s.Tuo::age = <span class="hljs-number">28</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>下面使用虚继承的方式来解决上述问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">// class Yang: public Animal &#123;&#125;;</span><br><span class="hljs-comment">// class Tuo: public Animal &#123;&#125;;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Yang</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;&#125;;  <span class="hljs-comment">// 并不是真的继承父类的属性，子类并没有age属性，而是创建一个指针，指向父类的属性</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tuo</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;&#125;;   <span class="hljs-comment">// 这两个指针都指向父类的同一个属性，因此不会产生指向冲突</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">YangTuo</span> : <span class="hljs-keyword">public</span> Yang, <span class="hljs-keyword">public</span> Tuo &#123;&#125;;  <span class="hljs-comment">// Yang和Tuo都继承了Animal，但是Animal是虚类，因此YangTuo也继承了Animal</span><br><br><span class="hljs-comment">//cl /d1 reportSingleClassLayout[class] file_name</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>YangTuo s;<br><br>s.age = <span class="hljs-number">18</span>;        <span class="hljs-comment">// 三个类的age都是18</span><br>s.Yang::age = <span class="hljs-number">18</span>;  <span class="hljs-comment">// 还是18</span><br>s.Tuo::age = <span class="hljs-number">28</span>;   <span class="hljs-comment">// 三个类的age都成了28，因为都是同一个age</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Yang的一个指针指向父类的属性age，Tuo的一个指针也指向父类的属性age，这样YangTuo 无论从哪边访问属性age都不会产生歧义</p><h3 id="加法运算操作符重载">加法运算操作符重载 ⭐⭐⭐⭐⭐</h3><p>操作符本质上都是函数，像 + - * / 数组（[]）等都是操作符</p><p>操作符重载就是改变操作符的功能（行为）</p><p>操作符重载可以有两种方法，第一种是在类里面定义，第二种是在类外面定义，同时存在时，第一种方法优先级更高</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br><br><span class="hljs-built_in">Person</span>() : <span class="hljs-built_in">age</span>(<span class="hljs-number">18</span>) &#123;&#125;<br><br><span class="hljs-function">Person <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">const</span> Person&amp; p)</span> </span>&#123;  <span class="hljs-comment">//可以使用函数来实现两个对象之间的属性相加，但是相比于操作符重载更繁琐</span><br>Person temp;<br>temp.age = <span class="hljs-keyword">this</span>-&gt;age + p.age;<br><span class="hljs-keyword">return</span> temp;  <span class="hljs-comment">// 返回一个临时对象，是没有问题的！！！</span><br>&#125;<br><br>  <span class="hljs-comment">// 第一种重载方法：重载加法运算符  可以理解为一个函数就好</span><br>Person <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>Person temp;<br>temp.age = age + p.age;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">// 第二种重载方法：在外面定义操作符重载</span><br>Person <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Person&amp; p1, <span class="hljs-type">const</span> Person&amp; p2) &#123;  <span class="hljs-comment">// 这里const的作用是表明：只读取对象的属性，但是不修改其值</span><br>Person temp;<br>temp.age = p1.age + p2.age;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> c = a + b;<br><br>Person p1, p2;<br>Person p3 = p1.<span class="hljs-built_in">add</span>(p2);  <span class="hljs-comment">// p3.age = 18 + 18 = 36</span><br>Person p4 = p1.<span class="hljs-keyword">operator</span>+(p2);  <span class="hljs-comment">// 调用了第一种重载方法，把操作符直接当函数调用即可</span><br>Person p4 = <span class="hljs-keyword">operator</span>+(p1, p2); <span class="hljs-comment">// 调用了第二种重载方法</span><br>Person p4 = p1 + p2;  <span class="hljs-comment">// 当方法1和2同时存在，会优先调用第一种</span><br><br>cout &lt;&lt; p3.age &lt;&lt; endl;<br>cout &lt;&lt; p4.age &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果重载操作符返回的类型为引用，会产生内存错误，地址不存在，如下：</p><p>原因是，当返回的是对象时，会在外面进行一次赋值操作，接返回的内容，但是如果返回的是引用，该返回对象会随着栈空间的消失而不存在</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-comment">// 在类中的函数这样定义</span><br>Person&amp; <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>Person temp;<br>temp.age = age + p.age;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-comment">// 在main中需要用&amp; 来接返回值，否则会发生强制转换，并不会引发内存错误</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Person p1, p2;<br>Person&amp; p4 = p1 + p2;  <br>cout &lt;&lt; p4.age &lt;&lt; endl;  <span class="hljs-comment">// 输出36</span><br>  <span class="hljs-comment">// 再次打印输出将会发生内存错误</span><br>  cout &lt;&lt; p4.age &lt;&lt; endl;  <span class="hljs-comment">// 输出不知道</span><br>  cout &lt;&lt; p4.age &lt;&lt; endl;  <span class="hljs-comment">// 输出不知道</span><br>  cout &lt;&lt; p4.age &lt;&lt; endl;  <span class="hljs-comment">// 输出不知道</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是上述代码在我自己的电脑上运行都是输出36，并没有和老师上课讲的内容一致，我也不知道为什么，但是上述分析的原理应该是没有问题的，可能电脑问题hhhhhh</p><h3 id="关系运算符重载">关系运算符重载</h3><p>这个比较简单</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><span class="hljs-type">int</span> age;<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> _id, <span class="hljs-type">int</span> _age) : <span class="hljs-built_in">id</span>(_id), <span class="hljs-built_in">age</span>(_age) &#123;&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Person&amp; p) &#123;<br><span class="hljs-built_in">return</span> (id==p.id &amp;&amp; age==p.age);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> Person&amp; p) &#123;<br><span class="hljs-built_in">return</span> (id != p.id || age != p.age);<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">18</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">28</span>)</span></span>;<br><br>cout &lt;&lt; (p1 == p2) &lt;&lt; endl;<br>cout &lt;&lt; (p1 != p2) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="赋值运算符重载">赋值运算符重载</h3><p>下面涉及到了内存泄漏的一些东西，需要结合老师的视频来看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span>* age;<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> _age) : <span class="hljs-built_in">age</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(_age)) &#123;&#125;<br><br>  ~<span class="hljs-built_in">Person</span>() &#123;<br><span class="hljs-keyword">delete</span> age;<br>&#125;<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;  <span class="hljs-comment">// 拷贝构造函数---深拷贝</span><br>age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.age);<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>  <span class="hljs-comment">// 使用初始化列表的方式重写拷贝构造函数---深拷贝</span><br>  <span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) : <span class="hljs-built_in">age</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.age)) &#123;&#125;<br><br>Person&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Person&amp; p) &#123;<br><span class="hljs-keyword">if</span> (age != <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">delete</span> age;<br>&#125;<br><br>age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.age);<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">28</span>)</span></span>;<br><br>p2 = p1;<br><span class="hljs-comment">//Person p2 = p1;</span><br><br><span class="hljs-comment">//Person p3(38);</span><br><span class="hljs-comment">//p3 = p2 = p1;   // 赋值运算符的连锁调用</span><br><span class="hljs-comment">//cout &lt;&lt; *p3.age &lt;&lt; *p2.age &lt;&lt; *p1.age &lt;&lt; endl;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">test</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br>Person p2 = p1;  <span class="hljs-comment">// 如果这样写，不是调用赋值运算符，而是调用默认的拷贝构造函数，是浅拷贝!!!!</span><br>&#125;<br></code></pre></td></tr></table></figure><p>浅拷贝会造成重复删除的问题 <imgsrc="https://pic.imgdb.cn/item/676ea7fed0e0a243d4ebc40d.png" /></p><h2 id="第十二讲">第十二讲</h2><h3 id="左移运算符重载">左移运算符重载</h3><p>重载输出的符号 “&lt;&lt;”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> id;<br><span class="hljs-type">int</span> age;<br><br><span class="hljs-built_in">Person</span>() : <span class="hljs-built_in">id</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">age</span>(<span class="hljs-number">18</span>) &#123;&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout) &#123;  <span class="hljs-comment">// 左移运算符重载</span><br>cout &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; age;<br>&#125;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="hljs-type">const</span> Person&amp; p) &#123;<br>cout &lt;&lt; p.id &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; p.age;<br>&#125;<br><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="hljs-type">const</span> Person&amp; p) &#123;<br>cout &lt;&lt; p.id &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; p.age;<br><span class="hljs-keyword">return</span> cout;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Person p;<br>cout &lt;&lt; p.id &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; p.age &lt;&lt; endl;<br>cout &lt;&lt; p;<br><br><span class="hljs-comment">//p.operator&lt;&lt;(cout);</span><br><span class="hljs-comment">//p &lt;&lt; cout;</span><br><br><span class="hljs-comment">//operator&lt;&lt;(cout, p);</span><br><span class="hljs-comment">//cout &lt;&lt; p;</span><br><br><span class="hljs-comment">//Person p1;</span><br><span class="hljs-comment">//operator&lt;&lt;(operator&lt;&lt;(cout, p), p1);</span><br><span class="hljs-comment">//cout &lt;&lt; p &lt;&lt; p1;</span><br><span class="hljs-comment">////cout &lt;&lt; p &lt;&lt; p1 &lt;&lt; endl;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自增运算符重载">自增运算符重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br><br><span class="hljs-built_in">Person</span>() : <span class="hljs-built_in">age</span>(<span class="hljs-number">18</span>) &#123;&#125;<br><br>Person&amp; <span class="hljs-keyword">operator</span>++() &#123;  <span class="hljs-comment">// 这里针对返回的为 引用 还是 对象 ，下面打印的结果是不一样的，需要结合程序来理解</span><br>++age;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>Person <span class="hljs-keyword">operator</span>++() &#123;<br>++age;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>Person&amp; <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) &#123;  <span class="hljs-comment">// 这里多添加了一个int，来表示 后加</span><br>Person temp = *<span class="hljs-keyword">this</span>;<br>++age;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br>Person <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) &#123;  <span class="hljs-comment">// 后加需要返回对象，中间有一个浅拷贝</span><br>Person temp = *<span class="hljs-keyword">this</span>;<br>++age;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-type">const</span> Person <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) &#123;  <span class="hljs-comment">// 返回的对象不能修改，该操作会将后加的连锁调用视为报错，起到了提醒的作用</span><br>Person temp = *<span class="hljs-keyword">this</span>;<br>++age;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br>&#125;;<br><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="hljs-type">const</span> Person&amp; p) &#123;  <span class="hljs-comment">// 重载左移运算符</span><br>cout &lt;&lt; p.age;<br><span class="hljs-keyword">return</span> cout;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">18</span>;<br>Person p;<br><br>cout &lt;&lt; ++a &lt;&lt; endl;  <span class="hljs-comment">// 19</span><br>cout &lt;&lt; a &lt;&lt; endl;  <span class="hljs-comment">// 19</span><br>cout &lt;&lt; ++(++a) &lt;&lt; endl;  <span class="hljs-comment">//21</span><br>cout &lt;&lt; a &lt;&lt; endl;  <span class="hljs-comment">//21</span><br><br>cout &lt;&lt; ++p &lt;&lt; endl;<br>cout &lt;&lt; p &lt;&lt; endl;<br>cout &lt;&lt; ++(++p) &lt;&lt; endl;  <span class="hljs-comment">// 针对重载函数返回的为引用还是指针，分开讨论:</span><br>  <span class="hljs-comment">// 若返回类型为指针，可以实现连加，若返回引用，不能实现连加！！！</span><br>cout &lt;&lt; p &lt;&lt; endl;<br><br>cout &lt;&lt; a++ &lt;&lt; endl;<br>cout &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; (a++)++ &lt;&lt; endl;  <span class="hljs-comment">// 后加 不支持连锁调用！！！</span><br>cout &lt;&lt; a &lt;&lt; endl;<br><br>cout &lt;&lt; p++ &lt;&lt; endl;<br>cout &lt;&lt; p &lt;&lt; endl;<br>cout &lt;&lt; (p++)++ &lt;&lt; endl;<br>cout &lt;&lt; p &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="仿函数-functor">仿函数 functor</h3><p>functor 函数是对象</p><p>能够实现的功能有：可以保存函数执行过程中的中间变量</p><p>就是对 括号 的重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">adder</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adder</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;  <span class="hljs-comment">// 创建一个类来重载一个括号运算符，叫 functor</span><br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Adder adder;<br><br>cout &lt;&lt; <span class="hljs-built_in">adder</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第十三讲">第十三讲</h2><h3id="面向对象编程的第三大特性---多态-polymorphism">面向对象编程的第三大特性---多态polymorphism ⭐⭐⭐⭐⭐</h3><p>多态：能否将父类的对象转为子类的对象？</p><p>结论：</p><ul><li>父类对象直接等于子类对象是可以的，但是没有变形成功</li><li>子类对象直接等于父类对象是不行的，会报错</li></ul><p>多态分为动态多态和静态多态</p><p>函数重载就是静态多态</p><p>实现多态使用到的原理：</p><ul><li>虚函数来实现晚绑定（虚函数与虚继承没有任何关系！）</li><li>对于父类的函数使用虚函数来实现就可以实现多态</li></ul><p>实现多态的三大要点：</p><ul><li>父类对象直接等于子类对象是不行的，要父类的 指针或者引用等于子类对象才行</li><li>使用虚函数实现晚绑定</li><li>子类需要重写相关函数</li></ul><p>指针和引用是实现多态的关键！！！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br><br><span class="hljs-built_in">Animal</span>() : <span class="hljs-built_in">age</span>(<span class="hljs-number">18</span>) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Shout: &quot;</span> &lt;&lt; age &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> : <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">char</span> color;<br><br><span class="hljs-built_in">Cat</span>() : <span class="hljs-built_in">color</span>(<span class="hljs-string">&#x27;y&#x27;</span>) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// 重写父类的 shout 函数</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Meow: &quot;</span> &lt;&lt; age &lt;&lt; color &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Animal a;<br>Cat c;<br><br>c.<span class="hljs-built_in">shout</span>();<br>c.Animal::<span class="hljs-built_in">shout</span>();<br><br>Animal ap = c; <span class="hljs-comment">// 试图利用子类创建一个父类对象，但是直接转换是无法成功的</span><br>Cat cp = a;    <span class="hljs-comment">// 利用父类对象创建一个子类对象会报错，因为属性不对齐</span><br><br>Animal* ap = &amp;c;   <span class="hljs-comment">// 采用指针的形式来实现变形（子类-&gt;父类）</span><br>Cat* cp = &amp;a;<br><br>Animal&amp; ap = c;  <span class="hljs-comment">// 使用引用也能实现多态，引用本质上也是指针</span><br>Cat&amp; cp = a;<br><br>ap.<span class="hljs-built_in">shout</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>如何实现多态？需要使用到虚函数</p><p>虚函数可以实现函数与类之间的晚绑定</p><p>辨析：<code>虚继承</code>为了解决<code>菱形继承</code>问题提出的，<code>虚函数</code>则是为了<code>实现晚绑定</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// void shout() &#123;</span><br><span class="hljs-comment">// cout &lt;&lt; &quot;Shout&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// 父类对象需要使用虚函数实现晚绑定</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Shout&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> : <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Meow&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> : <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Woof&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(Animal* a)</span> </span>&#123; <span class="hljs-comment">// 指针实现多态</span><br>a-&gt;<span class="hljs-built_in">shout</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(Animal&amp; a)</span> </span>&#123; <span class="hljs-comment">// 引用也可以实现多态</span><br>a.<span class="hljs-built_in">shout</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Cat c;<br>Dog d;<br><br><span class="hljs-built_in">test</span>(&amp;c); <span class="hljs-comment">// 调用指针的多态需要传地址</span><br><span class="hljs-built_in">test</span>(&amp;d);<br><br><span class="hljs-built_in">test</span>(c);  <span class="hljs-comment">// 调用引用的多态时直接传对象</span><br><span class="hljs-built_in">test</span>(d);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="纯虚函数和抽象类">纯虚函数和抽象类 ⭐⭐⭐⭐⭐</h3><p>纯虚函数的定义：定义一个类时使用到了前面讲的虚函数，但是不指定任何类的行为，类似下面的定义形式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;  <span class="hljs-comment">// 这里的shout是纯虚函数，没有实际的行为</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>抽象类的定义：含有<code>纯虚函数</code>的类叫<code>抽象类</code>，不能用来创建对象，<code>只能被继承</code></p><p>继承的子类必须重写纯虚函数，才能实现创建对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> : <span class="hljs-keyword">public</span> Animal &#123;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> : <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Woof&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(Animal* a)</span> </span>&#123;<br>a-&gt;<span class="hljs-built_in">shout</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Animal a;  <span class="hljs-comment">// 抽象类不能用来创建对象</span><br>Cat c; <span class="hljs-comment">// 不重写的子类也不能用来创建对象</span><br><br>Dog d;<br>Animal* a = &amp;d;<br>a-&gt;<span class="hljs-built_in">shout</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="虚析构函数">虚析构函数 ⭐⭐⭐⭐⭐</h3><p>在实现多态时可能会存在内存泄漏的问题，原因是因为在删除堆空间的子类时，调用的是父类的析构函数，而父类的析构函数并没有释放子类中的堆空间，所以导致内存泄漏。</p><p>因此需要在父类的析构函数中添加一个虚析构函数，这样就会调用子类的析构函数，从而释放子类中的堆空间。</p><p>同时需要注意一点就是父类的虚析构函数还不能是纯虚析构（必须定义具体的行为），因为虚构函数是有意义的，无论是子类还是父类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Animal</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Animal()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Animal</span>() &#123;  <span class="hljs-comment">//普通析构会造成内存泄漏</span><br>cout &lt;&lt; <span class="hljs-string">&quot;~Animal()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Animal</span>() &#123;  <span class="hljs-comment">// 必须使用-虚析构函数</span><br>cout &lt;&lt; <span class="hljs-string">&quot;~Animal()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>  <span class="hljs-comment">// 下面的行为是错误的！！！</span><br>  <span class="hljs-comment">// 虚析构函数不能是纯虚析构</span><br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Animal</span>() = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// 普通函数可以是纯虚析构</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br>Animal::~<span class="hljs-built_in">Animal</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Animal::~Animal()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> : <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span>* age;<br><br><span class="hljs-built_in">Cat</span>() : <span class="hljs-built_in">age</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">18</span>)) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Cat()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Cat</span>() &#123;<br><span class="hljs-keyword">delete</span> age;<br>cout &lt;&lt; <span class="hljs-string">&quot;~Cat()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Meow: &quot;</span> &lt;&lt; *age &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>Animal* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Cat</span>();<br>a-&gt;<span class="hljs-built_in">shout</span>();<br><span class="hljs-keyword">delete</span> a;  <span class="hljs-comment">// 因为父类是虚析构，所以会调用子类cat的析构函数来删除内存</span><br>  <span class="hljs-comment">// 否则调用的是父类的析构函数，导致内存泄漏</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">test</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第十四讲-模板和异常">第十四讲 模板和异常</h2><h3 id="函数模板">函数模板 ⭐⭐⭐</h3><p>函数模板的作用就是优化函数重载需要针对特定的数据类型，不是很方便的问题</p><p>函数模板可以 Template<typename T>，也可以 Template<class T>先定义函数的具体功能，在使用时再传入数据类型，不像函数重载需要在一开始就确定数据类型，因此函数模板更加灵活。</p><p>函数模板解决的是函数中的传入参数不确定的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 函数模板的两种定义方式</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_swap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span> </span>&#123; <br>T t = a;<br>a = b;<br>b = t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">//my_swap(a, b);</span><br><span class="hljs-built_in">my_swap</span>&lt;<span class="hljs-type">int</span>&gt;(a, b); <span class="hljs-comment">// 在调用函数时再传入数据类型，更加灵活方便</span><br>cout &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; b &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类模板">类模板 ⭐⭐⭐</h3><p>类模板解决的是类中的属性不确定的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">IdType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>IdType id;<br>AgeType age;<br><br><span class="hljs-built_in">Person</span>(IdType _id, AgeType _age) : <span class="hljs-built_in">id</span>(_id), <span class="hljs-built_in">age</span>(_age) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 类模板的第一种创建方法---在继承父类时确定父类的属性</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">StuIdType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> :<span class="hljs-keyword">public</span> Person&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &#123;<br><span class="hljs-keyword">public</span>:<br>StuIdType stu_id;<br><br><span class="hljs-built_in">Student</span>(StuIdType _stu_id, <span class="hljs-type">int</span> _id, <span class="hljs-type">int</span> _age) : <span class="hljs-built_in">stu_id</span>(_stu_id), <span class="hljs-built_in">Person</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(_id, _age) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 类模板的第二种创建方法---在继承父类时不确定父类的属性</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">StuIdType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> :<span class="hljs-keyword">public</span> Person&lt;IdType, AgeType&gt; &#123;<br><span class="hljs-keyword">public</span>:<br>StuIdType stu_id;<br><br><span class="hljs-built_in">Student</span>(StuIdType _stu_id, IdType _id, AgeType _age) : <span class="hljs-built_in">stu_id</span>(_stu_id), <span class="hljs-built_in">Person</span>&lt;IdType, AgeType&gt;(_id, _age) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Person&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">18</span>)</span></span>;  <span class="hljs-comment">// 调用有参构造函数</span><br>Person&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; p = <span class="hljs-built_in">Person</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">18</span>); <span class="hljs-comment">// 同上，形式不同</span><br>cout &lt;&lt; p.id &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; p.age &lt;&lt; endl;<br><br><span class="hljs-function">Student&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>)</span></span>;  <span class="hljs-comment">// 对应类模板的第一种创建方法</span><br><span class="hljs-function">Student&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>)</span></span>;  <span class="hljs-comment">// 对应类模板的第二种创建方法</span><br>cout &lt;&lt; s.id &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; s.age &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; s.stu_id &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类模板-vector">类模板 vector ⭐</h3><p>vector是一个常见的类模板，下面介绍了一下常见的用法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;  <span class="hljs-comment">// 把对象的引用传入 print 函数</span><br>  <span class="hljs-comment">// vector 中有个迭代器能够实现遍历 vector</span><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator i = v.<span class="hljs-built_in">begin</span>(); i != v.<span class="hljs-built_in">end</span>(); ++i) &#123;<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">construct</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br><br>  <span class="hljs-comment">// v1 从 v 的开头到结尾一个一个复制过来</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(v.begin(), v.end())</span></span>;  <span class="hljs-comment">// 是有参构造函数</span><br><span class="hljs-built_in">print</span>(v1);<br><br>  <span class="hljs-comment">// v2 会构造一个8个6的 vector</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>)</span></span>;  <span class="hljs-comment">// 也是有参构造函数，与上面构成了函数重载</span><br><span class="hljs-built_in">print</span>(v2);<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v3</span><span class="hljs-params">(v2)</span></span>;  <span class="hljs-comment">// 拷贝构造函数</span><br><span class="hljs-built_in">print</span>(v3);<br>&#125;<br><br><span class="hljs-comment">// 赋值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assign</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1 = v;  <span class="hljs-comment">// 这里调用的是拷贝构造函数！！！非常容易理解错误</span><br><span class="hljs-built_in">print</span>(v1);<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v2;  <span class="hljs-comment">// v2先调用无参构造函数</span><br>v2.<span class="hljs-built_in">assign</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">// 然后实现从v到v2的依次赋值</span><br><span class="hljs-built_in">print</span>(v2);<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v3;<br>v3.<span class="hljs-built_in">assign</span>(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>);<br><span class="hljs-built_in">print</span>(v3);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">length</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br>cout &lt;&lt; v.<span class="hljs-built_in">empty</span>() &lt;&lt; endl;<br>cout &lt;&lt; v.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; ++i) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br>v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">8</span>);<br><span class="hljs-built_in">print</span>(v);<br>cout &lt;&lt; v.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br><br>v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">12</span>);<br><span class="hljs-built_in">print</span>(v);<br><br>v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">16</span>, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">print</span>(v);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert_delete</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br>v.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-built_in">print</span>(v);<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br><br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">10</span>);<br><span class="hljs-built_in">print</span>(v);<br><br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">2</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">print</span>(v);<br><br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>());<br><span class="hljs-built_in">print</span>(v);<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br><br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, v.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">print</span>(v);<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br><br>v.<span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">print</span>(v);<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">access</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br>cout &lt;&lt; v.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>) &lt;&lt; endl;<br>cout &lt;&lt; v[<span class="hljs-number">2</span>] &lt;&lt; endl;<br>cout &lt;&lt; v.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br>cout &lt;&lt; v.<span class="hljs-built_in">back</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br><span class="hljs-built_in">print</span>(v1);<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>cout &lt;&lt; v1.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;After swap&quot;</span> &lt;&lt; endl;<br>v.<span class="hljs-built_in">swap</span>(v1);<br><span class="hljs-built_in">print</span>(v1);<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>cout &lt;&lt; v1.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shrink</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;().<span class="hljs-built_in">swap</span>(v);<br>cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;  <span class="hljs-comment">// 创建一个 vector 对象，每个元素的类型为 int（是一个类模板）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-built_in">print</span>(v);<br><br><span class="hljs-built_in">construct</span>(v);<br><span class="hljs-built_in">assign</span>(v);<br><span class="hljs-built_in">length</span>(v);<br><span class="hljs-built_in">insert_delete</span>(v);<br><span class="hljs-built_in">access</span>(v);<br><span class="hljs-built_in">swap</span>(v);<br><span class="hljs-built_in">shrink</span>(v);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="homework">Homework</h2><h3 id="hw_13">HW_13</h3><p>Write a geometry software using the idea of “polymorphism” so thatthe following code can run successfully.</p><p>1.Implement the 2-dimensional circle, rectangle, square, and regulartriangle.</p><p>2.Implement the 3-dimensional sphere, cylinder, cuboid, cube, regulartriangular prism, and tetrahedron.</p><p>3.Implement the method to calculate their areas (volumes).</p><p>Note: Design your own inheritance relationship and properties betweeneach class. Search the formula for the area (volume) of each geometricshape with PI equal to 3.14159.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>       Circle c = <span class="hljs-built_in">Circle</span>(<span class="hljs-number">2</span>);      <span class="hljs-comment">//Circle with radius 2</span><br>       Rectangle r = <span class="hljs-built_in">Rectangle</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);    <span class="hljs-comment">//Rectangle with length 2 and width 3</span><br>       Square s = <span class="hljs-built_in">Square</span>(<span class="hljs-number">2</span>);      <span class="hljs-comment">//Square with length 2</span><br>       Triangle t = <span class="hljs-built_in">Triangle</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">//Regular triangle with length 2</span><br>       Sphere sp = <span class="hljs-built_in">Sphere</span>(<span class="hljs-number">2</span>);     <span class="hljs-comment">//Sphere with radius 2</span><br>       Cylinder cy = <span class="hljs-built_in">Cylinder</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);     <span class="hljs-comment">//Cylinder with radius 2 and height 4</span><br>       Cuboid cd = <span class="hljs-built_in">Cuboid</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);      <span class="hljs-comment">//Cuboid with length2, width 3, and height 4</span><br>       Cube cb = <span class="hljs-built_in">Cube</span>(<span class="hljs-number">2</span>);   <span class="hljs-comment">//Cube with length 2</span><br>       Prism ps = <span class="hljs-built_in">Prism</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);    <span class="hljs-comment">//Regular triangular prism with length 2 and height 5</span><br>       Tetrahedron tt = <span class="hljs-built_in">Tetrahedron</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">//Tetrahedron with length 2</span><br>       <span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br>       Shape* ss[n] = &#123;&amp;c, &amp;r, &amp;s, &amp;t, &amp;sp, &amp;cy, &amp;cd, &amp;cb, &amp;ps, &amp;tt&#125;;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>              cout &lt;&lt; ss[i]-&gt;<span class="hljs-built_in">area</span>() &lt;&lt; endl;<br>       &#125;<br>&#125;<br><span class="hljs-comment">// Result:</span><br><span class="hljs-number">12.5664</span><br><span class="hljs-number">6</span><br><span class="hljs-number">4</span><br><span class="hljs-number">1.73205</span><br><span class="hljs-number">33.5103</span><br><span class="hljs-number">50.2654</span><br><span class="hljs-number">24</span><br><span class="hljs-number">8</span><br><span class="hljs-number">8.66025</span><br><span class="hljs-number">0.942809</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-number">3.14159</span>;<br><br><span class="hljs-comment">// Base class for all shapes</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Shape</span>() &#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> radius;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Circle</span>(<span class="hljs-type">double</span> r) : <span class="hljs-built_in">radius</span>(r) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> PI * radius * radius;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> width, height;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Rectangle</span>(<span class="hljs-type">double</span> w, <span class="hljs-type">double</span> h) : <span class="hljs-built_in">width</span>(w), <span class="hljs-built_in">height</span>(h) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> width * height;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> side;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Square</span>(<span class="hljs-type">double</span> s) : <span class="hljs-built_in">side</span>(s) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> side * side;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RegularTriangle</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> side;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">RegularTriangle</span>(<span class="hljs-type">double</span> s) : <span class="hljs-built_in">side</span>(s) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>) / <span class="hljs-number">4</span>) * side * side;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sphere</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> radius;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Sphere</span>(<span class="hljs-type">double</span> r) : <span class="hljs-built_in">radius</span>(r) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span>  </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">4.0</span> / <span class="hljs-number">3.0</span>) * PI * radius * radius * radius;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cylinder</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> radius, height;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cylinder</span>(<span class="hljs-type">double</span> r, <span class="hljs-type">double</span> h) : <span class="hljs-built_in">radius</span>(r), <span class="hljs-built_in">height</span>(h) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> PI * radius * radius * height;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cuboid</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> width, height, depth;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cuboid</span>(<span class="hljs-type">double</span> w, <span class="hljs-type">double</span> h, <span class="hljs-type">double</span> d) : <span class="hljs-built_in">width</span>(w), <span class="hljs-built_in">height</span>(h), <span class="hljs-built_in">depth</span>(d) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> width * height * depth;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cube</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> side;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cube</span>(<span class="hljs-type">double</span> s) : <span class="hljs-built_in">side</span>(s) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> side * side * side;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RegularTriangularPrism</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> baseSide, height;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">RegularTriangularPrism</span>(<span class="hljs-type">double</span> b, <span class="hljs-type">double</span> h) : <span class="hljs-built_in">baseSide</span>(b), <span class="hljs-built_in">height</span>(h) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>) / <span class="hljs-number">4</span>) * baseSide * baseSide * height;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tetrahedron</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> edge;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tetrahedron</span>(<span class="hljs-type">double</span> e) : <span class="hljs-built_in">edge</span>(e) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (edge * edge * edge) / (<span class="hljs-number">6</span> * <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Circle c = <span class="hljs-built_in">Circle</span>(<span class="hljs-number">2</span>);      <span class="hljs-comment">//Circle with radius 2</span><br>    Rectangle r = <span class="hljs-built_in">Rectangle</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);    <span class="hljs-comment">//Rectangle with length 2 and width 3</span><br>    Square s = <span class="hljs-built_in">Square</span>(<span class="hljs-number">2</span>);      <span class="hljs-comment">//Square with length 2</span><br>    RegularTriangle t = <span class="hljs-built_in">RegularTriangle</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">//Regular triangle with length 2</span><br>    Sphere sp = <span class="hljs-built_in">Sphere</span>(<span class="hljs-number">2</span>);     <span class="hljs-comment">//Sphere with radius 2</span><br>    Cylinder cy = <span class="hljs-built_in">Cylinder</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);     <span class="hljs-comment">//Cylinder with radius 2 and height 4</span><br>    Cuboid cd = <span class="hljs-built_in">Cuboid</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);      <span class="hljs-comment">//Cuboid with length2, width 3, and height 4</span><br>    Cube cb = <span class="hljs-built_in">Cube</span>(<span class="hljs-number">2</span>);   <span class="hljs-comment">//Cube with length 2</span><br>    RegularTriangularPrism ps = <span class="hljs-built_in">RegularTriangularPrism</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);    <span class="hljs-comment">//Regular triangular prism with length 2 and height 5</span><br>    Tetrahedron tt = <span class="hljs-built_in">Tetrahedron</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">//Tetrahedron with length 2</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br>    Shape* ss[n] = &#123; &amp;c, &amp;r, &amp;s, &amp;t, &amp;sp, &amp;cy, &amp;cd, &amp;cb, &amp;ps, &amp;tt &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cout &lt;&lt; ss[i]-&gt;<span class="hljs-built_in">area</span>() &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hw_12">HW_12</h3><p>Write your own “string” class. 1.The name of the class is “my_str”.2.“my_str” has two properties, a “char*” representing the string and an“int” representing the length of the string. 3.Design your constructorand destructor. 4.Overload the “=” operator to avoid memory leaking.5.Overload the “==” and “!=” operators so that we can know if two“my_str” objects are equal. 6.Overload the “&lt;” and “&gt;” operatorsso that two “my_str” objects can be compared in dictionary order, e.g.(“abcd” &gt; “abbe”) is true. 7.Overload the “&lt;&lt;” operator so that“my_str” objects can be output directly instead of using the“object.property” form. 8.Overload the “+” operator so that two “my_str”objects can be concatenated together, e.g. “ab” + “cd” equals“abcd”.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">my_str</span><br>&#123;<br><span class="hljs-type">char</span>* str;<br><span class="hljs-type">int</span> len;<br><br><span class="hljs-built_in">my_str</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s = <span class="hljs-literal">nullptr</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (s == <span class="hljs-literal">nullptr</span>)<br>&#123;<br>len = <span class="hljs-number">0</span>;<br>str = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">1</span>];<br>str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>len = <span class="hljs-built_in">strlen</span>(s);<br>str = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span> [len + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(str, s);<br>&#125;<br>&#125;<br>~<span class="hljs-built_in">my_str</span>()<br>&#123;<br><span class="hljs-keyword">delete</span>[] str;<br>&#125;<br><br><span class="hljs-built_in">my_str</span>(<span class="hljs-type">const</span> my_str&amp; other)<br>&#123;<br>len = other.len;<br>str = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[len + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(str, other.str);<br>&#125;<br><br>my_str&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> my_str&amp; other)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;other)<br>&#123;<br><span class="hljs-keyword">delete</span>[] str;<br>len = other.len;<br>str = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[len + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(str, other.str);<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> my_str&amp; other)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(str, other.str) == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> my_str&amp; other)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(str, other.str) != <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> my_str&amp; other)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(str, other.str) &lt; <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> my_str&amp; other)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(str, other.str) &gt; <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="hljs-type">const</span> my_str&amp; s)<br>&#123;<br>os &lt;&lt; s.str;<br><span class="hljs-keyword">return</span> os;<br>&#125;<br><br>my_str <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> my_str&amp; s)<br>&#123;<br>my_str result;<br>result.len = s.len + len;<br>result.str = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[len + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(result.str, str);<br><span class="hljs-built_in">strcat</span>(result.str, s.str);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="hw_11">HW_11</h3><p>Write a class representing an array of “int”, which requires： 1.Thename of the class is my_array. 2.my_array contains at least one property“arr” of type “int*”, which stores the elements of the array. 3.You arefree to add more properties. 4.Design your constructor and destructor.5.Overload the [] operator so that the object of my_array can return theelements at a specified position in “arr”. In addition, check if theposition is out of bounds.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></figure><h3 id="hw_10">HW_10</h3><p>Write a system for creating geometric shapes using Inheritance wejust learned. 1.The system needs to support the 2-dimensional circle,rectangle, square, and regular triangle. 2.The system needs to supportthe 3-dimensional sphere, cylinder, cuboid, cube, and regular triangularprism. 3.Each shape needs to include two methods, perimeter (surfacearea) and area (volume). Note: Design your own inheritance relationshipand properties between each class. You may search the formula tocalculate the perimeter (surface area) and area (volume) of eachgeometric shape.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></figure><h2 id="一些课外记录的笔记">一些课外记录的笔记</h2><h3 id="程序设计的方法">程序设计的方法</h3><ul><li>结构化程序设计：顺序结构、选择结构、循环结构</li><li>面向对象程序设计<ul><li>什么是对象：对象在现实世界中是一个实体或一种事物的概念，不关心对象的内部结构以及实现方法，仅关心它的功能和使用方法</li><li>面向对象的方法是利用<code>抽象</code>、<code>封装</code>等机制，借助于<code>对象、类、继承、消息传递</code>等概念进行软件系统构造的软件开发方法。</li></ul></li></ul><h3 id="一个简单的c语言">一个简单的C++语言</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  cout&lt;&lt;<span class="hljs-string">&quot;hello !&quot;</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;I am a student.&quot;</span>&lt;&lt;endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用iostream的时候，必须使用namespacestd，这样才能正确的使用命名空间std封装的标准程序库中的标识符cin、cout等</p><p>如何将一段代码变为可执行的程序,即如何编译编写好的程序：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">g++ name.cpp -o name.exe<br></code></pre></td></tr></table></figure></p><h3 id="常量">常量</h3><p>常量指的是在程序执行过程中不会改变的量</p><p>一、字面常量<br />- 把常量书写到代码内部，叫字面常量 -可以有整数（整型）、小数（实型），二者统称为数值型常量 -字符型字面常量：由单引号包围的单个字符 -字符串字面常量：以双引号包围的，任意个数个字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-number">21</span>;<span class="hljs-comment">//整型</span><br>  <span class="hljs-number">180.5</span>;<span class="hljs-comment">//实型</span><br>  <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//字符型字面常量</span><br>  <span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-comment">//字符串字面常量</span><br>  <br>  <span class="hljs-comment">//打印</span><br>  cout&lt;&lt;<span class="hljs-number">21</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-number">180.5</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&#x27;a&#x27;</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;abc&quot;</span>&lt;&lt;endl;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>二、符号常量<br />用标识符去定义的常量，给常量一个名字，就是符号常量 -在c语言中使用编译预处理指令#define定义符号常量：#define PI 3.14 -C++中在类型前添加关键词const来定义：const double PI=3.14 const int N = 6- 符号常量的值必须在定义时指定，且不能赋新值</p><h3 id="输入输出">输入输出</h3><h4 id="cin数据输入">cin数据输入</h4><p>语法： <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">数据类型 变量;  <span class="hljs-comment">//声明变量</span><br>cin &gt;&gt; 变量  <span class="hljs-comment">//对变量进行赋值</span><br></code></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> num;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入一个整数:&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; num;<br>cout &lt;&lt; num;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="cout打印输出">cout打印输出</h4><p>输出单份内容 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">cout &lt;&lt;<span class="hljs-string">&quot;Hello,World!&quot;</span>&lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-number">10</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure></p><p>输出多份内容 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">cout &lt;&lt; <span class="hljs-string">&quot;c++ is&quot;</span> &lt;&lt; <span class="hljs-string">&quot; the best &quot;</span>&lt;&lt; <span class="hljs-string">&quot;programming language&quot;</span>&lt;&lt; endl;<br></code></pre></td></tr></table></figure></p><p>注意：<br />非数字的内容必须使用 "" 包围<br />数字可以使用双引号，也可以不用</p><h3 id="标识符和关键字">标识符和关键字</h3><p>一、标识符：表示某类实体的符号（名称），简单理解为<code>起名字</code></p><p>内容限定： - 只允许字母、数字、下划线的组合 - 数字不可开头 -不可使用关键字</p><p>二、标识符的命名规范</p><p>命名的通用规范：</p><p>1、见名知意：任何场景<br />2、下划线命名法：变量命名<br />3、小驼峰：变量、函数（方法）命名<br />4、大驼峰：类命名</p><ul><li>1、符号常量：<ul><li>满足标识符的硬性要求下，若使用英文字母，应全部大写</li></ul></li><li>2、变量：<ul><li>满足标识符的硬性要求下，若使用英文字母，不应全部大写（大小写组合或纯小写）</li></ul></li></ul><p>三、标识符的限制规则 - 字母、数字、下划线组合，数字不开头 -大小写敏感 - 不可使用关键字</p><p>关键字是内置使用的特殊标识符，用户不可占用</p><h3 id="变量的基础应用">变量的基础应用</h3><p>变量：在程序运行中，能存储计算结果或者能够表示值的抽象概念---记录数据</p><p>一、基本用法两步走： - 1、变量的声明（定义） - 语法：变量类型 变量名<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> mun;<br></code></pre></td></tr></table></figure> - 2、变量的赋值 - 语法： <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">num=<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>二、变量的快捷定义： - 1、声明和赋值同步进行 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> age = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></p><ul><li>2、一次性声明多个变量 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a,b,c;<br>a=<span class="hljs-number">10</span>;<br>b=<span class="hljs-number">20</span>;<br>c=<span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure></li><li>3、结合1、2 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>,c=<span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure></li></ul><p>三、常见的变量类型： <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span>  <span class="hljs-comment">//整型</span><br><span class="hljs-type">float</span>  <span class="hljs-comment">//实型</span><br><span class="hljs-type">char</span>  <span class="hljs-comment">//字符型</span><br>string  <span class="hljs-comment">//字符串型</span><br></code></pre></td></tr></table></figure></p><h3 id="变量的基本特征">变量的基本特征</h3><p>变量存储的数据是可以发生改变的，支持： - 多次赋值语句 -各种数学运算</p><p>示例： <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> age;<br>  age = <span class="hljs-number">10</span>;<br>  cout &lt;&lt; age &lt;&lt;endl;<br>  age = <span class="hljs-number">11</span>;<br>  cout &lt;&lt; age &lt;&lt;endl;<br>  age=age+<span class="hljs-number">2</span><br>  cout &lt;&lt; age &lt;&lt;endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="数据类型-整型">数据类型-整型</h3><p>short--短整型<br />int--整形<br />long--长整型<br />long long--长长整型</p><p>使用sizeof（）可以求得数据具体占用的字节数 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">short</span> b=<span class="hljs-number">10</span>;<br><span class="hljs-type">long</span> c=<span class="hljs-number">10</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> d=<span class="hljs-number">10</span>;<br>cout&lt;&lt; <span class="hljs-built_in">sizeof</span>(a) &lt;&lt;endl;<br>cout&lt;&lt; <span class="hljs-built_in">sizeof</span>(b) &lt;&lt;endl;<br>cout&lt;&lt; <span class="hljs-built_in">sizeof</span>(c) &lt;&lt;endl;<br>cout&lt;&lt; <span class="hljs-built_in">sizeof</span>(d) &lt;&lt;endl;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 8  long 变量看机器不定</span><br><span class="hljs-comment">// 8</span><br></code></pre></td></tr></table></figure></p><h3 id="无符号和有符合数字">无符号和有符合数字</h3><p>在c++中，数字是有无符号和有符号之分的 - 无符号：仅仅允许正数参在-2<sup>(n-1)~2</sup>(n-1)-1 - 有符号：可以允许负数存在 0~ 2^n-1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 有符号数中的signed可以省略</span><br><span class="hljs-type">signed</span> <span class="hljs-type">int</span> = <span class="hljs-type">int</span> <br><br><span class="hljs-comment">// 无符号数中的unsigned不可省略</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><h3 id="数据类型-实型">数据类型-实型</h3><p>实型数据默认有符号数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span>    单精度浮点型  <span class="hljs-number">4</span>字节<br><span class="hljs-type">double</span>  双精度浮点型  <span class="hljs-number">8</span>字节<br><span class="hljs-type">long</span> <span class="hljs-type">double</span>  多精度浮点型  <span class="hljs-number">16</span>字节<br></code></pre></td></tr></table></figure><h3 id="数据类型-字符串">数据类型-字符串</h3><p>C语言风格的字符串： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> a[] = <span class="hljs-string">&quot;Hello World&quot;</span>; <span class="hljs-comment">//字符数组形式</span><br><span class="hljs-type">char</span> *b = <span class="hljs-string">&quot;Hello World&quot;</span>;  <span class="hljs-comment">//指针形式</span><br></code></pre></td></tr></table></figure> C++风格字符串:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">string c = <span class="hljs-string">&quot;Hello World&quot;</span>;<br></code></pre></td></tr></table></figure></p><p>在c++代码中可以使用c语言字符串</p><h3 id="字符串的拼接">字符串的拼接</h3><p>使用“+”进行连接：只能限定于字符串和字符串之间的拼接</p><p>C++中有<code>to_string()</code>函数将内容转为字符串类型，对于非字符串需要先转为字符串！</p><p>C++中的字符串拼接示例： <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string a = <span class="hljs-string">&quot;疯狂星期四&quot;</span>;<br>string b = <span class="hljs-string">&quot;V me 50&quot;</span>;<br>string c = a + <span class="hljs-string">&quot;，&quot;</span> + b;<br>cout &lt;&lt; c &lt;&lt; endl;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 疯狂星期四，V me 50</span><br></code></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string a = <span class="hljs-string">&quot;疯狂星期四&quot;</span>;<br>string b = <span class="hljs-string">&quot;V me &quot;</span>;<br><span class="hljs-type">int</span> d = <span class="hljs-number">50</span>;<br>string c = a + <span class="hljs-string">&quot;，&quot;</span> + b + <span class="hljs-built_in">to_string</span>(d);  <span class="hljs-comment">//将50转为字符串类型</span><br>cout &lt;&lt; c &lt;&lt; endl;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 C 语言中，字符串实际上是以空字符 <code>'\0'</code>结尾的字符数组。以下是常见的字符串拼接方法：</p><ol type="1"><li>使用<code>strcat</code>函数<ul><li><code>strcat</code>函数位于<code>&lt;string.h&gt;</code>头文件中。</li><li>语法：<code>char *strcat(char *dest, const char *src)</code>。</li><li>示例： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> str1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-type">char</span> str2[] = <span class="hljs-string">&quot; World&quot;</span>;<br>    <span class="hljs-built_in">strcat</span>(str1, str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>注意事项：<ul><li><code>dest</code>数组要有足够的空间来容纳拼接后的字符串，否则会导致缓冲区溢出错误。</li><li><code>strcat</code> 函数会直接修改 <code>dest</code>所指向的字符串内容。</li></ul></li></ul></li><li>手动拼接<ul><li>思路：通过遍历两个字符串，将第二个字符串的字符逐个复制到第一个字符串的末尾空字符之后。</li><li>示例： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> str1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-type">char</span> str2[] = <span class="hljs-string">&quot; World&quot;</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (str1[i]!= <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (str2[j]!= <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        str1[i++] = str2[j++];<br>    &#125;<br>    str1[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>C 语言和 C++字符串拼接的区别</p><ol type="1"><li>数据类型和安全性<ul><li>C语言使用字符数组来表示字符串，容易出现缓冲区溢出等安全问题，因为它不进行边界检查。</li><li>C++的<code>std::string</code>类会自动管理内存，进行边界检查，并且在拼接时会自动处理内存分配，相对更安全。</li></ul></li><li>操作便捷性<ul><li>C语言需要借助<code>strcat</code>函数或手动复制字符来实现拼接，代码相对繁琐。</li><li>C++使用<code>+</code>运算符和<code>append</code>方法，操作更加直观和便捷，代码更简洁易读。</li></ul></li><li>头文件<ul><li>C语言的字符串操作函数通常包含在<code>&lt;string.h&gt;</code>头文件中。</li><li>C++的<code>std::string</code>相关操作包含在<code>&lt;string&gt;</code>头文件中。</li></ul></li></ol><h3 id="数据类型-布尔型">数据类型-布尔型</h3><p>在程序中表达互斥的概念</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-literal">true</span>  <span class="hljs-number">1</span><br><span class="hljs-literal">false</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>用数据类型<code>bool</code>来表示</p><h3 id="字符函数库-cctype">字符函数库 cctype</h3><p>C++ 从 C 语言继承了一个与字符相关的、非常方便的函数软件包，它可以简化诸如确定字符是否为大写字母、数字、标点符号等工作，这些函数的原型是在头文件cctype（老式的风格中为 ctype.h）中定义的。例如，如果 ch 是一个字母，则 isalpha(ch) 函数返回一个非零值，否则返回0。同样，如果 ch 是标点符号（如逗号或句号），函数 ispunct(ch) 将返回true。（注意这些函数的返回类型为 int，而不是 bool， 但通常 bool转换能够将它们视为bool 类型）</p><ul><li>isalpha() 用来检查字符是否为字母字符；</li><li>isdigit() 用来测试字符是否为数字字符（0~9），如 3；</li><li>isspace() 用来测试字符是否为空白，包括换行符、空格和制表符；</li><li>ispunct() 用来测试字符是否为标点符号。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> a = <span class="hljs-string">&#x27;H&#x27;</span>;<br><span class="hljs-type">char</span> b = <span class="hljs-string">&#x27;3&#x27;</span>;<br><span class="hljs-type">char</span> c = <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-type">char</span> d = <span class="hljs-string">&#x27;,&#x27;</span>;<br><span class="hljs-keyword">if</span> ((a &gt;= <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">and</span> a &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) <span class="hljs-built_in">or</span> (a &gt;= <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">and</span> a &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)) <br>cout &lt;&lt; <span class="hljs-string">&quot;是一个字符&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isalpha</span>(a)) <br>cout &lt;&lt; <span class="hljs-string">&quot;是一个字符too&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//是一个字符</span><br><span class="hljs-comment">//是一个字符too</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(b))<br>cout &lt;&lt; <span class="hljs-string">&quot;测试字符是一个数字&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isspace</span>(c))<br>cout&lt;&lt;<span class="hljs-string">&quot;测试字符是一个空白&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">ispunct</span>(d))<br>cout&lt;&lt;<span class="hljs-string">&quot;测试字符是一个标点&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运算符">运算符</h3><p>C++内置的运算符有： - 算数运算符 - 赋值运算符 - 比较运算符 -逻辑运算符 - 位运算符 - 三目运算符</p><p><strong>一、算术运算符</strong> - <strong>加法运算符（+）</strong>：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> c = a + b; <span class="hljs-comment">// c 的值为 8</span><br></code></pre></td></tr></table></figure> - <strong>减法运算符（-）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> d = a - b; <span class="hljs-comment">// d 的值为 2</span><br></code></pre></td></tr></table></figure> -**乘法运算符（*）<strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> e = a * b; <span class="hljs-comment">// e 的值为 15</span><br></code></pre></td></tr></table></figure> -</strong>除法运算符（/）<strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> f = a / b; <span class="hljs-comment">// f 的值为 1（因为是整数除法，结果取整）</span><br></code></pre></td></tr></table></figure> -</strong>取余运算符（%）**： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> g = a % b; <span class="hljs-comment">// g 的值为 2</span><br></code></pre></td></tr></table></figure></p><p><strong>二、赋值运算符</strong> -<strong>简单赋值运算符（=）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure> -**复合赋值运算符（+=、-=、*=、/=、%= 等）**： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> y = <span class="hljs-number">5</span>;<br>y += <span class="hljs-number">3</span>; <span class="hljs-comment">// 相当于 y = y + 3，y 的值变为 8</span><br>y -= <span class="hljs-number">2</span>; <span class="hljs-comment">// y 的值变为 6</span><br>y *= <span class="hljs-number">4</span>; <span class="hljs-comment">// y 的值变为 24</span><br>y /= <span class="hljs-number">3</span>; <span class="hljs-comment">// y 的值变为 8</span><br>y %= <span class="hljs-number">5</span>; <span class="hljs-comment">// y 的值变为 3</span><br></code></pre></td></tr></table></figure></p><p><strong>三、比较运算符</strong> - <strong>等于运算符（==）</strong>：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> result1 = (a == b); <span class="hljs-comment">// 这里 result1 为 false，因为 5 不等于 3</span><br></code></pre></td></tr></table></figure> - <strong>不等于运算符（!=）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> result2 = (a!= b); <span class="hljs-comment">// result2 为 true</span><br></code></pre></td></tr></table></figure>- <strong>大于运算符（&gt;）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> result3 = (a &gt; b); <span class="hljs-comment">// result3 为 true</span><br></code></pre></td></tr></table></figure> -<strong>小于运算符（&lt;）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> result4 = (a &lt; b); <span class="hljs-comment">// result4 为 false</span><br></code></pre></td></tr></table></figure> -<strong>大于等于运算符（&gt;=）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> result5 = (a &gt;= b); <span class="hljs-comment">// result5 为 true</span><br></code></pre></td></tr></table></figure> -<strong>小于等于运算符（&lt;=）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> result6 = (a &lt;= b); <span class="hljs-comment">// result6 为 false</span><br></code></pre></td></tr></table></figure></p><p><strong>四、逻辑运算符</strong> -<strong>逻辑与运算符（&amp;&amp;）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> p = <span class="hljs-literal">true</span>;<br><span class="hljs-type">bool</span> q = <span class="hljs-literal">false</span>;<br><span class="hljs-type">bool</span> r = p &amp;&amp; q; <span class="hljs-comment">// r 为 false，因为只有当两个操作数都为 true 时，结果才为 true</span><br></code></pre></td></tr></table></figure> -<strong>逻辑或运算符（||）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> s = p || q; <span class="hljs-comment">// s 为 true，因为只要有一个操作数为 true，结果就为 true</span><br></code></pre></td></tr></table></figure> -<strong>逻辑非运算符（!）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> t =!p; <span class="hljs-comment">// t 为 false，因为!对操作数取反</span><br></code></pre></td></tr></table></figure></p><ul><li><strong>其他表示方式</strong></li></ul><p>并不是所有的键盘都提供了用作逻辑运算符的符号</p><p>因此C++标准提供了另一种表示方式，如表所示，标识符and、or和not都是C++保留字，这意味着不能将它们用作变量名等。它们不是关键字，因为它们都是已有语言特性的另一种表示方式。另外，它们并不是C语言中的保留字，但C语言程序可以将它们用作运算符，只要在程序中包含了头文件iso646.h。</p><p>C++不要求使用头文件 <imgsrc="https://pic.imgdb.cn/item/671c4c36d29ded1a8cb474f8.png" /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (a <span class="hljs-keyword">and</span> b)<br>cout&lt;&lt;<span class="hljs-string">&quot;hhh&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>五、位运算符</strong> -<strong>按位与运算符（&amp;）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> m = <span class="hljs-number">5</span>; <span class="hljs-comment">// 二进制为 0101</span><br><span class="hljs-type">int</span> n = <span class="hljs-number">3</span>; <span class="hljs-comment">// 二进制为 0011</span><br><span class="hljs-type">int</span> o = m &amp; n; <span class="hljs-comment">// 二进制 0101 &amp; 0011 = 0001，即 o 的值为 1</span><br></code></pre></td></tr></table></figure> -<strong>按位或运算符（|）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> p = m | n; <span class="hljs-comment">// 二进制 0101 | 0011 = 0111，p 的值为 7</span><br></code></pre></td></tr></table></figure> -<strong>按位异或运算符（^）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> q = m ^ n; <span class="hljs-comment">// 二进制 0101 ^ 0011 = 0110，q 的值为 6</span><br></code></pre></td></tr></table></figure> -<strong>左移运算符（&lt;&lt;）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> r = m &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 5 的二进制 0101 左移一位变为 1010，即 r 的值为 10</span><br></code></pre></td></tr></table></figure> -<strong>右移运算符（&gt;&gt;）</strong>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> s = m &gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 5 的二进制 0101 右移一位变为 0010，s 的值为 2</span><br></code></pre></td></tr></table></figure></p><p><strong>六、三目运算符（也称为条件运算符）</strong>：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> u = (a &gt; b)? a : b; <span class="hljs-comment">// 如果 a 大于 b，u 的值为 a，否则为 b</span><br></code></pre></td></tr></table></figure></p><h3 id="if逻辑判断语句">if逻辑判断语句</h3><p>在C++中，<code>if</code>语句是一种基本的控制流结构，用于根据条件执行不同的代码块</p><p><strong>1. 基本语法</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (condition) &#123;<br>    <span class="hljs-comment">// 如果条件为真（true）执行的代码块</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>condition</code>是一个布尔表达式（结果为<code>true</code>或<code>false</code>）。如果<code>condition</code>为<code>true</code>，则执行花括号<code>&#123;&#125;</code>内的代码块；如果为<code>false</code>，则跳过该代码块。</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">3</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;x 大于 3&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，因为<code>5</code>大于<code>3</code>，所以条件<code>x &gt; 3</code>为<code>true</code>，会执行输出语句</p><p><strong>2. <code>if-else</code>结构</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (condition) &#123;<br>    <span class="hljs-comment">// 如果条件为真执行的代码块</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果条件为假执行的代码块</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当condition为true时执行if块中的代码，否则执行else块中的代码</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (y &gt; <span class="hljs-number">3</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;y 大于 3&quot;</span> &lt;&lt; std::endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;y 不大于 3&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里因为<code>2</code>不大于<code>3</code>，所以会执行<code>else</code>块中的代码。</p><p><strong>3. <code>if-else if-else</code>结构</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (condition1) &#123;<br>    <span class="hljs-comment">// 如果条件 1 为真执行的代码块</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (condition2) &#123;<br>    <span class="hljs-comment">// 如果条件 2 为真执行的代码块</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (...) &#123;<br>    <span class="hljs-comment">// 更多的 else if 条件和代码块</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果所有条件都为假执行的代码块</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以根据多个条件进行判断，依次检查每个条件，直到找到一个为真的条件并执行相应的代码块，或者如果所有条件都为假，则执行最后的<code>else</code>块中的代码。</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> z = <span class="hljs-number">7</span>;<br><span class="hljs-keyword">if</span> (z &lt; <span class="hljs-number">5</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;z 小于 5&quot;</span> &lt;&lt; std::endl;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (z &lt; <span class="hljs-number">10</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;z 大于等于 5 且小于 10&quot;</span> &lt;&lt; std::endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;z 大于等于 10&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，因为<code>7</code>大于等于<code>5</code>且小于<code>10</code>，所以会执行第二个<code>else if</code>块中的代码。</p><p><strong>4. 嵌套的 <code>if</code> 语句</strong></p><p>可以在<code>if</code>、<code>else</code>或<code>else if</code>代码块中嵌套另一个<code>if</code>语句。</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (b &gt; <span class="hljs-number">3</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;a 大于 2 且 b 大于 3&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里首先判断<code>a &gt; 2</code>，如果为真，再判断<code>b &gt; 3</code>，如果也为真，则执行输出语句。</p><h3 id="switch-case语句">switch-case语句</h3><p>在 C++ 中，<code>switch</code>控制语句是一种多路分支结构，它允许根据一个表达式的值来选择一组语句执行。</p><p>基本语法介绍： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">switch</span> (expression) &#123;<br>  <span class="hljs-keyword">case</span> constant-expression1:<br>    <span class="hljs-comment">// 语句序列</span><br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> constant-expression2:<br>    <span class="hljs-comment">// 语句序列</span><br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// 默认情况下的语句序列</span><br>&#125;<br></code></pre></td></tr></table></figure> 规则： - <code>expression</code>必须能够产生一个整数或枚举类型的值。 - <code>case</code> 后面的<code>constant-expression</code> 必须是编译时常量，并且每个<code>case</code> 标签必须唯一。 - <code>break</code> 语句用来终止当前<code>case</code> 并跳出整个 <code>switch</code> 语句。 - 如果没有<code>break</code> 语句，程序会继续执行下一个 <code>case</code> 直到遇到<code>break</code> 或 <code>switch</code> 结束。 - <code>default</code>是可选的，如果没有匹配的 <code>case</code>，则执行 <code>default</code>下的语句。</p><p>根据用户输入的数字来显示相应的星期几名称 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> day;<br>  cout &lt;&lt; <span class="hljs-string">&quot;Enter a number from 1 to 7: &quot;</span>;<br>  cin &gt;&gt; day;<br><br>  <span class="hljs-keyword">switch</span> (day) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Monday&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Tuesday&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Wednesday&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Thursday&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Friday&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Saturday&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Sunday&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Invalid input&quot;</span> &lt;&lt; endl;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>定义一个枚举类型来表示星期几，并使用它作为 switch 表达式的类型<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Weekday</span> &#123; Mon, Tue, Wed, Thu, Fri, Sat, Sun &#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Weekday today = Thu;<br><br>  <span class="hljs-keyword">switch</span> (today) &#123;<br>    <span class="hljs-keyword">case</span> Mon:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Today is Monday.&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Tue:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Today is Tuesday.&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Wed:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Today is Wednesday.&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Thu:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Today is Thursday.&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Fri:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Today is Friday.&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Sat:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Today is Saturday.&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Sun:<br>      cout &lt;&lt; <span class="hljs-string">&quot;Today is Sunday.&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="枚举类型">枚举类型</h3><p>在 C++中，枚举类型是一种数据类型，它允许我们定义一组命名的常量。枚举类型通常用于表示一个有限集合，例如一周中的每一天、月份、颜色等。枚举类型可以让你为整数常量赋予有意义的名字，这样可以使程序更具可读性和可维护性。</p><p>一、语法介绍 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">enumeration</span>-name &#123;<br>  enumerator1,<br>  enumerator2,<br>  <span class="hljs-comment">// 更多枚举成员...</span><br>&#125;;<br></code></pre></td></tr></table></figure> 每个 <code>enumerator</code>都是一个整数常量，默认情况下，第一个枚举成员的值为0，后续的枚举成员的值依次递增 1。也可以显式地为枚举成员指定值：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">enumeration</span>-name &#123;<br>  enumerator1 = <span class="hljs-number">10</span>,<br>  enumerator2,<br>  enumerator3 = <span class="hljs-number">20</span>,<br>  enumerator4<br>&#125;;<br></code></pre></td></tr></table></figure></p><p>二、声明变量并赋值 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">enumeration-name variable_name;<br>variable_name = enumerator1;  <span class="hljs-comment">// 赋值</span><br><span class="hljs-comment">//或者</span><br>enumeration-name variable_name = enumerator1;<br></code></pre></td></tr></table></figure></p><p>三、枚举类型的范围</p><p>默认情况下，枚举类型的底层类型取决于枚举成员的最大值。从 C++11开始，可以指定枚举的底层类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这里使用 enum class 形式定义枚举，并指定了底层类型为 unsigned char</span><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Weekday</span> : <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> &#123;<br>  Monday,<br>  Tuesday,<br>  Wednesday,<br>  Thursday,<br>  Friday,<br>  Saturday,<br>  Sunday<br>&#125;;<br></code></pre></td></tr></table></figure><p>四、枚举成员的访问</p><p>从 C++11 开始，我们可以使用作用域解析运算符 <code>::</code>来访问枚举成员： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Weekday today = Weekday::Friday;<br></code></pre></td></tr></table></figure></p><p>如果使用的是 <code>enum</code> 而不是<code>enum class</code>，那么枚举成员会被提升到作用域内，可以直接使用它们的名字：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Weekday today = Friday;<br></code></pre></td></tr></table></figure> ### while循环语句 在 C++ 中，<code>while</code>循环语句是一种控制结构，它允许我们重复执行一段代码，只要给定的条件为真（非零）,<code>while</code> 循环的基本语法如下： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span> (condition) &#123;<br>  <span class="hljs-comment">// 循环体</span><br>  <span class="hljs-comment">// 这里的代码会在条件为真时重复执行</span><br>&#125;<br></code></pre></td></tr></table></figure> 使用<code>while</code> 循环来累加从 1 到 100 的整数，并输出累加的结果：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 初始化累加器</span><br>  <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;    <span class="hljs-comment">// 初始化计数器</span><br><br>  <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>    sum += i;   <span class="hljs-comment">// 累加当前值</span><br>    i++;        <span class="hljs-comment">// 更新计数器</span><br>  &#125;<br><br>  cout &lt;&lt; <span class="hljs-string">&quot;Sum of numbers from 1 to 100 is: &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// Sum of numbers from 1 to 100 is: 5050</span><br></code></pre></td></tr></table></figure> ### do-while循环语句 <code>do-while</code> 循环是 C/C++语言中的一种循环控制结构，它的特点是<code>至少会执行一次循环体内的代码</code>，然后才检查循环条件。这与<code>while</code> 循环不同，在 <code>while</code>循环中，如果初始条件就不满足，则循环体内的代码不会被执行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">do</span> &#123;<br>  <span class="hljs-comment">// 循环体</span><br>  <span class="hljs-comment">// 这里的代码会至少执行一次</span><br>&#125; <span class="hljs-keyword">while</span> (condition);  <span class="hljs-comment">//注意这里有分号收尾</span><br></code></pre></td></tr></table></figure><p><code>do-while</code> 循环的工作流程:<br />1、执行循环体：首先执行循环体内的代码。<br />2、条件检查：执行完循环体后，检查 <code>condition</code>是否为真。<br />3、重复步骤 1 和 2：如果 <code>condition</code>为真，则再次执行循环体。这个过程会一直重复，直到 <code>condition</code>变为假为止。</p><h3 id="for循环语句">for循环语句</h3><p><code>for</code> 循环是 C/C++语言中的一种循环控制结构，它允许你重复执行一段代码，通常用于已知循环次数的情况。<code>for</code>循环提供了<code>初始化</code>、<code>条件检查</code>和<code>迭代</code>三个部分在一个简洁的语法中。</p><p>基本语法： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (initialization; condition; iteration) &#123;<br>  <span class="hljs-comment">// 循环体</span><br>  <span class="hljs-comment">// 这里的代码会在条件为真时重复执行</span><br>&#125;<br></code></pre></td></tr></table></figure> -Initialization：初始化部分只执行一次，通常用于设置循环变量的初始值。 -Condition：条件部分在每次循环开始之前被检查。如果条件为真（非零），则执行循环体。如果条件为假，则退出循环。-Iteration：迭代部分在每次循环体执行完毕后执行，通常用于更新循环变量。</p><p>工作流程:<br />- 1、初始化：首先执行初始化部分。 -2、条件检查：然后检查条件部分。如果条件为真，则执行循环体内的代码。 -3、执行循环体：执行完循环体后，执行迭代部分。 - 4、重复步骤 2 和3：再次检查条件部分，如果条件仍然为真，则再次执行循环体。这个过程会一直重复，直到条件变为假为止。</p><p>特殊用法:<br />- 1、空循环体：可以在 <code>for</code>循环中使用空循环体，通常用于延时或等待操作。 -2、省略部分：<code>for</code>循环的初始化、条件和迭代部分都可以被省略，但分号 <code>;</code>必须保留。 - 3、多个变量：可以在初始化和迭代部分声明和更新多个变量。</p><h3 id="循环中断语句">循环中断语句</h3><p>在 C++ 中，我们可以使用 <code>break</code> 和 <code>continue</code>语句来中断循环。 - <code>break</code> 语句用于中断循环，即跳出循环。 -<code>continue</code>语句用于跳过当前循环的剩余部分，直接进入下一次循环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) &#123;<br>      <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 当 i 等于 5 时，退出循环</span><br>    &#125;<br>    cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>  &#125;<br>  cout &lt;&lt; <span class="hljs-string">&quot;Loop ended.&quot;</span> &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 1 2 3 4 Loop ended.</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 当 i 是偶数时，跳过本次循环的剩余部分</span><br>    &#125;<br>    sum += i;  <span class="hljs-comment">// 只对奇数求和</span><br>  &#125;<br>  cout &lt;&lt; <span class="hljs-string">&quot;Sum of odd numbers from 1 to 10 is: &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// Sum of odd numbers from 1 to 10 is: 25</span><br></code></pre></td></tr></table></figure><h3 id="goto语句">goto语句</h3><p><code>goto</code>语句是一种无条件跳转语句，它允许程序直接跳转到程序中的另一个指定位置。<code>goto</code>语句在早期的编程实践中非常常见，但在现代编程风格中，它通常被认为是不良实践，因为它可能导致程序难以理解和维护。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">goto</span> label;<br>label:<br>  <span class="hljs-comment">// 这里是跳转的目标位置</span><br></code></pre></td></tr></table></figure> 示例： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>start:<br>  cout &lt;&lt; <span class="hljs-string">&quot;Count: &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>  i++;<br><br>  <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">5</span>) &#123;<br>    <span class="hljs-keyword">goto</span> start;  <span class="hljs-comment">// 当 i 小于 5 时，跳回到 start 标签</span><br>  &#125;<br><br>  cout &lt;&lt; <span class="hljs-string">&quot;Loop ended.&quot;</span> &lt;&lt; endl;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// Count: 0</span><br><span class="hljs-comment">// Count: 1</span><br><span class="hljs-comment">// Count: 2</span><br><span class="hljs-comment">// Count: 3</span><br><span class="hljs-comment">// Count: 4</span><br><span class="hljs-comment">// Loop ended.</span><br></code></pre></td></tr></table></figure> 在大多数情况下，可以使用if、while、for 和 do-while 等结构化的控制语句来替代 goto</p><h3 id="输入信息控制循环">输入信息控制循环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;输入字符串，以#结束:&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        cin &gt;&gt; ch;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        count++;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;共输入&quot;</span> &lt;&lt; count &lt;&lt; <span class="hljs-string">&quot;个字符&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 输入字符串，以#结束:abcdefg#</span><br><span class="hljs-comment">// 共输入7个字符</span><br></code></pre></td></tr></table></figure><h3 id="输出杨辉三角">输出杨辉三角</h3><h3 id="数组">数组</h3><p>数组的特点： -1、有序性：数组中的元素是有顺序的，可以通过索引来访问特定位置的元素 -2、同类型：数组中的所有元素必须是相同的数据类型 -3、连续存储：数组的元素在内存中是连续存储的，这使得随机访问非常快<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> numbers[<span class="hljs-number">10</span>];  <span class="hljs-comment">//定义一个包含10个整数的数组</span><br><br>numbers[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 设置第一个元素为10</span><br><span class="hljs-type">int</span> firstElement = numbers[<span class="hljs-number">0</span>];  <span class="hljs-comment">// 获取第一个元素</span><br><br><span class="hljs-type">int</span> numbers[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;  <span class="hljs-comment">// 定义并初始化数组</span><br><br><span class="hljs-comment">//计算数组的长度</span><br><span class="hljs-type">int</span> length = <span class="hljs-built_in">sizeof</span>(numbers) / <span class="hljs-built_in">sizeof</span>(numbers[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure></p><h3 id="多维数组">多维数组</h3><p>在C++中，多维数组是用来存储具有多个维度的数据结构。最常见的是二维数组，但也可以有三维或更高维度的数组。下面将详细介绍如何在C++中声明、初始化和使用多维数组</p><p>声明： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 声明一个3行4列的二维整型数组</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br><br><span class="hljs-comment">// 声明一个2x3x4的三维浮点型数组</span><br><span class="hljs-type">float</span> cube[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure></p><p>初始化： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 初始化一个3行4列的二维整型数组</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;,<br>    &#123;<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;<br>&#125;;<br><br><span class="hljs-comment">// 完全初始化一个2x3x4的三维浮点型数组</span><br><span class="hljs-type">float</span> cube[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<br>    &#123;&#123;&#123;<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>&#125;, &#123;<span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">8.0</span>&#125;, &#123;<span class="hljs-number">9.0</span>, <span class="hljs-number">10.0</span>, <span class="hljs-number">11.0</span>, <span class="hljs-number">12.0</span>&#125;&#125;,<br>     &#123;&#123;<span class="hljs-number">13.0</span>, <span class="hljs-number">14.0</span>, <span class="hljs-number">15.0</span>, <span class="hljs-number">16.0</span>&#125;, &#123;<span class="hljs-number">17.0</span>, <span class="hljs-number">18.0</span>, <span class="hljs-number">19.0</span>, <span class="hljs-number">20.0</span>&#125;, &#123;<span class="hljs-number">21.0</span>, <span class="hljs-number">22.0</span>, <span class="hljs-number">23.0</span>, <span class="hljs-number">24.0</span>&#125;&#125;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 部分初始化</span><br><span class="hljs-type">int</span> arr2[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, <span class="hljs-comment">// 第一行</span><br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;,       <span class="hljs-comment">// 第二行，剩余位置自动填充0</span><br>    &#123;&#125;            <span class="hljs-comment">// 第三行为空，所有位置自动填充0</span><br>&#125;;<br></code></pre></td></tr></table></figure></p><p>访问： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;,<br>    &#123;<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;<br>&#125;;<br><br><span class="hljs-comment">// 访问第一行第二列的元素</span><br><span class="hljs-type">int</span> element = arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]; <span class="hljs-comment">// element 的值为 2</span><br><br><span class="hljs-comment">// 遍历整个数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;arr[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;][&quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot;] = &quot;</span> &lt;&lt; arr[i][j] &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>多维数组的内部布局：<br />多维数组在内存中是连续存储的，按照行优先（row-majororder）或列优先（column-major order）顺序存储。C++默认采用行优先顺序。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;,<br>    &#123;<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;<br>&#125;;<br><br><span class="hljs-comment">// 获取数组的地址</span><br><span class="hljs-built_in">int</span> (*p)[<span class="hljs-number">4</span>] = arr; <span class="hljs-comment">// p指向数组的第一行</span><br><br><span class="hljs-comment">// 获取某一行的地址</span><br><span class="hljs-type">int</span> *row = arr[<span class="hljs-number">1</span>]; <span class="hljs-comment">// row指向第二行的第一个元素</span><br><br><span class="hljs-comment">// 获取某个元素的地址</span><br><span class="hljs-type">int</span> *element = &amp;arr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]; <span class="hljs-comment">// element指向第二行第三个元素</span><br></code></pre></td></tr></table></figure></p><h3 id="指针">指针</h3><ul><li>指针基础概念：<ul><li>定义：指针是一个变量，它的值是另一个变量的内存地址</li><li>声明：声明指针时，在变量类型后面加上星号<code>*</code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *p; <span class="hljs-comment">// 声明一个指向int类型的指针</span><br></code></pre></td></tr></table></figure></li></ul></li><li>初始化：指针可以被初始化为<code>nullptr</code>或指向一个已存在的变量的地址<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p = &amp;x; <span class="hljs-comment">// p现在指向x的地址</span><br><span class="hljs-type">int</span> *q = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// q未指向任何地址</span><br></code></pre></td></tr></table></figure></li><li>解引用:<br />使用星号<code>*</code>来获取指针所指向的变量的值 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> value = *p; <span class="hljs-comment">// value等于10</span><br></code></pre></td></tr></table></figure></li><li>取地址:<br />使用<code>&amp;</code>运算符获取变量的地址 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *addr = &amp;x; <span class="hljs-comment">// addr等于p</span><br></code></pre></td></tr></table></figure></li><li>指针运算： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> *ptr = &amp;arr[<span class="hljs-number">0</span>];<br>ptr++; <span class="hljs-comment">// ptr现在指向arr[1]</span><br>*ptr = <span class="hljs-number">10</span>; <span class="hljs-comment">// arr[1]现在等于10</span><br></code></pre></td></tr></table></figure></li><li>指针比较： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;;<br>    <span class="hljs-type">int</span>* ptr = &amp;arr[<span class="hljs-number">0</span>];<br>    ptr++; <span class="hljs-comment">// ptr现在指向arr[1]</span><br>    <span class="hljs-keyword">if</span> (ptr == &amp;arr[<span class="hljs-number">1</span>]) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ptr points to the same address as arr[1]&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li>动态内存分配：<br />使用<code>new</code>分配内存，使用<code>delete</code>释放内存:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *data = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>; <span class="hljs-comment">// 分配一个int大小的空间</span><br>*data = <span class="hljs-number">42</span>;          <span class="hljs-comment">// 设置值</span><br><span class="hljs-keyword">delete</span> data;         <span class="hljs-comment">// 释放内存</span><br></code></pre></td></tr></table></figure></li><li>数组的动态分配:<br />使用<code>new[]</code>分配数组空间，使用<code>delete[]</code>释放<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *array = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br>array[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">delete</span>[] array;<br></code></pre></td></tr></table></figure> ### 函数中的指针</li><li>传入指针: 可以将指针作为参数传递给函数，从而改变原函数外部的数据。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setZero</span><span class="hljs-params">(<span class="hljs-type">int</span> *p)</span> </span>&#123;<br>    *p = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">setZero</span>(&amp;x);<br>    std::cout &lt;&lt; x &lt;&lt; std::endl; <span class="hljs-comment">// 输出0</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>返回指针: 函数可以返回一个指针 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> *<span class="hljs-title">getPointer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> val = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> &amp;val;<br>&#125;<br></code></pre></td></tr></table></figure> ### 指针与数组</li><li>数组名作为指针: 数组名实际上是一个指向数组第一个元素的常量指针<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> *ptr = arr; <span class="hljs-comment">// ptr指向arr[0]</span><br></code></pre></td></tr></table></figure></li><li>指针与数组的区别: 数组名不能被重新赋值，而指针可以 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">arr = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 错误</span><br>ptr = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure>### 指针与引用</li><li>引用: 引用不是指针，但它提供了一种别名的方式来访问同一变量<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;ref = x; <span class="hljs-comment">// ref是x的引用</span><br>ref = <span class="hljs-number">20</span>;     <span class="hljs-comment">// x现在等于20</span><br></code></pre></td></tr></table></figure></li><li>区别:引用必须在声明时初始化，并且不能被改变；指针可以在任何时候被重新赋值<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *p = &amp;x;<br>p = &amp;ref; <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure> ### 指针注意事项</li><li>空指针: 指针在未被正确初始化之前不应该被解引用。</li><li>野指针:指向已释放内存的指针被称为野指针，使用野指针会导致未定义行为。</li><li>悬垂指针: 当指针指向的内存被释放后，该指针就成为悬垂指针。</li></ul><h3 id="练习题">练习题</h3><p>1、 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    a = b = c = <span class="hljs-number">1</span>;<br>    ++a ||++b &amp;&amp; ++c;<br>    cout &lt;&lt; a;<br>    cout &lt;&lt; b;<br>    cout &lt;&lt; c;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure> 考察的内容：<br />一、运算符优先级：<br />- &amp;&amp; 的优先级高于 || - ++ 前缀递增运算符的优先级高于 &amp;&amp;和 ||</p><p>二、短路求值： - ||运算符遵循左短路原则：如果左边的表达式为真，则右边的表达式不会被计算。 -&amp;&amp;运算符遵循左短路原则：如果左边的表达式为假，则右边的表达式不会被计算。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 解析表达式：</span><br>++a || ++b &amp;&amp; ++c 可以按照运算符优先级拆分为：<br>++a || (++b &amp;&amp; ++c)<br>因为 ++a 会将 a 的值从 <span class="hljs-number">1</span> 增加到 <span class="hljs-number">2</span>，而 <span class="hljs-number">2</span> 不等于 <span class="hljs-number">0</span>（即 <span class="hljs-literal">true</span>），所以 ++a 的结果为 <span class="hljs-literal">true</span><br>由于 || 运算符遵循左短路原则，++b &amp;&amp; ++c 这部分不会被计算，因为 ++a 的结果已经是 <span class="hljs-literal">true</span>，无论 ++b &amp;&amp; ++c 的结果如何，整个表达式的值都将为 <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure> 2、 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;c:\\tools\book.txt&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// c:\toolook.txt</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能原理复习7</title>
    <link href="/2024/06/29/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-7/"/>
    <url>/2024/06/29/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-7/</url>
    
    <content type="html"><![CDATA[<h2 id="智能优化算法问题">智能优化算法问题</h2><p>复习目标：</p><p>对于三种算法的流程掌握</p><h3 id="一ga">一、GA</h3><p><code>宏观认知：既能解决离散优化问题，又能解决连续优化问题</code></p><p>算法流程：</p><figure><img src="https://pic.imgdb.cn/item/667f7061d9c307b7e9d3f931.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>选择策略：轮盘赌</p><figure><img src="https://pic.imgdb.cn/item/667f7003d9c307b7e9d378d5.png"alt="https://pic.imgdb.cn/item/667f7003d9c307b7e9d378d5.png" /><figcaptionaria-hidden="true">https://pic.imgdb.cn/item/667f7003d9c307b7e9d378d5.png</figcaption></figure><p>交叉策略：掩码的概念，哪里换哪里不换（0不换，1换）</p><figure><img src="https://pic.imgdb.cn/item/667f701cd9c307b7e9d3986c.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>结束策略：设置固定的迭代次数、还是达到目标精度</p><h3 id="二pso">二、PSO</h3><p><code>宏观认知：只能解决连续优化问题</code></p><p>PSO 不能解决离散优化问题（如TSP旅行商问题）</p><p>算法流程：</p><figure><img src="https://pic.imgdb.cn/item/667f704dd9c307b7e9d3dcde.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>更新公式：</p><figure><img src="https://pic.imgdb.cn/item/667f70dad9c307b7e9d4a308.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>pbest 粒子自身最好的位置</p><p>gbest 全局最优的位置</p><h3 id="三aco">三、ACO</h3><p><code>宏观认知：只能解决离散优化问题</code></p><p>算法流程：</p><figure><img src="https://pic.imgdb.cn/item/667f7167d9c307b7e9d553a9.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h2 id="聚类">聚类</h2><p>聚类的框架：</p><figure><img src="https://pic.imgdb.cn/item/667f7b1fd9c307b7e9e363be.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>具体的聚类方法-对于聚类结果的评价</p><p>复习目标：</p><h3 id="k-means">k-means</h3><p>表述算法流程：</p><p>1、随机选取k个聚类中心</p><p>2、将每个数据点分配给距离最近的聚类中心点</p><p>3、更新聚类中心</p><p>4、重复第2、3步，直到没有点的分配再发生变化或达到预期的迭代次数</p><p>https://zhuanlan.zhihu.com/p/667109831</p><p>缺陷：需要在第一步强制的确定k值；<code>只能处理凸的情况</code></p><h3 id="agens-vs-diana">AGENS Vs DIANA</h3><p>参考链接： http://t.csdnimg.cn/qngh4</p><p>层次聚类 （HierarchicalClustering）就是按照某种方法进行层次分类，直到满足某种条件为止。层次聚类主要分成两类</p><p><code>凝聚</code>：从下到上。首先将每个对象作为一个簇，然后合并这些原子簇为越来越大的簇，直到所有的对象都在一个簇中，或者满足某个终结条件</p><p><code>分裂</code>：从上到下。首先将所有对象置于同一个簇中，然后逐渐细分为越来越小的簇，直到每个对象自成一簇，或者达到了某个终止条件</p><p>掌握算法流程</p><h4 id="diana-分裂层次聚类">DIANA 分裂层次聚类</h4><p>分裂的层次聚类方法使用<code>自顶向下的策略</code>把对象划分到层次结构中。从包含所有对象的簇开始，每一步分裂一个簇，<code>直到仅剩单点簇或者满足用户指定的簇数</code>为止</p><p>DIANA算法是典型的层次分裂聚类算法</p><p>DIANA算法中用到如下两个定义</p><p>簇的直径：计算一个簇中任意两个数据点之间的欧式距离，选取距离中的最大值作为簇的直径</p><p>平均相异度：两个数据点之间的平均距离</p><p>DIANA算法描述如下</p><figure><img src="https://pic.imgdb.cn/item/667f91f8d9c307b7e9ffa472.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h4 id="agnes-凝聚层次聚类">AGNES 凝聚层次聚类</h4><p>凝聚层次聚类AGNES</p><p>凝聚的层次聚类方法使用自底向上的策略把对象组织到层次结构中。开始时以每个对象作为一个簇，每一步合并两个最相似的簇。</p><p>AGNES算法是典型的凝聚层次聚类，起始将每个对象作为一个簇，然后根据合并准则逐步合并这些簇。</p><p>两个簇间的相似度由这两个不同簇中距离最近的数据点的相似度确定。</p><p>聚类的合并过程反复进行直到所有对象最终满足终止条件设置的簇数目</p><p>AGNES算法描述如下</p><figure><img src="https://pic.imgdb.cn/item/667f93e9d9c307b7e901f160.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667f80d9d9c307b7e9ea01aa.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667f80e8d9c307b7e9ea1338.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667f9483d9c307b7e902ac5a.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>会根据矩阵提供算法流程的细节</p><h3 id="dbscan-基于密度的聚类">DBSCAN 基于密度的聚类</h3><p>参考链接： http://t.csdnimg.cn/Ndt47</p><p>http://t.csdnimg.cn/BL875</p><p>基于密度的带有噪声的空间聚类应用</p><p>掌握算法流程</p><p>DBSCAN算法的流程如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、随机选择一个未被访问的数据点p。<br><br><span class="hljs-number">2</span>、以p为中心，以半径Eps为半径，找到半径内的所有数据点。<br><br><span class="hljs-number">3</span>、如果半径内的数据点数目小于MinPts，则将p标记为`噪声点`；否则，以p为`核心点`，创建一个新的簇，并将半径内的所有点加入该簇中。<br><br><span class="hljs-number">4</span>、以半径内的所有点为新的种子点，重复上述过程，直到该簇被完全发现。<br><br><span class="hljs-number">5</span>、重复以上过程，直到所有点都被访问过。<br></code></pre></td></tr></table></figure><p>DBSCAN的算法时间复杂度为：O(nlogn)</p><h4 id="dbscan中的点分为三类">DBSCAN中的点分为三类：</h4><p><code>核心点、边界点和噪声点</code></p><p>核心点是指那些在邻域内具有足够多的点的对象</p><p>边界点则是那些邻近核心点但自身不是核心点的点</p><p>而噪声点则既不是核心点也不是边界点</p><p>直接密度可达和间接密度可达</p><p>优缺点:对于两个参数很敏感</p><p>Eps（ε）：领域的最大半径</p><p>MinPts：领域中的最小点数</p><h2 id="什么是好的聚类">什么是好的聚类？</h2><p>参考链接：https://blog.csdn.net/qq_51392112/article/details/129169630</p><p>要求：</p><p>会算准确率、召回率（在F-Measure里面，重点关注就行）</p><h4 id="评价聚类质量的指标">评价聚类质量的指标：</h4><p>一、基于匹配的度量：纯度</p><p>对于聚类后的结果我们并不知道每个簇所对应的真实类别，因此需要<code>取每种情况下的最大值</code>（注意这里是聚类后的每种情况）</p><figure><img src="https://pic.imgdb.cn/item/667fae4ed9c307b7e924649e.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667fae72d9c307b7e9248d73.png"alt="https://pic.imgdb.cn/item/667fae72d9c307b7e9248d73.png" /><figcaptionaria-hidden="true">https://pic.imgdb.cn/item/667fae72d9c307b7e9248d73.png</figcaption></figure><p>二、基于匹配的度量：F-Measure</p><p>涉及两个变量的计算：精度（同上文的纯度）、召回率</p><p>具体的计算过程参考这一案例</p><figure><img src="https://pic.imgdb.cn/item/667fb03cd9c307b7e926d2dd.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>三、基于熵的度量：条件熵</p><p>这个老师上课好像没有讲，考试也没有要求</p>]]></content>
    
    
    <categories>
      
      <category>人工智能原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能原理复习6</title>
    <link href="/2024/06/26/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-6/"/>
    <url>/2024/06/26/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-6/</url>
    
    <content type="html"><![CDATA[<h2 id="markov-decision-processes">Markov Decision Processes</h2><p>An MDP is defined by:</p><p>A set of states s ∈ S</p><p>A set of actions a ∈ A</p><p>A transition function T(s, a, s’)</p><p>（1）Probability that a from s leads to s’, i.e., P(s’| s, a)<br />（2）Also called the model or the dynamics</p><p>A reward function R(s, a, s’)，Sometimes just R(s) or R(s’)</p><p>A start state</p><p>Maybe a terminal state</p><h2 id="what-is-markov-about-mdps">What is Markov about MDPs?</h2><p>“马尔可夫”一般意味着在当前状态下，未来和过去是独立的</p><p>对于马尔可夫决策过程，“马尔可夫”意味着行动结果仅取决于当前状态</p><p>这就像搜索一样，后继函数只能依赖于当前状态（而不是历史）</p><h2 id="policies">Policies</h2><p>对于 MDP，我们想要一个最优的政策</p><p><code>Π*：S → A</code></p><p>策略：为每个状态给出一个动作</p><p>最优策略是如果遵循则能够最大化预期效用的策略</p><h2 id="mdp-search-trees">MDP Search Trees</h2><figure><img src="https://pic.imgdb.cn/item/667b8546d9c307b7e9d87a6c.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>The value (utility) of a state s:</p><p>V*(s) = expected utility starting in s and acting optimally<br />从 s 开始且表现最佳的预期效用</p><p>The value (utility) of a q-state (s,a):</p><p>Q*(s,a) = expected utility starting out having taken action a fromstate s and (thereafter) acting optimally<br />从状态 s 采取行动 a开始并且（此后）采取最佳行动的预期效用，Q和V相比，多了一个行动a，策略抽取的过程</p><p>The optimal policy:</p><p>Π*(s) = optimal action from state s<br />从状态s开始的最佳行动，这是一个表示策略的参数</p><h2 id="recursive-definition-of-value">Recursive definition ofvalue</h2><figure><img src="https://pic.imgdb.cn/item/667b8774d9c307b7e9dba286.png"alt="https://pic.imgdb.cn/item/667b8774d9c307b7e9dba286.png" /><figcaptionaria-hidden="true">https://pic.imgdb.cn/item/667b8774d9c307b7e9dba286.png</figcaption></figure><p>这个公式一定要会！</p><h2 id="value-iteration">Value Iteration</h2><p>https://pic.imgdb.cn/item/667b8afdd9c307b7e9e0f811.png</p><h2 id="problems-with-value-iteration">Problems with ValueIteration</h2><p>Value iteration repeats the Bellman updates:</p><figure><img src="https://pic.imgdb.cn/item/667c101bd9c307b7e9c9a337.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>o Problem 1: It’s slow – O(S2A) per iteration<br />o Problem 2: The “max” at each state rarely changes<br />o Problem 3: The policy often converges long before the values</p><h2 id="policy-iteration-策略迭代">Policy Iteration 策略迭代</h2><p>Alternative approach for optimal values:</p><p>Step 1: Policy evaluation: calculate utilities for some fixed policy(not optimalutilities!) until convergence</p><p>Step 2: Policy improvement: update policy using one-step look-aheadwith resulting converged (but not optimal!) utilities as futurevalues</p><p>o Repeat steps until policy converges<br />o This is policy iteration<br />o It’s still optimal!<br />o Can converge (much) faster under some conditions</p><p>o 第 1步：策略评估：计算某些固定策略的效用（不是最优效用！），直至收敛</p><p>o 第 2步：策略改进：使用一步前瞻更新策略，并将所得收敛（但不是最优！）效用作为未来值</p><p>o 重复步骤直到策略收敛</p><p>它仍然是最佳的！</p><p>在某些条件下可以更快地收敛</p><figure><img src="https://pic.imgdb.cn/item/667c11f0d9c307b7e9ce7f4b.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h2 id="comparison">Comparison</h2><p>Both <code>value iteration</code> and <code>policy iteration</code>compute the same thing (all optimal values)</p><p>In value iteration:</p><p>(1)Every iteration updates both the values and (implicitly) thepolicy</p><p>(2)We don’t track the policy, but taking the max over actionsimplicitly recomputes it</p><p>In policy iteration:</p><p>(1)We do several passes that update utilities with fixed policy (eachpass is fast because we consider only one action, not all of them)</p><p>(2)After the policy is evaluated, a new policy is chosen (slow like avalue iteration pass)</p><p>(3)The new policy will be better (or we’re done)</p><p>Both are dynamic programs for solving MDPs</p><h2 id="summary-mdp-algorithms">Summary: MDP Algorithms</h2><p>So you want to….</p><p>o Compute optimal values: use value iteration or policy iteration</p><p>o Compute values for a particular policy: use policy evaluation</p><p>o Turn your values into a policy: use policy extraction (one-steplookahead)</p><p>These all look the same!</p><p>o They basically are – they are all variations of Bellman updates</p><p>o They all use one-step lookahead expectimax fragments</p><p>o They differ only in whether we plug in a fixed policy or max overactions</p><figure><img src="https://pic.imgdb.cn/item/667c1336d9c307b7e9d15596.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h2 id="reinforcement-learning">Reinforcement Learning</h2><p>That wasn’t planning, it was learning!, Specifically, reinforcementlearning</p><p>There was an MDP, but you couldn’t solve it with just computation,You needed to actually act to figure it out</p><p>o 具体来说，强化学习<br />o 有一个 MDP，但你无法仅通过计算来解决它<br />o 你需要实际行动来解决它</p><h2id="important-ideas-in-reinforcement-learning-that-came-up">Importantideas in reinforcement learning that came up</h2><p>Exploration: you have to try unknown actions to get information<br />Exploitation: eventually, you have to use what you know<br />Regret: even if you learn intelligently, you make mistakes<br />Sampling: because of chance, you have to try things repeatedly<br />Difficulty: learning can be much harder than solving a known MDP</p><p>o 探索：你必须尝试未知的行动来获取信息<br />o 利用：最终，你必须使用你所知道的<br />o 遗憾：即使你聪明地学习，你也会犯错误<br />o 采样：因为偶然，你必须反复尝试<br />o 难度：学习比解决已知的 MDP 困难得多</p><p>New twist: don’t know T or R<br />I.e. we don’t know which states are good or what the actions do<br />Must actually try actions and states out to learn</p><figure><img src="https://pic.imgdb.cn/item/667c1647d9c307b7e9d7e009.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Basic idea:<br />Receive feedback in the form of rewards<br />Agent’s utility is defined by the reward function<br />Must (learn to) act so as to maximize expected rewards<br />All learning is based on observed samples of outcomes!</p><h2 id="offline-mdps-vs.-online-rl">Offline (MDPs) vs. Online (RL)</h2><h3 id="model-based-learning概率模型">Model-BasedLearning(概率模型)</h3><p>基于模型的强化学习</p><p>Estimate T and R using historical data (Episodes).</p><p>利用重复尝试的概率来实现</p><p>计算的值是 R 的估计值和 T 的估计值，这里是考虑从状态 s 经过动作 a到状态 s` 这一个过程</p><figure><img src="https://pic.imgdb.cn/item/667f6264d9c307b7e9c14eab.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667f6250d9c307b7e9c1353a.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h3 id="model-free-learning">Model-Free Learning</h3><p>无模型的强化学习又可分为：被动强化学习和主动强化学习</p><p>1、Passive reinforcement learning</p><p>Goal: learn the state values</p><p>（1）<code>Direct evaluation 直接评估</code></p><p>Goal: Compute values for each state under Π</p><p>idea：平均观察到的样本值</p><p>直接评估计算的是V值，这里不包含具体的行动</p><p>sample:</p><figure><img src="https://pic.imgdb.cn/item/667f5e92d9c307b7e9bd4087.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667f62c4d9c307b7e9c1c792.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667f62d8d9c307b7e9c1de4a.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p><code>直接评估的优点：</code></p><p>·不需要知道T和R</p><p>·使用样本转换来计算正确的平均值</p><p><code>直接评估的缺点：</code></p><p>·浪费了状态转换之间的信息</p><p>·每个状态必须单独学习，需要的时间较长</p><p>（2）<code>Temporal difference learning 时序差分学习</code></p><p>Big idea: learn from every experience!</p><p>我们仍然评估V，但是对于更新的公式进行了优化：</p><figure><img src="https://pic.imgdb.cn/item/667f6619d9c307b7e9c5c6fd.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>差分更多的理解是一个前后状态转变的过程</p><p>充分考虑到<code>状态转换前后两个状态直接的联系</code></p><p>与直接评估相比，能够以更少的次数更快的速度来学习真实状态的值</p><p>TD的改进空间是如何将状态的值转换为策略，这一步涉及到策略抽取的问题</p><p>因此我们需要计算的是Q值而不是V值，因为在Q值中包含了具体的行动</p><figure><img src="https://pic.imgdb.cn/item/667f6959d9c307b7e9c99ee1.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667f69abd9c307b7e9ca09b0.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Q值迭代过程，需要注意与值迭代过程更新公式的不同，细节之处</p><p>2、<code>Active reinforcement learning----Q-learning</code></p><p>https://blog.csdn.net/qq_30615903/article/details/80739243</p><p>这个是专门讲Q-learning 的，讲的挺好，你需要认真看</p><p>Q-learning也是基于样本的Q值进行迭代</p><p>Q-learning是强化学习算法中value-based的算法，Q即为Q(S,a),就是某一时刻的s状态下采取动作a能够获得的收益的期望，环境会根据agent的动作反馈出相应的回报reward，所以算法的主要思想就是<code>将state与action构建一张Q-table来存储Q值，然后根据Q值来选取能够获得最大收益的动作</code></p><figure><img src="https://pic.imgdb.cn/item/667ee4dcd9c307b7e944a922.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>更新公式如下：</p><figure><img src="https://pic.imgdb.cn/item/667f6b5cd9c307b7e9cd137a.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>根据下一个状态s’中选取最大的Q(s′,a′)值乘以衰变γ加上真实回报值最为Q现实，而根据过往Q表里面的Q(s,a)作为Q估计。</p>]]></content>
    
    
    <categories>
      
      <category>人工智能原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能原理复习5</title>
    <link href="/2024/06/24/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-5/"/>
    <url>/2024/06/24/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-5/</url>
    
    <content type="html"><![CDATA[<h2 id="adversarial-search-对抗搜索">Adversarial Search 对抗搜索</h2><p>https://zhuanlan.zhihu.com/p/667251930</p><p>http://t.csdnimg.cn/fXNHW</p><p>游戏类型： 零和博弈 、一般游戏</p><p>零和博弈：人工智能领域中最常研究的博弈（例如国际象棋和围棋）是博弈论学者所称的确定性、双人、轮流、完美信息（perfectinformation）的零和博弈。“完美信息”是“完全可观测”的同义词，“零和”意味着对一方有利的东西将对另一方同等程度有害：不存在“双赢”结果。在博弈论中，我们通常用移动（move）作为“动作”（action）的同义词，用局面（position）作为“状态”（state）的同义词。</p><blockquote><p>【常见案例】：国际象棋、围棋</p></blockquote><h2 id="博弈">博弈</h2><p>人工智能中“博弈”通常专指博弈论专家们称为有完整信息的、确定性的、轮流行动的、两个游戏者的零和游戏。</p><p>术语中，这是指在确定的、完全可观察的环境中两个Agent必须轮流行动，<code>在游戏结束时效用值总是相等并且符号相反</code>。正是Agent之间效用函数的对立导致了<code>环境是对抗的</code>。</p><p>在零和游戏中，代理具有<code>相反</code>的效用，他们必需争夺一个或者一组可用的资源。</p><h2 id="对抗性搜索">对抗性搜索</h2><p>o 状态：S（从 s 开始）<br />o 玩家：P={1...N}（通常轮流）<br />o 操作：A（可能取决于玩家/状态）<br />o 转换函数：SxA -&gt; S<br />o 终端测试：S -&gt; {t，f}<br />o 终端实用程序：SxP -&gt; R</p><p>Solution for a player is a policy: S -&gt; A</p><h2 id="效用函数utilities">效用函数（utilities）</h2><h2 id="博弈中的优化决策">博弈中的优化决策</h2><p>MAX想要找到通往胜利的动作序列，但MIN不希望MAX获胜。这意味着MAX的策略必须是一个条件规划——一个随机应变策略，指定对MIN的每个可能移动的响应。对于具有多个结果分数的博弈,即极小化极大搜索。</p><blockquote><p>minimax</p></blockquote><p>极小化极大值 （minimax value）</p><p>某一状态的极小化极大值是指，假设从该状态到博弈结束两个参与者都以最优策略行动，到达的终止状态对于MAX的效用值。</p><h2 id="alpha-beta-pruning">Alpha-Beta Pruning</h2><p>Good child ordering improves effectiveness of pruning</p><p>With “perfect ordering”:<br />Time complexity drops to O(b^(m/2))<br />Doubles solvable depth!<br />Full search of, e.g. chess, is still hopeless…</p><h2 id="resource-limits">Resource Limits</h2><h2 id="expectimax-search">Expectimax Search</h2><p>compute the average score under optimal play</p><p>Max nodes as in minimax search</p><p>Chance nodes are like min nodes but the outcome is uncertain</p><p>Calculate their expected utilities</p><p>I.e. take weighted average (expectation) of children</p>]]></content>
    
    
    <categories>
      
      <category>人工智能原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>操作系统原理期末复习</title>
    <link href="/2024/06/22/cao-zuo-xi-tong-yuan-li-qi-mo-fu-xi/"/>
    <url>/2024/06/22/cao-zuo-xi-tong-yuan-li-qi-mo-fu-xi/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章">第一章</h2><p>操作系统的基本特性：</p><p><code>并发与（资源）共享、虚拟、异步</code></p><p>操作系统四大功能：</p><p><code>处理机管理、存储器管理、设备管理、文件管理</code>，除此之外，还需要提供友好的<code>用户接口</code></p><p>设计现代OS的目标是：</p><p><code>提高资源利用率和方便用户</code></p><p><code>单道批处理系统是在解决人机矛盾和CPU与I/O设备速率不匹配矛盾的过程中形成的</code></p><h2 id="第二章-进程与线程">第二章 进程与线程</h2><p>进程之间的通信（进程之间的数据交互）：<br />1.共享存储（数据共享、存储区共享）,<br />2.消息传递（直接通信、间接通信）,<br />3.管道通信</p><p>管道通信是单向进行的！！！管道文件pipe文件，本质是一个内存中的缓冲区（先进先出FIFO）<br />FIFO 是 管道通信 与 共享存储 不一样的地方！！！</p><p>单向传播通信----半双工通信<br />双向同时进行通信-----全双工通信<br />一个管道可以有多个写进程，一个读进程（有争议，但是还是以此为准）</p><p>动态性是进程最重要的特性，以此来区分文件形式的静态程序<br />操作系统引入进程的概念，是为了从变化的角度动态分析和研究程序的执行</p><p>系统总是通过PCB对进程进行控制，PCB是进程存在的唯一标志</p><p>各进程的存储地址空间相互独立，因此进程之间的信息传递无法直接进行</p><p>程序的封闭性是指程序的执行结果之取决于进程本身，不受外界影响，进程的执行速度不会改变其执行结果<br />失去封闭性，不同速度下的进程执行结果不同（并发进程存在共享变量！！！）</p><p>线程的调度组织与控制、状态转化、创建、终止等等，与进程类似</p><p>引入线程后，进程仍然是资源分配的单位，内核级线程是处理机调度和分派的单位，线程本身不具有资源，但它可以共享所属进程的全部资源</p><p>一个内核程序，映射到用户级后有多个线程，这些线程之间的切换不需要内核级切换进程，不需要内核的支持</p><p>多对一的线程模型中，由于只有一个内核，用户级的多线程对于操作系统来说是透明的，当改进程的一个线程被阻塞后，该进程就会被阻塞<br />作为对比，一对一的线程模型中，每个用户级的线程都会映射到一个内核级的线程，当某个线程被阻塞时，不会影响其他线程</p><p>信箱实现进程之间的互相通信（消息传递中的间接通信），需要涉及两个原语：发送原语和接受原语</p><h3 id="对进程的理解">对进程的理解</h3><p>进程是一个独立的运行单位，也是操作系统进行资源分配和调度的基本单位，包括了pcb,程序和数据以及执行栈区<br />线程是一种特殊的进程</p><p>一个进程是程序在一个数据集上的一次运行过程，运行于不同的数据集，将会形成不同的进程</p><p>系统动态DLL库中的系统线程，被不同的进程调用，他们是（ 相同）的线程<br />这题理解不了，就这样记吧。。。</p><p>pcb所包含的数据结构的内容有：<br />进程标志信息、进程控制信息、进程资源信息、cpu现场信息<br />具体而言有：进程ID、cpu状态、堆栈指针</p><p>进程中的线程共享进程内的全部资源，但是进程中某些线程的栈指针对其他线程的透明的，不能与其他线程共享</p><p>主要要区分阻塞态和就绪态</p><p>只有从运行态到阻塞态的转换是由进程自身决定的<br />从运行态到就绪态的转换是由于进程的时间片用完<br />从就绪态到运行态是被动的<br />从阻塞态到就绪态是由协作进程决定的</p><h3 id="进程唤醒的概念">进程唤醒的概念</h3><p>当阻塞态的进程等待的某资源（不包括处理机）可用时，进程就会被唤醒</p><p>在多线程模型中，用户级线程和内核级线程的链接方式分为多对一、一对一、多对多</p><p>操作系统为每个用户级线程建立一个线程控制块属于一对一模型</p><p>用户级线程的切换可以在用户空间完成，内核级线程的切换需要操作系统帮助进行调度，因此用户级线程的切换效率更高</p><p>用户级线程可以在不支持内核级线程的操作系统上实现</p><p>父进程与子进程可以并发执行<br />父进程可以与子进程共享一部分资源，但是不能共享虚拟地址空间，在创建子进程时，会为子进程分配资源，如虚拟地址空间等<br />临界资源一次只能为一个进程所用，所以父进程和子进程不能同时使用同一临界资源</p><h3 id="内核级线程">内核级线程</h3><p>在内核级线程中，同一进程中的线程切换，需要从用户态转到内核态进行，系统开销较大（相比于用户级线程）<br />当内核级线程阻塞时，cpu将调度同一进程中的其他内核级线程执行<br />内核级线程的程序实体可以在内核态运行<br />对于多处理机系统，核心可以同时调度同一进程的多个线程并行执行</p><h3 id="用户级线程">用户级线程</h3><p>进程中的某个用户级线程被阻塞，则整个进程也会被阻塞，即进程中的其他用户级线程也会被阻塞<br />线程的调度不需要内核的直接参与，控制简单<br />线程切换代价小<br />允许每个进程定制自己的调度算法，线程管理比较灵活</p><blockquote><p>注意：跨进程的用户级线程调度需要内核参与！！！</p></blockquote><p>一个进程从运行态变为就绪态，必定会引起进程的切换</p><p>题目： 在具有通道设备的单处理器系统中实现并发技术后，各进程在某一时间断内并发运行，CPU与I/O设备并行工作</p><p>解析：正是因为CPU与I/O设备的并行工作，才使各进程能并发执行！！！不懂，背就完了</p><h2 id="第三章-处理机调度">第三章 处理机调度</h2><p>若每个作业只能建立一个进程，为了照顾短作业用户，应采用（短作业优先调度算法）；为了照顾紧急作业用户，应采用（基于优先级的剥夺式优先队列调度算法），为了实现人机交互，应采用（时间片轮转调度算法）；而能使短作业，长作业，交互作业用户都满意，应采用（多级反馈队列调度算法）</p><h2 id="操作系统的基本特性">操作系统的基本特性</h2><p>并发与资源共享，同时还有虚拟性和异步性</p><h2 id="现代os的目标是">现代OS的目标是</h2><p>提高资源利用率和方便用户</p><h2 id="操作系统具有的四大功能">操作系统具有的四大功能</h2><p>处理机管理、存储器管理、设备管理、文件管理</p><h2id="为解决人机交互问题引入时间片的概念采用">为解决人机交互问题，引入时间片的概念，采用</h2><p>时间片轮转调度算法</p><h2 id="实时系统可以分为">实时系统可以分为</h2><p><code>实时信息处理系统</code>和<code>实时控制系统</code>、<code>多媒体系统</code>和<code>嵌入式系统</code></p><h2 id="io软件通常被组织成">I/O软件通常被组织成</h2><p>用户层软件、设备独立性软件、<code>设备驱动程序</code>、和I/O中断处理程序四个层次</p><h2 id="银行家算法">银行家算法</h2><p>银行家算法中的数据结构：</p><p>（1）可利用资源向量Available：包含m个元素的数组，每个元素代表一类<code>可用的资源数目</code>，初始值是系统可配备的资源数，动态变化回收</p><p>（2）最大需求矩阵Max：是一个n*m的矩阵，定义了系统中n个进程中的每个进程对m类资源的<code>最大需求</code></p><p>（3）分配矩阵Allocation：也是一个n*m的矩阵，定义了系统中每一类资源<code>当前已分配给每一个进程的资源数</code></p><p>（4）需求矩阵Need：也是一个n*m的矩阵，表示每一个进程<code>尚且需要的各类资源数</code></p><p>有公式：</p><p><code>Need[i,j]=Max[i,j]-Allocation[i,j]</code></p><p>银行家算法：是一种避免死锁的方法</p><p>Requesti[j]=k 表示进程i需要资源 j 的数量为 k</p><p>伪代码 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>( Requesti[j]=k ≤ Need[i,j])<br>&#123;<br>  <span class="hljs-keyword">if</span>( Requesti[j]=k ≤ Available[j] )<br>  &#123;<br>    <span class="hljs-comment">//系统将资源分配给进程</span><br>    <span class="hljs-comment">//并修改如下数据</span><br>    Available[j] -= Requesti[j];<br>    Allocation +=Requesti[j];<br>    Need[i,j] -= Requesti[j];<br>  &#125;<br>  <span class="hljs-keyword">else</span>（目前所需资源不足，等待...）<br>&#125;<br><span class="hljs-keyword">else</span>(认为出错了，所需资源大于其宣布的最大资源量)<br><span class="hljs-comment">//系统执行安全性算法，检验是否安全</span><br><span class="hljs-keyword">if</span>(safe)<br>&#123;<br>  <span class="hljs-comment">//正式进行分配</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-comment">//本次试探分配作废，系统回复原来状态，让该进程处于等待状态</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>重点在<code>安全性算法</code>，所以需要好好看看</p><p>服务完进程后，Available更新为<code>+=Allocation</code></p><h2 id="生产者-消费者问题">生产者-消费者问题</h2><p>设有两个生产者进程A、B和一个销售者进程C，他们共享一个无限大的仓库，生产者A只生产A产品，生产者B只生产B产品。生产者每次循环生产一个产品，然后入库供销售者销售；销售者每次循环从仓库取出一个产品销售。如果<code>不允许同时入库</code>，也<code>不允许边入库边出库</code>，而且<code>要求两个生产者在生产A产品和生产B产品时的件数满足以下关系</code>：</p><p><code>-n≤生产A的件数-生产B的件数≤m</code></p><p>其中n,m是正整数，但对仓库中A产品和B产品的件数无上述要求，请用信号量机制写出A、B、C三个进程的工作流程。</p><p>分析：生产者A、B和消费者之间不能同时将产品入库和出库，故仓库是一个<code>临界资源</code>。</p><p>生产的A、B产品必须满足：-n≤生产A的件数-生产B的件数≤m。</p><p>仓库的管理只要求出入库互斥，由于仓库无限大，只需操作互斥就可以完成，出库要考虑有无产品，SA对应于仓库中的A产品量，SB对应于仓库中的B产品量；</p><p>销售要满足：-n≤生产A的件数-生产B的件数≤m，用difference表示A的件数-B的件数，即</p><p><code>difference=A的件数-B的件数</code>，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">difference==-n 的时候，不能取产品B，只能取A；<br><br>difference==m 的时候，不能取产品A，只能取B；<br><br>-n&lt; difference&lt; m，即可以取产品A也可以取产品B；<br></code></pre></td></tr></table></figure><p>答：为了互斥地入库和出库，需为仓库设置一初值为1的互斥量信号mutex；为了使生产的产品件数满足-n≤生产A的件数-生产B的件数≤m，需要设置两个同步的信号量，其中SAB表示当前允许A生产的产品数量，其初始值为m，SBA表示当前允许B生产的产品数量，其初值为n；</p><p>另外还需要设置一个整数difference表示所销售的A、B产品数量之差，而为了同步生产者和销售者并使销售的A、B产品的件数满足-n≤生产A的件数-生产B的件数≤m，还需要设置三个资源信号量，其中S对应于仓库中的总的产品量，SA对应于仓库中的A产品量，SB对应于仓库中的B产品量，他们的初值都为0.</p><p>https://blog.csdn.net/liushall/article/details/81569609</p><p>假设缓冲区大小为10，生产者、消费者线程若干。生产者和消费者相互等效,只要缓冲池未满,生产者便可将消息送入缓冲池;只要缓冲池未空,消费者便可从缓冲池中取走一个消息。</p><p>用伪代码将简单的逻辑表达清楚！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// items代表缓冲区已经使用的资源数，spaces代表缓冲区可用资源数</span><br><span class="hljs-comment">// mutex代表互斥锁</span><br><span class="hljs-comment">// buf[10] 代表缓冲区，其内容类型为item</span><br><span class="hljs-comment">// in、out代表第一个资源和最后一个资源</span><br>var items = <span class="hljs-number">0</span>, space = <span class="hljs-number">10</span>, mutex = <span class="hljs-number">1</span>;<br>var in = <span class="hljs-number">0</span>, out = <span class="hljs-number">0</span>;<br>item buf[<span class="hljs-number">10</span>] = &#123; <span class="hljs-literal">NULL</span> &#125;;<br><br>producer &#123;<br>    <span class="hljs-keyword">while</span>( <span class="hljs-literal">true</span> ) &#123;<br>        wait( space );  <span class="hljs-comment">// 等待缓冲区有空闲位置， 在使用PV操作时，条件变量需要在互斥锁之前</span><br>        wait( mutex );  <span class="hljs-comment">// 保证在product时不会有其他线程访问缓冲区</span><br><br>        <span class="hljs-comment">// product</span><br>        buf.push( item, in );  <span class="hljs-comment">// 将新资源放到buf[in]位置 </span><br>        in = ( in + <span class="hljs-number">1</span> ) % <span class="hljs-number">10</span>;<br>        <br>        signal( mutex );  <span class="hljs-comment">// 唤醒的顺序可以不同</span><br>        signal( items );  <span class="hljs-comment">// 通知consumer缓冲区有资源可以取走</span><br>    &#125;<br>&#125;<br><br>consumer &#123;<br>    <span class="hljs-keyword">while</span>( <span class="hljs-literal">true</span> ) &#123;<br>        wait( items );  <span class="hljs-comment">// 等待缓冲区有资源可以使用</span><br>        wait( mutex );  <span class="hljs-comment">// 保证在consume时不会有其他线程访问缓冲区</span><br><br>        <span class="hljs-comment">// consume</span><br>        buf.pop( out );  <span class="hljs-comment">// 将buf[out]位置的的资源取走</span><br>        out = ( out + <span class="hljs-number">1</span> ) % <span class="hljs-number">10</span>;<br><br>        signal( mutex );  <span class="hljs-comment">// 唤醒的顺序可以不同</span><br>        signal( space );  <span class="hljs-comment">// 通知缓冲区有空闲位置</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不能将线程里两个wait的顺序调换否则会出现死锁。</p><p>例如(调换后)，将consumer的两个wait调换，在producer发出signal信号后，如果producer线程此时再次获得运行机会，执行完了wait(space)，</p><p>此时，另一个consumer线程获得运行机会，执行了 wait(mutex)，如果此时缓冲区为空，那么consumer将会阻塞在wait(items)，而producer也会因为无法获得锁的所有权所以阻塞在wait(mutex)，这样两个线程都在阻塞，也就造成了死锁。</p><h2 id="哲学家就餐问题">哲学家就餐问题</h2><p>同步问题，大量并发控制问题的案例</p><p>要求在多个进程之间分配多个资源，并且不会出现死锁和饥饿</p><p>解决死锁问题的三种方案：</p><p>（1）允许最多4个哲学家同时坐在桌子上----这样避免了5个筷子同时在5个人手上的情况</p><p>（2）只有一个哲学家的两个筷子都可以用时，他才能拿起它们（他必须在临界区内拿起两个筷子）</p><p>（3）使用非对称的解决方案，即单号的哲学家先拿起左边的筷子，接着右边的筷子；双号的哲学家先拿起右边的筷子，再拿起左边的筷子</p><p>方案一：</p><p>第一种解决死锁问题的办法就是同时只允许四位哲学家同时拿起同一边的筷子，这样就能保证一定会有一位哲学家能够拿起两根筷子完成进食并释放资源，供其他哲学家使用，从而实现永动，避免了死锁。举个最简单的栗子，假定0~3号哲学家已经拿起了他左边的筷子，然后当4号哲学家企图去拿他左边的筷子的时候，将该哲学家的线程锁住，使其拿不到其左边的筷子，然后其左边的筷子就可以被3号哲学家拿到，然后3号哲学家进餐，释放筷子，然后更多的哲学家拿到筷子并进餐。</p><p>​如何才能实现当4号哲学家企图拿起其左边的筷子的时候将该哲学家的线程阻塞？这个时候就要用到该问题的提出者迪杰斯特拉（迪杰斯特拉最短路径算法，银行家算法）提出的<code>信号量机制</code>。因为同时只允许有四位哲学家同时拿起左筷子，因此我们可以设置一个信号量r，使其<code>初始值为4</code>，然后每当一位哲学家企图去拿起他左边的筷子的时候，先对信号量做一次P操作，从而当第五位哲学家企图去拿做筷子的时候，对r做一次P操作，<code>r = -1</code>，由r&lt;0得第五位哲学家的线程被阻塞，从而不能拿起左筷子，因此也就避免了死锁问题。然后当哲学家放下他左边的筷子的时候，就对r做一次V操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">semaphore chopstick[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br>semaphore r=<span class="hljs-number">4</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">philosopher</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br>&#123;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>  &#123;<br>    think();<br>    wait(r);                       <span class="hljs-comment">//请求进餐</span><br>    wait(chopstick[i]);            <span class="hljs-comment">//请求左边的筷子</span><br>    wait(chopstick[(i+<span class="hljs-number">1</span>)mod5]);    <span class="hljs-comment">//请求右边的筷子</span><br>    eat();<br>    singal(chopstick[(i+<span class="hljs-number">1</span>)mod5]);  <span class="hljs-comment">//释放右边的筷子</span><br>    singal(chopstick[i]);          <span class="hljs-comment">//释放左边的筷子</span><br>    singal(r);                     <span class="hljs-comment">//释放信号量r</span><br>    think();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方案二：</p><p>使用<code>AND信号量机制</code>，意思就是如果想给某个哲学家筷子，就将他需要的所有资源都给他，然后让他进餐，否则就一个都不给他。</p><p>​根据上面的分析，可以将代码修改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">semaphore chopstick[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">philosopher</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span><br>&#123;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>  &#123;<br>    think();<br>    Swait(chopstick[i];chopstick[(i+<span class="hljs-number">1</span>)mod5]);<span class="hljs-comment">//将左右筷子资源都分配给一个哲学家</span><br>  eat();<br>  singal(chopstick[(i+<span class="hljs-number">1</span>)mod5];chopstick[i]);<br>  think();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方案三：</p><p>规定奇数号哲学家先拿起他左边的筷子，然后再去拿他右边的筷子，而偶数号的哲学家则相反，这样的话总能保证一个哲学家能获得两根筷子完成进餐，从而释放其所占用的资源，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">semaphore chopstick[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">philosopher</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br>&#123;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>  &#123;<br>    <span class="hljs-keyword">if</span>(i mod <span class="hljs-number">2</span>==<span class="hljs-number">0</span>)    <span class="hljs-comment">//偶数哲学家，先右后左</span><br>    &#123;<br>      wait(chopstick[(i+<span class="hljs-number">1</span>)mod <span class="hljs-number">5</span>]);<br>      wait(chopstick[i]);<br>      eat();<br>      singal(chopstick[i]);<br>      singal(chopstick[(i+<span class="hljs-number">1</span>)mod <span class="hljs-number">5</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span>             <span class="hljs-comment">//奇数哲学家，先左后右</span><br>    &#123;<br>      wait(chopstick[i]);<br>      wait(chopstick[(i+<span class="hljs-number">1</span>)mod <span class="hljs-number">5</span>]);<br>      eat();<br>      singal(chopstick[(i+<span class="hljs-number">1</span>)mod <span class="hljs-number">5</span>]);<br>      singal(chopstick[i]);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充内容什么是信号量机制">补充内容：什么是信号量机制？</h2><p>https://blog.csdn.net/theLostLamb/article/details/80741319</p><p>信号量s是具有非负整数值的全局变量，只能由两种特殊的操作来处理，这两种操作称为P和V：</p><p>P(s)：如果s是非零的，那么P将s减1，并且立即返回。如果s为零，那么就挂起这个线程，直到s变为非零，而一个V操作会重启这个线程。在重启之后，P操作将s减1，并将控制返回给调用者。</p><p>V(s)：V操作将s加1。如果有任何线程阻塞在P操作等待s变成非零，那么V操作会重启这些线程中的一个，然后该线程将s减1，完成它的P操作。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理期末复习</title>
    <link href="/2024/06/20/ji-suan-ji-zu-cheng-yuan-li/ji-suan-ji-zu-cheng-yuan-li-qi-mo-fu-xi/"/>
    <url>/2024/06/20/ji-suan-ji-zu-cheng-yuan-li/ji-suan-ji-zu-cheng-yuan-li-qi-mo-fu-xi/</url>
    
    <content type="html"><![CDATA[<h2id="计算机组成原理十套练习-白中英b1-b2-b3-b4-b5-b6-b7-b8-b9-b10">计算机组成原理十套练习-白中英（B1B2 B3 B4 B5 B6 B7 B8 B9 B10）</h2><p>http://t.csdnimg.cn/N4Jqs</p><p>这里的题目答案不全，而且有部分错误，下面的内容是<strong>逐题求证</strong>后的结果，方便期末复习使用~</p><p>鉴于多个版本的答案和题目，故选择<strong>求同存异</strong>，剔除了重复的题目，注明有争议的答案</p><h2 id="填空题">填空题</h2><p>1  字符信息是符号数据，属于处理（非数值 ）领域的问题，国际上采用的字符系统是七单位的（ ASCII ）码。</p><p>2 按IEEE754标准，一个32位浮点数由符号位S（1位）、阶码E（8位）、尾数M（23位）三个域组成。其中阶码E的值等于指数的真值（ e）加上一个固定的偏移值（ 127 ）。</p><p>根据IEEE 754标准，一个32位浮点数由以下三个部分组成：</p><ol type="1"><li>符号位 (S)：1位</li><li>阶码 (E)：8位</li><li>尾数 (M)：23位</li></ol><p>阶码 E 的值等于指数的真值加上一个固定的偏移值。具体来说：</p><ul><li>指数的真值 (Exponent)：表示实际指数值，通常记作 e 。</li><li>偏移值 (Bias)：对于32位浮点数来说，偏移值是127。</li></ul><p>因此，阶码 E 的值计算公式为： E = e + 127</p><p>其中，e 是指数的真值。</p><p>3 双端口存储器和多模块交叉存储器属于<code>并行存储器结构</code>，其中前者采用（ <code>空间</code>）并行技术，后者采用（  <code>时间</code> ）并行技术。</p><blockquote><p>课本86页原话，之前的答案是错误的</p></blockquote><p>4  虚拟存储器分为页式、（ 段 ）式、（ 段页 ）式三种。</p><p>虚拟存储器是一种内存管理技术，它允许计算机使用比实际物理内存更多的内存空间。虚拟存储器主要分为三种类型：</p><ol type="1"><li><p><strong>页式</strong>（Paged）：在页式虚拟存储器中，虚拟地址空间被划分为固定大小的页，每个页映射到物理内存中的一个帧。操作系统负责跟踪哪些页当前在物理内存中，哪些不在，并在需要时进行页面置换。</p></li><li><p><strong>段式</strong>（Segmented）：段式虚拟存储器不使用固定大小的块，而是将程序的地址空间划分为逻辑段，每个段可以是不同的大小。段式管理提供了更大的灵活性，允许程序以逻辑上有意义的方式组织内存。</p></li><li><p><strong>段页式</strong>（SegmentedPaging）：结合了页式和段式的特点，程序的地址空间首先被划分为段，然后每个段内部再使用页式管理。这种方式提供了灵活性和效率的平衡。</p></li></ol><p>所以，虚拟存储器分为页式、段式、段页式三种。</p><p>5  安腾指令格式采用5个字段：除了操作码（ OP）字段和推断字段外，还有3个7位的（ 地址码 ）字段，它们用于指定（ 寄存器）2个源操作数和1个目标操作数的地址。</p><p>安腾（Itanium）指令格式是一种非常长的指令格式，它具有高度的并行性和灵活性。在安腾指令格式中，除了操作码（Opcode）字段和推断字段（Inference）外，还有3个7位的字段，它们是：</p><p><strong>寄存器地址字段</strong>（Register AddressFields）：这些字段用于指定操作数的地址。在安腾指令中，通常有3个这样的字段，它们分别用于指定：- 2个源操作数（Source Operands）的寄存器地址 -1个目标操作数（Destination Operand）的寄存器地址</p><p>这些字段允许指令直接引用寄存器，而不需要额外的地址计算或间接寻址。这种设计有助于提高指令的执行效率，因为它减少了指令执行过程中所需的地址解析步骤。</p><p>6  CPU从内存取出一条指令并执行该指令的时间称为（ 指令周期 ），它常用若干个（ CPU周期 ）来表示。</p><p>7 安腾CPU中的主要寄存器除了128个通用寄存器、128个浮点寄存器、128个应用寄存器、1个指令指针寄存器（即程序计数器）外，还有64个（1位推断寄存器 ）和8个（ 64位分支寄存器  ）。</p><p>安腾CPU是一种高性能的微处理器架构，它具有丰富的寄存器集合。除了128个通用寄存器、128个浮点寄存器、128个应用寄存器和1个指令指针寄存器（IP，InstructionPointer）外，安腾CPU还包括以下寄存器：</p><ul><li><p>64个<strong>预测寄存器</strong>（PredicateRegisters）：这些寄存器用于控制数据流和执行流，它们可以用于条件执行指令，从而实现复杂的控制流和数据流操作。</p></li><li><p>8个<strong>分支寄存器</strong>（BranchRegisters）：这些寄存器用于保存分支目标地址，它们可以被用来实现间接跳转和循环控制。</p></li></ul><p>8 衡量总线性能的重要指标是（ <code>总线带宽</code> ），它定义为总线本身所能达到的最高传输速率，单位是（ MB/s ）。</p><blockquote><p>课本190页</p></blockquote><p>衡量总线性能的重要指标是<code>总线带宽</code>（Bandwidth），它定义为总线本身所能达到的最高传输速率。带宽的单位通常是<strong>每秒传输的数据量</strong>，常见的单位有<strong>比特每秒</strong>（bitsper second，bps）。</p><p>带宽可以进一步细分为：</p><ul><li>数据传输速率：表示单位时间内传输的数据量。</li><li>总线宽度：指的是总线上可以同时传输的位数，通常以位（bit）为单位。</li></ul><p>总线带宽的计算公式可以表示为：<code>带宽 = 总线宽度 * 传输频率</code></p><p>其中，总线宽度是总线上可以同时传输的位数，传输频率是单位时间内传输的周期数。两者的乘积即为总线的带宽，表示了总线的最大传输能力。</p><p>因此，衡量总线性能的重要指标是带宽，单位是比特每秒（bps）。</p><p>9  DMA控制器按其结构，分为（ 选择型 ）DMA控制器和（ 多路型）DMA控制器。前者适用于高速设备，后者适用于慢速设备。</p><p>10  64位处理机的两种典型体系结构是（ Intel64体系结构 ）和（安腾体系结构 ）。前者保持了与IA-32的完全兼容，后者则是一种全新的体系结构。</p><p>11  在计算机术语中，将ALU控制器和（ 内  ）存储器合在一起称为（ 主机）。</p><p><code>运算器和控制器合在一起称为CPU/中央处理器</code></p><p>ALU(算数逻辑运算部件)</p><p>CPU两大核心部件：<strong>运算器</strong>+<strong>控制器</strong></p><p>运算器的核心：ALU（算数逻辑单元），功能：对数据进行加工。基本结构：ALU、暂存寄存器、通用寄存器组、累加寄存器ACC、程序状态寄存器PSW、移位器、计数器。</p><p>控制器功能：取指令、分析指令、执行指令。基本结构：程序计数器PC、指令寄存器IR、指令译码器、时序系统、微操作信号发生器、MAR、MDR</p><p>12  数的真值变成机器码可采用原码表示法，反码表示法，（ 补码）表示法，（ 移码 ）表示法。</p><p>13  广泛使用的（ SRAM ）和（DRAM ）都是半导体随机读写存储器。前者的速度比后者快，但集成度不如后者高。</p><p>SRAM静态随机存取存储器 DRAM动态随机存取存储器</p><p>14 反映<code>主存速度</code>指标的三个术语是<code>存取时间</code>、（<code>存储周期</code>  ）和（ <code>存储器带宽</code> ）。</p><p>15  形成指令地址的方法称为<code>指令寻址</code>，通常是（<code>顺序</code> ）寻址，遇到转移指令时（ <code>跳跃</code>）寻址。</p><p>16  CPU从（ 内存/主存/<code>存储器</code>）取出一条指令并执行这条指令的时间和称为（ 指令周期 ）。</p><p><code>指令周期由若干个CPU周期组成</code></p><p><code>CPU周期又称为机器周期</code></p><p>用内存中读取一个指令字的最短时间来规定CPU周期</p><p>上面第一个空有填内存的，主存的，我看书上本章总结上面说：</p><p><code>CPU从存储器中取出一条指令并执行这条指令的时间和称为指令周期</code></p><p>以这个为准！！！！</p><p>17  RISC指令系统的最大特点是：只有（ 取数 ）指令和（存数 ）指令访问存储器，其余指令的操作均在（ 寄存器 ）之间进行。</p><p>补充：指令长度固定，指令格式和寻址方式种类少</p><p>18  微型机的标准总线，从带宽132MB/S的32位（ 字长 ）总线发展到64位的（指令 ）总线。</p><p>19  IA-32表示（ Intel ）公司的（ 32 ）位处理机体系结构。</p><p>20安腾体系机构采用<code>显示并行指令计算技术</code>，在指令中设计了（ 属性）字段，用以指明哪些指令可以（ 并行 ）执行。</p><p>21 定点32位字长的字，采用2的补码形式表示时，一个字所能表示的整数范围是（<code>-2^31 到 2^31-1 </code>）。</p><p><code>用补码表示一个数的时候，0只有一个，没有正负之分</code></p><p>在32位字长的计算机中，采用2的补码形式表示整数时，一个字所能表示的整数范围如下：</p><ul><li>最高位是符号位：0 表示正数，1 表示负数</li><li>正数范围：0 到 2^31 - 1（即 0 到 2147483647）</li><li>负数范围：-1 到 -2^31（即 -1 到 -2147483648）</li></ul><p>因此，一个32位字长的字，采用2的补码形式表示时，所能表示的整数范围是：</p><p>-2^31 到 2^31 - 1</p><p>上面的情况是在第一位是符号位的情况下，如果没有符号位，那么能够表示的范围应该是：<code>-2^32  到  2^32 - 1</code></p><blockquote><p>这里复习（预习）下原码表示、补码表示、移码表示法</p></blockquote><h3 id="定点表示法-所有数据的小数点位置固定不变">定点表示法所有数据的小数点位置固定不变</h3><p>理论上位置可以任意，但实际上将数据表示有两种方法（小数点位置固定-定点表示法/定点格式）：</p><p>定点纯小数 (小数点固定于符号位之后，不需专门存放位置)</p><figure><img src="https://pic.imgdb.cn/item/6673dd35d9c307b7e9983086.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6673ddb0d9c307b7e999148a.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>定点纯整数</p><p>小数点固定于最后一位之后，不需专门存放位置</p><figure><img src="https://pic.imgdb.cn/item/6673dde0d9c307b7e9996e17.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h3id="浮点表示小数点位置随阶码不同而浮动">浮点表示：小数点位置随阶码不同而浮动</h3><figure><img src="https://pic.imgdb.cn/item/6673dfccd9c307b7e99d5026.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>浮点数的规格化表示：</p><p>(1.75)10 = 1.11 × 2^0 (规格化表示) = 0.111 × 2^1 = 0.0111 × 2^2</p><p>3、IEEE754标准(规定了浮点数的表示格式,运算规则等)</p><p>规则规定了单精度(32)和双精度(64)的基本格式.</p><p>规则中,尾数(M)用原码,指数（E）用移码(便于对阶和比较)</p><figure><img src="https://pic.imgdb.cn/item/6673e107d9c307b7e99f9299.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><blockquote><p>IEEE754标准</p></blockquote><p>基数R=2，基数固定，采用隐含方式来表示它。</p><p>32位的浮点数：</p><p>S是符号位，1位，在最高位，“0”表示正数，“1”表示负数。</p><p>M是尾数， 23位，在低位部分，采用纯小数表示</p><p>E是阶码，8位，采用移码表示。移码比较大小方便。</p><p>尾数域最左位(最高有效位)总是1，故这一位经常不予存储，而认为隐藏在小数点的左边。</p><p>采用这种方式时，将浮点数的指数真值e变成阶码E时，应将指数e加上一个固定的偏移值127(01111111)，即E=e+127。</p><p>64位的浮点数:</p><p>符号位1位，阶码域11位，尾数域52位，指数偏移值是1023。因此</p><p>一个规格化的64位浮点数x的真值表示为：</p><pre><code class="hljs"> x=(-1)^S×(1.M)×2^(E-1023) e=E-1023</code></pre><p>一个规格化的32位浮点数x的真值表示为:</p><pre><code class="hljs">x=(-1)^S×(1.M)×2^(E-127)e=E-127</code></pre><p>真值x为零表示：当阶码E为全0且尾数M也为全0时的值，结合符号位S为0或1，有正零和负零之分。</p><p>真值x为无穷大表示：当阶码E为全1且尾数M为全0时，结合符号位S为0或1，也有+∞和-∞之分。</p><p>这样在32位浮点数表示中，要除去E用全0和全1（25510）表示零和无穷大的特殊情况，指数的偏移值不选128（10000000），而选127（01111111）。对于规格化浮点数，E的范围变为1到254，真正的指数值e则为-126到+127。因此32位浮点数表示的绝对值的范围是10<sup>-38～10</sup>38（以10的幂表示）。</p><h3 id="数的机器码表示">数的机器码表示</h3><p>真值：一般书写的数</p><p>机器码：机器中表示的数,要解决在计算机内部数的正、负符号和小数点运算问题。</p><p>原码<br />反码<br />补码<br />移码</p><h4id="原码表示法---定点小数x0.x1x2xn">原码表示法---定点小数x0.x1x2…xn</h4><figure><img src="https://pic.imgdb.cn/item/6673e3e7d9c307b7e9a6047d.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>有正0和负0之分</p><p>范围-(1-2^(-n)) ～ +(1-2^(-n))</p><p>例：x=+0.11001110 ， y=-0.11001110</p><p>[x]原=0.11001110 [y]原=1.11001110</p><h4id="原码表示法---定点整数x0x1x2xn">原码表示法---定点整数X0X1X2…Xn</h4><figure><img src="https://pic.imgdb.cn/item/6673e55fd9c307b7e9a8cccd.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>有正0和负0之分</p><p>范围 -(2n-1) ～ +(2n-1)</p><p>例：x=+11001110，y=-11001110</p><p>[x]原=011001110 [y]原=111001110</p><p>正数前加0，负数前加1就好，这个比较简单</p><h4 id="补码表示法">补码表示法</h4><p>定义：正数的补码就是正数的本身，负数的补码是原负数加上模。</p><blockquote><p>模</p></blockquote><p>定点小数x0.x1x2…xn，以2为模</p><p>定点整数x0.x1x2…xn，以2^(n+1)为模</p><figure><img src="https://pic.imgdb.cn/item/6673e60ed9c307b7e9aa1ce4.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6673e7d4d9c307b7e9ad65da.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>补码最大的优点就是将减法运算转换成加法运算。通常不按表达式求补码，而通过反码来得到。</p><p>22IEEE754标准规定的64位浮点数格式中，符号位为1位，阶码为11位，尾数为52位，则它能表示的最大规格化正数为（（1+(1-2的-52次方）)*2的1023次方  ）。</p><p>23  浮点加、减法运算的步骤是（ 0操作数处理 ）、（比较阶码大小并完成对阶 ）、（ 尾数求和运算 ）、（ 结果规格化）、（ 舍入处理 ）。</p><p>记住就行~</p><p>24 某计算机字长32位，其存储容量为64MB，若按字编址，它的存储系统的地址线至少需要（ 24 ）条。</p><p>64MB=64×8Mb 64×8Mb/32b=16M 16M=16×2<sup>20=2</sup>24所以需要24条地址线!</p><p>这种计算题一定要会算！！！</p><p>数据线是5条 2^5=32</p><p>25 一个组相联映射的Cache，有128块，每组4块，主存共有16384块，每块64个字，则主存地址共（ 20）位，其中主存字块标记应为（ 9 ）位，组地址应为（ 5）位，Cache地址共（ 13 ）位。</p><p>【解答】</p><p>先将Cache分组，组数=128/4=32。故Cache组地址占5位，块内地址占6位，块地址占两位。故Cache地址共5+6+2=13位。（这个应该是可以理解的了的）</p><p>组地址-块地址-块内地址 5-2-6 共13位</p><p>主存=16384*64=2^20字；故按字编制，主存地址为（ 20 ）位，（这个也没问题，比较好理解~）</p><p>由于采用的是第一种组相连映射，即组相连映射关系为：i=j modQ（i为Cache组号，j为主存块号，Q为Cache组数）。故组地址为（5位）。（如果按字节编址，块内地址位数增1，Cache地址位数增1，主存位数也增1）</p><p>如果采用第二种全相连映射方法，则先将主存按照Cache大小分区，共128个区，故区号占7位，再将每个区分组，每个区内的组数和Cache的组数相等（32组）故组地址占5位，每组有4个块，故块地址为2位，块内地址同第一种全相连映射方法中块内地址长度相同，主存地址=区号+组号+组内块号+块内地址。故按字编址，主存地址=7+5+2+6=20（位）（按字节编址时块内地址为6位，故主存地址为21位）。</p><p>Cache地址=组号+组内块号+块内地址=5+2+6=13位（按字节编址时为14位）主存有16384*64=2的20次方，20-6-5=9（<code>主存字块标记=主存地址-块内地址-组地址</code>）</p><p>26 某中断系统中，每抽取一个输入数据就要中断CPU一次，中断处理程序接收取样的数据，并将其保存到主存缓冲区内。该中断处理需要X秒。另一方面，缓冲区内每存储N个数据，主程序就将其取出进行处理，这种处理需要Y秒，因此该系统可以跟踪到每秒（N/（NX+Y）  ）次中断请求。</p><p>中断次数 / 处理该次数的中断所需的时间</p><p>依题意：中断N次，所需要的总处理时间 = N*X (中断处理时间)+Y（缓冲处理时间）</p><p>这里N个数据就会有N个中断</p><p>27  在计算机系统中，多个系统部件之间信息传送的公共通路称为（ 总线）。就其所传送信息的性质而言，在公共通路上传送的信息包括（数据信息 ）、（ 地址信息 ）、（ 控制信息 ）。</p><p>28 在虚存系统中，通常采用<strong>页表保护</strong>、<strong>段表保护</strong>和<strong>键保护</strong>方法实现（ <strong>存储区域</strong>）保护。</p><p>29 安腾体系结构采用推测技术，利用<code>（ 控制 ）推测方法</code>和<code>（ 数据 ）推测方法</code>提高指令执行的并行度。</p><p>30 计算机系统的层次结构从下至上可分为五级，即微程序设计级（或逻辑电路级 ）、一般机器级、操作系统级、（ 汇编语言 ）级、（ 高级语言）级。</p><p>31  十进制数在计算机内有两种表示形式：（<code>字符串形式</code> ）形式和（<code>压缩的十进制数串</code> ）形式。前者主要用在非数值计算的应用领域，后者用于直接完成十进制数的算术运算。</p><p>32 一个定点数由符号位和数值域两部分组成。按小数点位置不同，定点数有（ 纯小数）和（ 纯整数 ）两种表示方法。</p><p>33 对存储器的要求是容量大、速度快、成本低，为了解决这三方面的矛盾，计算机采用多级存储体系结构，即（ cache）、（ 主存 ）、（ 外存 ）。</p><p>34 高级的DRAM芯片增强了基本DRAM的功能，存取周期缩短至20ns以下。举出三种高级DRAM芯片，它们是（ FPM-DRAM）、（ CDRAM ）、（ SDRAM ）。</p><p>35  一个较完善的指令系统，应当有（ 数据处理 ）、（ 数据存储 ）、（数据传送 ）、（ 程序控制 ）四大类指令。</p><p>36  机器指令对四种类型的数据进行操作。这四种数据类型包括（ 地址）型数据、（ 数值 ）型数据、（ 字符 ）型数据、（ 逻辑 ）型数据。</p><p>37  CPU中保存当前正在执行的指令的寄存器是（ 指令寄存器），指示下一条指令地址的寄存器是（ 程序计数器），保存算术逻辑运算结果的寄存器是（ 数据寄存器 ）和（ 通用寄存器）。</p><p>数据寄存器（DR）：这些寄存器是存放操作数、运算结果和运算的中间结果的，以减少访问存储器的次数。它们既可以作为4个16位数据寄存器使用，也可以作为8个8位数据寄存器使用，在编程时可存放源操作数、目的操作数或运算结果。</p><p>通用寄存器：这些寄存器用途广泛，并可由程序员规定其用途。通用寄存器除了各自规定的专门用途之外，还可以用于传送和暂存数据，可以保存算术逻辑运算中的操作数和运算结果。</p><p>38 安腾体系结构采用分支推断技术，将传统的（ if then else）分支结构转变为无分支的（ 顺序/并行）代码，避免了错误预测分支而付出的代价。</p><p>39 IEEE6754标准规定的64位浮点数格式中，符号位为1位，阶码为11位，尾数为52位。则它所能表示的最大规格化正数为（ （1+（1-2的-52次方））*2的1023次方）。</p><p>这题重复了，上面的22题</p><p>40 直接使用西文键盘输入汉字，进行处理，并显示打印汉字，要解决汉字的（ 输入编码）、（ 汉字内码 ）和（ 字模码 ）三种不同用途的编码。</p><p>41  数的真值变成机器码时有四种表示方法，即（ 原码 ）表示法，（ 反码 ）表示法，（ 补码 ）表示法，（ 移码 ）表示法。</p><p>42 <code>主存储器的技术指标有（ 存储容量 ）、（ 存取时间 ）、（ 存储周期  ）、（ 存储器带宽 ）</code>。</p><blockquote><p>存储容量、存取时间、存储周期、存储器带宽</p></blockquote><p>存储周期：</p><p><code>存储器进行连续读写操作所允许的最短时间间隔</code></p><p>43 <code>cache和主存构成了（ 内存储器 ），全由（ 硬件 ）来实现。</code></p><p>书上63页说内存储器由半导体器件构成，所以这里说<strong>硬件</strong>应该没问题吧，我看网上也有填<strong>半导体</strong>的</p><p>44  根据通道的工作方式，通道分为（ 选择 ）通道和（多路 ）通道两种类型。</p><p>课本269页</p><p>45  SCSI是（ 并行 ）I/O标准接口，IEEE1394是（  串行）I/O标准接口。</p><p>课本271-272</p><p>46 某系统总线的一个存取周期最快为3个总线时钟周期，总线在一个总线周期中可以存取32位数据。如总线的时钟频率为8.33MHz，则总线的带宽是（ 11.1MB/s）。</p><p>时钟频率: f=8.33MHz</p><p>时钟周期: T =1/f</p><p>存取周期（三个时钟周期）: 3T=3*1/f</p><p>存取频率(总线周期的最高频率) = 1/3T = f/3</p><p><code>总线的带宽＝数据宽度×总线周期的最高频率</code></p><p>＝ （32/8）Byte×（8.33/3）M/s</p><p>＝ 11.1 MB/s</p><p>47操作系统是计算机硬件资源管理器，其主要管理功能有<code>（ 处理机 ）管理、（ 存储(器) ）管理和（ 设备 ）管理</code>。</p><p>其实还有一个<code>文件管理</code></p><p>48安腾处理机采用VLIW技术，编译器经过优化，将多条能并行执行的指令合并成一个具有（多个操作码 ）的超长指令字，控制多个独立的（ 功能部件 ）同时工作。</p><p>这题没找到支撑，就当是对的吧...</p><h2 id="选择题">选择题</h2><h3 id="试卷一">试卷一</h3><p>1从器件角度看，计算机经历了五代变化。但从系统结构看，至今绝大多数计算机仍属于（ B）计算机。</p><p>A  并行    B  冯·诺依曼    C  智能    D  串行</p><p>【考查】</p><p>冯·诺依曼计算机有什么特点呢？</p><p>最重要的特点是存储程序，也就是说<code>指令和数据都存储在存储器</code>中，CPU运行程序时从存储器中读到每一条指令然后运行它，这就是存储程序的基本原理(定义)。</p><p>指令与数据分开存储的是哈佛结构！</p><p>2某机字长32位，其中1位表示符号位。若用定点整数表示，则最小负整数为（ A）。</p><p>A  -(2^31-1)    B  -(2^30-1)    C  -(^231+1)    D  -(2^30+1)</p><p>【考查】 32位定点整数表示范围</p><p>最小负整数：32位全是1时，第一位的1表示负数，后面31个1表示 2^31-1(真值)</p><p>3  以下有关运算器的描述，（ C  ）是正确的。</p><p>A  只做加法运算<br />B  只做算术运算<br />C  算术运算与逻辑运算<br />D  只做逻辑运算</p><p>考查：运算器的功能</p><p>运算器是计算机硬件的核心部分之一，主要负责执行各种<strong>算术运算</strong>和<strong>逻辑运算</strong></p><p>算术运算：执行基本的数学运算，如加法、减法、乘法和除法。</p><p>逻辑运算：执行逻辑运算，如AND、OR、NOT和XOR。</p><p>运算器的设计和实现是计算机体系结构中的一个重要方面，它直接影响到计算机的性能和效率。在现代计算机中，运算器通常与控制单元紧密结合，以实现复杂的指令集和高效的数据处理。</p><p>4  EEPROM是指（ D ）。</p><p>A  读写存储器    B  只读存储器</p><p>C  闪速存储器    D  电擦除可编程只读存储器</p><p>考查：EEPROM</p><p>EEPROM（Electrically Erasable Programmable Read-OnlyMemory），<strong>电可擦写只读存储器</strong>，是一种非易失性存储技术，允许用户在没有外部电源的情况下，通过电信号擦除和重新编程存储器内容。</p><p>EEPROM具有以下特点：（可以不用看，太浪费时间了）</p><p>非易失性：即使断电，EEPROM也能保持其存储的数据。<br />电擦写：用户可以通过电子方式擦除和编程EEPROM，而不需要移除或更换芯片。<br />随机访问：EEPROM允许用户随机访问存储器中的任何位置，这与硬盘等顺序访问存储设备不同。<br />低功耗：EEPROM的功耗相对较低，适合电池供电的设备。<br />耐用性：EEPROM可以承受数十万次的擦写周期，这使得它非常适合需要频繁更新数据的应用。<br />小容量：与闪存相比，EEPROM的存储容量通常较小，适合存储少量关键数据。<br />高成本：由于其耐用性和灵活性，EEPROM的成本通常高于其他类型的存储器。<br />串行接口：EEPROM通常使用串行接口进行通信，如I2C或SPI。<br />应用广泛：EEPROM广泛应用于需要存储小量非易失性数据的场合，如BIOS、微控制器、传感器和智能卡等。<br />易于使用：由于其串行接口和简单的编程接口，EEPROM很容易集成到各种电子系统中。<br />EEPROM的这些特性使其成为一种非常有用的存储技术，尤其是在需要频繁更新数据而不需要大量存储空间的应用中。然而，随着闪存技术的发展，一些新型的闪存（如NORFlash）已经能够提供与EEPROM相似的功能，并且具有更高的存储密度和更低的成本，这使得EEPROM在某些应用中逐渐被新型闪存所取代。</p><p>5  常用的虚拟存储系统由（ B）两级存储器组成，其中辅存是大容量的<code>磁表面存储器</code>。</p><p>A  cache-主存 B 主存-辅存  C cache-辅存  D  通用寄存器-cache</p><p>考查：<code>虚拟存储系统两级结构</code></p><p>虚拟存储系统通常由两级存储器组成，分别是：</p><p><strong>主存储器（主存）</strong>：主存储器是计算机中直接与中央处理器（CPU）交互的存储器，它通常由<code>动态随机存取存储器（DRAM）</code>组成，具有<code>较高的速度</code>，但<code>容量相对较小</code>。</p><p><strong>辅助存储器（辅存）</strong>：辅助存储器通常是指硬盘驱动器、固态硬盘（SSD）或网络存储等，它们提供<strong>更大的存储容量</strong>，但访问速度相对较慢。在虚拟存储系统中，辅助存储器通常是指<strong>大容量</strong>的磁表面存储器，即硬盘驱动器。</p><p>虚拟存储系统通过将主存中不常用的数据暂时转移到辅助存储器中，从而为当前活跃的程序提供更多的空间，使得计算机能够处理超出物理内存容量的数据和程序。这种机制允许计算机同时运行多个程序，并且可以加载比物理内存更大的程序或数据集。</p><p>在虚拟存储系统中，操作系统负责管理内存的分配和调度，确保CPU能够高效地访问数据。当需要访问在辅助存储器中的数据时，操作系统会将这些数据加载到主存中，以便CPU可以快速地进行处理。这个过程对用户和应用程序是透明的，因此被称为“虚拟”存储。</p><p>6  RISC访内指令中，操作数的物理位置一般安排在（ D ）。</p><p>A  栈顶和次栈顶<br />B  两个主存单元<br />C  一个主存单元和一个通用寄存器<br />D  <code>两个通用寄存器</code><br />考查：RISC指令和CISC指令（精简指令集）</p><p>在RISC（Reduced Instruction SetComputing，精简指令集计算）架构中，为了提高指令执行的效率，通常会将操作数的物理位置安排在<code>通用寄存器</code>中。这是因为<code>访问寄存器的速度远远快于访问主存储器</code>，这样可以减少CPU执行指令时的等待时间，提高整体的计算速度。</p><p>两个通用寄存器 -这是RISC架构中常见的操作数安排方式，因为它允许快速的执行和简化的指令集设计。</p><p>7  当前的CPU由（ B  ）组成。<br />A  控制器<br /><code>B  控制器、运算器、cache</code> C  运算器、主存<br />D  控制器、ALU、主存</p><p>考查：CPU组成</p><p>高速缓存（Cache）：一种小容量、高速度的存储器，用于存储CPU频繁访问的数据和指令，以减少对主内存的访问次数。</p><p>ALU是运算器概念的一个子集，特指CPU内部用于执行基本算术和逻辑运算的硬件单元。而运算器则是一个更通用的术语，它可以包括ALU以及其他相关的硬件或软件组件。在现代计算机体系结构中，ALU是运算器的核心部分，但运算器的概念可能更加广泛。</p><p>8 流水CPU是由一系列叫做“段”的处理部件组成。和具备m个并行部件的CPU相比，一个m段流水CPU的吞吐能力是（ A）。 A  <code>具备同等水平</code> B  不具备同等水平<br />C  小于前者<br />D  大于前者<br />考查：流水CPU</p><p>当m段流水稳定后,每个时钟周期流出一条指令,平均每个指令周期流出m条指令,与具备m个<code>并行</code>部件的CPIJ的吞吐能力相等。</p><p>9  在集中式总线仲裁中，（ A  ）方式响应时间最快。</p><p>A  <code>独立请求 </code>   B  计数器定时查询    C  菊花链</p><p>考查：集中式总线仲裁</p><p>集中式总线仲裁是一种总线控制策略，用于在多个请求者（如CPU、内存、I/O设备等）请求访问共享总线时，决定哪个请求者可以获得总线访问权的方法。在集中式总线仲裁中，有一个中心仲裁器（或称为总线仲裁器）负责接收所有请求者的请求信号，并根据<strong>预定的优先级或算法</strong>来决定哪个请求者可以控制总线。</p><p>10  CPU中跟踪指令后继地址的寄存器是（ C ）。</p><p>A  地址寄存器    B  指令计数器</p><p>C  <code>程序计数器</code>    D  指令寄存器</p><p>考查：程序计数器</p><p>在CPU中，跟踪指令后继地址的寄存器通常是程序计数器（ProgramCounter，PC）。程序计数器是一个特殊的寄存器，用于存储下一条要执行的指令的地址。每当CPU执行完一条指令后，程序计数器就会更新为下一条指令的地址，这样CPU就可以顺序地执行程序中的指令。</p><p>11  从信息流的传输速度来看，（ A  ）系统工作效率最低。</p><p>A  <code>单总线</code>    B  双总线</p><p>C  三总线    D  多总线</p><p>考查：总线结构</p><p>单总线结构：<br />在这种结构中，所有的组件都连接到同一条总线上，任何两个组件之间的数据传输都需要经过这条总线。</p><p>双总线结构：<br />双总线结构通常包括一条内存总线和一条I/O总线。内存总线连接CPU和内存，而I/O总线连接CPU和输入/输出设备。</p><p>三总线结构：<br />三总线结构在双总线的基础上增加了一条控制总线，用于传输控制信号。</p><p>多总线结构：<br />在多总线结构中，系统可能包含多条不同类型的总线，每条总线负责特定的通信任务，如数据传输、控制信号传输、地址传输等。</p><p>12  单级中断系统中，CPU一旦响应中断，立即关闭（ C）标志，以防止本次中断服务结束前同级的其他中断源产生另一次中断进行干扰。</p><p>A  中断允许    B  中断请求</p><p>C  <code>中断屏蔽</code>    D  DMA请求</p><p>考查:中断过程</p><p>中断屏蔽，也称为中断禁用或中断封锁，是一种在计算机系统中用于控制中断请求（IRQ）响应的机制。操作系统或程序可以通过设置特定的标志或寄存器来屏蔽中断，从而暂时禁止CPU响应外部或内部的中断请求。</p><p>【解析】</p><p>CPU接收并响应一个中断后便自动关闭中断屏蔽，其目的是在中断响应周期<strong>不允许其他同级的中断来打扰</strong>，以便能正确地转入相应的服务程序。</p><p>13  安腾处理机的典型指令格式为（ C ）位。</p><p>A  32位    B  64位    <code>C  41位</code>    D  48位</p><p>考查：<strong>安腾处理机</strong></p><p>安腾（Itanium）处理机是英特尔（Intel）与惠普（HP）合作开发的一系列64位处理器。安腾架构以其EPIC（ExplicitlyParallel InstructionComputing，明确并行指令计算）设计而闻名，旨在实现高度的并行性和优化编译器的性能。</p><p>安腾处理机的典型指令格式为：41位：安腾指令的基本格式是41位宽，这包括了操作码、寄存器地址和其他指令字段。</p><p>这题记住就行！！！</p><p>14  下面操作中应该由<strong>特权指令</strong>完成的是（ B  ）。</p><p>A  设置定时器的初值<br />B  <code>从用户模式切换到管理员模式</code> C  开定时器中断<br />D  关中断</p><p>考查：特权指令</p><p>15  下列各项中，不属于安腾体系结构基本特征的是（ D ）。<br />A  超长指令字<br />B  显式并行指令计算<br />C  推断执行<br />D  <code>超线程</code></p><p>考查：安腾体系结构 （这玩意真就硬记呗）</p><p>欸......记不住啊......</p><h3 id="试卷二">试卷二</h3><p>1  冯·诺依曼机工作的基本方式的特点是（ B  ）<br />A  多指令流单数据流<br />B  <code>按地址访问并顺序执行指令</code><br />C  堆栈操作<br />D  存贮器按内容选择地址</p><p>2  在机器数（ BC ）中，零的表示形式是唯一的。<br />A  原码    B  <code>补码</code>    C  <code>移码</code>    D  反码</p><blockquote><p>【注意】 <code>补码和移码的0是唯一的！</code></p></blockquote><p>3  在定点二进制运算器中，<code>减法</code>运算一般通过（ D）来实现。<br />A  原码运算的二进制减法器<br />B  补码运算的二进制减法器<br />C  原码运算的十进制加法器<br />D  <code>补码运算的二进制加法器</code></p><p>减法通过补码形式来表示</p><blockquote><p>下面这题一定要会做啊啊啊啊啊啊啊！！！！！</p></blockquote><p>4 某计算机字长32位，其存储容量为256MB，若按<strong>单字编址</strong>，它的寻址范围是（ D）。<br />A  0—64MB    B  0—32MB   C  0—32M    <code>D  0—64M</code></p><p>256MB = 2^8MB</p><p>32b/8=4B</p><p>2^8 MB / 2^2 B = 2^6M = 64M</p><p>5  主存贮器和CPU之间增加cache的目的是（ A ）。<br />A  <code>解决CPU和主存之间的速度匹配问题</code> B 扩大主存贮器容量<br />C  扩大CPU中通用寄存器的数量<br />D  既扩大主存贮器容量，又扩大CPU中通用寄存器的数量</p><p>6 单地址指令中为了完成两个数的算术运算，除地址码指明的一个操作数外，另一个常需采用（ C）。<br />A  堆栈寻址方式    B  立即寻址方式<br />C  <code>隐含寻址方式</code>    D  间接寻址方式</p><p>[解析]单地址指令固定使用某个寄存器存放第二操作数和操作结果,在指令中隐含其地址,需要用隐含寻址方式</p><p>7  同步控制是（  C ）。<br />A  只适用于CPU控制的方式<br />B  只适用于外围设备控制的方式<br /><code>C  由统一时序信号控制的方式</code><br />D  所有指令执行时间都相同的方式</p><p>同步控制是指任何一条指令或指令中任何一个微操作的执行都是<strong>事先确定</strong>的,并且都<code>受统一基准时标的时序信号控制的方式</code>。</p><p>8  描述PCI总线中基本概念不正确的句子是（ CD ）。<br />A  PCI总线是一个与处理器无关的高速外围设备<br />B  PCI总线的基本传输机制是猝发式传送<br />C  <code>PCI设备一定是主设备</code> D <code>系统中只允许有一条PCI总线</code></p><p>PCI的概念需要了解</p><p>9 CRT的分辨率为1024×1024像素，像素的颜色数为256，则刷新存储器的容量为（ B ）。<br />A  512KB    <code>B  1MB </code>   C  256KB    D  2MB</p><p>256=2的8次方，8位=1B，1024<em>1024</em>1B=1MB</p><p>这题知道怎么算就行！</p><p>10 为了便于实现<code>多级中断，保存现场信息</code>最有效的办法是采用（ B  ）。<br />A  通用寄存器    B  <code>堆栈</code>    C  存储器    D  外存</p><p><strong>堆栈的特性：后进先出</strong></p><p>解析:CPU响应中断时,需要保存当前的一些寄存器中的现场信息,以便在中断结束后进行恢复从而继续执行完毕。在多级中断时,每一层的中断都需要保护中断时的现场信息,例如一个三级中断,依次需要保护第一、第二、第三级的现场信息,当产生第三级的中断处理程序结束后,首先恢复第三级的现场进行处理,结束后返回第二级……以此类推,这样正好<strong>符合堆栈的特性</strong>,即后进入堆栈的先出来。因此,采用堆栈存储较为有效。补充:子程序调用指令执行时,也是要把当前程序计数器(PC)的内容送到堆栈保存。</p><p>11  特权指令是由（  C ）执行的机器指令。<br />A 中断程序 B 用户程序 C <code>操作系统核心序</code> D I/O程序</p><p>12  虚拟存储技术主要解决存储器的（ B ）问题。<br />A  速度    B  <code>扩大存储容量</code>   C  成本 D  前三者兼顾</p><p>13  引入多道程序的目的在于（ A ）。<br />A  <code>充分利用CPU，减少等待CPU时间</code> B  提高实时响应速度<br />C  有利于代码共享，减少主辅存信息交换量<br />D  充分利用存储器</p><p>14  64位双核安腾处理机采用了（ A ）技术。<br />A  <code>流水</code>  B  时间并行  C  资源重复  D  流水+资源重复</p><p>15  在安腾处理机中，<code>控制推测技术</code>主要用于解决（ B）问题。<br />A  中断服务<br />B  <code>与取数指令有关的控制相关</code> C 与转移指令有关的控制相关<br />D  与存数指令有关的控制相关</p><h3 id="试卷三">试卷三</h3><p>1  下列数中最小的数是（  C ）。</p><p>A  （101001）2  B  （52）8  <code>C （1010 01）BCD </code> D （233）16</p><p>A选项换成10进制数为：1+8+32=41<br />B选项换成10进制数为：2+5*8=42<br />C选项换成10进制数为：</p><p>二进制编码的十进制（Binary-CodedDecimal，BCD）是一种用四位二进制数表示一个十进制数字的编码方式。每个十进制数字（0-9）都对应一个四位的二进制数。例如，十进制数字“5”在BCD编码中表示为“0101”。</p><p>给定的二进制数“101001”BCD，我们可以将其分为两个部分，每部分四位：<br />第一部分：1010（BCD表示的十进制数字是10）<br />第二部分：01（BCD表示的十进制数字是1）<br />因此，二进制数“101001”BCD表示的十进制数是10 + 1 = 11。</p><p>D选项换成10进制数为：3*16<sup>0+3<em>16^1+2</em>16</sup>2=563</p><p>A.（101001）2=(41)十进制<br />B.（52）8=(42) 十进制<br />C.（101001）bcd =(29)十进制 不够前面补0: 0010 1001 = 29<br />D.（233）16=563（十进制）</p><p>2 某DRAM芯片，其存储容量为512k×8位，该芯片的地址线和数据线的数目是（ D）。</p><p>A  8，512    B  512，8    C  18，8    <code>D  19，8</code></p><p>512=2的9次方，K=2的10次方，题目中有错误，应该是512K*8位</p><p>3  在下面描述的汇编语言基本概念中，不正确的表述是（  CD ）。</p><p>A  对程序员的训练要求来说，需要硬件知识<br />B  汇编语言对机器的依赖性高<br />C  <code>用汇编语言编写程序的难度比高级语言小</code> D <code>汇编语言编写的程序执行速度比高级语言慢</code></p><p>汇编语言是一种面向实际机器的低级语言,是机器语言的符号表示,与机器语言一一对应。所以,汇编语言程序员必须对机器的结构和指令系统等细节非常清楚。由于汇编语言的特点,通常用汇编语言编写程序的难度比高级语言大,但执行速度快。</p><p>4  交叉存储器实质上是一种多模块存储器，它用（ A）方式执行多个独立的读写操作。<br />A  <code>流水</code>    B  资源重复    C  顺序    D  资源共享</p><p>5  寄存器间接寻址方式中，操作数在（ B ）。<br />A  通用寄存器  <code>B  主存单元</code>  C  程序计数器  D  堆栈</p><p>间接寻址是相对于直接寻址而言的,指令地址字段的形式地址不是操作数的真正地址,而是操作数有效地址所在存储单元的地址。对于寄存器间接寻址来说,放在寄存器中的不是操作数,而是操作数的地址,操作数放在主存里面。</p><p>6  机器指令与微指令之间的关系是（ A ）。<br />A  <code>用若干条微指令实现一条机器指令</code> B 用若干条机器指令实现一条微指令<br />C  用一条微指令实现一条机器指令<br />D  用一条机器指令实现一条微指令</p><p><code>每一条机器指令由一段微指令编译的微程序来解释执行</code></p><p>7  描述多媒体CPU基本概念中，不正确的是（ CD  ）。<br />A  多媒体CPU是带有MMX技术的处理器<br />B  MMX是一种多媒体扩展结构<br />C  <code>MMX指令集是一种多指令流多数据流的并行处理指令</code> D <code>多媒体CPU是以超标量结构为基础的CISC机器</code></p><p>8  在集中式总线仲裁中，（ A ）方式对电路故障最敏感。<br />A  <code>菊花链</code>    B  独立请求    C  计数器定时查询</p><p>9  流水线中造成控制相关的原因是执行（ A  ）指令而引起。<br />A  <code>条件转移</code>   B  访内   C  算逻    D  无条件转移</p><p>这题原答案应该是给错了，这里应该选择：A 条件转移</p><p>10 PCI总线是一个高带宽且与处理器无关的标准总线。下面描述中不正确的是（  B）。<br />A  采用同步定时协议    <code>B  采用分布式仲裁策略</code> C 具有自动配置能力    D  适合于低成本的小系统</p><p>PCI采用同步时序协议、集中式仲裁策略、具有自动配置能力、适合于低成本的小系统</p><p>PCI总线的升级版PCIe总线在许多方面进行了改进，性能得到了大幅提升</p><p>课本P213</p><p>11  下面陈述中，不属于外围设备三个基本组成部分的是（ D  ）。<br />A  存储介质  B  驱动装置  C  控制电路    <code>D  计数器</code></p><p>计数器很显然不是外围设备好吧...</p><p>12  中断处理过程中，（ A  ）项是由硬件完成。<br /><code>A  关中断</code>  B  开中断  C  保存CPU现场  D  恢复CPU现场</p><p>这题给的答案是错误的，应该是 A 关中断</p><blockquote><p>关中断：进入不可响应中断请求的中断，由<strong>硬件</strong>自动完成</p></blockquote><p>中断处理过程</p><figure><img src="https://pic.imgdb.cn/item/6676186cd9c307b7e99370e2.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>中断请求-&gt;中断响应-&gt;执行中断服务函数-&gt;中断返回</p><p>中断的整个处理过程，由硬件和软件共同完成</p><figure><img src="https://pic.imgdb.cn/item/6676197bd9c307b7e99510e7.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>根据此图，再来分析下各个过程：</p><p>关中断：进入不可响应中断请求的中断，由硬件自动完成<br />保存断点：把当前的程序计数器PC中的内容保存起来，用于中断处理结束后能继续执行主程序<br />识别中断源：有多个中断源同时请求时，只能响应最高优先级的，因此需进一步判断中断源<br />保存现场和屏蔽字：进入中断服务程序后，要先保存现场<br />设置新的屏蔽字：用于改变中断优先级和控制中断的产生<br />开中断：执行中断程序时，打开中断可实现更高优先级的中断响应，实现中断嵌套<br />执行中断服务程序：执行中断服务程序中的内容<br />再次关中断：使得恢复现场和屏蔽字时不会被中断打断<br />恢复现场和屏蔽字：使现场和屏蔽字恢复到中断之前的状态<br />再次开中断：中断执行完，现场恢复完后，可以打开中断<br />中断返回：返回原程序继续执行</p><p>【参考链接】</p><p>http://t.csdnimg.cn/xQUYE</p><p>13  IEEE1394是一种高速串行I/O标准接口。以下选项中，（ D）项不属于IEEE1394的协议集。<br />A  业务层  B  链路层  C  物理层  <code>D  串行总线管理</code></p><p>这题记忆吧，没找到资料</p><p>14  下面陈述中，（ C ）项属于存储管理部件MMU的职能。<br />A  分区式存储管理   B  交换技术   C  <code>分页技术</code></p><p>给的答案是A，应该是错误的</p><blockquote><p>这题说是C选项分页技术，待考证...</p></blockquote><p>https://blog.csdn.net/ao_mike/article/details/103448433</p><p>选项C“分页技术”直接属于存储管理部件MMU的职能。MMU负责将程序的虚拟地址转换为物理地址，这一过程通常涉及到分页技术，即将内存分割成固定大小的页面，从而实现虚拟内存管理和地址转换。</p><p>15  64位的安腾处理机设置了四类执行单元。下面陈述中，（  D）项不属于安腾的执行单元。<br />A  浮点执行单元    B  存储器执行单元<br />C  转移执行单元    D  <code>定点执行单元</code></p><p>这题没找到资料求证，就背书吧欸...</p><h3 id="试卷四">试卷四</h3><p>1  运算器的核心功能部件是（  B ）。</p><p>A  数据总线 <code>B  ALU</code>   C  状态条件寄存器  D 通用寄存器</p><p>【解析】ALU的基本功能为加、减、乘、除四则运算，与、或、非、异或等逻辑操作，以及移位、求补等操作。ALU是运算器的最核心部件。</p><p>2  某单片机字长32位，其存储容量为4MB。若按字编址，它的寻址范围是（  A）。</p><p>A  <code>1M</code>    B  4MB    C  4M    D  1MB</p><p>【解析】4M*8b/32b=1Mb=1M</p><p>3 某SRAM芯片，其容量为1M×8位，除电源和接地端外，控制端有E和R/W#，该芯片的管脚引出线数目是（ D）。</p><p>A  20    B  28    C  30   <code>D  32</code></p><p>【解析】1M=2的20次方，地址线20根，8位数据线8根，20+8+1+1+1+1=32</p><p>4  双端口存储器所以能进行高速读/写操作，是因为采用（ D  ）。</p><p>A  高速芯片    B  新型器件<br />C  流水技术    D  <code>两套相互独立的读写电路</code></p><p>【解析】双端口存储器由于同一个存储器具有两组相互独立的读写控制电路而得名，读取和写入可以并行进行，所以能进行高速读/写操作。</p><p>5 单地址指令中为了完成两个数的算术运算，除地址码指明的一个操作数以外，另一个数常需采用（ C）。</p><p>A  堆栈寻址方式    B  立即寻址方式<br />C  <code>隐含寻址方式</code>    D  间接寻址方式</p><p>【解析】单地址指令中为了完成两个数的算术运算,除地址码指明的一个操作数外,另一个数常采用隐含的寻址方式,这样就可以在指令中省略对另一个操作数的描述,从而可减少机器指令代码的长度</p><p>6  为确定下一条微指令的地址，通常采用断定方式，其基本思想是（ C ）。</p><p>A  用程序计数器PC来产生后继微指令地址<br />B  用微程序计数器µPC来产生后继微指令地址<br />C <code>通过微指令顺序控制字段由设计者指定或由设计者指定的判别字段控制产生后继微指令地址</code><br />D  通过指令中指定一个专门字段来控制产生后继微指令地址</p><p>【解析】这题好像和网络上搜到的不太一样，不过答案好像是对的。。。</p><p>为确定下一条微指令的地址,通常采用断定方式,其基本思想是( )。<br />A.用程序计数器(PC)来产生后继微指令地址<br />B.用微程序计数器(μPC)来产生后继微指令地址<br /><code>C.由微指令的下地址字段直接指出后续微指令地址</code>D.由专门的硬件电路或者外部直接向CMAR输入微指令地址</p><p>【解析】正确答案:C</p><p>解析:</p><p>A:这种方法无法用来控制微程序的执行,因为PC的最小控制单位是一条指令,或者说是一个微程序(因为一个微程序解释一条指令),而微指令是更小的单位。</p><p>B:该方法为增量计数法。</p><p>C:该方法是直接由下地址字段来指出,也称为断定方式。</p><p>D:此方式为硬件方式。</p><p>7  微程序控制器中，机器指令与微指令的关系是（ B  ）。<br />A  每一条机器指令由一条微指令来执行<br />B  <code>每一条机器指令由一段用微指令编成的微程序来解释执行</code><br />C  一段机器指令组成的程序可由一条微指令来执行<br />D  一条微指令由若干条机器指令组成</p><p>【解析】一个微程序解释一条指令，一个微程序由若干个微指令组成</p><p>8  CPU中跟踪指令后继地址的寄存器是（ B ）。<br />A  地址寄存器 <code>B  程序计数器</code> C  指令寄存器  D 通用寄存器</p><p>【解析】PC（程序控制器）的最小控制单位是一条指令</p><p>9  某寄存器中的数值为指令码，只有CPU的（ A ）才能识别它。<br />A  <code>指令译码器</code>  B  判断程序 C  微指令  D  时序信号</p><p>【解析】指令译码器能够识别指令码不过分吧...</p><p>10  为实现多级中断，保存现场信息最有效的方法是采用（ B  ）。<br />A  通用寄存器    B  <code>堆栈</code>    C  主存    D  外存</p><p>【解析】CPU响应中断时,需要保存当前的一些寄存器中的现场信息,以便在中断结束后进行恢复从而继续执行完毕。在多级中断时,每一层的中断都需要保护中断时的现场信息,例如一个三级中断,依次需要保护第一、第二、第三级的现场信息,当产生第三级的中断处理程序结束后,首先恢复第三级的现场进行处理,结束后返回第二级……以此类推,这样正好符合堆栈的特性,即后进入堆栈的先出来。因此,采用堆栈存储较为有效。补充:子程序调用指令执行时,也是要把当前程序计数器(PC)的内容送到堆栈保存。</p><p>【解析】堆栈的特性：后进先出！</p><p>11  采用DMA方式传送数据时，每传送一个数据，就要占用一个（ C）的时间。<br />A  指令周期  B  机器周期  C  <code>存储周期</code>  D  总线周期</p><p>【解析】DMA方式传送数据时,DMA需要与主存交互以实现数据的传送,因此每传送一个数据就要占用一个存储周期（若干个CPU周期）的时间。</p><p>12 将IEEE1394串行标准接口与SCSI并行标准接口进行比较，指出下面陈述中不正确的项是（ D）。<br />A  前者数据传输率高<br />B  前者数据传送的实时性好<br />C  前者使用6芯电缆，体积小<br />D  <code>前者不具有热插拔能力</code></p><p>【解析】D据说是对的。。。</p><p>13  下面陈述中，不属于虚存机制要解决的问题项是（D  ）。<br />A  调度问题<br />B  地址映射问题<br />C  替换与更新问题<br />D  <code>扩大物理主存的存储容量和字长</code></p><p>【解析】D选项一眼假</p><p>14  进程从运行状态转入就绪状态的可能原因是（ D  ）。<br />A  被选中占有处理机时间<br />B  等待某一事件发生<br />C  等待的事件已发生<br />D  <code>时间片已用完</code></p><p>【解析】D！！！✌</p><p>15  安腾处理机的一组指令中，可以并行执行的指令是（ B  ）。<br />A  Id8  r1=[r3]    <code>B  add  r6=r8,r9</code><br />C  SUB  r3=r1,r4   D  add  r5=r3,r7</p><p>【解析】这题看不懂啥意思，好像答案是AB？<code>不懂不懂</code></p><p>A:从寄存器r3中存储的内存地址读取一个值，并将该值存储在寄存器r1中<br />B:将寄存器r8和寄存器r9中的值相加，并将结果存储在寄存器r6中<br />C:将寄存器r1中的值减去寄存器r4中的值，并将结果存储在寄存器r3中<br />D:将寄存器r3和寄存器r7中的值相加，并将结果存储在寄存器r5中</p><h3 id="试卷五">试卷五</h3><p>1 某机字长64位，1位符号位，63位表示尾数，若用定点整数表示，则最大正整数位（ A ）</p><p>A  <code>+(2^63-1) </code>  B  +(2^64-1)  C  -(2^63-1)  D -(2^64-1)<br />  2  请从下面浮点运算器中的描述中选出两个描述正确的句子（ AB ）<br />    A <code>浮点运算器可用两个松散连接的定点运算部件一阶码和尾数部件来实现。</code>B  <code>阶码部件可实现加，减，乘，除四种运算。</code> C 阶码部件只进行阶码相加，相减和比较操作。<br />D  尾数部件只进行乘法和除法运算。</p><p>【解析】   3  存储单元是指（ C  ）。<br />A  存放1个二进制信息位的存储元<br />B  存放1个机器字的所有存储元集合<br />C  <code>存放1个字节的所有存储元集合</code> D 存放2个字节的所有存储元集合</p><p>【解析】 <code>存储元-存储单元-存储体</code>   4 某机字长32位，存储容量1MB，若按字编址，它的寻址范围是（ D ）。<br />A  0—1M    B  0—512KB    C  0—56K   <code>D  0—256KB</code></p><p>【解析】<br />1<em>1024</em>1024<em>8b/32b=256</em>K，答案应是256K，没有B<br />1B=8b,B是字节，b是位,字长是若干个字节<br />  5  用于对某个寄存器中操作数的寻址方式为（  C ）。<br />A  直接    B  间接  <code>C  寄存器直接</code>   D  寄存器间接</p><p>【解析】</p><p>操作数在寄存器中，为(寄存器)寻址方式，如MOVA，RO，即把RO中的值20H放入累加器A中，即A=20H。</p><p>操作数地址在寄存器中，为(寄存器间接)寻址方式，如MOVA，<spanclass="citation"data-cites="RO">@RO</span>，即把RO中的值做为操作数的地址，把此地址中的值放入累加器A中，即把内存单元20H中的值放入A中，如此地址单元中的值为5，则A=5。</p><p><code>这题有争议！！！！</code></p><p>6  程序控制类的指令功能是（ D ）。<br />A  进行算术运算和逻辑运算<br />B  进行主存与CPU之间的数据传送<br />C  进行CPU和I/O设备之间的数据传送<br />D  <code>改变程序执行的顺序</code></p><p>【解析】D</p><p>7  指令周期是指（ C  ）。<br />A  CPU从主存取出一条指令的时间<br />B  CPU执行一条指令的时间<br />C  <code>CPU从主存取出一条指令加上执行一条指令的时间</code><br />D  时钟周期时间</p><p>8  描述当代流行总线结构中基本概念不正确的句子是（ AC ）。<br />A  <code>当代流行的总线不是标准总线</code><br />B  当代总线结构中，CPU和它私有的cache一起作为一个模块与总线相连<br />C  <code>系统中允许有一个这样的CPU模块</code></p><p>【解析】这题是啥，看不懂</p><p>9  CRT的颜色为256色，则刷新存储器每个单元的字长是（ C  ）<br />A  256位    B  16位   <code>C  8位 </code>   D  7位</p><p>【解析】256=2的8次方<br />  10  发生中断请求的条件是（ C ）<br />A  一条指令执行结束<br />B  一次I/O操作结束<br /><code>C  机器内部发生故障</code> D  一次DMA操作结束</p><p>11  中断向量地址是（ C ）<br />A  子程序入口地址<br />B  中断服务程序入口地址<br />C  <code>中断服务程序入口地址指示器</code><br />D  例行程序入口地址</p><p>12  IEEE1394所以能实现数据传送的实时性，是因为（ D ）<br />A  除异步传送外，还提供同步传送方式<br />B  提高了时钟频率<br />C  除优先权仲裁外，还提供均等仲裁,紧急仲裁两种总线仲裁方式<br />D  <code>能够进行热插拔</code></p><p>13 <code>直接映射</code>cache的主要优点是实现简单。这种方式的主要缺点是（B  ）<br />A  它比其他cache映射方式价格更贵<br />B <code>如果使用中的2个或多个块映射到cache同一行，命中率则下降</code><br />C  它的存取时间大于其它cache映射方式<br />D  cache中的块数随着主存容量增大而线性增加</p><p>【解析】C</p><p>补充：</p><p>【全相联映射】</p><p><code>若主存中的任意一块均可映射到cache内的任意一行的位置上，称为全相联映射</code></p><p>14  虚拟存储器中<strong>段页式</strong>存储管理方案的特性为（ D）<br />A  空间浪费大，存储共享不易，存储保护容易，不能动态连接<br />B  空间浪费小，存储共享容易，存储保护不易，不能动态连接<br />C  空间浪费大，存储共享不易，存储保护容易，能动态连接<br />D  <code>空间浪费小，存储共享容易，存储保护容易，能动态连接</code></p><p>【解析】总结来看，段页式全是好处优点就行</p><p>15  安腾处理机的指令格式中，操作数寻址采用（ B ）<br />A  R-R-S型  <code>B  R-R-R型</code>  C  R-S-S型   D  S-S-S型</p><p>R-R-R型</p><h2 id="课本里面的本章小结">课本里面的本章小结</h2><p>考虑到本章小结的内容比较重要，很精简，故建议全文背诵~</p><h3 id="第6章">第6章</h3><p>总线是构成计算机系统的互联机构，是多个系统功能部件之间进行数据传送的公共通道，并在争用资源的基础上进行工作。</p><p>总线有物理特性、功能特性、电气特性、机械特性，因此必须标准化。</p><p>微型计算机系统的标准总线从ISA总线（16位，带宽8MB/s）发展到EISA总线（32位，带宽33.3MB/s）和VESA总线（32位，带宽132MB/s），又进一步发展到PCI总线（64位，带宽264MB/s）。</p><p>衡量总线性能的重要指标是<strong>总线带宽</strong>，它定义为总线本身所能达到的最高传输速率。</p><p>当代流行的标准总线追求与结构、CPU、技术无关的开发标准。其总线内部结构包含<br />①数据传送总线（由地址线、数据线、控制线组成）；②仲裁总线；③中断和同步总线；④公用线（电源、地线、时钟、复位等信号线）。</p><p>计算机系统中，根据应用条件和硬件资源不同，信息的传输方式可采用：<br />①并行传送 ②串行传送；③复用传送。</p><p>各种外围设备必须通过I/O接口与总线相连，I/O接口是指CPU、主存、外围设备之间通过总线进行连接的逻辑部件。接口部件在它动态联结的两个功能部件间起着缓冲器和转换器的作用，以便实现彼此之间的信息传送。</p><h2 id="课后大题总结">课后大题总结</h2><p>P61 第二章 4、6、7、8</p><p>P115-116 第三章存储系统 3、7、9、19</p><p>P186 第五章中央处理器<br />1、13、16、17</p><p>P213-214 第六章总线系统<br />8、9、10、11、12、14、15、16、17、20</p><p>P239 第七章外围设备 1、2、7、10、11</p><p>P276-278 第八章输入、2、3、4、5、12、13、14、15、16</p><p>P312 第九章并行组织与结构<br />4、5、6</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络期末复习</title>
    <link href="/2024/06/19/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-qi-mo-fu-xi/"/>
    <url>/2024/06/19/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-qi-mo-fu-xi/</url>
    
    <content type="html"><![CDATA[<h2id="复习时可以针对相关知识点做一做如下题目">复习时可以针对相关知识点做一做如下题目。</h2><p>1-02、1-14、1-17、1-21、1-22、1-24、1-29、1-30</p><p>2-01、2-10、2-13</p><p>3-01、3-03、3-04、3-06、3-07、3-10、3-20、3-29</p><p>4-04、4-05、4-06、4-07、4-15、4-17、4-19、4-20、4-24、4-25、4-26、4-31、4-33、4-47、4-48</p><p>5-23、传输层PPT最后一页的思考题</p><p>6-02、6-03、6-14、6-20、6-22、6-24、6-25</p><p>很显然第四章网络层是重点内容，复习重点！！！</p><h2 id="第一章课后习题"><strong>第一章课后习题</strong></h2><h3 id="section">1-02</h3><p>试简述分组交换的要点。</p><blockquote><p>重点题目</p></blockquote><p>解答：分组交换最主要的特点就是采用<strong>存储转发</strong>技术。</p><p>我们把要发送的整块数据称为一个报文。在发送报文之前，先把较长的报文划分成一个个更小的等长数据段，例如，每个数据段为1024 bit 。</p><p>在每一个数据段前面，加上一些必要的控制信息组成的首部后，就构成了一个分组。分组又称为“包”，而分组的首部也可称为“包头</p><p><strong>分组是在互联网中传送的数据单元</strong>。分组中的“首部“是非常重要的，正是由于分组的首部包含了诸如目的地址和源地址等重要控制信息，每一个分组才能在互联网中独立地选择传输路径。</p><p>互联网的核心部分是由许多网络和把它们互连起来的路由器组成的，而主机处在互联网的边缘部分。主机是为用户进行信息处理的，并且可以和其他主机通过网络交换信息。</p><p>路由器则是用来转发分组（即进行分组交换）的。路由器每收到一个分组，先临时存储下来（这个存储的时间非常短暂），再检查其首部，查找转发表，按照首部中的目的地址，找到合适的接口转换出去，把这个分组转交给下一个路由器。</p><p>这样一步一步地经过若干个或几十个不同的路由器，以存储转发的方式，把分组交付最终的目的主机。</p><p>各路由器之间必须经常交换彼此掌握的路由信息，以便创建和维持在路由器中的转发表，使得转发表能够在整个网络拓扑发生变化时及时更新。</p><h3 id="section-1">1-14</h3><h2id="计算机网络有哪些常用的性能指标这题重点复习">计算机网络有哪些常用的性能指标？（这题重点复习）</h2><p>解答：计算机网络常用的性能指标如下。</p><ol type="1"><li>速率：指的是连接在计算机网络上的主机在数字信道上传送数据的速率，也称为数据率或比特率。</li></ol><p>速率表示数据的传输速率，也称数据率</p><p>单位：bit/s(比特每秒)</p><p>单位转换：</p><p>k=10^3 千</p><p>M=10^6 兆</p><p>G=10^9 吉....</p><p>4*10^10bit/s = 40Gbit/s</p><p>常指的是额定速率，不是实际运行速率</p><ol start="2" type="1"><li>带宽：用来表示网络的通信线路传送数据的能力，网络带宽表示在单位时间内（一般是每秒钟）从网络中的某一点到另一点所能通过的“最高数据率”。</li></ol><p>两种含义：</p><p>【1】某个信号具有的频带宽度，信号的带宽本来是指该信号所包含的各种不同的频率成分所占据的频率范围，单位是赫兹Hz</p><p>某信道允许通过的信号频率范围就称为该信道的带宽</p><p>频域</p><p>【2】表示网路中某信道传输数据的能力，网路带宽表示在单位时间内网络中某信道所能通过的最高数据率（注意单位时间），单位是比特每秒bit/s</p><p>时域</p><ol start="3" type="1"><li><p>吞吐量：表示在单位时间内（一般是每秒钟）通过某个网络（或信道、接口）的数据量</p></li><li><p>时延：指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。时延包括发送时延、传播时延、处理时延和排队时延等</p></li></ol><p>【发送时延】：主机或者路由器发送数据所需要的时间（从第一个比特开始到最后一个比特结束），与信道长度无关</p><p>【传播时延】：电磁波在信道内传播一定的距离需要花费的时间，公式为:</p><p>传播时延=信道长度/电磁波在信道上的传播速率</p><p>与信号发送速率无关，与传播距离有关</p><p>【处理时延】：主机或者路由器收到分组花费时间处理分析的时间</p><p>【排队时延】：分组进入路由器需要在输入队列中排队等待处理，输出时在输出队列等待转发的时间，取决于当前网络的通信量大小</p><p>【总时延】：总时延=发送时延+传播时延+处理时延+排队时延</p><ol start="5" type="1"><li><p>时延带宽积：是传播时延(s) 和带宽(bit/s)的乘积。链路的时延带宽积又称为以比特为单位的链路长度。</p></li><li><p>往返时间：表示从发送方发送数据开始，到发送方收到来自接收方的确认（接收方收到数据后便立即发送确认），总共经历的时间。有时，往返时间还包括网络各中间节点的处理时延、排队时延以及转发数据时的发送时延。</p></li><li><p>利用率：分信道利用率和网络利用率两种。信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。网络利用率则是全网络的信道利用率的加权平均值。</p></li></ol><h3 id="section-2">1-17</h3><p>收发两端之间的传输距离为 1000 km, 信号在媒体上的传播速率为 2 X 10^8m/s 。试计算以下两种情况的发送时延和传播时延：</p><ol type="1"><li><p>数据长度为 10^7 bit, 数据发送速率为 100 kbit/s</p></li><li><p>数据长度为 10^3 bit, 数据发送速率为 1 Gbit/s 。</p></li></ol><p>从以上计算结果可得出什么结论？</p><p>解答：两种情况分别计算如下：</p><ol type="1"><li><p>发送时延为 10^7 bit/ (100 kbit/s) = 100 s,<br />传播时延为 10^6 m / (2xl0^8 m/s)= 5 ms 。<br />发送时延远大于传播时延</p></li><li><p>发送时延为 10^3 bit/ (1 Gbit/s) = 1 µs, 1 Gbit=10^9 10^(-6)s=1µs传播时延为 5ms 。<br />发送时延远小于传播时延</p></li></ol><p>【结论】：<br />若数据长度大而发送速率低，则在总的时延中，发送时延往往大于传播时延。<br />但若数据长度短而发送速率高，则传播时延又可能是总时延中的主要成分。</p><p>这题主要是计算发送时延和传播时延，会计算就行吧。。。</p><h3 id="section-3">1-21</h3><blockquote><p>协议与服务有何区别？有何关系？（这题很经典，需要认真学习!）</p></blockquote><p>解答：为进行网络中的数据交换而建立的规则、标准或约定称为网络协议，简称为协议。(协议的定义：规则、标准、约定)</p><p>网络协议是计算机网络不可缺少的组成部分。<strong>协议是控制两个对等实体（或多个实体）进行通信的规则的集合</strong>。协议的语法方面的规则定义了所交换的信息的格式，而协议的语义方面的规则定义了发送者或接收者所要完成的操作。在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下面一层所提供的服务。</p><p>协议和服务在概念上是很不一样的。</p><p>首先，<strong>协议的实现保证了能够向上一层提供服务</strong>。使用本层服务的实体只能看见服务而无法看见下面的协议。下面的协议对上面的实体是透明的。其次，<strong>协议是“水平的”，即协议是控制对等实体之间通信的规则。但服务是“垂直的”,即服务是由下层向上层通过层间接口提供的</strong>。另外，并非在一个层内完成的全部功能都称为服务，<strong>只有那些能够被高一层实体“看得见”的功能才能称为“服务”</strong>。</p><h3 id="section-4">1-22</h3><p>网络协议的三个要素是什么？各有什么含义？</p><p>解答：网络协议主要由以下三个要素组成：<br />(1) 语法，即数据与控制信息的结构或格式。<br />(2) 语义，即需要发出何种控制信息，完成何种动作以及做出何种响应。<br />(3) 同步，即事件实现顺序的详细说明。</p><p>网络协议的三要素：语法、语义、同步！！！</p><h3 id="section-5">1-24</h3><p>试述具有五层协议的网络体系结构的要点，包括各层的主要功能。</p><p>解答：我们知道， OSI 的体系结构是七层协议。 TCP/IP的体系结构是四层协议，而真正有具体内容的只是上面三层。在学习计算机网络的原理时往往采取折中的办法，即综合OSI和 TCP/IP 的优点，采用一种有五层协议的体系结构。图 T-1-24给出了五层协议的结构。</p><figure><img src="https://pic.imgdb.cn/item/6679835cd9c307b7e9a4fdec.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>这五层协议的主要功能如下。</p><ol type="1"><li><p>物理层－-在物理层上所传数据的单位是比特 (bit)。物理层的任务就是透明地传送比特流。物理层还要确定连接电缆的插头应当有多少根引脚以及各条引脚应如何连接。当然，哪几个比特代表什么意思，则不是物理层所要管的。请注意，传递信息所利用的一些物理媒体，如双绞线、同轴电缆、光缆、无线信道等，并不在物理层协议之内而是在物理层协议的下面。因此也有人把物理媒体当作第0 层。</p></li><li><p>数据链路层－－常简称为链路层。在两个相邻节点之间（主机和路由器之间或两个路由器之间）传送数据是直接传送的（即不需要经过转发的点对点通信）。这时就需要使用专门的链路层的协议。数据链路层将网络层交下来的IP数据报组装成帧，在两个相邻节点间的链路上“透明“地传送帧中的数据。每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</p></li></ol><p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提取出数据部分，上交给网络层。控制信息还使接收端能够检测到所收到的帧中有无差错。如发现有差错，数据链路层就简单地丢弃这个出了差错的帧，以免继续传送下去白白浪费网络资源。如果需要改正错误，就由运输层的TCP 协议来完成。</p><ol start="3" type="1"><li>网络层——网络层负责为分组交换网上的不同主机提供通信服务。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组或包进行传送。在TCP/IP 体系中，由于网络层使用 IP 协议，因此分组也叫作 IP数据报，简称为数据报。网络层的另一个任务就是选择合适的路由，使源主机运输层所传下来的分组能够通过网络中的路由器找到目的主机。</li></ol><p>对于由广播信道构成的分组交换网，路由选择的问题很简单，因此这种网络的网络层非常简单，甚至可以没有。</p><ol start="4" type="1"><li>运输层一运输层的任务就是向两个主机中进程之间的通信提供服务。由于一个主机可同时运行多个进程，因此运输层有复用和分用的功能。复用就是多个应用层进程同时使用下面运输层的服务，分用则是运输层把收到的信息分别交付上面应用层中相应的进程。</li></ol><p>运输层主要使用以下两种协议：一个是传输控制协议 TCP,是面向连接的，数据传输的单位是报文段，能够提供可靠的交付。另一个是用户数据报协议UDP,是无连接的，数据传输的单位是用户数据报，不保证提供可靠的交付，只能提供“尽最大努力交付"。</p><ol start="5" type="1"><li>应用层一应用层是体系结构中的最高层。应用层直接为用户的应用进程提供服务。这里的进程就是指正在运行的程序。互联网中的应用层协议很多，如支持万维网应用的HTTP协议、支待电子邮件的 SMTP 协议、支持文件传送的 FTP 协议，等等。</li></ol><h3 id="section-6">1-29</h3><p>有一个点对点链路， 长度为 50km 。若数据在此链路上的传播速率为 2 X10^8 m/s, 试问链路的带宽应为多少才能使传播时延和发送 100字节的分组的发送时延一样大？如果发送的是 512字节长的分组，结果又应如何？</p><p>解答：整条链路的传播时延是 50 km/ (2 x 10^8 m/s)= 250 µs 。<br />如果在 250 µs 把 100 字节发送完，则发送速率应为 800 bit/ (250 µs) = 3.2Mbit/s 。这也是链路带宽应有的数值。<br />如果改为发送 512 字节的分组，则发送速率应为 512 x 8 bit/ (250 µs) =16.38 Mbit/s 。这也是链路带宽应有的数值。</p><p>传播时延：50k/2<em>10^8=25</em>10^(-5)s=250 us</p><p>发送时延：100<em>8/x=250</em>10-6</p><p>x=3.2*10^6=3.2Mbit/s</p><h3 id="section-7">1-30</h3><p>有一个点对点链路，长度为 20000km。数据的发送速率是 1 kbit/s,要发送的数据有 100 bit 。数据在此链路上的传播速度为 2 X 10^8 m/s。假定我们可以看见在线路上传输的比特，试画出我们看到的线路上的比特（画两张图，一张是在100 bit 刚刚发送完时，另一张是再经过 0.05 s 后）。</p><p>解答： 100 bit 的发送时间＝ 100 bit/ (1000 bit/s) = 0.1 s 。<br />如图 T-1-30 所示， 0.1 秒的时间可以传播 20000km,正好是线路的长度。因此，当发送的第一个比特到达终点时，发送方也正好把 100bit 发送完毕，整个线路上都充满了所传输的 100 bit 。</p><figure><img src="https://pic.imgdb.cn/item/6679875ad9c307b7e9b19585.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>再经过 0.05 s 后，所有的比特都向前走了 10000 km 。这就是说，发送的前50 bit 已经到达终点了，剩下的 50 bit还在线路上传播。最后一个比特正好走了一半 10000 km ，在线路的正中间。</p><p>这题还是比较简单的，当作练习</p><h2 id="第二章课后习题"><strong>第二章课后习题</strong></h2><h3 id="section-8">2-01</h3><p>物理层要解决哪些问题？物理层的主要特点是什么？</p><p>解答：物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是具体的传输媒体。</p><p>现有的计算机网络中的硬件设备和传输媒体的种类非常繁多，而通信也有许多不同方式。<strong>物理层的作用正是尽可能地屏蔽掉这些差异</strong>，使<strong>物理层上面的数据链路层感觉不到这些差异</strong>，这样就可使<strong>数据链路层只需要考虑本层的协议和服务，而不必考虑网络具体的传输媒体是什么</strong>。</p><p><strong>在物理层上所传数据的单位是比特</strong>。物理层的任务就是<strong>透明地</strong>传送比特流。也就是说，发送方发送l （或 0） 时，接收方应当收到 1 （或 0） 而不是 0 （或 l）。因此物理层要考虑用多大的电压代表 ”1" 或 “O",以及接收方如何识别出发送方所发送的比特。</p><p>物理层还要确定连接电缆的插头应当有多少根引脚以及各引脚应如何连接。当然，哪几个比特代表什么意思，则不是物理层所要管的。</p><p>传递信息所利用的一些传输媒体，如双绞线、同轴电缆、光缆、无线信道等，并不在物理层协议之内而在物理层协议的下面。因此也有人把传输媒体当作第0 层。</p><h3 id="section-9">2-10</h3><p>常用的传输媒体有哪几种？各有何特点？</p><p>解答：传输媒体可分为两大类，即导向传输媒体和非导向传输媒体。</p><p>在导向传输媒体中，电磁波被导向沿着固体媒体（<strong>铜线或光纤</strong>）传播；</p><p>而非导向传输媒体就是指自由空间，在非导向传输媒体中<strong>电磁波</strong>的传输常称为无线传输。</p><h3 id="section-10">2-13</h3><p>为什么要使用信道复用技术？常用的信道复用技术有哪些？</p><p>解答：许多用户通过复用技术就可以共同使用一个共享信道来进行通信。</p><p>虽然复用要付出一定代价（共享信道由千带宽较大因而费用也较高，再加上复用器和分用器也要增加成本），但如果复用的信道数量较大，那么总的来看在经济上还是合算的。</p><p>常用的复用技术有：频分复用、时分复用（包括统计时分复用）、波分复用（包括密集波分复用和稀疏波分复用）和码分复用（即码分多址）。</p><p>【总结】常见的信道复用技术：</p><blockquote><p>频分复用</p></blockquote><p>最常用</p><p>频分复用的各路信号在同样的时间占用不同的带宽资源（带宽指：频率带宽）</p><blockquote><p>时分复用</p></blockquote><p>最常用</p><p>时分复用的所有用户在不同的时间占用同样的频率带宽，时分复用更有利于数字信号的传输</p><blockquote><p>波分复用</p></blockquote><p>就是光的频分复用</p><blockquote><p>码分复用</p></blockquote><p>使用特殊挑选的不同码型实现，抗干扰能力强！</p><p>复用器和分用器的概念</p><h2 id="第三章课后习题"><strong>第三章课后习题</strong></h2><h3 id="section-11">3-01</h3><p>数据链路（即逻辑链路）与链路（即物理链路）有何区别？“链路接通了”与“数据链路接通了＂的区别何在？</p><p>数据链路则是另一个概念。这是因为当需要在一条线路上传送数据时，除了必须有一条物理线路，还必须有一些必要的通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路</p><h3 id="section-12">3-03</h3><p>网络适配器的作用是什么？网络适配器工作在哪一层？</p><p>解答：适配器又称为网络接口卡或简称为“网卡气在适配器上面装有处理器和存储器（包括 RAM 和 ROM）。</p><p>适配器和局域网之间的通信是通过电缆或双绞线以<strong>串行传输</strong>方式进行的，</p><p>而适配器和计算机之间的通信则是通过计算机主板上的 I/O总线以<strong>并行传输</strong>方式进行的。</p><p>因此， &gt;适配器的一个重要功能就是要进行数据串行传输和并行传输的转换。</p><p>由于网络上的数据率和计算机总线上的数据率并不相同，因此在 &gt;适配器中必须装有对数据进行缓存的存储器。</p><p>若在主板上插入适配器时，还必须把管理该适配器的设备驱动程序安装在计算机的操作系统中。这个驱动程序以后就会告诉适配器，应当从存储器的什么位置把多长的数据块发送到局域网，或者应当在存储器的什么位置把局域网传送过来的数据块存储下来。</p><blockquote><p>适配器还要能够实现以太网协议。</p></blockquote><p>适配器接收和发送各种帧时不使用计算机的 CPU 。这时 CPU可以处理其他任务。当适配器收到有差错的帧时，就把这个帧丢弃而不必通知计算机。当适配器收到正确的帧时，它就使用中断来通知该计算机并交付协议栈中的网络层。当计算机要发送 IP数据报时，就由协议栈 把 IP数据报向下交给适配器，组装成帧后发送到局域网。</p><h3 id="section-13">3-06</h3><p>PPP 协议的主要特点是什么？为什么 PPP 不使用帧的编号？ PPP适用于什么情况？为什么 PPP 协议不能使数据链路层实现可靠传输？</p><p>解答： PPP 协议具有以下特点。（不可靠协议）</p><ol type="1"><li><p><strong>简单</strong>： PPP协议很简单。接收方每收到一个帧，就进行 CRC 检验。如 CRC 检验正确，就收下这个帧；反之，就丢弃这个帧，其他什么也不做。</p></li><li><p><strong>封装成帧</strong>： PPP协议规定了特殊的字符作为帧定界符，以便使接收端能从收到的比特流中准确地找出帧的开始和结束位置。</p></li><li><p><strong>透明性</strong>： PPP协议能够保证数据传输的透明性。如果数据中碰巧出现了和帧定界符一样的比特组合， PPP 规定了一些措施来解决这个问题</p></li><li><p><strong>支持多种网络层协议</strong>： PPP协议支持多种网络层协议（如 IP 和 IPX 等）在同一条物理链路上的运行。当点对点链路所连接的是局域网或路由器时， PPP协议必须同时支待在链路所连接的局域网或路由器上运行的各种网络层协议。</p></li><li><p><strong>支持多种类型链路</strong>： PPP能够在多种类型的链路上运行。例如，串行的（一次只发送一个比特）或并行的（一次并行地发送多个比特），同步的或异步的，低速的或高速的，电的或光的，交换的（动态的）或非交换的（静态的）点对点链路。 PPP不使用帧的编号，因为帧的编号是为了出错时可以有效地重传， &gt; 而 PPP并不需要实现可靠传输。</p></li></ol><p>PPP适用于线路质量不太差的情况。如果通信线路质量太差，传输就会频频出错。但PPP又没有编号和确认机制，这样就必须靠上层的协议（有编号和重传机制）才能保证数据传输正确无误。这样就会使数据的传输效率降低。</p><blockquote><p>在TCP/IP协议族中，可靠传输由运输层的TCP协议负责，PPP不需要纠错，不需要设置序号，不需要流量控制</p></blockquote><blockquote><p>ppp协议只支持点对点的链路通信，不支持多点线路</p></blockquote><blockquote><p>ppp协议只支持全双工链路</p></blockquote><h2 id="补充知识点crc检验">补充知识点：CRC检验</h2><p>循环冗余检验CRC</p><p>是一种检错方法，以帧为单位，对接收到的每一个帧都除以相同的模数p（模2运算），然后检查得到的余数R</p><p>R为0表示正确，R不等于0就丢弃</p><p>先在数据位后面补充p-1位的0，计算得到的R作为帧检验序列FCS，是添加在数据后面的冗余码</p><p>详见课本P77页</p><h3 id="section-14">3-07</h3><p>（1）要发送的数据为 1101011011 。采用 CRC 的生成多项式是 P(X) = x^4 +X + 1 。试求应添加在数据后面的余数。</p><p>（2）若要发送的数据在传输过程中最后一个 1 变成了 0, 即变成了1101011010, 问接收端能否发现？</p><p>（3）若要发送的数据在传输过程中最后两个 1 都变成了 0, 即变成了1101011000, 问接收端能否发现？</p><p>（4）采用 CRC 检验后，数据链路层的传输是否就变成了可靠的传输？</p><p>【解答】</p><p>（1）x<sup>4到x</sup>0的系数分别就是CRC的高位到低位，所以除数P为：10011（共5位）</p><p>1101011011后面加四个0得： 11010110110000 （5位p应该添加4个0）</p><p>用 11010110110000 除以 10011 得商：1100001010 余数：1110</p><p>所以应该添加在后面的余数是：1110（即把一开始添加的4个0换成现在算出来的余数1110）</p><blockquote><p>余数R总是比除数P少一位,所以在计算余数R时，我们先假设为4个0，计算得到的余数替换成4个0就好</p></blockquote><figure><img src="https://pic.imgdb.cn/item/66763447d9c307b7e9c46d48.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>（2）原本的被除数序列为：11010110111110因为数据位的最后一位的1换成了0，所以替换后的数据序列为： 11010110101110（注意是数据序列！）</p><p>用 11010110101110 除以 10011 得到商：1100001011 余数： 0011</p><p>余数不为0，接收端是可以发现的</p><figure><img src="https://pic.imgdb.cn/item/66763732d9c307b7e9c9d5eb.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>（3）当数据最后两位1都变成了0时，即 1101011011 -&gt; 1101011000</p><p>再添加FCS检验序列 1110</p><p>得到被除数： 11010110001110</p><p>除数 p=10011</p><p>11010110001110/10011 得到商：1100001001 余数 R = 0101</p><figure><img src="https://pic.imgdb.cn/item/66763a00d9c307b7e9cf65a6.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>（4）采用 CRC检验后，数据链路层的传输并非变成了可靠的传输。当接收方进行 CRC检验时，如果发现有差错，就简单地丢弃这个帧。数据链路层并不能保证接收方接收到的和发送方发送的完全一样。</p><h3 id="补充练习">3-8（补充练习）</h3><figure><img src="https://pic.imgdb.cn/item/66763bf9d9c307b7e9d3557d.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h3 id="section-15">3-10</h3><blockquote><p>ppp协议使用零比特填充的方式来实现透明传输，这是一种同步传输技术！！！</p></blockquote><p>PPP 协议使用同步传输技术传送比特串 0110111111111100。试问经过零比特填充后变成怎样的比特串？</p><p>若接收端收到的 PPP 帧的数据部分是0001110111110111110110,试问删除发送端加入的零比特后会变成怎样的比特串？</p><p>【解答】</p><p>第一个比特串 0110111111111100:</p><blockquote><p>零比特填充就是<strong>在一连 5 个 1 之后必须插入一个 0</strong>。</p></blockquote><p>经过零比特填充后变成011011111<strong>0</strong>11111<strong>0</strong>00 （加粗的 0是填充的）</p><p>另一个比特串 0001110111110111110110:</p><p>删除发送端加入的零比特，就是<strong>把一连 5 个 1 后面的 0删除</strong>。因此，删除发送端加入的零比特后就得出：000111011111-11111-110 （连字符表示删除了 0）。</p><h3 id="section-16">3-20</h3><p>假定 1 km 长的 CSMA/CD 网络的数据率为 1 Gbit/s。设信号在网络上的传播速率为 200000 km/s 。求能够使用此协议的最短帧长。</p><p>【解答】：</p><p>数据率1 Gbit/s表示啥意思？</p><p>“1 Gbit/s”具体表示的是每秒钟可以传输10亿个比特的信息。1千米长的限定条件下</p><p>1km/200000km/s = 多少秒钟传播时间----0.5*10^(-5)s</p><p>如果帧太短不会回传播不到另一端呢，这题感觉看懂，基本功不牢！！！</p><p>【官方解答】</p><p>l km 长的 CSMA/CD 网络的端到端传播时延 t = (1 km)/ (200000 km/s) = 5µs 。</p><p>2t = 10 µs, (一来一回2倍)</p><p>在此时间内要发送(1 Gbit/s)x（lO µs） = 10000 bit 。</p><p>只有经过这样一段时间后，发送端才能收到碰撞的信息（如果发生碰撞的话），也才能检测到碰撞的发生。</p><p>因此，最短帧长为 10000 bit, 或 1250 字节 。</p><p>我的理解是：如果帧的长度太短了，那么会导致一个问题就是传播过去的帧数据再传播过来所需要的时间就短于传播时延，发送端是无法检测到碰撞信号的，所以无法保证信息的准确传播</p><h3 id="section-17">3-29</h3><p>以太网交换机有何特点？用它怎样组成虚拟局域网？</p><figure><img src="https://pic.imgdb.cn/item/6676529fd9c307b7e9032631.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>【一些笔记】</p><p>局域网的概念大于以太网，但是现在讲局域网默认是以太网</p><p>只考虑媒体接入控制MAC子层，简化了概念</p><p>以太网提供的服务是尽最大努力的交付，是一种不可靠的交付，对有差错帧是否需要重传需要由高层来决定</p><h2 id="第四章课后习题"><strong>第四章课后习题</strong></h2><h3 id="section-18">4-04</h3><p>试简单说明下列协议的作用：IP, ARP 和 ICMP。</p><p>【解答】：</p><p>网际协议 IP ：使用协议 IP可以把互连以后的计算机网络看成是一个虚拟互连网络。所谓虚拟互连网络，就是逻辑互连网络，称为互联网。我们知道，各种物理网络的异构性本来是客观存在的，但是我们利用协议IP就可以使这些性能各异的网络在网络层上看起来好像是一个统一的网络。这种使用协议IP 的虚拟互连网络可简称为 IP 网。使用 IP 网的好处是：当 IP网上的主机进行通信时，就好像在单个网络上通信一样，它们看不见互连的各网络的具体异构细节（如具体的编址方案、路由选择协议，等等）。</p><p>地址解析协议 ARP: 用来把一个机器（主机或路由器）的 IP地址转换为相应的 MAC 地址（或硬件地址）。</p><p>网际控制报文协议 ICMP:用来使主机或路由器报告差错情况和提供有关异常情况的报告，这样就可以更有效地转发IP 数据报和提高交付成功的概率。</p><h3 id="section-19">4-05</h3><p>IP 地址如何表示？</p><p>【解答】：</p><p>IP 地址 (32 位）可记为：</p><p>IP 地址：：＝ ｛＜网络号＞，＜主机号＞｝</p><p>分类的 IP 地址共分为五类。</p><p>A 类地址：网络号字段为 1 字节，最前面的 1 位是 0 。</p><p>B 类地址：网络号字段为 2 字节，最前面的 2 位是 10 。</p><p>C 类地址：网络号字段为 3 字节，最前面的 3 位是 110 。</p><p>D 类地址：用于多播，最前面的 4 位是 1110 。</p><p>E 类地址：保留今后使用，最前面的 4 位是 1111 。</p><p>无分类地址又称为 CIDR 。由“网络前缀 "(network-prefix)（简称为“前缀＂）和主机号组 成 。 主机号字段称为后缀(suffix) 。 CIDR的记法是： IP 地址：：＝｛＜网络前缀＞，＜主机号＞｝但网络前缀的位数不固定，并且没有 A 类、 B 类或 C 类的划分。</p><figure><img src="https://pic.imgdb.cn/item/66737be2d9c307b7e9d80a5f.png"alt="![](Aspose.Words.52609da6-82ff-4708-ac03-bc1781cb7297.001.png)" /><figcaptionaria-hidden="true">![](Aspose.Words.52609da6-82ff-4708-ac03-bc1781cb7297.001.png)</figcaption></figure><h3 id="section-20">4-06</h3><p>IP 地址的主要特点是什么？</p><p>【解答】</p><p>IP 地址具有以下一些重要特点：</p><ol type="1"><li>每一个 IP 地址都由网络前缀和主机号两部分组成。从这个意义上说， IP地址是一种分等级的地址结构。</li><li>实际上 IP 地址是标志一个主机 （ 或路由器）和一条链路的接口。换言之， IP地址并不仅仅指明一个主机，同时还指明了主机所连接到的网络。</li><li>按照互联网的观点，一个网络是指具有相同网络前缀的主机的集合，因此，用转发器或网桥连接起来的若干个局域网仍为一个网络，因为这些局域网都具有同样的网络前缀。具有不同网络前缀的局域网必须使用路由器进行互连。</li><li>在 IP地址中，所有分配到网络前缀的网络（不管是范围很小的局域网，还是可能覆盖很大地理范围的广域网）都是平等的。</li></ol><h3 id="section-21">4-07</h3><p>试说明 IP 地址与 MAC 地址的区别。为什么要使用这两种不同的地址？</p><p>【解答】</p><p>从层次的角度看， MAC 地址是数据链路层和物理层使用的地址，而 IP地址是网络层和以上各层使用的地址，是一种逻辑地址（称 IP地址是逻辑地址是因为 IP 地址是用软件实现的）。</p><p>由于全世界存在着各式各样的网络，它们使用不同的 MAC地址。要使这些异构网络能够互相通信就必须进行非常复杂的 MAC地址转换工作，因此由用户或用户主机来完成这项工作几乎是不可能的事。但统一的IP 地址把这个复杂问题解决了 。</p><p>连接到互联网的主机只需拥有统一的 IP地址，它们之间的通信就像连接在同一个网络上那样简单方便。当需要把 IP地址转换为 MAC 地址时，调用 ARP的复杂过程都由计算机软件自动进行，而用户是看不见这种调用过程的。因此，在虚拟的IP 网络上用 IP 地址进行通信给广大的计算机用户带来很大的方便。</p><h3 id="section-22">4-15</h3><p>一个 3200 bit 长的 TCP 报文传到 IP 层，加上 160bit的首部后成为数据报。下面的互连网由两个局域网通过路由器连接起来，但第二个局域网所能传送的最长数据帧中的数据部分只有1200 bit,因此数据报在路由器中必须进行分片。试问第二个局域网向其上层要传送多少 bit的数据（这里的“数据”当然指的是局域网看见的数据）?</p><p>【解答】</p><p>第二个局域网所能传送的最长数据帧中的数据部分只有 1200 bit, 可见每一个IP 数 据报的最大长度是 1200 bit, 故其数据部分（即从 TCP传下来的数据）最多为：</p><p>IP 数据报的总长度- IP 数据报的首部＝ 1200 - 160 = 1040 bit</p><p>由于片偏移是以8字节即64bit为单位的，所以IP数据片的<strong>数据部分</strong>最大不超过1024bit</p><blockquote><p>书上原话</p></blockquote><p>片偏移是以8字节为偏移单位的，这就是说，除最后一个数据报外，其他每个分片的长度一定为8字节的整数倍，这里最大只能是1024！！！</p><p>可以这样划分：TCP 交给 IP 的数据共 3200 bit= 1024 + 1024 + 1024 +128, 因此 3200 bit 的数据必须划分为 4 个数据报，如图 T-4-15 所示。</p><figure><img src="https://pic.imgdb.cn/item/66737c80d9c307b7e9d8c235.png"alt="![](Aspose.Words.52609da6-82ff-4708-ac03-bc1781cb7297.002.png)" /><figcaptionaria-hidden="true">![](Aspose.Words.52609da6-82ff-4708-ac03-bc1781cb7297.002.png)</figcaption></figure><p>图中的 Hl, H2, H3, H4 分别是这 4 个数据报的首部，其长度都是 160 bit（但里面的内 容并不相同），而 TCP_l, TCP_2, TCP_3, TCP_4分别是这四个数据报片的数据部分，其长度分别为 1024 bit, 1024 bit, 1024bit 和 128 bit。这 4 个数据报的总长度（首部加上数据部分） 分别为1184bit, 1184bit, 1184bit 和 288bit。上面这些就是第二个局域网向其上层要传送的数据。因此，第二个局域网向上传送1184 + 1184 + 1184 + 288 = 3840 bit。</p><p>IP数据报首部的<strong>固定部分</strong>是20字节（160bit）</p><h3 id="section-23">4-16</h3><ol type="1"><li><p>试解释为什么 ARP 高速缓存每存入一个项目就要设置 10~20分钟的超时计时器。这个时间设置得太长或太短会出现什么问题？</p></li><li><p>至少举出两种不需要发送 ARP 请求分组的情况（即不需要请求将某个目的IP 地址解析为相应的 MAC 地址）。</p></li></ol><p>【解答】：</p><ol type="1"><li><p>当网络中某个 IP 地址和 MAC 地址的映射发生变化时， ARP高速缓存中相应的项目就要改变。例如，更换以太网网卡就会发生这样的事件。10-20分钟更换一块网卡是合理的。超时时间设置得太短会使 ARP请求和响应分组的通信太频繁，而超时时间设置得太长会使更换网卡后的主机迟迟无法和网络上的其他主机通信。</p></li><li><p>源主机的 ARP 高速缓存中已经有了该目的 IP地址的项目；源主机发送的是广播分组；源主机和目的主机使用点对点链路。</p></li></ol><p>4-17 主机 A 发送 IP 数据报给主机 B, 途中经过了 5 个路由器。试问在 IP数据报的发 送过程中总共使用了几次 ARP?</p><p>【解答】： 6 次。主机发送 IP 数据报时用一次 ARP, 每一个路由器在转发IP 数据报时各使用一次。</p><h3 id="section-24">4-17</h3><p>IP 协议有分片的功能，但广域网中的分组则不必分片。这是为什么？</p><p>【解答】：</p><p>IP数据报可能要经过许多个网络，而源主机事先并不知道数据报后面要经过的这些网络所能通过的分组的最大长度是多少。等到 IP数据报转发到某个网络时，可能才发现数据报太长了，因此在这时就必须进行分片 。</p><p>但广域网能够通过的分组的最大长度是该广域网中所有主机都事先知道的，源主机不可能发送网络不支持的过长分组，因此广域网就没有必要将已经发送出的分组再进行分片。</p><h3 id="section-25">4-19</h3><p>链路层广播和 IP 广播有何区别？</p><p>【解答】：</p><p>链路层广播是用数据链路层协议（在第二层）在一个以太网上实现的对该局域网上所有主机的MAC 帧广播 。</p><p>IP 广播则是用 IP协议（在第三层）通过互联网实现的对一个网络（即目的网络）上所有主机的 IP数据报广播。</p><h3 id="section-26">4-19</h3><p>某单位分配到一个地址块 129.250/ 16 。该单位有 4000 台计算机，平均分布在 16 个不同的地点 。试给每一个地点分配一个地址块，并算出每个地址块中 IP 地址的最小值和最大值。</p><p>【解答】：</p><p>4000 台计算机平均分布在 16 个不同的地点，每个地点有 250台计算机。因此，主机号有 8 位就够了。这样，网络前缀可以选用 24 位 。 16个不同地点需要有 16 个地址块 。 每个地点分到一个／24地址块就够用了。</p><p>结果如下：</p><p>129.250.1/24, IP 地址范围： 129.250.1.0 ~ 129.250.1.255</p><p>129.250.2/24, IP 地址范围： 129.250.2.0 ~ 129.250.2.255</p><p>......</p><p>129.250.16/24, IP 地址范围： 129.250.16.0 ~ 129.250.16.255</p><h3 id="section-27">4-24</h3><figure><img src="https://pic.imgdb.cn/item/66739e7ed9c307b7e90d895f.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6673a070d9c307b7e910d4a4.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6673a08ed9c307b7e9110c5e.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h3 id="section-28">4-25</h3><p>一个主机要向另一个主机发送 IP 数据报，是否使用 ARP就可以得到该目的主机的 MAC 地址，然后直接用这个 MAC 地址将 IP数据报发送给目的主机？</p><p>【解答】：</p><p>有时是这样，但有时也不是这样。ARP只能对连接在同一个网络上的主机或路由器进行地址解析。我们看图 Q-4-25的例子。</p><figure><img src="https://pic.imgdb.cn/item/667380c5d9c307b7e9dea2ae.png"alt="![](Aspose.Words.52609da6-82ff-4708-ac03-bc1781cb7297.003.png)" /><figcaptionaria-hidden="true">![](Aspose.Words.52609da6-82ff-4708-ac03-bc1781cb7297.003.png)</figcaption></figure><p>由于 A 和 B 连接在同一个网络上，因此主机 A 使用 ARP 协议就可得到 B 的MAC 地址， 然后用 B 的 MAC 地址，将 IP 数据报组装成帧，发送给 B 。</p><p>但当目的主机是 F 时，情况就不同了。 A 无法得到 F 的 MAC地址，只能先将 IP 数据报 发送给本网络上的一个路由器（在本例中就是路由器R1) 。因此，当 A 发送 IP 数据报给 F 时，在地址解析方面要经过以下三个步骤：</p><p>（1）A 先通过 ARP 解析出路由器凡的 MAC 地址，将 IP 数据报发送到R1</p><p>（2）R1 再通过 ARP 解析出 R2 的 MAC 地址，将 IP 数据报转发到 R2</p><p>（3）R2 再通过 ARP 解析出 F 的 MAC 地址，将 IP 数据报交付 F 。</p><p>因此， A 发送 IP 数据报给 F 要经过三次 ARP 地址解析。 A 只知道 F 的IP 地址，但并不知道F的MAC地址。</p><p>从A到F，中间经过了两个路由器，需要使用三次（2+1）ARP地址解析协议</p><h3 id="section-29">4-26</h3><p>一个大公司有一个总部和三个下属部门 。 公司分配到的网络前缀是192.77.33/24 。 公司的网络布局如图 T-4-26 所示。总部共有 5个局域网，其中的 LAN1 ~ LAN4 都连接到路由器 R1 上， R1 再通过 LAN5与路由器 R2 相连。 R2 和远地的三个部门 的局域网 LAN6 ~ LAN8通过广域网相连。每一个局域网旁边标明的数字是局域网上的主机数。试给每一个局域网分配一个合适的网络前缀。</p><figure><img src="https://pic.imgdb.cn/item/667388e6d9c307b7e9e94207.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>1100 0000.0100 1101.0010 0001.0000 0000</p><p>50+10+28+10+20+20+25=163&lt;256 8位</p><p>lan1: 192.77.33. + 1100.0000 64-2个</p><p>lan2: 192.77.33. + 1111.0000 16-2个</p><p>lan3: 192.77.33. + 1110.0000 32-2个</p><p>解答：</p><p>50 个主机的 LAN1 需要前缀／26 （主机号 6 位， 62个主机号，凡的接口占用一个号 码），</p><p>28 个主机的 LAN3 需要前缀／27 （主机号 5 位， 30个主机号，民的接口占用一个号码），</p><p>10 个主机的 LA2和 LAN4 各需要一个前缀／28 （主机号 4 位， 14个主机号，凡的接口占用一个号码）。</p><p>LAN6~ LAN8 （加上路由器）各需要一个前缀／27 （主机号 5 位， 30个主机号， R1-R5的接口各占用一个号码）。</p><p>3 个 WAN 各有两个端点，各需要一个前缀／30 （主机号 2 位， 2 个主机号）。</p><p>LAN5 需要前缀／30 （主机号 2 位，用 2个号码分配给路由器R1和R2的一个接口）</p><p>考虑到以太网上可能还要再接几个主机，故留有余地，可分配一个前缀／29（主机号 3 位， 6 个主机号）。</p><p>下面给出其中的一种答案：<br />LAN1: 192.77.33.0/26<br />LAN3: 192.77.33.64/27<br />LAN6: 192.77.33.96/27<br />LAN7: 192.77.33.128/27<br />LAN8: 192.77.33.160/27<br />LAN2: 192.77.33.192/28<br />LAN4: 192.77.33.208/28<br />LAN5: 192.77.33.224/29（考虑到以太网上可能还要再接几个主机，故留有余地。）<br />WAN1: 192.77.33.232/30<br />WAN2: 192.77.33.236/30<br />WAN3: 192.77.33.240/30</p><p>遇到这种题从需要的主机数入手开始计算，然后排网络号，从小到大排，主机号多的先排大的网络号</p><h3 id="section-30">4-31</h3><p>已知地址块中的一个地址是 140.120.84.24/20。试求这个地址块中的最小地址和最大地址。地址掩码是什么？地址块中共有多少个地址？相当于多少个C 类地址？</p><p>0101 0100</p><p>最小地址直接用IPand/20</p><p>得<br />最小地址：140.120.80.0/20</p><p>最大地址 140.120.95.255/20</p><p>地址掩码： 11111111 11111111 11110000 00000000</p><p>主机号有12位</p><p>2^12-2个地址!!!(这里应该不要-2)</p><p>因为问的是地址数不是可分配的地址数!</p><p>2^4=（16）个c类地址</p><p>解答：</p><p>最小地址是 140.120.80.0/20<br />最大地址是 140.120.95.255/20<br />地址掩码是 11111111 11111111 11110000 00000000<br />地址数是 2^12 =4096, 相当千 16 个 C 类地址</p><h3 id="section-31">4-33</h3><p>某单位分配到一个地址块 136.23.12.64/26 。现在需要进一步划分为 4个一样大的子网。试问：</p><ol type="1"><li><p>每个子网的网络前缀有多长？</p></li><li><p>每一个子网中有多少个地址？</p></li><li><p>每一个子网的地址块是什么？</p></li><li><p>每一个子网可分配给主机使用的最小地址和最大地址是什么？</p></li></ol><p>26位网络号，有6个主机号（64个可分配）</p><p>64/4=16 均分</p><p>16=4个主机号，所以前缀有 28 位</p><p>每个子网中有 16 个地址 （14可用）</p><p>0100 0000 所有网络的起点！！</p><p>子网地址块：</p><p>136.23.12.64/28</p><p>136.23.12.80/28</p><p>136.23.12.96/28</p><p>136.23.12.112/28</p><p>最小地址：136.23.12.65/28 最大地址 136.23.12.78/28</p><p>0100 1110 64+8+4+2=78</p><p>解答： (1) 原来网络前缀是 26 位，需要再增加 2 位，才能划分为 4个一样大的子网。因此，每个子网前缀是 28 位。</p><ol start="2" type="1"><li>每个子网的地址中有 4 位留给主机用，因此共有 16 个地址（可用的 14个）。</li></ol><p>(3)4 个子网的地址块分别是： 136.23.12.64/28, 136.23.12.80/28,136.23.12.96/28, 136.23.12.112/28 。</p><ol start="4" type="1"><li>地址中的前三个字节分别记为 Bl, B2 和 B3 。</li></ol><p>第一个地址块 136.23.12.64/28 可分配给主机使用的最小地址是136.23.12.65, 最大地址是 136.23.12.78 。</p><p>第二个地址块 136.23.12.80/28 可分配给主机使用的最小地址是136.23.12.81, 最大地址是 136.23.12.94 。</p><p>第三个地址块 136.23.12.96/28 可分配给主机使用的最小地址是136.23.12.97, 最大地址是 136.23.12.110 。</p><p>第四个地址块 136.23.12.112/28 可分配给主机使用的最小地址是136.23.12.113, 最大地址 是 136.23.12.126 。</p><h3 id="section-32">4-47</h3><p>某单位分配到一个地址块 14.24.74.0/24。该单位需要用到三个子网，它们对三个子地址块的具体要求是：子网 N1 需要120 个地址，子网 N2 需要 60 个地址，子网 N3 需要 10个地址。请给出地址块的分配方案。</p><p>笔记：</p><p>N1 120 个 128 7位 主机号</p><p>N2 60 个 64 6位 主机号</p><p>N3 10 个 16 4位主机号</p><p>先分主机号多的</p><p>N1 14.24.74.0/25 - 14.24.74.127/25</p><p>0000 0000 - 0111 1111</p><p>N2 14.24.74.128/26 - 14.24.74.191/26</p><p>1000 0000 - 1011 1111</p><p>N3 14.24.74.192/28 - 14.24.74.207/28</p><p>1100 0000 - 1100 1111</p><p>解答：这个单位的地址块的网络前缀是 24 位，因此主机号有 8 位，即一共有256 个地址。</p><p>可以拿总地址的一半 (128 个）分配给子网 N1 （实际上可以使用的地址数是126 个 ） 。这个地址块的网络前缀是 25 位 。</p><p>再将剩下地址的一半 (64 个）分配给子网 N2 （ 实际上可以使用的地址数是62 个）。这个地址块的网络前缀是 26 位 。</p><p>还剩下 64 个地址，可以拿出 1/4 （即 16 个地址）分配给子网 N3（实际上可以使用的地址数是 14 个）。这个地址块的网络前缀是 28 位 。</p><p>最后剩下 48 个地址留给以后再用 。</p><p>这样，分配给子网 N1 C/25) 的首地址是 14.24 . 74 . 0, 末地址是 14.24 .74.127 。</p><p>分配给子网 N2 ( /26 ) 的首地址是 14 . 24.74.128, 末地址是14.24.74.191 。</p><p>分配给子网 N3 C/28) 的首地址是 14 . 24.74.192, 末地址是 14. 24 .74.207 。</p><p>图 T-4-47 显示了上述分配方案。</p><figure><img src="https://pic.imgdb.cn/item/6673945fd9c307b7e9fb1f6d.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h3 id="section-33">4-48</h3><p>如图 T-4-48(a)所示，网络 145.13.0.0/16 划分为四个子网 N1,N2, N3 和 N4。这四个子网与路由器 R 连接的接口分别是 m0, m1, m2 和 m3 。路由器 R的第五个接口m4 连接到互联网 。</p><ol type="I"><li>试给出路由器 R 的路由表 。</li></ol><ol start="2" type="1"><li>路由器 R 收到一个分组，其目的地址是145.13.160.78。试解释这个分组是怎样被转发的。</li></ol><figure><img src="https://pic.imgdb.cn/item/6673967dd9c307b7e9ff0af7.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>笔记：</p><blockquote><p>路由表长啥样要知道！！！</p></blockquote><p>网络前缀 下一跳</p><p>145.13.0.0/18 直接交付 接口m0</p><p>145.13.64.0/18 直接交付，接口m1</p><p>145.13.128.0/18 直接交付 接口m2</p><p>145.13.192.0/18 直接交付，接口m3</p><figure><img src="https://pic.imgdb.cn/item/6673984fd9c307b7e9020866.png"alt="https://pic.imgdb.cn/item/6673984fd9c307b7e9020866.png" /><figcaptionaria-hidden="true">https://pic.imgdb.cn/item/6673984fd9c307b7e9020866.png</figcaption></figure><p>请注意，最后一行的网络前缀是 0.0.0.0/0 。这样的网络前缀和任何一个 IP地址进行按位 AND 运算，其结果都必定是 0, 即一定是匹配的。这时就通过接口m4 交给默认路由器来处理</p><p>默认路由是当路由器在路由表中找不到目标网络的路由条目时，路由器把请求转发到默认路由接口的一种特殊路由。它是对IP数据包中的目的地址找不到存在的其他路由时，路由器所选择的路由。默认路由一般应用于网络出口，指向互联网，实现内网主机能够跟外网通信。默认路由在路由表中的处理方式是，当常规的路由列表没有匹配时，才会查看或调用默认路由，因此也被称作“最后一根稻草”。</p><p>默认路由的特点包括：</p><p>它只能存在于末梢网络中，即那些不直接连接到互联网，而是通过其他路由器才能访问互联网的网络。默认路由是一种特殊的静态路由，其目的地和掩码通常设置为全零，即0.0.0.0/0，表示它可以匹配任何目的地址。在路由表中，默认路由通常位于最底部，作为一种“不负责任”的表现，类似于“甩锅”，当转发的数据找不到对应的路由时，就会找默认路由。</p><p>-----引自百度百科</p><blockquote><p>为什么：0.0.0.0/0，表示它可以匹配任何目的地址。</p></blockquote><p>在计算机网络中，IP地址的子网掩码用于确定IP地址中的哪一部分表示网络地址，哪一部分表示主机地址。子网掩码由一系列连续的1组成，后面跟着0。当子网掩码为0.0.0.0时，表示<strong>没有网络地址部分，即所有的IP地址位都用于主机地址</strong></p><p>/0表示子网掩码的位数，当子网掩码为/0时，意味着子网掩码的所有位都是0，即0.0.0.0。这表示没有任何网络地址的限制，可以匹配任何目的地址。</p><figure><img src="https://pic.imgdb.cn/item/66739e29d9c307b7e90cfc54.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/66739e41d9c307b7e90d22b1.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h2 id="第五章课后习题"><strong>第五章课后习题</strong></h2><p>涉及到的题目有：5-23、传输层PPT最后一页的思考题</p><h3id="主机-a-向主机-b-连续发送了两个-tcp-报文段其序号分别是-70-和-100-试问">5-23主机 A 向主机 B 连续发送了两个 TCP 报文段，其序号分别是 70 和 100。试问：</h3><ol type="1"><li><p>第一个报文段携带了多少字节的数据？</p></li><li><p>主机 B收到第一个报文段后发回的确认中的确认号应当是多少？</p></li><li><p>如果 B 收到第二个报文段后发回的确认中的确认号是 180 ，试问 A发送的第二个报文段中的数据有多少字节？</p></li><li><p>如果 A 发送的第一个报文段丢失了，但第二个报文段到达了 B 。 B在第二个报文段到达后向 A 发送确认。试问这个确认号应为多少？</p></li></ol><p>解答：分别求解如下：</p><ol type="1"><li><p>第一个报文段的数据序号是 70 到 99, 共 30 字节的数据。</p></li><li><p>B 期望收到下一个报文段的第一个数据字节的序号是 100,因此确认号应为 100 。</p></li></ol><p>(3)A 发送的第二个报文段中的数据的字节数是 180-100=80 字节。</p><ol start="4" type="1"><li>B 在第二个报文段到达后向 A 发送确认，其确认号应为 70。要求重传！！！</li></ol><h3 id="思考题">思考题</h3><blockquote><p>这题值得好好看，但是要先复习运输层这一章的内容才行！！！</p></blockquote><p>假设客户机C访问服务器S，S为新建的TCP连接分配了20kB的接收缓存，最大报文段大小MSS=1KB，往返时间延时RTT=200MS。C建立连接时的初始序号为100，且持续以MSS大小的单位向S发送数据，拥塞窗口的初始阈值为32KB；S对接收的每个段进行确认，并通告新的接收窗口。假设TCP连接建立完后，S端的TCP接收缓存仅有数据存入而无数据取出。请回答：</p><p>（1）TCP连接建立过程中，C收到的S发送的第二次握手TCP段的SYN和ACK标志位的值分别是多少？确认序号是多少？</p><p>（2）C收到的第8个确认段通告的接收窗口是多少？此时C的拥塞窗口是多少？C的发送窗口是多少？</p><p>（3）当C的发送窗口等于0时下一个待接收的数据段序号是多少？C从发送第1个数据段到发送窗口等于0时刻为止，平均数据传输率是多少（忽略段的传输延时）？</p><h2 id="第六章课后习题"><strong>第六章课后习题</strong></h2><p>涉及到的题目：6-02、6-03、6-14、6-20、6-22、6-24、6-25</p><h3id="域名系统的主要功能是什么域名系统中的本地域名服务器根域名服务器顶级域名服务器以及权限域名服务器有何区别">6-02域名系统的主要功能是什么？域名系统中的本地域名服务器、根域名服务器、顶级域名服务器以及权限域名服务器有何区别？</h3><p>解答：域名系统 DNS是互联网使用的命名系统，用来把便于人们使用的机器名字转换为 IP地址。在域名系统中使用了层次结构的许多域名服务器。</p><p>本地域名服务器离用户较近，一般不超过几个路由器的距离。当一个主机发出DNS查询请求时，这个查询请求报文就发送给本地域名服务器。当所要查询的主机也属于同一个本地ISP 时，该本地域名服务器立即就能将所查询的主机名转换为它的 IP地址，而不需要再去询问其他的域名服务器 。</p><p>根域名服务器是最高层次的域名服务器，也是最重要的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和IP 地址。根域名服务器是最重要的域名服务器，因为不管是哪一个本地域名服务器，若要对互联网上任何一个域名进行解析（即转换为IP地址），只要自己无法解析，就<strong>首先要求助于根域名服务器</strong>。</p><p>顶级域名服务器负责管理在该顶级域名服务器注册的所有二级域名。当收到DNS查询请求时，就给出相应的回答（可能是最后的结果，也可能是下一步应当找的域名服务器的IP 地 址）。</p><p>一个服务器所负责管辖的 （ 或有权限的）范围叫作区 。各单位根据具体情况来划分自己管辖范围的区 。但在一个区中的所有节点必须是能够连通的 。 每一个区设置相应的权限域名服务器，用来保存该区中的所有主机的域名到 IP地址的映射。因此，<strong>权限域名服务器是负责一个区的域名服务器</strong>。当一个权限域名服务器还不能给出最后的查询回答时，就会告诉发出查询请求的DNS 客户，下一步应当找哪一个权限域名服务器。</p><p>根域名服务器-顶级域名服务器-本地域名服务器</p><p>一个区的域名服务器：权限域名服务器，管理整个区的映射</p><h3 id="举例说明域名转换的过程-域名服务器中的高速缓存的作用是什么">6-03举例说明<code>域名转换的过程</code>。域名服务器中的<code>高速缓存的作用</code>是什么？</h3><p>这玩意内容有点多，后面有时间再整理...</p><p>解答：</p><p>域名到 IP 地址的解析过程的要点如下：</p><p>当某一个应用进程需要把主机名解析为 IP地址时，该应用进程就调用解析程序，并成为 DNS的一个客户，把待解析的域名放在 DNS 请求报文中，以<code>UDP 用户数据报方式</code>发给本地域名服务器（使用 UDP是为了减少开销）。</p><p>本地域名服务器在查找域名后，把对应的 IP地址放在回答报文中返回。应用进程获得目的主机的 IP地址后即可进行通信。</p><p>若本地域名服务器不能回答该请求，则此域名服务器就暂时成为 DNS中的另一个客户，并向其他域名服务器发出查询请求。这种过程直至找到能够回答该请求的域名服务器为止。</p><p>为了提高域名服务器的可靠性， DNS域名服务器都把数据复制到几个域名服务器来保存，其中的一个是主域名服务器，其他的是辅助域名服务器。当主域名服务器出故障时，辅助域名服务器可以保证 DNS 的查询工作不会中断 。主域名服务器定期把数据复制到辅助域名服务器中，而更改数据只能在主域名服务器中进行。这样就保证了数据的一致性。</p><p><code>主机向本地域名服务器的查询一般都采用递归查询</code>。</p><p><code>本地域名服务器向根域名服务器的查询通常采用迭代查询</code>。</p><p>根域名服务器通常是把自己知道的顶级域名服务器的 IP地址告诉本地域名服务器，让本地域名服务器再向顶级域名服务器查询。顶级域名服务器在收到本地域名服务器的查询请求后，要么给出所要查询的IP地址，要么告诉本地域名服务器下一步应当向哪一个权限域名服务器进行查询，本地域名服务器就这样进行迭代查询。最后，知道了所要解析的域名的IP 地址，然后把这个结果返回给发起查询的主机。</p><p>当然，本地域名服务器也可以采用递归查询，这取决于最初的查询请求报文的设置是要求使用哪一种查询方式。</p><p>递归查询返回的查询结果或者是所要查询的 IP地址，或者是报错，表示无法查询到所需的 IP 地址 。</p><h3 id="请判断以下论述的正误并简述理由">6-14请判断以下论述的正误，并简述理由。</h3><ol type="1"><li><p>用户点击某网页，该网页有 1 个文本文件和 3张图片。此用户可以发送一个请求就可以收到 4 个响应报文。</p></li><li><p>有以下两个不同的网页： www.abc.com/m1.html 和 www.abc.com/m2.html。用户可以使用同一个 HTTP/1.1持续连接传送对这两个网页的请求和响应。</p></li><li><p>在客户与服务器之间进行非待续连接，只需要用一个 TCP报文段就能够装入两个不同的 HTTP 请求报文。</p></li><li><p>在 HTTP 响应报文中的主体实体部分永远不会是空的。</p></li></ol><p>解答：</p><p>(1） 错误。对于非持续 HTTP, 需要使用 4 个 TCP 连接分别来发送这 4个（请求和响应）。对于持续 HTTP, 可以在一个 TCP 连接连续传送 4个（请求和响应）。</p><ol start="2" type="1"><li><p>正确。显然，这两个网页处在同一个服务器上（<code>两个网页的域名是一样的</code>,不一样的是路径名）。如果用户使用HTTP/1.1 持续连接，那么可以在这个连接上传送这两个网页。</p></li><li><p>错误。对于客户与服务器之间的<code>非持续连接，每一个新的 HTTP 请求报文必须使用一个新的 TCP 连接。</code></p></li><li><p>错误。在某些情况下，服务器无法找到客户所请求的文件。这时，服务器返回的响应的主体实体部分就是空的。这时，在HTTP 响应报文的状态行中会返回 一个状态码，例如 404 。</p></li></ol><h3id="试述电子邮件的最主要的组成部件用户代理-ua-的作用是什么没有-ua-行不行">6-20试述电子邮件的最主要的组成部件。用户代理 UA 的作用是什么？没有 UA行不行？</h3><p>解答：一个电子邮件系统应具备三个主要组成构件，这就是<strong>用户代理、邮件服务器，以及邮件发送协议（如SMTP） 和邮件读取协议（如 POP3）</strong> 。</p><p>用户代理 UA(User Agent)就是用户与电子邮件系统的接口，在大多数情况下它就是运行在用户 PC中的一个程序。因此用户代理又称为电子邮件客户端软件。用户代理向用户提供一个很友好的接口（目前主要是用窗口界面）来发送和接收邮件。具体来讲，用户代理至少应当具有以下四个功能。</p><ol type="1"><li><p>撰写：给用户提供编辑信件的环境。</p></li><li><p>显示：能方便地在计算机屏幕上显示出来信和去信 。</p></li><li><p>处理：包括发送邮件和接收邮件。</p></li><li><p>通信：发信人在撰写完邮件后，要利用邮件发送协议发送到用户所使用的邮件服务器。</p></li></ol><p>收件人在接收邮件时，要使用邮件读取协议从本地邮件服务器接收邮件。</p><p>如果没有用户代理 UA,那么对于要使用电子邮件的用户就很不方便了。因为上面所说的UA的功能，就要统统由用户自己来编程实现。如果用户不会计算机编程，那么他就无法使用电子邮件。即使用户会计算机编程，那么这也将耗费他很长的时间，使他不愿意使用这样的电子邮件。因此，用户代理UA 对电子邮件用户来说是必不可少的 。</p><h3id="电子邮件的地址格式是怎样的请说明各部分的意思">6-22电子邮件的地址格式是怎样的？请说明各部分的意思。</h3><p>解答：</p><p>邮件地址的格式如下：</p><p><code>收件入邮箱名＠邮箱所在主机的域名</code></p><p>在上式中，符号“@“读作 “at",表示“在＂的意思。<code>收件人邮箱名又简称为用户名，是收件人自己定义的字符串标识符</code>。但应注意，标志收件人邮箱名的字符串在邮箱所在邮件服务器的计算机中必须是唯一的。我们知道，<code>邮箱所在的主机的域名在互联网中是唯一的</code>，这样就<code>保证了这个电子邮件地址在整个互联网范围内是唯一的</code>。这对保证电子邮件能够在整个互联网范围内的准确交付是十分重要的。</p><p>电子邮件的用户一般采用容易记忆的字符串。例如，域名 163.com在互联网范围内是唯一的。如果我们要向网易(163.com)申请一个电子邮件地址，就可以先取一个收件人邮箱名试试看。例如，我们选择xyz 。这时可能屏幕显示此邮箱名已经有人选用了，于是我们可以在 xyz后面加上一些字符再试试。例如，我们取xyz2010,如果屏幕显示可以用这个邮箱名，那么以后我们就使用 xyz2010@163.com这个电子邮件地址，可以保证在整个互联网范围内一定是唯一的。</p><h3id="试述邮局协议-pop-的工作过程在电子邮件中为什么需要使用-pop-和-smtp这两个协议-imap-与-pop-有何区别">6-24试述邮局协议POP 的工作过程。在电子邮件中，为什么需要使用 POP 和 SMTP这两个协议？IMAP 与 POP 有何区别？</h3><p>解答：<code>邮局协议 POP 是一个非常简单、但功能有限的邮件读取协议</code>。POP 已成为互联网的正式标准。大多数的 ISP 都支持 POP 。 POP3 可简称为 POP。</p><p>在电子邮件系统中， <code>SMTP 协议是用来发送电子邮件的</code>，而<code>POP 协议是用户读取电子邮件的协议</code>。因此，<code>这两个协议都是电子邮件系统必不可少的</code>。</p><p>在<code>电子邮件读取协议中有 POP 和 IMAP 两种</code>。 POP协议的一个特点就是只要用户从 POP服务器读取了邮件，POP服务器就把该邮件删除。这在某些情况下就不够方便。</p><p>在使用 IMAP 时，在用户的 PC 上运行 IMAP客户程序，然后与接收方的邮件服务器上的 IMAP服务器程序<code>建立 TCP 连接</code>。用户在自己的 PC上就可以操纵邮件服务器的邮箱，就像在 本地操纵一样，因此<code>IMAP 是一个联机协议</code>。</p><p>当用户 PC 上运行 IMAP 客户程序，并打开IMAP服务器的邮箱时，用户就可看到邮件的首部。</p><p>若用户需要打开某个邮件，则该邮件才传到用户的计算机上。</p><p>用户可以根据需要为自己的邮箱创建便于分类管理的层次式的邮箱文件夹，并且能够将存放的邮件从某一个文件夹中移动到另一个文件夹中。用户也可按某种条件对邮件进行查找。</p><p>在用户未发出删除邮件的命令之前， IMAP服务器邮箱中的邮件一直保存着。</p><p><code>IMAP 最大的好处就是用户可以在不同的地方使用不同的计算机</code>，随时上网阅读和处理自己的邮件。</p><p><code>IMAP 还允许收件人只读取邮件中的某一个部分</code>。例如，为了节省时间，可以先下载邮件的正文部分，待以后有时间再读取或下载邮件的附件。</p><p><code>IMAP的缺点是如果用户没有将邮件复制到自己的 PC 上，则邮件一直存放在 IMAP 服务器上。因此，用户需要经常与 IMAP 服务器建立连接。</code></p><h3id="mime-与-smtp-的关系是怎样的什么是-quoted-printable-编码和-base64-编码">6-25MIME 与 SMTP 的关系是怎样的？什么是 quoted-printable 编码和 Base64编码？</h3><p>解答：</p><p>电子邮件的协议 SMTP 有以下缺点：</p><ol type="1"><li><p>SMTP 不能传送可执行文件或其他的二进制对象。</p></li><li><p>SMTP 限于传送 7 位的 ASCII码。许多其他非英语国家的文字（如中文、俄文，甚至带重音符号的法文或德文）就无法传送。</p></li><li><p>SMTP 服务器会拒绝超过一定长度的邮件 。</p></li><li><p>某些 SMTP 的实现并没有完全按照 SMTP的互联网标准。常见的问题如下：<br />• 回车、换行的删除和增加；<br />• 超过 76 个字符时的处理：截断或自动换行；<br />• 后面多余空格的删除；<br />• 将制表符 tab 转换为若干个空格。</p></li></ol><p>于是，在这种情况下就提出了<code>通用互联网邮件扩充 MIME</code>，MIME并没有改动或取代 SMTP 。</p><p>MIME 的意图是继续使用目前的 RFC 822格式，但<code>增加了邮件主体的结构</code>，<code>并定义了传送非 ASCII 码的编码规则。</code></p><p>MIME 主要包括以下三部分内容：</p><ol type="1"><li><p>5 个新的邮件首部字段，它们可包含在 RFC 822首部中。这些字段提供了有关邮件主体的信息。</p></li><li><p>定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。</p></li><li><p>定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。</p></li></ol><p>quoted-printable 编码和 Base64 编码都是 MIME 常用的内容传送编码。</p><p>quoted-printable 编码适用于当所传送的数据中只有少量的非 ASCII码，例如汉字。这种编码方法的要点就是对千所有可打印的 ASCII码，除特殊字符等号”=“外，都不改变。等号”=“和不可打印的 ASCII 码以及非ASCII码的数据的编码方法是：先将每个字节的二进制代码用两个十六进制数字表示，然后在前面再加上一个等号”=“。例如，汉字的“系统”的二进制编码是：11001111 10110101 11001101 10110011 （共有 32 位，但这四个字节都不是ASCII 码），其十六进制数字表示为： CFBSCDB3 。用 quoted-printable编码表示为： ＝CF=BS=CD=B3, 这12 个字符都是可打印的 ASCII字符，它们的二进制编码需要 96 位，和原来的 32 位相比，开销达 200%。而等号”=”的二进制代码为 00111101, 即十六进制的 3D,因此等号”=”的quoted-printable 编码为 “=3D” 。对于任意的二进制文件，可用Base64 编码。这种编码方法是先把二进制代码划分为一个个 24位长的单元，然后把每一个 24 位单元划分为 4 个 6 位组。每一个 6位组按以下方法转换成 ASCII 码。 6 位的二进制代码共有 64 种不同的值，从 0到 63 。用 A 表示 0, 用 B 表示 l,等等。 26个大写字母排列完毕后，接下去再排 26 个小写字母，再后面是 10个数字，最后用"+"表示 62, 而用 “I" 表示 63 。再用两个连在一起的等号”=＝”和一个等号”=“分别表示最后一组的代码只有 8 位或 16位。回车和换行都忽略，它们可在任何地方插入。</p><p>域名解析的过程</p><p>如www.sina.com.cn：</p><p>1、浏览器会先看本地有没有这个域名的缓存，如果有，就直接返回；如果没有，再去找本机hosts文件，如果有对应IP地址，则使用；如果没有，就请求LDNS。</p><p>2、LDNS查询是否有www.sina.com.cn的A记录，如果有，就直接返回对应的IP地址；如果没有，就查询是否有sina.com.cn的NS记录，如果有，LDNS就给该域名发请求；如果没有，就查询是否有com.cn的NS记录，如果有，LDNS就给该NS发送请求；如果没有，就查询是否有cn的DNS，如果没有cn的NS记录，LDNS就给根域名服务器发送解析请求（13个IP通常是预先配置在LDNS里面）。</p><p>3、如前图所示过程进行解析。</p><h2 id="课堂练习">课堂练习</h2><h3 id="概述物理层">概述+物理层</h3><h4id="下列关于客户-服务器工作方式的特点不正确的是-b">下列关于<code>客户-服务器工作方式</code>的特点，不正确的是（B ）。</h4><p>A 客户方主动发送请求<br />B 客户被动等待请求<br />C 服务器被动等待请求<br />D 服务器响应请求</p><p>客户是服务请求方，服务器是服务提供方；</p><p>客户主动请求服务，服务器被动等待接受请求</p><h4id="下列关于分组交换的表述不正确的是-b">下列关于分组交换的表述，不正确的是（B ）。</h4><p>A 分组是由协议构成的</p><p>B 分组一定要进行编号</p><p>C <code>分组交换的核心是存储转发</code></p><p>D 分组由路由器转发</p><p>电路交换-报文交换-分组交换</p><p>分组是不一定需要进行编号的</p><p>每一个分组（IP数据报）独立传播，与前后的分组无关，不进行编号</p><h4id="m和1000m的网卡它们的发送速率不同但是在双绞线上的传播速率是相同的-a">100M和1000M的网卡，它们的发送速率不同，但是在双绞线上的传播速率是相同的。A</h4><p>A 正确</p><p>B 错误</p><h4 id="协议的三要素是指-abc">协议的三要素是指 ABC</h4><p>A 语法 B 语义 C 同步 D 语言</p><h4 id="下列表述中正确的是-d">下列表述中正确的是 D</h4><p>A 网络层负责为分组交换网不同主机提供通信服务</p><p>B 运输层负责为两合主机中进程通信提供数据传输服务。</p><p>C 数据链层负责为相邻节点之间提供通信服务。</p><p>D 以上都正确</p><h4 id="下列表述中不正确的是-a">下列表述中不正确的是 A</h4><p>A 通信双方各对等层的通信都是虚拟通信</p><p>B 每个通信节点通信都是由一系列通信协议构成的协议栈完成的</p><p>C 发送时，从上层到下层协议层层封装，接收时从下层到上层是层层解封</p><p>D TCP/IP体系结构的网络允许网络接口层使用任何的协议</p><p>网络接口层就是网络层</p><p>物理层就是个例外</p><h4id="以太网卡的水晶头从外观上观看体现了-a">以太网卡的水晶头，从外观上观看体现了A</h4><p>A 机械特性 接线器的形状尺寸，引脚数目和排列，固定和锁定装置</p><p>B 电器特性 电压的范围</p><p>C 功能特性 电压的意义</p><p>D 过程特性 对于不同功能的各种可能事件的出现顺序</p><h4id="pcm系统量化时若采用128个量化等级编码时的码长为-b-位">PCM系统量化时若采用128个量化等级，编码时的码长为（B ）位</h4><p>A 8</p><p>B 7</p><p>C 128</p><p>D 64</p><p><code>PCM 是一种独特的模数转换方法</code></p><h3 id="数据链路层">数据链路层</h3><h4id="数据链路层课堂作业判断题打或">数据链路层课堂作业（判断题：打√或×）</h4><p>1、数据链路层为网络层提供无差错的数据服务（×，数据链路层不提供可靠服务）</p><p>2、PPP协议使用CRC校验，因此PPP协议是可靠协议。 （×）</p><p><code>PPP 提供差错检测但不提供纠错功能，只保证无差错接收（通过硬件进行CRC校验)。它是不可靠的传输协议</code></p><p>它仅支持点对点的链路通信，不支持多点线路。</p><p><code>PPP只支持全双工链路</code>。</p><p><code>PPP 使用零比特填充实现透明传输</code></p><p>3、路由器可以不需要数据链路层。(×路由器在网络层，需要下一层的数据链路层提供服务)</p><p>4、以太网终端根据目的MAC地址来判断是否接收帧，交换机根据MAC-端口表来判断是否转发数据顿（√）</p><p>5、交换机和VLAN都可以隔离广播域。 （×，交换机不能隔离广播域，VLAN可以）</p><p><code>交换机通常不能隔离广播域</code></p><h4id="有关虚拟局域网的概念下面哪个说法不正确-d">有关虚拟局域网的概念，下面哪个说法不正确？（D ）</h4><p>A、虚拟网络是建立在局域网交换机上的，以软件方式实现的逻辑分组；</p><p>B、可以使用交换机的端口划分虚拟局域网，且虚拟局域网可以跨越多个交换机；</p><p>C、在虚网中的逻辑工作组各节点可以分布在同一物理网段上，也可以分布在不同的物理网段上</p><p>D、虚拟局域网实际上就是一个新的网络</p><p>这题我不知道，但是是老师课件上的答案，所以应该是没有错的，就这样记一下先</p><p>后续，找到资料了，书上104页这样说，</p><p><code>虚拟局域网其实只是局域网给用户提供的一种服务，并不是一种新型局域网</code></p><h4id="mbs以太网规定的无效顿是长度小于c字节的帧">10Mb/s以太网规定的无效顿是长度小于（C）字节的帧</h4><p>A 512</p><p>B 32</p><p>C 64</p><p>D 128</p><p>以太网规定的最短帧长是64个字节，即512比特。对于10Mb/s的网络来说，发送512比特的时间是51.2us，也就是说争用期是51.2us</p><h4 id="以太网取bus为争用期的长度">以太网取（B）us为争用期的长度</h4><p>A、512</p><p>B、51.2</p><p>C、64</p><p>D、9.6</p><h4id="在数据链路层上处理发送方和接收方的收发帧同步问题的是-c">在数据链路层上处理发送方和接收方的收发帧同步问题的是（C ）</h4><p>A、差错控制</p><p>B、流量控制</p><p>C、成帧</p><p>D、介质访问控制</p><p><code>收发帧同步问题需要一种方式来标识帧的开始和结束，这里使用成帧的方式就可以实现，添加帧的首尾部</code></p><h4id="下列网络设备中在物理层上能够扩展以太网但会形成更大碰撞域的是d">下列网络设备中，在物理层上能够扩展以太网，但会形成更大碰撞域的是（D）</h4><p>A路由器</p><p>B网桥</p><p>C交换机</p><p>D集线器</p><p><code>集线器(中继器)是物理层设备,而网桥是数据链路层设备</code></p><p>所以集线器在物理层上拓展以太网,但会形成更大碰撞域</p><h4id="下列网络互联设备中不能隔离冲突域的是-b">下列网络互联设备中，不能隔离冲突域的是（B ）</h4><p>A路由器</p><p>B集线器</p><p>C交换机</p><p>D网桥</p><p><code>集线器不能隔离冲突域</code></p><h4id="下列网络互联设备中能够隔离广播域的是a">下列网络互联设备中，能够隔离广播域的是（A）</h4><p>A路由器</p><p>B集线器</p><p>C交换机</p><p>D网桥</p><p><code>路由器可以隔离广播域</code>,划分为不同的网络，其他设备链接的是一个网络</p><h4id="以下哪些是链路层需要解决的问题acd">以下哪些是链路层需要解决的问题？（ACD）</h4><p>A <code>介质访问控制</code></p><p>B 安全性</p><p>C <code>差错控制</code></p><p>D <code>流量控制</code></p><p>这个书上也没找到~</p><h3 id="网络层">网络层</h3><h4id="关于arp协议下列哪些情况不需要发送arp请求-abc">关于ARP协议，下列哪些情况不需要发送ARP请求（ABC）</h4><p>A <code>源主机的高速缓存已经由目的主机IP地址</code></p><p>B <code>源主机的发送的是广播分组</code></p><p>C <code>源主机和目的主机使用点对点通信</code></p><p>D 同一个局域网的主机之间</p><h4id="关于arp协议假设主机a和主机b要跨越10个路由器互连的网络从a发送数据到b需要经历c次arp解析">关于ARP协议，假设主机A和主机B要跨越10个路由器互连的网络，从A发送数据到B，需要经历（C）次ARP解析</h4><p>A 9</p><p>B 10</p><p>C 11</p><p>D 2</p><p>需要在<code>主机A和10个路由器上分别进行ARP解析服务</code>,所以一共11次</p><h4id="以下对ip地址分配中描述不正确的是b">以下对IP地址分配中描述不正确的是（B）。</h4><p>A 网络ID不能全为1或全为0</p><p>B <code>同一网络上每台主机必须有不同的网络ID</code></p><p>C 网络ID不能以127开头</p><p>D 同一网络上每台主机必须分配唯一的主机ID</p><p>网络号中：可使用大部分，全为0表示本网络，全为1保留作为本地软件回环测试本主机的进程之间的通信用</p><p>127开头做本地回环测试用</p><p>主机号中：全为1表示广播地址，全为0表示网络地址，有特殊用途</p><p>网络ID就是网络号，同一个网络的网络号一定是一样的！</p><h4 id="可能代表的是c">255.255.255.224可能代表的是（C）。</h4><p>A一个B类网络号</p><ul><li><p><strong>A类地址</strong>：范围从1.0.0.0到126.255.255.255。A类地址的第一位数字是1到126。</p></li><li><p><strong>B类地址</strong>：范围从128.0.0.0到191.255.255.255。B类地址的第一位数字是128到191。</p></li><li><p><strong>C类地址</strong>：范围从192.0.0.0到223.255.255.255。C类地址的第一位数字是192到223。</p></li><li><p><strong>D类地址</strong>：范围从224.0.0.0到239.255.255.255。D类地址224 到 239 不用于网络地址，而是用于多播地址。</p></li><li><p><strong>E类地址</strong>：范围从240.0.0.0到255.255.255.255。E类地址240 到 255 也不用于网络地址，而是保留用于实验和未来使用。</p></li></ul><p>B 一个C类网络中的广播</p><p>C <code>一个具有子网的网络掩码</code></p><p>子网掩码：确定了多少个1，表示网络前缀，多少个，表示主机号</p><p>D 以上都不是</p><h4id="cidr地址块138.130.2822包含了多少个c类地址-d">CIDR地址块：138.130.28/22包含了多少个C类地址？D</h4><p>A 1</p><p>B 2</p><p>C 3</p><p>D 4</p><p>22个1为： 1111 1111 1111 1111 1111 11xx xxxx xxxx</p><p>1111 1111 1111 1111 1111 1111 xxxx xxxx</p><p>有两位可用的空间2^2=4个</p><h4id="某公司申请到一个c类ip地址但要连接6个的子公司最大的一个子公司有26台计算机每个子公司在一个网段中则子网掩码应设为d">某公司申请到一个C类IP地址，但要连接6个的子公司，最大的一个子公司有26台计算机，每个子公司在一个网段中，则子网掩码应设为（D）。</h4><p>A 255.255.255.0</p><p>B 255.255.255.128</p><p>C 255.255.255.192</p><p>D 255.255.255.224</p><p>26&lt;32=2^5,主机号要求至少5位</p><p>一个c类地址，255.255.255.0</p><p>六个子公司，6&lt;8=2^3 区分子公司还需要3位主机号</p><p>注意问的是子网的掩码，所以这里是24＋3为27位！</p><p>255.255.255.224</p><h4id="某a类网络划分了122个子网它的子网掩码是-d">某A类网络划分了122个子网，它的子网掩码是D</h4><p>A 255.224.0.0</p><p>B 255.248.0.0</p><p>C 255.252.0.0</p><p>D 255.254.0.0</p><p>注意是划分122个子网，我们选择<code>从主机部分借用一些位作为子网部分，从而增加子网的数量</code></p><p>122&lt;2^7-2=126 从主机号中选择7位用来划分子网</p><p>1111 1111 1111 111x xxxx xxxx xxxx xxxx</p><p>255.254.0.0</p><h4id="当路由器接收的ip报文中的目标网络不在路由表中时将采取的策略是-a">当路由器接收的IP报文中的目标网络不在路由表中时，将采取的策略是（A ）。</h4><p>A 丢掉该报文</p><p>B 将该报文以广播的形式从该路由器的所有端口发出</p><p>C 将报文退还给上级设备</p><p>D 向某个特定的路由器请求路由</p><h3 id="应用层">应用层</h3><h4id="访问域名www.jnu.edu.cn在应用层运输层和网络层会使用哪些协议">访问域名www.jnu.edu.cn，在应用层、运输层和网络层会使用哪些协议？</h4><p><code>应用层</code>：</p><p>HTTP/HTTPS：<code>用于浏览器和服务器之间的通信</code>，HTTP是超文本传输协议，而HTTPS是HTTP的安全版本，通过SSL/TLS加密数据传输。</p><p><code>运输层</code>：</p><p>TCP（传输控制协议）：提供<code>可靠的、有序的和错误检测机制</code>的字节流传输服务。UDP（用户数据报协议）：提供一种<code>无需建立连接的简单传输服务</code>，不保证数据的可靠性或顺序。</p><p><code>网络层</code>：</p><p>IP（互联网协议）：负责在网络中路由数据包，IPv4和IPv6是最常见的版本。ICMP（互联网控制报文协议）：用于发送错误消息和操作信息，例如，当你尝试访问一个不存在的网页时，可能会收到一个ICMP错误消息。</p><p>当在浏览器地址栏输入www.jnu.edu.cn并按下回车时，<code>首先DNS（域名系统）会在应用层解析域名到IP地址</code>，然后使用上述的协议栈进行数据的传输和接收。通常情况下，HTTP/HTTPS协议用于应用层，TCP用于运输层，而IP协议用于网络层。</p><h2 id="计算机网络作业">计算机网络作业</h2><h3 id="关于ip地址与子网掩码">4-09 关于IP地址与子网掩码。</h3><p>（1）子网掩码255.255.255.0代表什么意思？</p><p>（2）一网络的子网掩码是255.255.255.248，问该网络能连接多少台主机？（要求说明理由）</p><p>(1)答：子网掩码是一个32位的数字，用于在IP地址中区分网络地址和主机地址。子网掩码255.255.255.0表示所有IP地址的前24位是网络地址，而最后8位是主机地址。</p><p>具体来说：</p><p>255.255.255.0的二进制形式是11111111.11111111.11111111.00000000。</p><p>网络部分（前24位）：11111111.11111111.11111111，表示网络地址的固定部分。</p><p>主机部分（最后8位）：00000000，表示主机地址的可变部分。</p><p>这意味着，使用这个子网掩码的网络可以有256个可能的主机地址（从00000001到11111111），但由于网络地址和广播地址通常不分配给主机，实际可用的主机地址会少一些。</p><p>例如，如果一个网络的IP地址范围是192.168.1.0到192.168.1.255，使用255.255.255.0作为子网掩码，那么192.168.1.0是网络地址，192.168.1.255是广播地址，而192.168.1.1到192.168.1.254可以分配给主机。</p><p>(2)答：子网掩码255.255.255.248的二进制形式是：</p><p>11111111.11111111.11111111.11111000</p><p>在这个子网掩码中，有29位是网络位（前24位加上最后5位），3位是主机位。这意味着每个子网可以有23 个可能的主机地址。</p><p>2^3=8</p><p>然而，在这8个地址中，有两个地址是特殊的：</p><p><strong>子网的第一个地址是网络地址，它代表整个子网</strong>，通常不分配给任何具体的主机。</p><p>子网的最后一个地址是广播地址，用于发送到子网内所有主机的消息。</p><p>所以，实际可用的主机地址是8减去2，即6个。</p><p>例如，如果一个子网的起始IP地址是192.168.1.0，使用255.255.255.248作为子网掩码，那么：</p><p><strong>网络地址是192.168.1.0</strong></p><p>可用的主机地址范围是192.168.1.1到192.168.1.6</p><p><strong>广播地址是192.168.1.7</strong></p><p>因此，使用255.255.255.248子网掩码的每个子网可以连接6台主机。</p><h3 id="section-34">4-27</h3><p>由两个地址块208.128/11和208.130.28/22。是否由哪个地址包含了另外一个地址？如果有，请指出，并说明理由。</p><p>【解答】</p><p>首先，我们需要将IP地址和子网掩码转换成二进制形式来理解它们的网络部分和主机部分。</p><p>地址块1: 208.128/11</p><p>子网掩码为/11，意味着前11位是网络部分，剩下的21位是主机部分。</p><p>208的二进制是：1101 0000</p><p>128的二进制是：1000 0000</p><p>子网掩码的二进制是：11111111111100000000000</p><p>1101 0000. 1000 0000. 0000 0000. 0000 0000 （IP）<br />1111 1111. 1110 0000. 0000 0000. 0000 0000 (掩码)</p><p>计算网络号：</p><p>1101 0000 1000 0000 0000 0000 0000 0000 = 208.128.0.0</p><p>地址块2: 208.130.28/22</p><p>子网掩码为/22，意味着前22位是网络部分，剩下的10位是主机部分。</p><p>208的二进制是：1101 0000</p><p>130的二进制是：1000 0010</p><p>28的二进制是：0001 1100</p><p>子网掩码的二进制是：11111111 11111111 111100000000</p><p>1101 0000.1000 0010.0001 1100.0000 0000 （IP）</p><p>1111 1111.1111 1111.1111 1100.0000 0000 （掩码）</p><p>计算网络号：</p><p>1101 0000.1000 0010.0001 1100.0000 0000 = 208.130.28.0</p><p>208.128/11的前缀为:11010000 100;208.130.28/22的前缀为:1101000010000010000101,它的前11位与208.128/11的前缀是一致的,所以208.128/11地址块包含了208.130.28/22这一地址块。</p><h2 id="计算机网络期末复习题及答案">计算机网络期末复习题及答案</h2><p>一、选择题</p><p>1、传输延迟时间最小的交换方法是( A )</p><p>A <code>线路交换</code> B.报文交换 C.分组交换 D.信元交换</p><p><code>中间不经过任何交换，直接传递</code></p><p>2、在OSI七层结构模型中，处于<code>数据链路层与运输层</code>之间的是（b ）</p><p>A、物理层 B、<code>网络层</code> C、会话层 D、表示层</p><p>3、服务与协议是完全不同的两个概念，下列关于它们的说法错误的是( d)。</p><p>A、协议是水平的，即协议是控制对等实体间通信的规则。服务是垂直的，即服务是下层向上层通过层间接口提供的。</p><p>B、在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下面一层所提供的服务。</p><p>C、协议的实现保证了能够向上一层提供服务。</p><p>D、OSI将层与层之间交换的数据单位称为协议数据单元PDU。</p><p><code>OSI将层与层之间交换的数据单位称为服务数据单元SDU</code>服务数据单元</p><p><code>OSI将对等层次之间传送的数据单位称为该层的协议数据单元PDU</code>协议数据单元</p><p>4、在OSI参考模型中，数据链路层和物理层传输的数据单元分别是（ c ）</p><p>A、报文（Message）、比特（Bit）B、分组（Packet）、报文（Message）</p><p>C、<code>帧（Frame）、比特（Bit）</code>D、数据报（Datagram）、比特（Bit）</p><p>5、以下选项中，不属于OSI参考模型分层的是（ b ）</p><p>A．物理层 B．<code>网络接口层</code> C．数据链路层 D．网络层</p><p>6、在同一个信道上的同一时刻，能够进行双向数据传送的通信方式是 （ c）</p><p>A.单工 B.半双工 <code>C.全双工</code> D.上述三种均不是</p><p>7、若信道的复用是以信息在一帧中的时间位置(时隙)来区分，不需要另外的信息头来标志信息的身分(<code>需要即为异步时分复用</code>)，则这种复用方式为(c )</p><ol type="A"><li>异步时分复用<br /></li><li>频分多路复用<br />C. <code>同步时分复用</code><br /></li><li>以上均不对</li></ol><p>8、（ c ）是下列传输介质中<code>性能最好</code>的。</p><p>A．双绞线 B．同轴电缆 <code>C．光纤</code> D．以上都好。</p><p>9、有几栋建筑物,周围还有其他电力电缆,若需将该几栋建筑物连接起来构成骨干型园区网,则采用(a )比较合适。</p><p><code>（A）光缆</code> （B）同轴电缆 （C）非屏蔽双绞线（D）屏蔽双绞线</p><p>长距离，有电磁干扰，用光纤</p><p>10、局域网体系结构中（ b ）被划分成MAC和LLC两个子层。</p><p>A、物理层    <code>B、数据链路层</code> C、网络层    D、运输层</p><p>11、以下各项中，不是数据报操作特点的是( c )</p><p>A、每个分组自身携带有足够的信息，它的传送是被单独处理的</p><p>B、在整个传送过程中，不需建立虚电路</p><p>C、<code>使所有分组按顺序到达目的端系统 //不按序</code></p><p>D、网络节点要为每个分组做出路由选择</p><p>12、Hub是( c )。</p><p>A、网卡 B、交换机 <code>C、集线器</code> D、路由器</p><p>13、下列协议不属于TCP/IP协议簇中的协议是（ d ）</p><p>A、ICMP B、TCP C、DNS <code>D、HDLC</code></p><p>14、TCP/IP模型的传输层有两个协议，第一个协议TCP是一种可靠的面向连接的协议，第二个协议UDP是(d )。//tcp是可靠面向链接协议</p><p>A、一种可靠的面向连接的协议 B、一种不可靠的面向连接的协议</p><p>C、一种可靠的无连接协议 D、<code>一种不可靠的无连接协议</code></p><p>15、报文的内容<code>不按顺序到达目的结点</code>的是（ d ）方式。</p><p>A.电路交换 B.报文交换 C.虚电路交换 <code>D.数据报交换</code></p><p>16、以下不属于防火墙技术的是( D )。</p><p>A IP过滤 B 线路过滤 C 应用层代理 <code>D 计算机病毒监测</code></p><p>17、某台计算机的IP地址为132.121.100.1,哪么它属于（ b ）网。</p><p>A. A类 <code>B. B类</code> C. C类 Ｄ．Ｄ类</p><p>【解释】</p><p>A类、B类、C类和D类IP地址是根据IP地址的第一位数字来分类的，具体如下：</p><ul><li><p><strong>A类地址</strong>：范围<code>从1.0.0.0到126.255.255.255</code>。A类地址的第一位数字是1到126。A类地址通常分配给大型网络，如跨国公司或大型组织。</p></li><li><p><strong>B类地址</strong>：范围<code>从128.0.0.0到191.255.255.255</code>。B类地址的第一位数字是128到191。B类地址用于中等规模的网络。</p></li><li><p><strong>C类地址</strong>：范围<code>从192.0.0.0到223.255.255.255</code>。C类地址的第一位数字是192到223。C类地址用于小型网络，如小型公司或家庭网络。</p></li><li><p><strong>D类地址</strong>：范围<code>从224.0.0.0到239.255.255.255</code>。D类地址不用于网络地址，而是用于多播地址。</p></li><li><p><strong>E类地址</strong>：范围<code>从240.0.0.0到255.255.255.255</code>。E类地址也不用于网络地址，而是保留用于实验和未来使用。</p></li></ul><p>IP地址的分类是根据IPv4的分类方法。IPv6采用了不同的地址表示和分配方法。</p><p>18、Internet上各种网络和各种不同类型的计算机互相通信的基础是（ d）协议</p><ol type="A"><li>HTTP (B) IPX (C) X.25 <code>(D) TCP/IP</code></li></ol><p>19、Internet的核心协议是（ b ）。</p><p>A、X.25  <code>B、TCP/IP</code> C、ICMP  D、UDP</p><p>20、计算机内的传输是(a)传输，而通信线路上的传输是传输。</p><p>A、<code>并行，串行 </code> B、串行，并行  C、并行，并行 D、串行，串行</p><p>21、属于集中控制方式的网络拓扑结构是（ a ）</p><p><code>(A) 星型结构</code> (B) 环型结构 (C) 总线结构 (D) 树型结构</p><p>22、下面关于网络互连设备叙述错误的是( c ) 。</p><p>A、在物理层扩展局域网可使用转发器和集线器。</p><p>B、在数据链路层扩展局域网可使用网桥。</p><p><code>C、以太网交换机实质上是一个多端口网桥，工作在网络层</code></p><p>D、路由器用来互连不同的网络，是网络层设备。</p><p>23、下面关于虚拟局域网VLAN的叙述错误的是( d )</p><p>A、VLAN是由一些局域网网段构成的与物理位置无关的逻辑组。</p><p>B、利用以太网交换机可以很方便地实现VLAN。</p><p>C、每一个VLAN的工作站可处在不同的局域网中。</p><p><code>D、虚拟局域网是一种新型局域网</code></p><p>24、帧中继网是一种( a ) 。</p><p><code>A、广域网 </code> B、局域网 C、ATM网  D、 以太网</p><p>25、下面关于IP地址与硬件地址的叙述错误的是( d )</p><p>A、在局域网中，硬件地址又称为物理地址或MAC地址。</p><p>B、硬件地址是数据链路层和物理层使用的地址，IP地址是网络层和以上各层使用的</p><p>C、IP地址不能直接用来进行通信，在实际网络的链路上传送数据帧必须使用硬件地址。</p><p><code>D、RARP是解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题</code></p><p>ARP是解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题。</p><p>26、关于互联网中IP地址，下列叙述错误的是( d )</p><p>A、在同一个局域网上的主机或路由器的IP地址中的网络号必须是一样的。</p><p>B、用网桥互连的网段仍然是一个局域网，只能有一个网络号。</p><p>C、路由器总是具有两个或两个以上的IP地址。</p><p><code>D、当两个路由器直接相连时，在连线两端的接口处，必须指明IP地址。</code></p><p>27、关于无分类编址CIDR，下列说法错误的是(c )</p><p>A、CIDR使用各种长度的“网络前缀”来代替分类地址中的网络号和子网号。</p><p>B、CIDR将网络前缀都相同的连续的IP地址组成“CIDR”地址块。</p><p><code>C、网络前缀越短，其地址块所包含的地址数就越少。</code></p><p>D、使用CIDR，查找路由表时可能会得到多个匹配结果，应当从匹配结果中选择具有最长网络前缀的路由。因为网络前缀越长，路由就越具体。</p><p>28、完成路径选择功能是在OSI模型的( c )。</p><p>A、物理层 B、数据链路层 <code>C、网络层</code>  D、运输层</p><p>29、在TCP/IP协议族的层次中，解决计算机之间通信问题是在 ( b ) 。</p><p>A、网络接口层   <code>B、网际层</code>   C、传输层    D、应用层</p><p>30、IP 协议提供的是服务类型是( b) 。</p><p>A 、面向连接的数据报服务 <code>B 、无连接的数据报服务</code></p><p>C 、面向连接的虚电路服务 D 、无连接的虚电路服务</p><p>31、双绞线传输介质是把两根导线绞在一起，这样可以减少( d ) 。</p><p>A 、信号传输时的衰减 B 、外界信号的干扰   </p><p>C 、信号向外泄露   <code>D 、信号之间的相互串扰</code></p><p>32、ICMP协议位于( a )</p><p><code>A、网络层</code>  B、传输层  C、应用层  D、数据链路层</p><p>33、在 OSI模型中，第 N层和其上的 N＋ l层的关系是 ( a )  。</p><p><code>A、N层为N十1层提供服务</code></p><p>B、N十1层将从N层接收的信息增加了一个头</p><p>C、N层利用N十1层提供的服务</p><p>D、N层对N＋1层没有任何作用  </p><p>34、地址“128.10.0.0”是( b ) 地址。</p><p>A、A类  <code>B、B类</code>   C、C类   D、D类</p><p>35、将IP地址转换为物理地址的协议是( c )</p><p>A、IP   B、ICMP   <code>C、ARP </code>  D、RARP</p><p>36、TCP/IP为实现高效率的数据传输，在传输层采用了UDP协议，其传输的可靠性则由( a ) 提供。</p><p><code>A、应用进程</code>  B、TCP  C、DNS   D、IP</p><p>37、目前实际存在与使用的广域网基本都采用( c )</p><p>A、总线拓扑 B、环型拓扑  <code>C、网状拓扑</code>  D、星形拓扑</p><p>38 、在 OSI 层次体系中，实际的通信是在( a )实体之间进行的。</p><p><code>A 、物理层</code> B 、数据链路层 C 、网络层 D 、传输层</p><p>39 、IP 地址 192.1.1.2 属于( )其默认的子网掩码为 d</p><p>A、B 类，255.255.0.0 B、A 类， 255.0.0.0</p><p>C、C 类， 255.255.0.0 <code>D、C 类，255.255.255.0</code></p><p>40、在TCP中，连接的建立采用( c ) 握手的方法。</p><p>A、一次 B、二次 <code>C、三次</code> D、四次</p><p>二、填空题</p><p>1、计算机网络按作用范围可分为_____ 网、_____ 网、_____ 网。</p><p>2、广域网由 _____和 _____组成。</p><p>3、X.25协议的分组级相当于OSI参考模型中的_____层，其主要功能是向主机提供多信道的___服务。</p><p>4、OSI的会话层处于______层提供的服务之上，为_______层提供服务。</p><p>5、现在我们常提到的网络体系结构有两种：一是____________，是理论上的标准；另一是____________，它是事实上的工业标准。</p><p>6、将数字信号调制为模拟信号有三种方法即_____、_____、_____。</p><p>7、在局域网中，硬件地址又称为_____或_____地址。</p><p>8、数据链路层的三个基本问题是_____、_____ 和 _____ 。</p><p>9、在TCP/IP网络中，TCP协议工作在 _____ 层，FTP协议工作在_____层。</p><p>10、TCP/IP 运输层有两个不同的协议，即 _____ 和_____ 。</p><p>11、TCP/IP 网络中，物理地址与_____层有关，逻辑地址与_____层有关，端口地址和 _____层有关。       </p><p>12、在虚电路服务中，任何传输开始前，要先 _____。</p><p>13、在分类IP地址中，_____类地址属多播地址。</p><p>14、专用IP地址只能用做_____地址而不能用做全球地址。</p><p>15、TCP/IP协议族中，位于网络层且能够传输差错和控制报文的协议 。</p><p>16、在TCP/IP层次模型的第三层(网络层)中包括的协议主要有IP、ICMP、_______及_______。</p><p>17、当数据报在物理网络中进行传输时，IP地址被转换成____________地址。</p><p>18、一个TCP连接过程分三个阶段，即 _____ 、 _____ 、 _____ 。</p><p>19、WWW上的每一个网页(Home Page)都有一个独立的地址，这些地址称为_____ 。</p><p>20、电子邮件涉及的主要协议有两个:SMTP、 _____ 。</p><p>四、简答题</p><p>1、试简述分组交换的要点。</p><p>2、论述计算机网络按照不同的分类标准的结果。</p><p>3、简述OSI七层模型每层简单功能。</p><p>4、简述数据链路层的三个问题为什么都必须加以解决？</p><p>5、简述以太网的介质访问控制方式的工作原理。</p><p>6、IP地址是怎样定义的？一共分为几类？怎样辨别？</p><p>7、什么是子网掩码？255.255.255.0代表什么意思？</p><p>参考答案：</p><p>一、选择题</p><p>1、A 2、B 3、D 4、C 5、B 6、C 7、C 8、C 9、A 10、B 11、C 12、C 13、D14、D 15、D 16、D 17、B 18、D</p><p>19、B 20、A 21、A 22、C 23、D 24、A 25、D 26、D 27、C 28、C 29、B30、B 31、D 32、A 33、A 34、B 35、C 36、A 37、C 38、A 39、D 40、C</p><p>二、填空题</p><p>1、广域网、局域网、城域网。</p><p>2、一些接点交换机、连接这些交换机的链路。</p><p>3、网络虚电路</p><p>4、运输  表示</p><p>5、OSI、TCP/IP</p><p>6、即调频、调幅、调相。 </p><p>7、物理地址、MAC地址。</p><p>8、封装成帧、透明传输、差错监测</p><p>9、传输层，应用。</p><p>10、用户数据报协议UDP、传输控制协议TCP。</p><p>11、数据链路、网络、传输</p><p>12、建立连接 。</p><p>13、D</p><p>14、本地</p><p>15、ICMP</p><p>16、ARP RARP。</p><p>17、物理</p><p>18、连接建立 、数据传输、连接释放 。</p><p>19、统一资源定位器(URL)</p><p>20、POP3。</p><p>四、简答题</p><p>1、（1）报文分组，加首部</p><p>（2）经路由器存储转发</p><p>（3）在目的地合并</p><p>（分组交换的优点有：</p><p>1）节点暂时存储的是一个个分组，而不是整个数据文件。</p><p>2）分组暂时保存在节点的内存中，保证了较高的交换速率。</p><p>3）动态分配信道，极大的提高了通信线路的利用率。</p><p>分组交换的缺点有：</p><p>1）分组在节点转发时因排队而造成一定的延时</p><p>2）分组必须携带一些控制信息而产生额外开销，管理控制比较困难。）</p><p>2、 按网络节点分布：局域网、城域网、广域网。</p><p>按网络拓扑结构：总线型、星型、环型以及混合型拓扑结构。</p><p>按传输介质：有线网、光纤网、无线网。</p><p>3、1)物理层：传递比特数据流（硬件接口等）</p><p>2)数据链路层：数据帧的传输（节点到节点）</p><p>3)网络层：数据分组的传输（路由选择，寻址，检验等）</p><p>4)传输层：数据报文的传输（端到端）</p><p>5)会话层：负责数据单元的管理（连接，通信控制等）</p><p>6)表示层：数据表示的处理（编码，加密，解压缩等）</p><p>7)应用层：面向应用的管理（网络和应用程序得交互等）</p><p>4、帧定界是分组交换的必然要求；</p><p>透明传输避免消息符号与帧定界符号相混淆</p><p>差错检测防止差错的无效数据帧浪费后续路由上的传输和处理资源。</p><p>5、以太网的介质访问控制方式是CSMA/CD，其工作原理是：</p><p>1）发送数据：</p><p>先听后发、边听边发、冲突停止、延长再发</p><p>2）接收数据：</p><p>所有以太网上的网络节点一直持续在监听网络上的数据，一旦有载波出现，就开始从网路上截获数据，从截获的数据中取出目的MAC地址，如果目的MAC地址是自己，就删除MAC地址，并把数据向上层协议传递。</p><p>6、IP地址::={<网络号>,<主机号>}</p><p>IP地址由网络号和主机号组成，总共32位，共分为A、B、C、D和E五类。</p><p>A类：网络号占8位，且最前面一位为0，主机号占24位。</p><p>B类：网络号占16位，且最前面两位为10，主机号占16位。</p><p>C类：网络号占24位，且最前面三位为110，主机号占8位。</p><p>D类：最前面四位为1110，用于多播。</p><p>E类：最前面四位为1111，保留为以后用</p><p>7、子网掩码能够表示IP地址中的主机地址段怎样划分子网地址和主机号。子网掩码规定了全1的为网络号，全0的为主机号。</p><p>子网掩码255.255.255.0代表C类IP地址默认子网掩码。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能原理复习4</title>
    <link href="/2024/06/19/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-4/"/>
    <url>/2024/06/19/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-4/</url>
    
    <content type="html"><![CDATA[<h2 id="constraint-satisfaction-problems">Constraint SatisfactionProblems</h2><p>What is a csp? guess coloring problem; why does this make sense asproblem? silly but good representation for real world problems, e.g.scheduling tasks that need resources – can’t run 2 tasks at the sametime if they need the same resource CSPs as a search problem?</p><h3 id="what-is-search-for">What is Search For?</h3><p>Assumptions about the world: a single agent, deterministic actions,fully observed state, discrete state space</p><p>Planning: sequences of actions The path to the goal is the importantthing Paths have various costs, depths Heuristics give problem-specificguidance</p><p>Identification: assignments to variables The goal itself isimportant, not the path All paths at the same depth (for someformulations) CSPs are specialized for identification problems</p><p>Step back – these are search problems, so we can now take a look atdifferent problems we can use search for Before we had planning; Ninjarobot knows where the gem is, but not how to get there Identification;detective robot wants to know where the gem is – the goal is important,not the path; what is the depth?</p><figure><img src="https://pic.imgdb.cn/item/6671b857d9c307b7e927ea35.png"alt="![!\\](https://pic.imgdb.cn/item/6671b857d9c307b7e927ea35.png)" /><figcaption aria-hidden="true">![!\<ahref="https://pic.imgdb.cn/item/6671b857d9c307b7e927ea35.png">\</a>](https://pic.imgdb.cn/item/6671b857d9c307b7e927ea35.png)</figcaption></figure><h3 id="constraint-satisfaction-problems-1">Constraint SatisfactionProblems</h3><p>Standard search problems: State is a “black box”: arbitrary datastructure Goal test can be any function over states Successor functioncan also be anything</p><p>Constraint satisfaction problems (CSPs): A special subset of searchproblems State is defined by variables Xi with values from a domain D(sometimes D depends on i) Goal test is a set of constraints specifyingallowable combinations of values for subsets of variables</p><p>Allows useful general-purpose algorithms with more power thanstandard search algorithms</p><p>Before: states were nodes, no structure, just a set, they could beanything Goal test – like a judge; just makes decisions; you don’t knowhow; Now: Goal test has structure, it ‘s more like a manual describing aset of constraints that have to hold true</p><figure><img src="https://pic.imgdb.cn/item/6671b8b5d9c307b7e928b9ab.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h3 id="csp-examples">CSP Examples</h3><p>I want you to practice formalizing real problems as search/cspproblems</p><figure><img src="https://pic.imgdb.cn/item/6671b8fad9c307b7e9295764.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6671b915d9c307b7e9299415.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>How do you specify constraints in code/math? Implicit vs explicit.What might be explicit?</p><figure><img src="https://pic.imgdb.cn/item/6671b948d9c307b7e92a0c64.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6671b962d9c307b7e92a4aa5.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Binary CSP: each constraint relates (at most) two variables</p><p>Binary constraint graph: nodes are variables, arcs showconstraints</p><p>General-purpose CSP algorithms use the graph structure to speed upsearch. E.g., Tasmania is an independent subproblem!</p><p>Demo:</p><p>Run constraint.jar or constraint.exe, load the 5 queens problem. Demois just showing the n-queens applet as illustration of constraint graph,but later in lecture we’ll interact with the applet. aispace.org willhave the latest version</p><figure><img src="https://pic.imgdb.cn/item/6671b980d9c307b7e92a9c0c.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Are these constraints enough? No, there should be N queens there.</p><figure><img src="https://pic.imgdb.cn/item/6671b99dd9c307b7e92ae97e.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6671b9afd9c307b7e92b2171.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>0=7, R=4, W=6, U=2, T=8, F=1; 867 + 867 = 1734</p><figure><img src="https://pic.imgdb.cn/item/6671b9d0d9c307b7e92b84f6.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h3 id="varieties-of-csps-and-constraints">Varieties of CSPs andConstraints</h3><p>Varieties of CSPs</p><p>Discrete Variables (today)<br />Finite domains<br />Size d means O(dn) complete assignments<br />E.g., Boolean CSPs, including Boolean satisfiability (NP-complete)<br />Infinite domains (integers, strings, etc.)<br />E.g., job scheduling, variables are start/end times for each job<br />Linear constraints solvable, nonlinear undecidable</p><p>Continuous variables<br />E.g., start/end times for Hubble Telescope observations<br />Linear constraints solvable in polynomial time by LP methods</p><figure><img src="https://pic.imgdb.cn/item/6671ba4dd9c307b7e92cb492.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Varieties of Constraints<br />Unary constraints involve a single variable (equivalent to reducingdomains), e.g.:</p><p>Binary constraints involve pairs of variables, e.g.:</p><p>Higher-order constraints involve 3 or more variables:<br />e.g., cryptarithmetic column constraints</p><p>Preferences (soft constraints):<br />E.g., red is better than green<br />Often representable by a cost for each variable assignment<br />Gives constrained optimization problems<br />(We’ll ignore these until we get to Bayes’ nets)</p><h3 id="real-world-csps">Real-World CSPs</h3><p>Assignment problems: e.g., who teaches what class<br />Timetabling problems: e.g., which class is offered when and where?<br />Hardware configuration<br />Transportation scheduling<br />Factory scheduling<br />Circuit layout<br />Fault diagnosis<br />… lots more!</p><p>Many real-world problems involve real-valued variables…</p><h3 id="origin-the-waltz-algorithm">Origin: The Waltz Algorithm</h3><p>The Waltz algorithm is for interpreting line drawings of solidpolyhedra as 3D objects</p><p>An early example of an AI computation posed as a CSP</p><p>Approach:</p><p>Each intersection is a variable<br />Adjacent intersections impose constraints on each other<br />Solutions are physically realizable 3D interpretations</p><h3 id="guzman-find-the-problem">Guzman: Find the Problem</h3><p>Question: how to detect the number of objects by machine？</p><figure><img src="https://pic.imgdb.cn/item/6671bd14d9c307b7e932a47d.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6671bd28d9c307b7e932e088.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h3 id="回溯搜索">回溯搜索</h3><p>在深度优先搜索的基础上增加如下改进：</p><p>1、每次只考虑一个变量</p><p>2、可以随时检查约束（增加测试函数）</p><figure><img src="https://pic.imgdb.cn/item/66754b03d9c307b7e9f974b4.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Backtracking = DFS + variable-ordering + fail-on-violation</p><h3 id="improving-backtracking">Improving Backtracking</h3><p>Ordering:</p><p>o Which variable should be assigned next?</p><p>o In what order should its values be tried?</p><h3 id="filtering">Filtering</h3><p>Keep track of domains for unassigned variables and cross off badoptions</p><h4 id="filtering-forward-checking">Filtering: Forward Checking</h4><p>o Filtering: Keep track of domains for unassigned variables and crossoff bad options</p><p>o Forward checking: Cross off values that violate a constraint whenadded to the existing assignment</p><h3 id="constraint-propagation">Constraint Propagation</h3><p>约束传播</p><p>核心思想：局部相容性</p><p>一元约束：只限制单个变量的取值</p><p>二元约束：与两个变量有关</p><p>变量个数任意的约束称为全局约束</p><h4 id="节点相容">节点相容</h4><p>单个变量（对应一个节点）值域中的所有取值满足它的一元约束，就是节点相容的。</p><h4 id="弧相容">弧相容</h4><p>如果CSP中某变量值域中所有取值满足该变量所有二元约束，则此变量弧相容</p><p>弧相容算法AC-3</p><p>弧相容可能缩小变量的值域，有时甚至还能找到解（每个变量值域大小都为1时），或者有时发现CSP无解（一些变量的值域大小=0）</p><p>路径相容（路径一致性，也就是下面k=3的情况）：观察变量得到隐式约束，并以此来加强二元约束</p><figure><img src="https://pic.imgdb.cn/item/66755064d9c307b7e9060e40.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>k-相容：如果对于任何k-1个变量的相容赋值，第k个变量总能被赋予一个和前k-1个变量相容的值，那么这个CSP就是k相容的。</p><p>k越高，计算成本越高</p><p>k一致性</p><p>k=2的情况：弧一致性（弧相容）</p><p>部分赋值的回溯搜索算法：</p><p>可以用标准的<strong>深度优先搜索</strong>，状态可能是部分赋值，行动是将var=value加入到赋值中。<br />回溯搜索用于深度优先搜索中，每次为一个变量选一个赋值，没有合法的值的时候就回溯。</p><h3 id="有效解决csp">有效解决CSP</h3><h4 id="变量和取值顺序">变量和取值顺序</h4><h2 id="变量">变量：</h2><p>1）选择“合法”取值最少的变量——称为最少剩余值（MRV）启发式。（做一个强有力的引导，方便提早遇到失败，从而剪枝）</p><p>2）度启发式：通过选择与其他未赋值变量约束最多的变量来试图降低未来的分支因子。（用来打破僵局，如选择第一个着色区域）</p><p>“Fail-fast” ordering</p><blockquote><p>总结一下，对于变量的选择原则是：可选变量最少、约束冲突最多的变量先安排！</p></blockquote><h2 id="值">值：</h2><p>最少约束值：优先选择的赋值是给邻居变量留下更多的选择</p><h2 id="搜索与推理交错进行">搜索与推理交错进行</h2><p>前向检验：只要变量X被赋值，就对它进行弧相容检查，对每个通过约束与X相关的未赋值变量Y，从Y值域中删去与X不相容的值。</p><p>智能回溯：向后看<br />主要概念：前向检验；冲突集；回跳</p><p>【参考资料】</p><p>http://t.csdnimg.cn/ck8s2</p><p>http://t.csdnimg.cn/keaAl （这是与课件配套的）</p>]]></content>
    
    
    <categories>
      
      <category>人工智能原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法分析与设计期末复习</title>
    <link href="/2024/06/18/suan-fa-fen-xi-yu-she-ji-qi-mo-fu-xi/"/>
    <url>/2024/06/18/suan-fa-fen-xi-yu-she-ji-qi-mo-fu-xi/</url>
    
    <content type="html"><![CDATA[<h2 id="第1章-概论">第1章 概论</h2><h3 id="算法的概念">1.1 算法的概念</h3><h4 id="什么是算法">1.1.1 什么是算法</h4><p>P3 页有算法的 5 个重要特性，通过它们判断一段程序是否为算法。</p><p>算法的5个重要特性：</p><p>（1）有限性：一个算法在执行有限步之后结束，每一步在有限时间内完成<br />（2）确定性：算法中的每一条指令有明确的含义，不会产生歧义<br />（3）可行性：算法中的每一条运算都是足够基本的，他们在原则上都能精确的执行<br />（4）输入性：一个算法有零个或多个输入<br />（5）输出性：一个算法有一个或多个输出</p><p>P2 页则有 5个算法设计的目标，衡量一个算法的优劣。结合例子代码去理解。</p><p>算法设计应满足的目标：</p><p>（1）正确性：要求算法能够正确的执行预先规定的功能和性能要求，这是最重要也是最基本的标准<br />（2）可使用性：要求算法能够很方便的使用，（用户友好性）<br />（3）可读性：算法应该易于人的理解，可读性好，算法的逻辑应该清晰、简单、结构化<br />（4）健壮性：要求算法有很好的容错性，即提供异常处理，能够对不合理的数据进行检查，不经常出现异常中断或死机等情况<br />（5）高效率和低存储量需求：效率---算法的执行时间存储量----算法执行过程中需要的最大存储空间效率和低存储量都和问题的规模有关</p><p>例子代码看书</p><h4 id="算法描述">1.1.2 算法描述</h4><p>除了用<strong>代码</strong>描述算法，还可以用<strong>伪代码</strong>、<strong>自然语言</strong>等。其它内容基本没用。</p><p>总结：算法描述的方式有：</p><blockquote><p>代码、伪代码、自然语言</p></blockquote><h4 id="算法和数据结构">1.1.3 算法和数据结构</h4><p>掌握联系与区别</p><p>算法的操作对象是数据结构</p><p>联系:一种数据结构包括逻辑结构、存储结构、算法(运算)三要素。</p><p>区别:没有本质区别。本课程介绍的算法主要面向具体的、实际的问题</p><h4 id="算法设计的基本步骤">1.1.4 算法设计的基本步骤</h4><p>基本没用。</p><p>不过，能看到 P6 页，图 1.5中，算法设计的最后一步是“算法分析”，可以有一点启示，这里的“分析”是分析算法复杂度，来评估其效率。而不是有人认为的分析问题，以找到解决问题的途径。</p><h3 id="算法分析">1.2 算法分析</h3><p>目的是分析某算法的时间或空间效率处于什么级别。</p><p>设该算法处理的数据规模为 n,则用函数f(n)表示算法中<strong>基本语句</strong>的执行次数(或占用的空间大小)，则算法分析就是分析随n值增大时，f(n)的增长率级别，比如是处于log2(n),n,n^2等哪个级别。</p><p>下面举例说明为什么“级别”这么重要:</p><p>设有一个 n元素的数组，有2个功能一样的查找算法A、B，A的级别是n,B的级别是n^2, 则数组长度由 10 增长到20，A算法的基本语句执行次数增长 1倍，若要达到以前一样的速度，可以用双核CPU;B算法的基本语句执行次数增长 10 倍，若要达到以前一样的速度，必须用 10核 CPU。数据量增长一倍，硬件资源投入需增加 10倍，若数据量很大，则很困难。</p><h4 id="算法时间复杂度分析">1.2.1 算法时间复杂度分析</h4><p>基本语句的定义:</p><p>某算法中执行频度最高的语句（这是老师复习资料中的定义）</p><p>课本上关于基本语句的定义是：</p><p>执行次数与整个算法的执行次数成正比的语句，通常基本语句是算法中最深层循环内的语句</p><p>下面的代码将矩阵对角线元素相加，第5行为基本语句，f(n)=n.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span><br>&#123;<br>  <span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    t=t+a[i]*i;<br>  <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>若将循环改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>  <span class="hljs-type">int</span> k=a[i]*i;<br>  t=t+k;<br>&#125;<br></code></pre></td></tr></table></figure><p>则这两句都是基本语句</p><p>这时f（n）=2n，或f（n）=n都可以，采用后面这种形式，</p><p>“基本语句“代表频度最高语句的集合。无论采取哪种，后续在分析复杂度时，结果是一样的。</p><p>求出f（n）后，若它是一个和式，则只保留<strong>最高级别的项</strong>，并去掉常数系数就是复杂度。比如:</p><p>某算法的f（n）=10n<sup>2+1000n+10000，则它的复杂度为O（n</sup>2），这句话也记作</p><p>f（n）=O（n^2）（注：这里等号的含义表示某算法复杂度，不是通常数学含义）</p><p>若f（n）=10000，则算法复杂度为f（n）=0（1）</p><p>P12页递归算法的时间复杂度分析比较常用，应掌握。结合例子，看看怎么根据代码写出T（n）的递推关系式，然后展开，观察特点，化简。</p><h4 id="算法空间复杂度分析">1.2.2算法空间复杂度分析</h4><p>算法占用的空间只计算临时空间。</p><p>比如上面这两个算法比较，由于它们都一定包括输入的数组a，因此比较时就不需要计入数组a的空间了。</p><p>对下面的函数而言，由于任何的函数调用，都需要系统的压栈操作，以保存返回地址等信息。因此它的空间复杂度时O（1），不是零。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">fac</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="算法设计工具stl">1.3算法设计工具——STL</h3><p>知道C++模板概念或Java泛型的同学可以不看。</p><p>本课程只用到vector,queen,priority_quene这三个，见P16页的表，P18开始有一些示例代码。</p><p>教材后面代码涉及的STL相关知识比较浅显。</p><h3 id="问题">问题</h3><p>什么是算法：</p><p>算法是求解问题的一系列计算步骤，用来将输入数据转换成输出结果</p><h2 id="第2章递归算法设计技术">第2章递归算法设计技术</h2><h3 id="什么是递归">2.1什么是递归</h3><h4 id="递归的定义">2.1.1递归的定义</h4><p>有三个术语：递归，间接递归，尾递归。</p><p>【术语理解】</p><p>如果一个递归过程或者递归函数中的递归调用语句是<code>最后一条执行语句</code>，称这种递归调用为<code>尾递归</code></p><p>若p函数定义中调用了p函数，称为<code>直接递归</code></p><p>若p函数定义调用了q函数，而q函数定义调用了p函数，称之为<code>间接递归</code></p><p>任何间接递归都可以等价的转化为直接递归，本章主要讨论直接递归</p><p>直接递归和尾递归不冲突</p><h4 id="何时使用递归">2.1.2何时使用递归</h4><p>（1）定义是递归的</p><p>斐波那契数列，求n!等问题，许多数学公式、数列、概念的定义是递归的</p><p>（2）数据结构是递归的</p><p>单链表就是一种递归的数据结构、二叉树的二叉链存储结构</p><p>（3）问题的求解方式是递归的</p><p>如汉诺塔问题</p><p>要解决的问题能够分解成更小规模的子问题，子问题与原问题间有<strong>相似性</strong>时，可使用递归。</p><p>这种相似性，按照实际问题的特点，又分成定义递归、结构递归、步骤递归。结合阶乘、单链表、汉诺塔去理解。</p><h4 id="递归模型">2.1.3递归模型</h4><p>模型包括2部分：<code>递归出口</code>（终止条件），<code>递归体</code>。教材上按照“问题“定义的方式来举例,不看也行，我们知道一个递归程序中，递归出口与递归体分别是哪一段就可以。</p><h4 id="递归算法的执行过程">2.1.4递归算法的执行过程</h4><p>函数f（x）函数调用g（y）时，需要将g（y）返回后将要用到的信息压栈（自动进行）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>: <span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>2:&#123;<br><span class="hljs-number">3</span>:  <span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;<br><span class="hljs-number">4</span>:  t=x+g(x+<span class="hljs-number">1</span>);<br><span class="hljs-number">5</span>:  <span class="hljs-keyword">return</span> t;<br><span class="hljs-number">6</span>:&#125;<br></code></pre></td></tr></table></figure><p>需要压栈的信息有形参x，局部变量t，返回时，需要将g的返回值压栈。这样f恢复后从第4行接着执行时，需要的信息都从栈顶取得。</p><p>递归调用时，要一层层地压栈。结合教材上的例子，看看究竟栈是如何变化的</p><h3 id="递归算法设计">2.2递归算法设计</h3><h4 id="递归与数学归纳法">2.2.1递归与数学归纳法</h4><p>数学归纳法与递归算法的联系很弱，不看。</p><h4 id="递归算法设计的一般步骤">2.2.2递归算法设计的一般步骤</h4><p>递归算法的设计能力依赖于经验，多看多练，记忆步骤并没什么用。只看例2.5增加经验值。</p><p>例2.5 用递归法求一个整数数组a中的最大元素</p><p>设f(a,i)求解数组a中前i个元素（a[0]...a[i-1]）中的最大元素，这是一个大问题;</p><p>则f(a,i-1)为求解数组a中前i-1个元素（a[0]...a[i-2]）中的最大元素，这是一个小问题;</p><p>只考虑第一个元素时的情况 f(a,1)=a[0]</p><p>当i&gt;1时，f(a,i)=MAX{f(a,i-1),a[i-1]}</p><p>对应的递归算法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fmax</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> i)</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> max(fmax(a,i<span class="hljs-number">-1</span>),a[i<span class="hljs-number">-1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h4id="递归数据结构及其递归算法设计">2.2.3递归数据结构及其递归算法设计</h4><p>看每个例题增加经验值，文字一概不看。</p><p>递归数据结构：采用递归方式定义的数据结构称为递归数据结构</p><p>例如正整数的定义：n是正整数，则n+1也为正整数n+1是一种基本的递归运算</p><p>递归运算具有封闭性</p><p>基于递归数据结构的递归算法设计</p><p>例题一：一个不带头节点的单链表L，设计一个算法释放其中的所有节点</p><p>递归模型如下： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">f(L)=不做任何事   当L==<span class="hljs-literal">NULL</span>时<br>f(L)=f(L-&gt;next); 其他情况  <span class="hljs-comment">//释放*L节点  </span><br></code></pre></td></tr></table></figure></p><p>递归算法如下： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">DestroyList</span><span class="hljs-params">(LinkNode *&amp;L)</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(L!=<span class="hljs-literal">NULL</span>)<br>  &#123;<br>    DestroyList(L-&gt;next);<br>    <span class="hljs-built_in">free</span>(L);   <span class="hljs-comment">//顺序不能搞反</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>上面的代码逻辑上先挖到最底层，然后从最底层的一个节点开始释放，然后再退回起始节点，其实这里可以换一种思路来实现，如下所示(与下面的例题二统一了形式，更好理解)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">DestroyList</span><span class="hljs-params">(LinkNode *&amp;L)</span><br>&#123;<br>  LinkNode *p;<br>  <span class="hljs-keyword">if</span>(L!=<span class="hljs-literal">NULL</span>)<br>  &#123;<br>    p=L;   <span class="hljs-comment">//找到当前不为NULL的节点</span><br>    L=L-&gt;next;  <span class="hljs-comment">//找下一个节点</span><br>    <span class="hljs-built_in">free</span>(p); <br>    DestroyList(L);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二个算法相对更好一些，因为它在每次递归调用后立即释放当前节点，能更及时地回收内存。</p><p>例题二：设计一个算法删除其中所有节点值为x的节点</p><p>递归模型如下： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">f(L,x)=不做任何事                 当L=<span class="hljs-literal">NULL</span>时<br>f(L,x)=删除L节点，L指向后继节点    当L-&gt;data=x时<br>f(L,x)=f(L-&gt;next,x)              当L-&gt;data!=x时<br></code></pre></td></tr></table></figure></p><p>递归算法如下： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Delallx</span><span class="hljs-params">(LinkNode *&amp;L,ElemType x)</span><br>&#123;<br>  LinkNode *p;<br>  <span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">//递归出口</span><br>  <span class="hljs-keyword">if</span>(L-&gt;data==x)  <br>  &#123;<br>    p=L;<br>    L=L-&gt;next;<br>    <span class="hljs-built_in">free</span>(p);<br>    Delallx(L,x);<br>  &#125;<br>  <span class="hljs-keyword">else</span> Delallx(L-&gt;next,x);  <span class="hljs-comment">//递归体</span><br>&#125;<br></code></pre></td></tr></table></figure>例题三：对于含有n个节点的二叉树，所有节点值为int类型，设计一个算法由其先序序列a和中序序列b创建对应的二叉链存储结构。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">BTNode *<span class="hljs-title function_">CreateBTree</span><span class="hljs-params">(ElemType a[],ElemType b[],<span class="hljs-type">int</span> n)</span><br><span class="hljs-comment">//由先序序列a[0..n-1]和中序序列b[0..n-1]建立二叉链</span><br>&#123;<br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">if</span> (n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>ElemType root=a[<span class="hljs-number">0</span>];<span class="hljs-comment">//根结点值</span><br>BTNode *bt=(BTNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));<br>bt-&gt;data=root;<br><span class="hljs-keyword">for</span> (k=<span class="hljs-number">0</span>;k&lt;n;k++)<span class="hljs-comment">//在b中查找b[k]=root的根结点</span><br><span class="hljs-keyword">if</span> (b[k]==root)<br><span class="hljs-keyword">break</span>;<br>bt-&gt;lchild=CreateBTree(a+<span class="hljs-number">1</span>,b,k);<span class="hljs-comment">//递归创建左子树</span><br>bt-&gt;rchild=CreateBTree(a+k+<span class="hljs-number">1</span>,b+k+<span class="hljs-number">1</span>,n-k<span class="hljs-number">-1</span>);<span class="hljs-comment">//递归创建右子树</span><br><span class="hljs-keyword">return</span> bt;<br>&#125;<br></code></pre></td></tr></table></figure> a,b不是一个序列嘛，怎么能加 k 这种整数，看不懂~</p><p>例题四：假设二叉树采用二叉链存储结构，设计一个递归算法释放二叉树bt中的所有节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">DestroyBTree</span><span class="hljs-params">(BTNode *&amp;bt)</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(bt!=<span class="hljs-literal">NULL</span>)  <br>  &#123;<br>    DestroyBTree(bt-&gt;lchild);<br>    DestroyBTree(bt-&gt;rchild);<br>    <span class="hljs-built_in">free</span>(bt);  <span class="hljs-comment">//放最后确保所有子节点在父节点之前被释放</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例题五：由二叉树bt复制产生另一个二叉树bt1 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CopyBTree</span><span class="hljs-params">(BTNode *bt,BTNode *&amp;bt1)</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(bt==<span class="hljs-literal">NULL</span>)   <span class="hljs-comment">//递归出口</span><br>    bt1=<span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">else</span>   <br>  &#123;<br>    bt1=(BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));<br>    bt1-&gt;data=bt-&gt;data;<br>    CopyBTree(bt-&gt;lchild,bt1-&gt;lchild);<br>    CopyBTree(bt-&gt;rchild,bt1-&gt;rchild);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>例五好有意思~</p><p>例题六：输出从根节点到x值的节点的路径（有点像搜索问题）</p><p>先看递归模型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">f(b,x,path)=<span class="hljs-literal">false</span>   当 b==<span class="hljs-literal">NULL</span><br>f(b,a,path)=<span class="hljs-literal">true</span>(将x加入到path中)     当 b-&gt;data==x<br>f(b,x,path)=<span class="hljs-literal">true</span>（将b-&gt;data加入到path中）   当f(b-&gt;lchild,x,path)或者f(b-&gt;rchild,x,path)为<span class="hljs-literal">true</span>时<br></code></pre></td></tr></table></figure><p>本身为目标节点，或者当前节点的左右子节点是目标节点时，才能将对应的节点加入到path中</p><p>算法如下： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">Findxpath1</span><span class="hljs-params">(BTNode *bt,<span class="hljs-type">int</span> x,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &amp;path)</span><span class="hljs-comment">//解法1</span><br><span class="hljs-comment">//求根结点到x结点的（逆向）路径</span><br>&#123;<br><span class="hljs-keyword">if</span> (bt==<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//空树返回false</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (bt-&gt;data==x)<span class="hljs-comment">//找到值为x的结点</span><br>&#123;<br>path.push_back(x);<span class="hljs-comment">//结点值加入path中，并返回true</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Findxpath1(bt-&gt;lchild,x,path) || Findxpath1(bt-&gt;rchild,x,path)) <span class="hljs-comment">//在判断语句中设置递归，比较有意思~</span><br>&#123;<br>path.push_back(bt-&gt;data);<span class="hljs-comment">//结点值加入path中，并返回true</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>解法二： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">Findxpath2</span><span class="hljs-params">(BTNode *bt,<span class="hljs-type">int</span> x,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; tmppath,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &amp;path)</span><span class="hljs-comment">//解法2</span><br><span class="hljs-comment">//求根结点到x结点的（正向）路径</span><br>&#123;<br><span class="hljs-keyword">if</span> (bt==<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//空树返回false</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>tmppath.push_back(bt-&gt;data);<span class="hljs-comment">//当前结点加入path</span><br><span class="hljs-keyword">if</span> (bt-&gt;data==x)<span class="hljs-comment">//当前结点值为x，返回true</span><br>&#123;<br>path=tmppath;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-type">bool</span> find=Findxpath2(bt-&gt;lchild,x,tmppath,path);<span class="hljs-comment">//在左子树中查找</span><br><span class="hljs-keyword">if</span> (find)<span class="hljs-comment">//左子树中成功找到</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//左子树中没有找到，在右子树中查找</span><br><span class="hljs-keyword">return</span> Findxpath2(bt-&gt;rchild,x,tmppath,path);<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="基于归纳思想的递归算法设计">2.2.4基于归纳思想的递归算法设计</h4><p>例题不典型，不看。</p><h3 id="递归算法设计示例">2.3递归算法设计示例</h3><h4 id="简单选择排序和冒泡排序">2.3.1简单选择排序和冒泡排序</h4><p>增加经验值。体会大数组的排序，转变成小数组的排序</p><p>例题一：简单选择排序:在无序区选择最小元素放在开头处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 简单选择排序递归算法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SelectSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> i)</span><br>&#123;<br>  <span class="hljs-type">int</span> j,k;<br>  <span class="hljs-keyword">if</span>(i==n<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;   <span class="hljs-comment">//数组范围是a[i]到a[n-1]共n-i个元素</span><br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    k=i;<br>    <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;n;j++)   <span class="hljs-comment">//从i后面找到最小的元素的下标，记为k</span><br>    &#123;<br>      <span class="hljs-keyword">if</span>(a[j]&lt;a[k])<br>        k=j;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k!=i)    <span class="hljs-comment">//最小元素不是a[i]</span><br>      swap(a[i],a[k]);  <span class="hljs-comment">//交换两个元素，这里不展示</span><br>    SelectSort(a,n,i+<span class="hljs-number">1</span>);<br>  &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>例题二：冒泡排序：采用交换的方式将无序区中最小的元素放到开头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 冒泡排序递归算法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> i)</span><br>&#123;<br>  <span class="hljs-type">int</span> j;<br>  bllo exchang;<br>  <span class="hljs-keyword">if</span>(i==n<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;   <span class="hljs-comment">//满足递归出口条件</span><br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    exchang=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(j=n<span class="hljs-number">-1</span>;j&gt;i;j--)<br>    &#123;<br>      <span class="hljs-keyword">if</span>(a[j]&lt;a[j<span class="hljs-number">-1</span>])   <span class="hljs-comment">//当相邻元素反序时</span><br>      &#123;<br>        swap(a[j],a[j<span class="hljs-number">-1</span>]);<br>        exchang=<span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(exchang==<span class="hljs-literal">false</span>)  <span class="hljs-comment">//当没有反序时算法结束</span><br>      <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span><br>      BubbleSort(a,n,i+<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>感觉递归的冒泡排序更复杂一点呢，怎么说呢，不是很喜欢......</p><h4 id="求解n皇后问题">2.3.2求解n皇后问题</h4><p>增加经验值。体会大棋盘，转变成小棋盘。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求解n皇后问题的递归模型</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">queen</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> n)</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(i&gt;n)<br>    dispasolution(n);    <span class="hljs-comment">//皇后放置结束，输出结果，不展示</span><br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)   <span class="hljs-comment">//在第i行试探每一列j</span><br>    &#123;<br>      <span class="hljs-keyword">if</span>(place(i,j))   <span class="hljs-comment">//找到合适的位置（i，j）</span><br>      &#123;<br>        q[i]=j;  <br>        queen(i+<span class="hljs-number">1</span>,n);  <span class="hljs-comment">//递归，这里没啥说的</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归算法转化为非递归算法">2.4递归算法转化为非递归算法</h3><h4 id="用循环结构替代递归过程">2.4.1用循环结构替代递归过程</h4><p>直接转换法适合尾递归。想想为什么？</p><p>尾递归只有一个递归调用语句，而且是处于算法的最后，当递归调用返回时返回到上一层再递归调用下一句语句，而这个返回的位置正好是算法的末尾</p><p>采用循环结构求解n!的非递归算法如下：(属于尾递归) <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fun1</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br>  <span class="hljs-type">int</span> f=<span class="hljs-number">1</span>,i;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>  &#123;<br>    f=f*i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> f;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>采用循环结构求解斐波那契数列的非递归算法如下：（属于单向递归）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">F</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br>  <span class="hljs-type">int</span> i,f1,f2,f3;<br>  <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>||n==<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  f1=<span class="hljs-number">1</span>,f2=<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">3</span>;i&lt;=n;i++)<br>  &#123;<br>    f3=f1+f2;<br>    f1=f2;<br>    f2=f3;<br>  &#125;<br>  <span class="hljs-keyword">return</span> f3;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="用栈消除递归过程">2.4.2用栈消除递归过程</h4><p>代替函数调用使用的系统栈，是对函数调用过程的模拟，通过教材上的例子体会。</p><h3 id="递推式的计算">2.5递推式的计算</h3><p>递归算法的复杂度分析时，其<strong>基本语句的执行次数写成递推式</strong>，要化简后才能得到复杂度。第一章通过将递推式展开，来寻找数列的规律，然后求和的方法来做到这一点。这里提供了更一般化的方法。</p><h4 id="用特征方程求解递归方程">2.5.1用特征方程求解递归方程</h4><p>不常用，不看。</p><h4 id="用递归树求解递归方程">2.5.2用递归树求解递归方程</h4><p>常用。</p><p>例题：分析以下递归方程的时间复杂度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">T(n)=<span class="hljs-number">1</span>             当n=<span class="hljs-number">1</span>时<br>T(n)=<span class="hljs-number">2</span>T(n/<span class="hljs-number">2</span>)+n^<span class="hljs-number">2</span>   当n&gt;<span class="hljs-number">1</span>时<br></code></pre></td></tr></table></figure><p>时间复杂度为：O（n^2）,详见课本P77</p><p>课本还有一个例题也值得关注下！</p><h4 id="用主方法求解递归方程">2.5.3用主方法求解递归方程</h4><p>常用。</p><p>一般方法</p><p>看书P78</p><p>对于一般的方程：</p><p>T(n)=aT(n/b)+f(n)</p><p>a,b是常数且a大于等于1，b大于1</p><p>比较函数n^(logba)（以b为底）与f(n)的大小关系</p><p>取较大的那一个</p><h2 id="第3章分治法">第3章分治法</h2><h3 id="分治法概述">3.1分治法概述</h3><h4 id="分治法的设计思想">3.1.1分治法的设计思想</h4><p>P84页本小节第1段，是分治法的定义。后面看到具体实例的时候，要回顾该定义是怎么体现在其中的。别的文字没什么用。</p><p>递归解决子问题（这是在第二章的基础上进行的！！！）</p><h4 id="分治法的求解过程">3.1.2分治法的求解过程</h4><p>P85页最上方绿色字体，是三个步骤。其实也是对分治法定义的解析。别的文字没什么用。</p><p>分解成若干个子问题</p><p>求解子问题</p><p>合并子问题</p><h3 id="求解排序问题">3.2求解排序问题</h3><h4 id="快速排序">3.2.1快速排序</h4><p>从数据结构、算法这两门课的角度看，都是经典。其中快排中“划分”这一步骤，应用特别广泛。</p><p>划分：整个序列被基准分割成两个子序列，基准位于两个子序列中间，一小一大</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//快速排序算法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">disp</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//输出a中所有元素</span><br>&#123;<span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;n;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Partition</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> s,<span class="hljs-type">int</span> t)</span><span class="hljs-comment">//划分算法</span><br>&#123;<span class="hljs-type">int</span> i=s,j=t;<br><span class="hljs-type">int</span> tmp=a[s];<span class="hljs-comment">//用序列的第1个记录作为基准</span><br><span class="hljs-keyword">while</span> (i!=j)<span class="hljs-comment">//从序列两端交替向中间扫描,直至i=j为止</span><br>&#123;<span class="hljs-keyword">while</span> (j&gt;i &amp;&amp; a[j]&gt;=tmp) <br>j--;<span class="hljs-comment">//从右向左扫描,找第1个关键字小于tmp的a[j]</span><br>a[i]=a[j];<span class="hljs-comment">//将a[j]前移到a[i]的位置</span><br><span class="hljs-keyword">while</span> (i&lt;j &amp;&amp; a[i]&lt;=tmp) <br>i++;<span class="hljs-comment">//从左向右扫描,找第1个关键字大于tmp的a[i]</span><br>a[j]=a[i];<span class="hljs-comment">//将a[i]后移到a[j]的位置</span><br>&#125;<br>a[i]=tmp;       <span class="hljs-comment">// tmp这个值在最中间，左边全是比其小的，右边全是比其大的</span><br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> s,<span class="hljs-type">int</span> t)</span><span class="hljs-comment">//对a[s..t]元素序列进行递增排序</span><br>&#123;<span class="hljs-type">int</span> i;<br><span class="hljs-keyword">if</span> (s&lt;t) <span class="hljs-comment">//序列内至少存在2个元素的情况</span><br>&#123;i=Partition(a,s,t);<br>QuickSort(a,s,i<span class="hljs-number">-1</span>);<span class="hljs-comment">//对左子序列递归排序</span><br>QuickSort(a,i+<span class="hljs-number">1</span>,t);<span class="hljs-comment">//对右子序列递归排序</span><br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<span class="hljs-type">int</span> n=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序前:&quot;</span>); disp(a,n);<br>QuickSort(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序后:&quot;</span>); disp(a,n);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="归并排序">3.2.2归并排序</h4><p>归并排序，结合微助教上的“求逆序数”来看。</p><p>二路归并、多路归并</p><p>自底向上的二路归并排序算法，将两个相邻的有序子序列合并为一个有序子序列的过程。</p><p>自顶向下的二路归并排序算法，属于典型的二分法算法</p><p>课本习题：3.8.3</p><p>求排列的逆序数（分治）</p><p>一、题目描述</p><p>在Internet上的搜索引擎经常需要对信息进行比较，比如可以通过某个人对一些事物的排名来估计他（或她）对各种不同信息的兴趣，从而实现个性化的服务。</p><p>对于不同的排名结果可以用逆序来评价它们之间的差异。考虑1,2,…,n的排列i1，i2，…，in，如果其中存在j,k，满足j &lt; k 且 ij &gt; ik， 那么就称(ij,ik)是这个排列的一个逆序。</p><p>一个排列含有逆序的个数称为这个排列的逆序数。例如排列 263451含有8个逆序(2,1),(6,3),(6,4),(6,5),(6,1),(3,1),(4,1),(5,1)，因此该排列的逆序数就是8。显然，由1,2,…,n构成的所有n!个排列中，最小的逆序数是0，对应的排列就是1,2,…,n；最大的逆序数是n(n-1)/2，对应的排列就是n,(n-1),…,2,1。逆序数越大的排列与原始排列的差异度就越大。</p><p>现给定1,2,…,n的一个排列，求它的逆序数。</p><p>输入</p><p>第一行是一个整数n，表示该排列有n个数（n &lt;= 100000）。第二行是n个不同的正整数，之间以空格隔开，表示该排列。</p><p>输出</p><p>输出该排列的逆序数。</p><p>样例输入</p><p>6</p><p>2 6 3 4 5 1</p><p>样例输出</p><p>8</p><p>提示</p><p>1、利用二分归并排序算法（分治）； 与二路归并排序非常相似。</p><p>2、在合并过程中，（low&lt;=i&lt;=mid,mid+1&lt;=j&lt;=high）,当a[i]&lt;=a[j]时，并不产生逆序数；当a[i]&gt;a[j]时，在前半部分比i大的元素都比a[j]大，产生的逆序数个数为mid-i+1.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-number">2</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-number">3</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-number">4</span> using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-number">5</span> <span class="hljs-type">int</span> n,a[<span class="hljs-number">100009</span>],tmp[<span class="hljs-number">100009</span>];<br><span class="hljs-number">6</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum;<br><span class="hljs-number">7</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span>;<br><span class="hljs-number">8</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Merge_nx</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span>;<br><span class="hljs-number">9</span> <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>10 &#123;<br><span class="hljs-number">11</span>     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-number">12</span>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-number">13</span>     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-number">14</span>     Merge_sort(<span class="hljs-number">1</span>,n);<br><span class="hljs-number">15</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<span class="hljs-comment">//输出逆序总数 </span><br><span class="hljs-number">16</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">17</span> &#125;<br><span class="hljs-number">18</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span>   <span class="hljs-comment">//这里使用的是自顶向下的方法</span><br>19 &#123;<br><span class="hljs-number">20</span>     <span class="hljs-keyword">if</span>(l&lt;r)<span class="hljs-comment">//要有判断 </span><br><span class="hljs-number">21</span>     &#123;<br><span class="hljs-number">22</span>     <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<span class="hljs-comment">// </span><br><span class="hljs-number">23</span>     Merge_sort(<span class="hljs-number">1</span>,mid);<span class="hljs-comment">//归并左边 </span><br><span class="hljs-number">24</span>     Merge_sort(mid+<span class="hljs-number">1</span>,r);<span class="hljs-comment">//归并右边 </span><br><span class="hljs-number">25</span>     Merge_nx(l,mid,r);<span class="hljs-comment">//归并排序 </span><br><span class="hljs-number">26</span>     &#125;<br><span class="hljs-number">27</span> &#125;<br><span class="hljs-number">28</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Merge_nx</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> r)</span>  <span class="hljs-comment">//左边右边和中间的下标</span><br>29 &#123;<br><span class="hljs-number">30</span>     <span class="hljs-type">int</span> z=l,y=m+<span class="hljs-number">1</span>;<br><span class="hljs-number">31</span>     <span class="hljs-type">int</span> num=l;    <br><span class="hljs-number">32</span>     <span class="hljs-keyword">while</span>(z&lt;=m&amp;&amp;y&lt;=r)  <span class="hljs-comment">//两个子序列都没用完</span><br><span class="hljs-number">33</span>     &#123;<br><span class="hljs-number">34</span>         <span class="hljs-keyword">if</span>(a[z]&lt;=a[y])<br><span class="hljs-number">35</span>         &#123;<br><span class="hljs-number">36</span>             tmp[num++]=a[z++];  <br><span class="hljs-number">37</span>         &#125;<br><span class="hljs-number">38</span>         <span class="hljs-keyword">else</span><br><span class="hljs-number">39</span>         &#123;<br><span class="hljs-number">40</span>             tmp[num++]=a[y++];<br><span class="hljs-number">41</span>             sum+=(m-z+<span class="hljs-number">1</span>); <span class="hljs-comment">//逆序总数 </span><br><span class="hljs-number">42</span>         &#125;<br><span class="hljs-number">43</span>     &#125;<br><span class="hljs-number">44</span>     <span class="hljs-keyword">while</span>(z&lt;=m)&#123;tmp[num++]=a[z++];&#125;<span class="hljs-comment">//将剩下的直接放入 </span><br><span class="hljs-number">45</span>     <span class="hljs-keyword">while</span>(y&lt;=r)&#123;tmp[num++]=a[y++];&#125;<br><span class="hljs-number">46</span>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)<br><span class="hljs-number">47</span>         a[i]=tmp[i];<span class="hljs-comment">//将排好的数返回数组a</span><br><span class="hljs-number">48</span> &#125;<br></code></pre></td></tr></table></figure><p>【问题】为何能够基于归并排序求解逆序数？</p><p>在合并过程中，（low&lt;=i&lt;=mid,mid+1&lt;=j&lt;=high）,当a[i]&lt;=a[j]时，并不产生逆序数；当a[i]&gt;a[j]时，在前半部分比i大的元素都比a[j]大，产生的逆序数个数为mid-i+1.</p><p>这里需要搞懂！！！</p><h3 id="求解查找问题">3.3求解查找问题</h3><h4 id="查找和次大元素">3.3.1查找和次大元素</h4><p>较简单，浏览一下，对理解分治法不错，帮助提高写递归程序的能力</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求解最大和次大元素算法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 99999<span class="hljs-comment">//表示最大的整数</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high,<span class="hljs-type">int</span> &amp;max1,<span class="hljs-type">int</span> &amp;max2)</span><br>&#123;<br><span class="hljs-keyword">if</span> (low==high)<span class="hljs-comment">//区间只有一个元素</span><br>&#123;<br>max1=a[low];<br>max2=-INF;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (low==high<span class="hljs-number">-1</span>)<span class="hljs-comment">//区间只有两个元素</span><br>&#123;<br>max1=max(a[low],a[high]);<br>max2=min(a[low],a[high]);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> mid=(low+high)/<span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> lmax1,lmax2;<br>solve(a,low,mid,lmax1,lmax2);<span class="hljs-comment">//左区间求lmax1和lmax2</span><br><span class="hljs-type">int</span> rmax1,rmax2;<br>solve(a,mid+<span class="hljs-number">1</span>,high,rmax1,rmax2);<span class="hljs-comment">//右区间求lmax1和lmax2</span><br><span class="hljs-keyword">if</span> (lmax1&gt;rmax1)<br>&#123;<br>max1=lmax1;<br>max2=max(lmax2,rmax1);<span class="hljs-comment">//lmax2,rmax1中求次大元素</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>max1=rmax1;<br>max2=max(lmax1,rmax2);<span class="hljs-comment">//lmax1,rmax2中求次大元素</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="折半查找">3.3.2折半查找</h4><p>体会分治法可以使用递归与非递归2种形式</p><p>折半查找（二分查找）</p><p>折半查找要求序列是有序的，假设递增</p><p><code>折半查找的递归与非递归算法</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//递归和非递归折半查找算法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">BinSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high,<span class="hljs-type">int</span> k)</span> <span class="hljs-comment">//递归拆半查找算法</span><br>&#123;<span class="hljs-type">int</span> mid;<br><span class="hljs-keyword">if</span> (low&lt;=high)<span class="hljs-comment">//当前区间存在元素时</span><br>&#123;mid=(low+high)/<span class="hljs-number">2</span>;<span class="hljs-comment">//求查找区间的中间位置</span><br><span class="hljs-keyword">if</span> (a[mid]==k)<span class="hljs-comment">//找到后返回其物理下标mid</span><br><span class="hljs-keyword">return</span> mid;<br><span class="hljs-keyword">if</span> (a[mid]&gt;k)<span class="hljs-comment">//当a[mid]&gt;k时,在a[low..mid-1]中递归查找</span><br><span class="hljs-keyword">return</span> BinSearch(a,low,mid<span class="hljs-number">-1</span>,k);<br><span class="hljs-keyword">else</span><span class="hljs-comment">//当a[mid]&lt;k时,在a[mid+1..high]中递归查找</span><br><span class="hljs-keyword">return</span> BinSearch(a,mid+<span class="hljs-number">1</span>,high,k);<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//若当前查找区间没有元素时返回-1</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">BinSearch1</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k)</span><span class="hljs-comment">//非递归拆半查找算法</span><br>&#123;<span class="hljs-type">int</span> low=<span class="hljs-number">0</span>,high=n<span class="hljs-number">-1</span>,mid;<br><span class="hljs-keyword">while</span> (low&lt;=high)<span class="hljs-comment">//当前区间存在元素时循环</span><br>&#123;mid=(low+high)/<span class="hljs-number">2</span>;<span class="hljs-comment">//求查找区间的中间位置</span><br><span class="hljs-keyword">if</span> (a[mid]==k)<span class="hljs-comment">//找到后返回其物理下标mid</span><br><span class="hljs-keyword">return</span> mid;<br><span class="hljs-keyword">if</span> (a[mid]&gt;k)<span class="hljs-comment">//继续在a[low..mid-1]中查找</span><br>high=mid<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//a[mid]&lt;k</span><br>low=mid+<span class="hljs-number">1</span>;<span class="hljs-comment">//继续在a[mid+1..high]中查找</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//若当前查找区间没有元素时返回-1</span><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<span class="hljs-type">int</span> n=<span class="hljs-number">10</span>,i;<br><span class="hljs-type">int</span> k=<span class="hljs-number">6</span>;<br><span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>i=BinSearch(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>,k);<br><span class="hljs-keyword">if</span> (i&gt;=<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[%d]=%d\n&quot;</span>,i,k);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到%d元素\n&quot;</span>,k);<br>&#125;<br></code></pre></td></tr></table></figure><p>算法的时间复杂度计算：</p><p>对应的搜索树的高度为：log2n（向下取整）+1</p><p>折半查找的时间复杂度为O（log2n）</p><h4 id="寻找一个序列中第k小的元素">3.3.3寻找一个序列中第k小的元素</h4><p><code>特别重要</code>。以它为基础，可解算法里很多题</p><p>先给这个序列进行排序，采用类似快速排序的思想</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//找第k小元素的算法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">QuickSelect</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> s,<span class="hljs-type">int</span> t,<span class="hljs-type">int</span> k)</span><span class="hljs-comment">//在a[s..t]序列中找第k小的元素</span><br>&#123;<span class="hljs-type">int</span> i=s,j=t;<br><span class="hljs-type">int</span> tmp;<br><span class="hljs-keyword">if</span> (s&lt;t) <span class="hljs-comment">//区间内至少存在2个元素的情况</span><br>&#123;tmp=a[s];<span class="hljs-comment">//用区间的第1个记录作为基准</span><br><span class="hljs-keyword">while</span> (i!=j)<span class="hljs-comment">//从区间两端交替向中间扫描,直至i=j为止</span><br>&#123;<span class="hljs-keyword">while</span> (j&gt;i &amp;&amp; a[j]&gt;=tmp) <br>j--;<span class="hljs-comment">//从右向左扫描,找第1个关键字小于tmp的a[j]</span><br>a[i]=a[j];<span class="hljs-comment">//将a[j]前移到a[i]的位置</span><br><span class="hljs-keyword">while</span> (i&lt;j &amp;&amp; a[i]&lt;=tmp) <br>i++;<span class="hljs-comment">//从左向右扫描,找第1个关键字大于tmp的a[i]</span><br>a[j]=a[i];<span class="hljs-comment">//将a[i]后移到a[j]的位置</span><br>&#125;<br>a[i]=tmp;<br><span class="hljs-keyword">if</span> (k<span class="hljs-number">-1</span>==i) <span class="hljs-keyword">return</span> a[i];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k<span class="hljs-number">-1</span>&lt;i) <span class="hljs-keyword">return</span> QuickSelect(a,s,i<span class="hljs-number">-1</span>,k);<span class="hljs-comment">//在左区间中递归查找</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> QuickSelect(a,i+<span class="hljs-number">1</span>,t,k);<span class="hljs-comment">//在右区间中递归查找</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s==t &amp;&amp; s==k<span class="hljs-number">-1</span>)<span class="hljs-comment">//区间内只有一个元素并且s是第k小的元素的下标（k-1）</span><br><span class="hljs-keyword">return</span> a[k<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h4id="寻找两个等长有序序列的中位数">3.3.4寻找两个等长有序序列的中位数</h4><p><code>重要，同时又一定难度</code>。在搞清算法原理的基础上，会觉得比较精妙，看似繁杂的步骤，也不用记忆，很自然就知道怎么解，<code>参考微助教。思考的起点是：一个序列，从它的两端各去掉相同数量的元素，中位数不变</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//寻找两个等长有序序列的中位数的算法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">prepart</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;s,<span class="hljs-type">int</span> &amp;t)</span><span class="hljs-comment">//求a[s..t]序列的前半子序列</span><br>&#123;<span class="hljs-type">int</span> m=(s+t)/<span class="hljs-number">2</span>;<br>t=m;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">postpart</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;s,<span class="hljs-type">int</span> &amp;t)</span><span class="hljs-comment">//求a[s..t]序列的后半子序列</span><br>&#123;<span class="hljs-type">int</span> m=(s+t)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> ((s+t)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<span class="hljs-comment">//序列中有奇数个元素</span><br>s=m;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//序列中有偶数个元素</span><br>s=m+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">double</span> <span class="hljs-title function_">midnum</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> s1,<span class="hljs-type">int</span> t1,<span class="hljs-type">int</span> b[],<span class="hljs-type">int</span> s2,<span class="hljs-type">int</span> t2)</span><br>&#123;<span class="hljs-comment">//求两个有序序列a[s1..t1]和b[s2..t2]的中位数</span><br><span class="hljs-type">int</span> m1,m2;<br><span class="hljs-keyword">if</span> (s1==t1 &amp;&amp; s2==t2)<span class="hljs-comment">//两序列只有一个元素时返回较小者</span><br><span class="hljs-keyword">return</span> a[s1]&lt;b[s2]?a[s1]:b[s2];<br><span class="hljs-keyword">else</span><br>&#123;m1=(s1+t1)/<span class="hljs-number">2</span>;<span class="hljs-comment">//求a的中位数</span><br>m2=(s2+t2)/<span class="hljs-number">2</span>;<span class="hljs-comment">//求b的中位数</span><br><span class="hljs-keyword">if</span> (a[m1]==b[m2])<span class="hljs-comment">//两中位数相等时返回该中位数</span><br><span class="hljs-keyword">return</span> a[m1];<br><span class="hljs-keyword">if</span> (a[m1]&lt;b[m2])<span class="hljs-comment">//当a[m1]&lt;b[m2]时</span><br>&#123;postpart(s1,t1);<span class="hljs-comment">//a取后半部分</span><br>prepart(s2,t2);<span class="hljs-comment">//b取前半部分</span><br><span class="hljs-keyword">return</span> midnum(a,s1,t1,b,s2,t2);<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//当a[m1]&gt;b[m2]时</span><br>&#123;prepart(s1,t1);<span class="hljs-comment">//a取前半部分</span><br>postpart(s2,t2);<span class="hljs-comment">//b取后半部分</span><br><span class="hljs-keyword">return</span> midnum(a,s1,t1,b,s2,t2);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有等价的非递归算法，不做说明（就是改成了while循环而已）</p><p>或者考虑将其排个序，合成一个递增数组，然后直接求中位数</p><p>例3.2不看。</p><h3 id="求解组合问题">3.4求解组合问题</h3><h4 id="求解最大连续子序列和问题">3.4.1求解最大连续子序列和问题</h4><p>比起3.3.1，3.3.2的例子更有启发性的例子。在大致阅读文字，粗浅地了解原理后，阅读代码能更清楚地反映细节。</p><p>采用分治法解决，书上的思想将问题分为三种情况展开讨论：</p><p>先对整个序列从中部划分左右各一半</p><p>（1）最大子序列和完全在左半部，递归求解左半部的最大子序列和</p><p>（2）最大子序列和完全在右半部，递归求解右半部的最大子序列和</p><p>（3）最大子序列和横跨左右半部，该子序列和中一定会含有mid元素，求出最大值</p><p>上述三种情况再求最大值即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求解最大连续子序列和的算法</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">max3</span><span class="hljs-params">(<span class="hljs-type">long</span> a,<span class="hljs-type">long</span> b,<span class="hljs-type">long</span> c)</span><span class="hljs-comment">//求出三个long中的最大值</span><br>&#123;<span class="hljs-keyword">if</span> (a&lt;b) a=b;<span class="hljs-comment">//用a保存a、b中的最大值</span><br><span class="hljs-keyword">if</span> (a&gt;c) <span class="hljs-keyword">return</span> a;<span class="hljs-comment">//比较返回a、c中的最大值</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> c;  <br>&#125; <br><span class="hljs-type">long</span> <span class="hljs-title function_">maxSubSum4</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span><span class="hljs-comment">//求a[left..right]序列中最大连续子序列和</span><br>&#123;<span class="hljs-type">int</span> i,j;<br><span class="hljs-type">long</span> maxLeftSum,maxRightSum;<br><span class="hljs-type">long</span> maxLeftBorderSum,leftBorderSum;<br><span class="hljs-type">long</span> maxRightBorderSum,rightBorderSum;<br><span class="hljs-keyword">if</span> (left==right)<span class="hljs-comment">//子序列只有一个元素时</span><br>&#123;<span class="hljs-keyword">if</span> (a[left]&gt;<span class="hljs-number">0</span>) <span class="hljs-comment">//该元素大于0时返回它</span><br><span class="hljs-keyword">return</span> a[left];<br><span class="hljs-keyword">else</span><span class="hljs-comment">//该元素小于或等于0时返回0</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br><span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<span class="hljs-comment">//求中间位置</span><br>maxLeftSum=maxSubSum4(a,left,mid);<span class="hljs-comment">//求左边的最大连续子序列之和</span><br>maxRightSum=maxSubSum4(a,mid+<span class="hljs-number">1</span>,right);<span class="hljs-comment">//求右边的最大连续子序列之和</span><br>maxLeftBorderSum=<span class="hljs-number">0</span>,leftBorderSum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i=mid;i&gt;=left;i--)<span class="hljs-comment">//求出以左边加上a[mid]元素构成的序列的最大和</span><br>&#123;leftBorderSum+=a[i];<br><span class="hljs-keyword">if</span> (leftBorderSum&gt;maxLeftBorderSum)<br>maxLeftBorderSum=leftBorderSum;<br>&#125;<br>maxRightBorderSum=<span class="hljs-number">0</span>,rightBorderSum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (j=mid+<span class="hljs-number">1</span>;j&lt;=right;j++)<span class="hljs-comment">//求出a[mid]右边元素构成的序列的最大和</span><br>&#123;rightBorderSum+=a[j];<br><span class="hljs-keyword">if</span> (rightBorderSum&gt;maxRightBorderSum)<br>maxRightBorderSum=rightBorderSum;<br>&#125;<br><span class="hljs-keyword">return</span> max3(maxLeftSum,maxRightSum,maxLeftBorderSum+maxRightBorderSum); <br>&#125; <br></code></pre></td></tr></table></figure><p><code>上述算法无法求解最大连续子序列积的问题，因为该问题的子序列不满足最优性原理！</code></p><p><code>分治法需要满足最优性原理</code></p><p>即整个问题的最优解由各个子问题的最优解构成！</p><h4 id="求解棋盘覆盖问题">3.4.2求解棋盘覆盖问题</h4><p>了解原理。体会分治法从一维走向二维</p><p>这里第一遍复习时没看，后面有时间补，感觉不是很重要</p><h4 id="求解循环日程安排问题">3.4.3求解循环日程安排问题</h4><p>日常有用，对分治法的理解帮助不大，不用看。</p><h3id="求解大整数乘法和矩阵乘法问题">3.5求解大整数乘法和矩阵乘法问题</h3><p>不典型，不看。</p><h3 id="并行计算简介">3.6并行计算简介</h3><p>具体的硬件相关，不看。</p><h2 id="第4章蛮力法">第4章蛮力法</h2><h3 id="蛮力法概述">4.1蛮力法概述</h3><p><code>蛮力法</code>，也叫暴力法(brute force method),穷举法。</p><p><code>原理</code>：把所有可能的解列举出来，找出满足条件的解。</p><p><code>特点</code>：通用性强，效率低。</p><p>通过看后面小节中的例子，来理解上述三点。其它内容可不看。</p><p>（教材上将蛮力法应用的场景分成4种，可以在后面几节的例子里去体会它们属于哪一种。这些也不紧要。）</p><h3 id="蛮力法的基本应用">4.2蛮力法的基本应用</h3><h4 id="采用直接穷举思路的一般格式">4.2.1采用直接穷举思路的一般格式</h4><p>例4.1</p><p>前提知识是一个数m除了本身以外的其他因子都在1-m/2之间，只需要遍历这个区间即可，减少运算量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例4.1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<span class="hljs-type">int</span> m,i,s;<br><span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>;m&lt;=<span class="hljs-number">1000</span>;m++)<br>&#123;s=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;=m/<span class="hljs-number">2</span>;i++)<br><span class="hljs-keyword">if</span> (m%i==<span class="hljs-number">0</span>) s+=i;   <span class="hljs-comment">//i是m的一个因子</span><br><span class="hljs-keyword">if</span> (m==s)   <span class="hljs-comment">//所有的因子和s等于原数m，是我们要找的完全数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,m);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>例4.3 计算一个逻辑算式各个符号代表什么具体的数字 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例4.3</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<span class="hljs-type">int</span> a,b,c,d,e,m,n,s;<br><span class="hljs-keyword">for</span> (a=<span class="hljs-number">1</span>;a&lt;=<span class="hljs-number">9</span>;a++)<br><span class="hljs-keyword">for</span> (b=<span class="hljs-number">0</span>;b&lt;=<span class="hljs-number">9</span>;b++)<br><span class="hljs-keyword">for</span> (c=<span class="hljs-number">0</span>;c&lt;=<span class="hljs-number">9</span>;c++)<br><span class="hljs-keyword">for</span> (d=<span class="hljs-number">0</span>;d&lt;=<span class="hljs-number">9</span>;d++)<br><span class="hljs-keyword">for</span> (e=<span class="hljs-number">0</span>;e&lt;=<span class="hljs-number">9</span>;e++)   <span class="hljs-comment">//5个自变量，5重循环</span><br><span class="hljs-keyword">if</span> (a==b || a==c || a==d || a==e || b==c || b==d <br> || b==e || c==d || c==e || d==e)   <span class="hljs-comment">//个不相等才行</span><br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">else</span><br>&#123;m=a*<span class="hljs-number">1000</span>+b*<span class="hljs-number">100</span>+c*<span class="hljs-number">10</span>+d;<br>n=a*<span class="hljs-number">1000</span>+b*<span class="hljs-number">100</span>+e*<span class="hljs-number">10</span>+d;<br>s=e*<span class="hljs-number">10000</span>+d*<span class="hljs-number">1000</span>+c*<span class="hljs-number">100</span>+a*<span class="hljs-number">10</span>+d;<br><span class="hljs-keyword">if</span> (m+n==s)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;兵:%d 炮:%d 马:%d 卒:%d 车:%d\n&quot;</span>,<br>a,b,c,d,e);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="简单选择排序和冒泡排序-1">4.2.2简单选择排序和冒泡排序</h4><p>不看</p><h4 id="字符串匹配">4.2.3字符串匹配</h4><p>看</p><p>直接穷举法，也称为<code>BF算法</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">BF</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s,<span class="hljs-built_in">string</span> t)</span><span class="hljs-comment">//字符串匹配</span><br>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i&lt;s.length() &amp;&amp; j&lt;t.length())<br>&#123;<br><span class="hljs-keyword">if</span> (s[i]==t[j])<span class="hljs-comment">//比较的两个字符相同时</span><br>&#123;<br>i++; j++;       <span class="hljs-comment">//比翼齐飞</span><br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//比较的两个字符不相同时</span><br>&#123;<br>i=i-j+<span class="hljs-number">1</span>;<span class="hljs-comment">//i回退到原来i的下一个位置</span><br>j=<span class="hljs-number">0</span>;<span class="hljs-comment">//j从0开始  重新来过</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (j==t.length())<span class="hljs-comment">//t的字符比较完毕</span><br><span class="hljs-keyword">return</span> i-j;<span class="hljs-comment">//t是s的子串,返回位置（t的首字母在s中的下标）</span><br><span class="hljs-keyword">else</span><span class="hljs-comment">//t不是s的子串</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例题4.5</p><p>比较简单，不看了</p><h4 id="求解最大连续子序列和问题-1">4.2.4求解最大连续子序列和问题</h4><p>三种方法，很有代表性。结合图4.5，看代码来分析a[i][j]元素的计算量的多寡，课件上更清晰。</p><p>第三章使用分治法求解过，现在使用穷举法思想解决之，看课本解释</p><p><code>思路一</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求解最大连续子序列和问题-解法1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxSubSum1</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//求a的最大连续子序列和</span><br>&#123;<span class="hljs-type">int</span> i,j,k;<br><span class="hljs-type">int</span> maxSum=<span class="hljs-number">0</span>,thisSum; <br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//两重循环穷举所有的连续子序列</span><br>&#123;<span class="hljs-keyword">for</span> (j=i;j&lt;n;j++)<br>&#123;thisSum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (k=i;k&lt;=j;k++)   <span class="hljs-comment">//计算从i到j的序列和</span><br>thisSum+=a[k];    <span class="hljs-comment">//求解当前子序列的和</span><br><span class="hljs-keyword">if</span> (thisSum&gt;maxSum)<span class="hljs-comment">//通过比较求最大连续子序列之和</span><br>maxSum=thisSum;  <span class="hljs-comment">//maxsum是历史最优 thissum是本局最优</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> maxSum;<br>&#125;<br></code></pre></td></tr></table></figure><p>本质上是三重循环，时间复杂度为O（n^3）</p><p><code>思路二</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求解最大连续子序列和问题-解法2</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxSubSum2</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//求a的最大连续子序列和</span><br>&#123;<span class="hljs-type">int</span> i,j;<br><span class="hljs-type">int</span> maxSum=<span class="hljs-number">0</span>,thisSum;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;n;i++)  <br>&#123;thisSum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (j=i;j&lt;n;j++)<br>&#123;thisSum+=a[j];   <span class="hljs-comment">//thissum表示从i开始，往后到任意位置（最多是最后）的最优解</span><br><span class="hljs-keyword">if</span> (thisSum&gt;maxSum)  <br>maxSum=thisSum;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> maxSum;<br>&#125;<br></code></pre></td></tr></table></figure><p>解法二两重循环，时间复杂度为O(n^2)</p><p><code>思路三</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求解最大连续子序列和问题-解法3</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxSubSum3</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//求a的最大连续子序列和</span><br>&#123;<span class="hljs-type">int</span> i,maxSum=<span class="hljs-number">0</span>,thisSum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;thisSum+=a[i];<br><span class="hljs-keyword">if</span> (thisSum&lt;<span class="hljs-number">0</span>)<span class="hljs-comment">//若当前子序列和为负数，则重新开始下一个子序列</span><br>thisSum=<span class="hljs-number">0</span>;   <br><span class="hljs-keyword">if</span> (maxSum&lt;thisSum)<span class="hljs-comment">//比较求最大连续子序列和</span><br>maxSum=thisSum;  <span class="hljs-comment">//这里更新全局最优值</span><br>&#125;<br><span class="hljs-keyword">return</span> maxSum;<br>&#125;<br></code></pre></td></tr></table></figure><p>解法三只需要遍历一遍数组，时间复杂度为O(n)</p><h4 id="求解幂集问题">4.2.5求解幂集问题</h4><p>算法中的基本问题，要掌握。</p><p>幂集问题可以使用穷举法实现，例题代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求解幂集问题-解法1</span><br><span class="hljs-comment">//求a&#123;1,2,3&#125;的幂集</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxN 10</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">inc</span><span class="hljs-params">(<span class="hljs-type">int</span> b[], <span class="hljs-type">int</span> n)</span><span class="hljs-comment">//将b表示的二进制数增1</span><br>&#123;<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//遍历数组b</span><br>&#123;<span class="hljs-keyword">if</span>(b[i])<span class="hljs-comment">//将元素1改为0</span><br>b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//将元素0改为1并退出for循环</span><br>&#123;b[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PSet</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> b[],<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//求幂集</span><br>&#123;<span class="hljs-type">int</span> i,k;<br><span class="hljs-type">int</span> pw=(<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n);<span class="hljs-comment">//求2^n</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1～%d的幂集:\n  &quot;</span>,n);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;pw;i++)<span class="hljs-comment">//执行2^n次</span><br>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&#123; &quot;</span>);<br><span class="hljs-keyword">for</span> (k=<span class="hljs-number">0</span>;k&lt;n;k++)<span class="hljs-comment">//执行n次</span><br><span class="hljs-keyword">if</span>(b[k])<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[k]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&#125; &quot;</span>);<br>inc(b,n);<span class="hljs-comment">//b表示的二进制数增1</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<span class="hljs-type">int</span> n=<span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> a[MaxN],b[MaxN];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;a[i]=i+<span class="hljs-number">1</span>;<span class="hljs-comment">//a初始化为&#123;1,2,3&#125;</span><br>b[i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//b初始化为&#123;0,0,0&#125;</span><br>&#125;<br>PSet(a,b,n);<br>&#125;<br></code></pre></td></tr></table></figure><p>求幂集问题上面的例题有三个元素，可以对应三位二进制 从000-1110表示不选，1表示选择</p><p>利用二叉选择树来进行求解亦可</p><h4 id="求解简单01背包问题">4.2.6求解简单0/1背包问题</h4><p>经典问题。以前一节为基础。</p><p>可以尝试在前一节的基础上开展，0表示不选，1表示选择</p><p>求出幂集即可求出结果，具体实现细节不多赘述</p><p>因为是蛮力法嘛，就是求出全部的排列情况，就知道哪个方案最好了</p><h4 id="求解全排列问题">4.2.7求解全排列问题</h4><p>算法中的基本问题，要掌握。</p><p>给定正数n，求解1-n的所有全排列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求解全排列问题</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &gt; ps;<span class="hljs-comment">//存放全排列</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; s,<span class="hljs-type">int</span> i,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &gt; &amp;ps1)</span><br><span class="hljs-comment">//在每个集合元素中间插入i得到ps1</span><br>&#123;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; s1;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)<span class="hljs-comment">//在s(含i-1个整数)的每个位置插入i</span><br>&#123;s1=s;<br>it=s1.begin()+j;<span class="hljs-comment">//求出插入位置</span><br>s1.insert(it,i);<span class="hljs-comment">//插入整数i</span><br>ps1.push_back(s1);<span class="hljs-comment">//添加到ps1中</span><br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Perm</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//求1～n的所有全排列</span><br>&#123;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &gt; ps1;<span class="hljs-comment">//临时存放子排列</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &gt;::iterator it;<span class="hljs-comment">//全排列迭代器</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; s,s1;<br>s.push_back(<span class="hljs-number">1</span>);<br>ps.push_back(s);<span class="hljs-comment">//添加&#123;1&#125;集合元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<span class="hljs-comment">//循环添加1～n</span><br>&#123;ps1.clear();<span class="hljs-comment">//ps1存放插入i的结果</span><br><span class="hljs-keyword">for</span> (it=ps.begin();it!=ps.end();++it)<br>Insert(*it,i,ps1);<span class="hljs-comment">//在每个集合元素中间插入i得到ps1</span><br>ps=ps1;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">dispps</span><span class="hljs-params">()</span><span class="hljs-comment">//输出全排列ps</span><br>&#123;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &gt;::reverse_iterator it;<span class="hljs-comment">//全排列的反向迭代器</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::iterator sit;<span class="hljs-comment">//排列集合元素迭代器</span><br><span class="hljs-keyword">for</span> (it=ps.rbegin();it!=ps.rend();++it)<br>&#123;<span class="hljs-keyword">for</span> (sit=(*it).begin();sit!=(*it).end();++sit)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*sit);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  &quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<span class="hljs-type">int</span> n=<span class="hljs-number">3</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1～%d的全排序如下:\n  &quot;</span>,n);<br>Perm(n);<br>dispps();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="求解任务分配问题">4.2.8求解任务分配问题</h4><p>经典问题。以前一节为基础。</p><p>在前一节的基础上可以理解为一种排列就是一种分配方案（和顺序的1234相比）</p><h3 id="递归在蛮力法中的应用">4.3递归在蛮力法中的应用</h3><h4 id="用递归方法求解幂集问题">4.3.1用递归方法求解幂集问题</h4><p>结合4.2.5看。</p><h4 id="用递归方法求解全排列问题">4.3.2用递归方法求解全排列问题</h4><p>结合4.2.7看。</p><h4 id="用递归方法求解组合问题">4.3.3用递归方法求解组合问题</h4><p>难度比前2节大，更精妙，理解之后很愉快。</p><p>从1-n个正整数中取出k个不重复的正整数的所有组合</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//递归求解组合列问题</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXK 10</span><br><span class="hljs-type">int</span> a[MAXK];<span class="hljs-comment">//存放一个组合</span><br><span class="hljs-type">int</span> n,k;<span class="hljs-comment">//全局变量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">dispacomb</span><span class="hljs-params">()</span><span class="hljs-comment">//输出一个组合</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,a[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">comb</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k)</span>     <span class="hljs-comment">//求1..n中k个整数的组合</span><br>&#123;<br><span class="hljs-keyword">if</span> (k==<span class="hljs-number">0</span>)<span class="hljs-comment">//k为0时输出一个组合</span><br>dispacomb();<br><span class="hljs-keyword">else</span><br>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=k;i&lt;=n;i++)<br>&#123;a[k<span class="hljs-number">-1</span>]=i;       <span class="hljs-comment">//a[k-1]位置取k～n的整数</span><br>comb(i<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>);    <span class="hljs-comment">//a[k-1]组合a[0..i-1]中的k-1个整数产生一个组合   </span><br><span class="hljs-comment">//就是最后一个数一定不能从前面1到k-1中取，不然1到k-2个数不够分给k-1个位置的，所以对于最后一个数来说，其取值的坐标范围应该是k到n</span><br><span class="hljs-comment">//然后对于未安排的最后一个数重复上述操作即可</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>n=<span class="hljs-number">5</span>; k=<span class="hljs-number">3</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1..%d中%d个的整数的所有组合:\n&quot;</span>,n,k);<br>comb(n,k);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="图的深度优先和广度优先遍历">4.4图的深度优先和广度优先遍历</h3><p>不看</p><h2 id="第5章回溯法">第5章回溯法</h2><h3 id="回溯法概述">5.1回溯法概述</h3><h4 id="问题的解空间">5.1.1问题的解空间</h4><p>1.术语：解空间、可行解、最优解。</p><p>本节的例子，只能说明术语解空间。到5.2节的0—1背包问题，可体会这三个术语究竟指什么。</p><p>2.术语：子集树、排列树</p><p>结合图5.2理解子集树、图5.4理解排列树。</p><p><code>子集树</code>：当所给的问题是从n个元素的集合S中找到满足某种性质的子集时，对应的解空间树称为子集树。</p><p><code>排列树</code>当所给的问题是确定n个元素满足某种性质的排列时，对应的解空间树称为排列树。</p><p><code>本小节的图5.3的例子由于问题本身比较繁琐，并不适合作为例子理解回溯法，故不要看</code></p><h4 id="什么是回溯法">5.1.2什么是回溯法</h4><p>1.术语：活结点、扩展结点、死结点</p><p>所有例子都可用于理解它们</p><p>2.术语：剪枝函数、约束函数、限界函数</p><p>下一小节例5.2可用于理解约束函数，直到5.2节的0—1背包问题才出现限界函数。在此之前的其它例子，都不包括剪枝函数。</p><p><code>剪枝函数</code>包括<code>约束函数</code>和<code>限界函数</code>;</p><p><code>约束函数</code>是在拓展结点处剪除不满足约束条件的路径（注意是<code>在拓展的时候</code>）</p><p><code>限界函数</code>是剪去得不到问题解或者最优解的路径（这里可以理解为<code>遍历树时剔除的分枝</code>）</p><h4 id="回溯法的算法框架及其应用">5.1.3回溯法的算法框架及其应用</h4><p>算法的框架只粗略浏览一下即可，必须要多看几个实例，从实例中去总结经验，再反过来看这个框架才能理解。</p><p><code>回溯法的框架</code>分为<code>非递归</code>和<code>递归</code>两种</p><p>书上的例子都可以看看</p><p>递归回溯框架：</p><p>求幂集问题(子集树)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例5.3的算法1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 100</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">dispasolution</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> x[])</span><span class="hljs-comment">//输出一个解</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   &#123;&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br><span class="hljs-keyword">if</span> (x[i]==<span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&#125;&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> x[])</span><span class="hljs-comment">//回溯算法</span><br>&#123;<br><span class="hljs-keyword">if</span> (i&gt;=n)   <span class="hljs-comment">//到达叶子节点</span><br>dispasolution(a,n,x);<br><span class="hljs-keyword">else</span><br>&#123;<br>x[i]=<span class="hljs-number">0</span>;                 <span class="hljs-comment">//0表示不选，1表示选</span><br>dfs(a,n,i+<span class="hljs-number">1</span>,x);<span class="hljs-comment">//不选择a[i]</span><br>x[i]=<span class="hljs-number">1</span>;<br>dfs(a,n,i+<span class="hljs-number">1</span>,x);<span class="hljs-comment">//选择a[i]</span><br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">//s[0..n-1]为给定的字符串,设置为全局变量</span><br><span class="hljs-type">int</span> n=<span class="hljs-keyword">sizeof</span>(a)/<span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);<br><span class="hljs-type">int</span> x[MAXN];<span class="hljs-comment">//解向量</span><br><span class="hljs-built_in">memset</span>(x,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(x));<span class="hljs-comment">//解向量初始化</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;求解结果\n&quot;</span>);<br>dfs(a,n,<span class="hljs-number">0</span>,x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例5.3的算法2</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">dispasolution</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; path)</span><span class="hljs-comment">//输出一个解</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   &#123;&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;path.size();i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,path[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&#125;&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> i,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; path)</span><span class="hljs-comment">//回溯算法求子集path</span><br>&#123;<br><span class="hljs-keyword">if</span> (i&gt;=n)<br>dispasolution(path);<br><span class="hljs-keyword">else</span><br>&#123;<br>dfs(a,n,i+<span class="hljs-number">1</span>,path);<span class="hljs-comment">//不选择a[i]</span><br>path.push_back(a[i]);<br>dfs(a,n,i+<span class="hljs-number">1</span>,path);<span class="hljs-comment">//选择a[i]</span><br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">//s[0..n-1]为给定的字符串,设置为全局变量</span><br><span class="hljs-type">int</span> n=<span class="hljs-keyword">sizeof</span>(a)/<span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; path;         <span class="hljs-comment">//用容器path存放获得的子集</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;求解结果\n&quot;</span>);<br>dfs(a,n,<span class="hljs-number">0</span>,path);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>例题5.4 排列树框架</p><p>可以理解为运算符合和这些数字之间的排列组合，检查是否满足题目的条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例5.4算法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 9</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">char</span> op[],<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> prevadd,<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> i)</span><br>&#123;<br><span class="hljs-keyword">if</span> (i==N)<span class="hljs-comment">//扫描完所有位置</span><br>&#123;<br><span class="hljs-keyword">if</span> (sum==<span class="hljs-number">100</span>)<span class="hljs-comment">//找到一个解</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  %d&quot;</span>,a[<span class="hljs-number">0</span>]);<span class="hljs-comment">//输出解</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;N;j++)<br>&#123;<br><span class="hljs-keyword">if</span> (op[j]!=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,op[j]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a[j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=100\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//计算+</span><br>op[i]=<span class="hljs-string">&#x27;+&#x27;</span>;<span class="hljs-comment">//位置i插入&#x27;+&#x27; </span><br>sum+=a[i];<span class="hljs-comment">//计算结果</span><br>fun(op,sum,a[i],a,i+<span class="hljs-number">1</span>);<span class="hljs-comment">//继续处理下一个位置</span><br>sum-=a[i];<span class="hljs-comment">//回溯</span><br><br><span class="hljs-comment">//计算-</span><br>op[i]=<span class="hljs-string">&#x27;-&#x27;</span>;<span class="hljs-comment">//位置i插入&#x27;-&#x27;</span><br>sum-=a[i];<span class="hljs-comment">//计算结果</span><br>fun(op,sum,-a[i],a,i+<span class="hljs-number">1</span>);<span class="hljs-comment">//继续处理下一个位置</span><br>sum+=a[i];<span class="hljs-comment">//回溯</span><br><br><span class="hljs-comment">//计算空（表示左右两个连在一起）</span><br>op[i]=<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//位置i插入&#x27; &#x27;</span><br>sum-=prevadd;<span class="hljs-comment">//先减去前面的元素值</span><br><span class="hljs-type">int</span> tmp;<span class="hljs-comment">//计算新元素值</span><br><span class="hljs-keyword">if</span> (prevadd&gt;<span class="hljs-number">0</span>)<br>tmp=prevadd*<span class="hljs-number">10</span>+a[i];<span class="hljs-comment">//如prevadd=5,a[i]=6,结果为56</span><br><span class="hljs-keyword">else</span><br>tmp=prevadd*<span class="hljs-number">10</span>-a[i];<span class="hljs-comment">//如prevadd=-5,a[i]=6,结果为-56</span><br>sum+=tmp;<span class="hljs-comment">//计算合并结果</span><br>fun(op,sum,tmp,a,i+<span class="hljs-number">1</span>);<span class="hljs-comment">//继续处理下一个位置</span><br>sum-=tmp;<span class="hljs-comment">//回溯sum</span><br>sum+=prevadd;                   <span class="hljs-comment">//再加上前面的元素值</span><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">char</span> op[N];<span class="hljs-comment">//op[i]表示在位置i插入运算符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<span class="hljs-comment">//为a赋值为1,2，...,9</span><br>a[i]=i+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;求解结果\n&quot;</span>);<br>fun(op,a[<span class="hljs-number">0</span>],a[<span class="hljs-number">0</span>],a,<span class="hljs-number">1</span>);<span class="hljs-comment">//插入位置i从1开始</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="回溯法与深度优先遍历的异同">5.1.4回溯法与深度优先遍历的异同</h4><p>本节的精华都在最后一句：<code>回溯法=DFS+剪枝</code>。结合前面的例子来理解。其它的描述都不看。</p><h4 id="回溯法的时间分析">5.1.5回溯法的时间分析</h4><p>看过后，再看后面的例子时，都要<code>进行复杂度分析</code>。</p><p>通常，<code>解空间树为子集树时对应算法的时间复杂度为O(n^2)</code>;涉及到选与不选的问题</p><p><code>解空间树为排列树时对应的算法时间复杂度为O(n!)</code>，涉及到排列组合的问题</p><h3 id="求解01背包问题">5.2求解0/1背包问题</h3><p>本节无废话，子集树的典型。</p><p>重点关注左右子树剪枝的过程以及不同情况下的剪枝思路</p><p>5.3～5.9都看，其中5.5节、5.7节使用排列树框架为好（教材上用的是子集树框架）</p><p><code>可参照微助教中的课件“全排列简洁版”，看看排列树怎么编写回溯代码</code>。</p><figure><img src="https://pic.imgdb.cn/item/66841ae6d9c307b7e9829ad6.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>求解n后问题的<code>非递归回溯算法</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Queens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//求解n皇后问题</span><br>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<span class="hljs-comment">//i表示当前行,也表示放置第i个皇后</span><br>q[i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//q[i]是当前列,从0列即开头试探  </span><br><span class="hljs-keyword">while</span> (i&gt;=<span class="hljs-number">1</span>)<span class="hljs-comment">//重复试探</span><br>&#123;<br>q[i]++;                         <span class="hljs-comment">//数组下标为0的元素不用！从1开始遍历</span><br><span class="hljs-keyword">while</span> (q[i]&lt;=n &amp;&amp; !place(i))<span class="hljs-comment">//试探一个位置(i,q[i])</span><br>q[i]++;                     <br><span class="hljs-keyword">if</span> (q[i]&lt;=n)<span class="hljs-comment">//为第i个皇后找到了一个合适位置(i,q[i])</span><br>&#123;<br><span class="hljs-keyword">if</span> (i==n)<span class="hljs-comment">//若放置了所有皇后,输出一个解</span><br>dispasolution(n);<br><span class="hljs-keyword">else</span><span class="hljs-comment">//皇后没有放置完</span><br>&#123;<br>i++;<span class="hljs-comment">//转向下一行,即开始下一个皇后的放置</span><br>q[i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//每次放一个新皇后,都从该行的列头进行试探</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> i--;<span class="hljs-comment">//若第i个皇后找不到合适的位置,则回溯到上一个皇后</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>每次放一个新皇后,都从该行的列头进行试探</code></p><p>每个皇后都要试探n列，其解空间是一个子集树，每个节点都可能有n棵子树，时间复杂度是O(n^n)</p><p>5.7 任务分配问题需要重点关注</p><p>第四章的任务分配采用蛮力法，求出所有分配方案的全排列，再选择成本最低的方案</p><p>本章使用回溯法来解决</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//问题表示</span><br><span class="hljs-type">int</span> n=<span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> c[MAXN][MAXN]=&#123;&#123;<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>&#125; &#125;;<span class="hljs-comment">//下标0的元素不用</span><br><span class="hljs-comment">//求解结果表示</span><br><span class="hljs-type">int</span> x[MAXN];<span class="hljs-comment">//临时解</span><br><span class="hljs-type">int</span> cost=<span class="hljs-number">0</span>;<span class="hljs-comment">//临时解的成本</span><br><span class="hljs-type">int</span> bestx[MAXN];<span class="hljs-comment">//最优解</span><br><span class="hljs-type">int</span> mincost=INF;<span class="hljs-comment">//最优解的成本</span><br><span class="hljs-type">bool</span> worker[MAXN];<span class="hljs-comment">//worker[j]表示任务j是否已经分配人员</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-comment">//为第i个人员分配任务</span><br>&#123;<br><span class="hljs-keyword">if</span> (i&gt;n)<span class="hljs-comment">//到达叶子结点</span><br>&#123;<br><span class="hljs-keyword">if</span> (cost&lt;mincost)<span class="hljs-comment">//比较求最优解</span><br>&#123;<br>mincost=cost;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>bestx[j]=x[j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<span class="hljs-comment">//为人员i试探任务j:1到n</span><br><span class="hljs-keyword">if</span> (!worker[j])<span class="hljs-comment">//若任务j还没有分配</span><br>&#123;<br>worker[j]=<span class="hljs-literal">true</span>;<br>x[i]=j;<span class="hljs-comment">//任务j分配给人员i</span><br>cost+=c[i][j];<br>dfs(i+<span class="hljs-number">1</span>);<span class="hljs-comment">//为人员i+1分配任务</span><br>worker[j]=<span class="hljs-literal">false</span>;<span class="hljs-comment">//回退</span><br>x[i]=<span class="hljs-number">0</span>;                 <span class="hljs-comment">//人员i恢复原来的状态</span><br>cost-=c[i][j];<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>算法分析：每个人员试探1-n个任务，对应的解空间是一个n叉树时间，复杂度为O（n^n）</p><h3 id="第五章回溯法总结">【第五章回溯法总结】</h3><p>回溯法在解空间树中按照<code>深度优先</code>的策略来拓展节点</p><p>回溯法需要借助<code>栈</code>这种数据结构来保存从根节点到当前拓展节点的路径</p><p>是一种通用解题法</p><p>既带有系统性，也带有跳跃性的搜索算法</p><p><code>回溯法的效率不依赖于确定解空间的时间</code></p><h2 id="第6章分枝限界法">第6章分枝限界法</h2><h3 id="分枝限界法概述">6.1分枝限界法概述</h3><h4 id="什么是分枝限界法">6.1.1什么是分枝限界法</h4><p>在本节第2段提到，所谓“分枝”，就是采用<code>广度优先策略搜索解空间树</code>,这是与回溯法的主要区别，其它的区别都是间接来自这一点。</p><p><code>回溯法搜索方式是深度优先</code></p><p><code>回溯法的目标是找出所有解，分枝限界法的目标是找到最优解</code></p><p><code>分枝限界法依靠的数据结构是队列和优先队列</code></p><h4 id="分枝限界法的设计思想">6.1.2分枝限界法的设计思想</h4><p>数据结构课里面，广度优先搜索（树的层次遍历）借助<code>队列</code>实现。本节不看也可以。</p><p>感觉和A*有点像呢</p><p>确定合适的限界函数</p><p>组织待处理节点的活结点表</p><p>如何确定解向量的各个分量</p><h4 id="分枝限界法的时间性能">6.1.3分枝限界法的时间性能</h4><p>它的剪枝数量不定，因此速度与回溯法无法理论比较，要借助实验。用大O表示法，它们的都与解空间树结点数相关，在剪枝数目难以确定的情况下，都是按满二叉树计算的。</p><p>由于入队的结点，相互之间没有办法保存相互间的父子关系，分限法经常需要在每个结点中记录当前的解；回溯法是按深度优先搜索的，搜索的顺序就是沿着父—子”路径的，因此通常只用一个数组，保留一个当前的解，在搜索的过程中，根据父子关系的变化，动态地修改该数组即可。在看0—1背包分限法是，体会这一段文字，看看它的代码中队列结点的结构题类型中有一个intx[MAXN]数组。</p><p>因此，从理论上得到的复杂度，<code>分限法往往比回溯法高</code></p><h3 id="求解01背包问题-1">6.2求解0/1背包问题</h3><p>通读掌握，非常典型。</p><p>队列和优先队列两种分枝限界法</p><p>队列：先进先出</p><p>采用<code>队列式分枝限界法</code>，对于每个节点求解上界</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 计算分枝结点e的上界</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bound</span><span class="hljs-params">(NodeType &amp;e)</span><br>&#123;<br><span class="hljs-type">int</span> i=e.i+<span class="hljs-number">1</span>;                <span class="hljs-comment">//考虑e节点的余下物品</span><br><span class="hljs-type">int</span> sumw=e.w;               <span class="hljs-comment">//已经装入的总重量</span><br><span class="hljs-type">double</span> sumv=e.v;            <span class="hljs-comment">//已经装入的总价值</span><br><span class="hljs-keyword">while</span> ((sumw+w[i]&lt;=W) &amp;&amp; i&lt;=n)<br>&#123;sumw+=w[i];<span class="hljs-comment">//计算背包已装入载重</span><br>sumv+=v[i];<span class="hljs-comment">//计算背包已装入价值</span><br>i++;<br>&#125;<br><span class="hljs-keyword">if</span> (i&lt;=n)               <span class="hljs-comment">//余下物品只能部分装入</span><br>e.ub=sumv+(W-sumw)*v[i]/w[i];<br><span class="hljs-keyword">else</span>                        <span class="hljs-comment">//走到这里表示到了叶子节点，说明余下物品可以全部装入</span><br>e.ub=sumv;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 求0/1背包的最优解</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> j;<br>NodeType e,e1,e2;<span class="hljs-comment">//定义3个结点</span><br><span class="hljs-built_in">queue</span>&lt;NodeType&gt; qu;<span class="hljs-comment">//定义一个队列</span><br>e.i=<span class="hljs-number">0</span>;<span class="hljs-comment">//根结点置初值，其层次计为0</span><br>e.w=<span class="hljs-number">0</span>; e.v=<span class="hljs-number">0</span>;<br>e.no=total++; <br><span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>e.x[j]=<span class="hljs-number">0</span>;                   <span class="hljs-comment">//e.x是解向量，初始化为全0</span><br>bound(e);<span class="hljs-comment">//求根结点的上界</span><br>qu.push(e);<span class="hljs-comment">//根结点进队</span><br><span class="hljs-keyword">while</span> (!qu.empty())<span class="hljs-comment">//队不空循环,注意循环的条件是队列不为空，叶子节点需要出队列才能算，进队列不算结束，这里和A*是一样的</span><br>&#123;<br>e=qu.front(); qu.pop();<span class="hljs-comment">//出队结点e</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队&quot;</span>);dispnode(e);<br><span class="hljs-keyword">if</span> (e.w+w[e.i+<span class="hljs-number">1</span>]&lt;=W)<span class="hljs-comment">//剪枝：检查左孩子结点</span><br>&#123;<br>e1.no=total++; <br>e1.i=e.i+<span class="hljs-number">1</span>;<span class="hljs-comment">//建立左孩子结点</span><br>e1.w=e.w+w[e1.i];<br>e1.v=e.v+v[e1.i];<br><span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>;j&lt;=n;j++)<span class="hljs-comment">//复制解向量</span><br>e1.x[j]=e.x[j];<br>e1.x[e1.i]=<span class="hljs-number">1</span>;           <span class="hljs-comment">//这一步表示选取当前节点的左孩子节点</span><br>bound(e1);<span class="hljs-comment">//求左孩子结点的上界</span><br><span class="hljs-keyword">if</span> (EnQueue(e1,qu))    <span class="hljs-comment">//左孩子结点进队操作</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  左孩子进队&quot;</span>);dispnode(e1);<br>&#125;<br>e2.no=total++;<span class="hljs-comment">//建立右孩子结点</span><br>e2.i=e.i+<span class="hljs-number">1</span>;<br>e2.w=e.w; e2.v=e.v;<br><span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>;j&lt;=n;j++)<span class="hljs-comment">//复制解向量</span><br>e2.x[j]=e.x[j];<br>e2.x[e2.i]=<span class="hljs-number">0</span>;<br>bound(e2);<span class="hljs-comment">//求右孩子结点的上界</span><br><span class="hljs-keyword">if</span> (e2.ub&gt;maxv)<span class="hljs-comment">//若右孩子结点可行,则进队,否则被剪枝</span><br>&#123;<br><span class="hljs-keyword">if</span> (EnQueue(e2,qu))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  右孩子进队&quot;</span>);dispnode(e2);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  右孩子不进队&quot;</span>);dispnode(e2);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>采用优先队列式分枝限界</p><p><code>大根堆，按ub越大越先出队来进行计算</code></p><p>求解上界的函数不变</p><p><code>最坏的时间空间复杂度都为O(2^n)，n是物品的个数</code></p><h3 id="求解图的单源短路径">6.3求解图的单源短路径</h3><p>不典型，可不看。</p><h3 id="求解任务分配问题-1">6.4求解任务分配问题</h3><p>需看懂。</p><p>需要涉及求解节点下界的算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bound</span><span class="hljs-params">(NodeType &amp;e)</span><span class="hljs-comment">//求结点e的限界值</span><br>&#123;<br><span class="hljs-type">int</span> minsum=<span class="hljs-number">0</span>;   <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i1=e.i+<span class="hljs-number">1</span>;i1&lt;=n;i1++)<span class="hljs-comment">//求c[e.i+1..n]行中最小元素和  就是e节点（当前节点下面的节点）遍历</span><br>&#123;  <br><span class="hljs-type">int</span> minc=INF;     <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j1=<span class="hljs-number">1</span>;j1&lt;=n;j1++)   <br><span class="hljs-keyword">if</span> (e.worker[j1]==<span class="hljs-literal">false</span> &amp;&amp; c[i1][j1]&lt;minc)   <span class="hljs-comment">//先找到未分配的任务且该人员对应的任务成本是最小的</span><br>minc=c[i1][j1];    <span class="hljs-comment">//更新最小值</span><br>minsum+=minc;   <span class="hljs-comment">//将最小值求和</span><br>&#125;<br>e.lb=e.cost+minsum;   <span class="hljs-comment">//加上当前节点已经分配的任务需要的成本，得到将所有人员都理想分配任务的最小成本（实际成本一定会大于等于该最小成本）</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求解流水作业调度问题">6.5求解流水作业调度问题</h3><p>问题本身比较复杂，弄清楚问题本身到底是什么意思即一些细节，要花不少时间，用来说明分限法并不好，不看。</p><h2 id="第7章贪心算法">第7章贪心算法</h2><h3 id="贪心法概述">7.1贪心法概述</h3><h4 id="什么是贪心法">7.1.1什么是贪心法</h4><p>本节并没有值得看的内容。</p><h4id="用贪心法求解的问题应具有的性质">7.1.2用贪心法求解的问题应具有的性质</h4><p><code>这2个性质非常重要</code>。要结合7.2节的例子来理解，不然这段文字比较抽象，要形成一个自己的通俗的理解。这样才能举一反三。证明这2个性质，比具体算法的编码更重要</p><p>1、<code>贪心选择性质</code></p><p>所求解的问题的整体最优解可以通过一系列的局部最优的选择（即贪心选择）来达到，每一步所做的贪心选择最终导致问题的整体最优解</p><p>数学归纳法</p><p>2、<code>最优子结构性质</code></p><p><code>如果一个问题的最优解包含其子问题的最优解，则称此问题具有最优子结构性质</code></p><p>反证法</p><h4 id="贪心法的一般求解过程">7.1.3贪心法的一般求解过程</h4><p>没用</p><h3 id="求解活动安排问题">7.2求解活动安排问题</h3><p>简单、入门非常好</p><p>求解兼容活动最多的个数</p><p>将活动按结束时间递增排序</p><p>算法的时间主要花费在排序上，排序的时间复杂度为O（nlog2n）,整个算法的时间复杂度也是如此</p><h3 id="求解背包问题">7.3求解背包问题</h3><p>典型需掌握</p><p>选择的贪心策略：选择单位重量下价值最大的物品，在价值与容量之间寻求平衡</p><p>需要根据单位价值递减排序然后依次选择</p><h3 id="求解装载问题">7.4求解装载问题</h3><p>掌握</p><p>情景：不考虑集装箱的体积限制，只限制重量，要求尽可能多的集装箱</p><p>策略：采用贪心算法，优先选择重量轻的集装箱</p><p>对w从小到大进行排序</p><h3 id="求解田忌赛马问题">7.5求解田忌赛马问题</h3><p>问题本身太复杂，不适合做贪心算法的示例，不看。</p><h3 id="求解多机调度问题">7.6求解多机调度问题</h3><p>实际上只能得到近似解，不看。</p><h3 id="哈夫曼编码">7.7哈夫曼编码</h3><p>掌握证明</p><p>前缀码的概念</p><p>每次都合并两棵根节点权值最小的二叉树，这体现出了贪心法的思想</p><p>带权路径长度和 WPL 等于权值乘以节点的路径长度再求和</p><p>具有最小带权路径长度和的树是哈夫曼树（最优树）</p><p>算法的证明：</p><p>贪心选择性质：构造一棵哈夫曼树的过程可以从合并两个权值最小的字符开始</p><p>满足最优子结构性质：该问题的最优解包含其子问题的最优解</p><h3 id="求解流水作业调度问题-1">7.8求解流水作业调度问题</h3><p>问题本身太复杂，不适合做贪心算法的示例，不看。</p><h2 id="第8章动态规划">第8章动态规划</h2><h3 id="动态规划概述">8.1动态规划概述</h3><h4id="从求解斐波那契数列看动态规划法">8.1.1从求解斐波那契数列看动态规划法</h4><p>通过斐波那契数列的计算，理解什么是<code>重叠子问题</code>，这个例子足够简单</p><h4 id="动态规划的原理">8.1.2动态规划的原理</h4><p>学握逆序解法</p><p>从后往前进行推理的算法</p><h4 id="动态规划求解的基本步骤">8.1.3动态规划求解的基本步骤</h4><p>在本节开始部分提到了应用动态规划的3个性质，（1）（3）是主要的，应理解；性质（2）无后效性在一些其它教材里是没有的。除了刚开始的这一段关于性质的描述，后面文字的没有用处。</p><p>（1）最优性原理：问题的最优解包含的子问题的解也是最优的，具有最优子结构，满足最优性原理</p><p>（2）无后效性：某状态以后的过程不会影响以前的状态，只与当前状态有关</p><p>（3）有重叠子问题：子问题之间不是独立的，一个子问题在下一个阶段被多次使用到</p><h4 id="动态规划与其他方法的比较">8.1.4动态规划与其他方法的比较</h4><p>需要理解它</p><p>基本思想与分治法类似，但是分治法的各个子问题独立，dp的子问题重叠</p><p>dp又与贪心类似，</p><p>dp只有多项式的时间复杂度，效率较高</p><h3 id="求解整数拆分问题">8.2求解整数拆分问题</h3><p>掌握</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Split</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k)</span><span class="hljs-comment">//求解算法</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)<br>&#123;<br><span class="hljs-keyword">if</span> (i==<span class="hljs-number">1</span> || j==<span class="hljs-number">1</span>)<br>dp[i][j]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i&lt;j)<br>dp[i][j]=dp[i][i];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i==j)<br>dp[i][j]=dp[i][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>dp[i][j]=dp[i][j<span class="hljs-number">-1</span>]+dp[i-j][j];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>采用递归算法来实现 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">dpf</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k)</span><br>&#123;<br><span class="hljs-keyword">if</span> (dp[n][k]!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> dp[n][k];   <span class="hljs-comment">//这一步是递归dp的精髓</span><br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span> || k==<span class="hljs-number">1</span>)         <span class="hljs-comment">//注意下面四种情况属于是并列式的，在一个节点只能出现一种情况，因此每种情况都需要设置 return </span><br>&#123;<br>dp[n][k]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> dp[n][k];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n&lt;k)<br>&#123;<br>dp[n][k]=dpf(n,n);<br><span class="hljs-keyword">return</span> dp[n][k];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n==k)<br>&#123;<br>dp[n][k]=dpf(n,k<span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> dp[n][k];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>dp[n][k]=dpf(n,k<span class="hljs-number">-1</span>)+dpf(n-k,k);<br><span class="hljs-keyword">return</span> dp[n][k];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这种方式也叫备忘录的方式</p><p>8.3求解连续子序列和问题</p><p>不看</p><p>8.4求解三角形小路径问题</p><p>看</p><p>8.5求解长公共子序列问题</p><p>掌握</p><p>8.6求解长递增子序列问题</p><p>不看</p><p>8.7求解编辑距离问题</p><p>不看</p><p>8.8求解0/1背包问题</p><p>掌握</p><p>8.9求解完全背包问题</p><p>不看</p><p>8.10求解资源分配问题</p><p>不看</p><p>8.11求解会议安排问题</p><p>不看</p><p>8.12滚动数组</p><p>看</p><p>滚动数组：压缩存储空间，使用求模的方式来实现</p><h2 id="第11章计算复杂性理论简介">第11章计算复杂性理论简介</h2><p>11.1计算模型</p><p>11.1.1求解问题的分类</p><p>本节的概念比较清晰，在最后一句提到了需要关于图灵机的概念。现代计算机可抽象成图灵机，因此我们就按照现代计算机去理解就行，不用研究图灵机模型</p><p>11.1.2图灵机模型</p><p>不看</p><p>11.2P类和NP类问题</p><p>掌握</p><p>用确定性图灵机用多项式时间界可以解决的问题称为P类问题</p><p>用非确定性图灵机以多项式时间界可解的问题称为NP类问题，N表示非确定性</p><p>P类问题属于NP类问题的一个子集</p><p>11.3 NPC问题</p><p>证明不看，只掌握文字性的描述</p><p>TSP问题是NPC问题</p><h2 id="题型">题型</h2><p>一选择题（共10分，每空2分）</p><p>第1、3、5、7、8章各一题</p><p>二判断题（共5分、5题）</p><p>第6章2题，第5、8、11章各一题</p><p>三、程序填空题（共20分，10空）</p><p>第3、4章各一题</p><p>四、算法过程分析（共32分、2题</p><p>第6、8章各一题</p><p>五、算法复杂度分析（共24分、2题</p><p>第5、8章各一题</p><p><code>回溯法：解空间为子集树O(2^n)，解空间为派列树O(n!)</code></p><p>六、证明一个问题适用贪心算法（9分）</p><p>注：有10分左右，它待解的问题，并不是书上或作业上练过的问题</p><p>结合微助教上面的作业，以及“课件”下面的各章“学习”要点复习。</p>]]></content>
    
    
    <categories>
      
      <category>算法优化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能原理复习3</title>
    <link href="/2024/06/18/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-3/"/>
    <url>/2024/06/18/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-3/</url>
    
    <content type="html"><![CDATA[<h2 id="informed-search">Informed Search</h2><figure><img src="https://pic.imgdb.cn/item/6670e7cfd9c307b7e97e7f48.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Blind search vs. “warmer” “colder”<br />Info about where goal is.<br />Optimal solution, explore less of the tree.</p><h2 id="search-heuristics">Search Heuristics</h2><p>A heuristic is:<br />A function that estimates how close a state is to a goal<br />Designed for a particular search problem<br />Pathing?<br />Examples: Manhattan distance, Euclidean distance for pathing</p><p>Function takes a state, returns a number.<br />Not everyday term. Not “Look both ways before you cross thestreet”<br />How far I am? Could run search, but that defeats the purpose!<br />Not perfect, but something!</p><figure><img src="https://pic.imgdb.cn/item/66713192d9c307b7e9fe74bd.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>A* expanded 8100 ; Path cost = 33<br />UCS expanded 25263 . Path cost = 33<br />Greedy expanded 10 . Path cost = 41<br />[0, 7, 5, 3, 2, 1, 4, 6]<br />(7, 0, 5, 3, 2, 1, 4, 6)<br />(6, 4, 1, 2, 3, 5, 0, 7)<br />(3, 2, 1, 4, 6, 5, 0, 7)<br />(1, 2, 3, 4, 6, 5, 0, 7)<br />(5, 6, 4, 3, 2, 1, 0, 7)<br />(6, 5, 4, 3, 2, 1, 0, 7)<br />(0, 1, 2, 3, 4, 5, 6, 7)</p><figure><img src="https://pic.imgdb.cn/item/667131dfd9c307b7e9fef781.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/66713250d9c307b7e9ffbd92.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Expand the node that seems closest…</p><p>Is it optimal?<br />No. Resulting path to Bucharest is not the shortest!</p><p>Numbers of heuristic, since that’s what greedy cares about.<br />Got to Bucharest, but not by shortest path.<br />End up with some kind of goal, but not what you want. You get a smellyshoe instead of to the airport on time.</p><figure><img src="https://pic.imgdb.cn/item/667132d1d9c307b7e90095cd.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Strategy: expand a node that you think is closest to a goal state</p><p>Heuristic: estimate of distance to nearest goal for each state</p><p>A common case:<br />Best-first takes you straight to the (wrong) goal</p><p>Worst-case: like a badly-guided DFS</p><h2 id="a-search">A* Search</h2><figure><img src="https://pic.imgdb.cn/item/6671341ad9c307b7e902e385.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>What we’ve been building to. Cornerstone. Goes to the goal likegreedy, but backtracks as needed.<br />When it works, it’s magic!</p><figure><img src="https://pic.imgdb.cn/item/66713463d9c307b7e9036089.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><blockquote><p>Uniform-cost orders by path cost, or backward cost g(n)</p></blockquote><blockquote><p>Greedy orders by goal proximity, or forward cost h(n)</p></blockquote><p>A* Search orders by the sum: &gt; f(n) = g(n) + h(n)</p><p>UCS. Cumulative cost of arcs back to root. backward cost g(n).Computed as you go as part of the fringe.</p><p>Greedy. Heuristic forward cost h(n). NOT cumulative. Just a functionof the state.</p><p>What is A*. Sum of the two! Doesn’t go to c early cuz h is high (farfrom goal).</p><p>Doesn’t do a-&gt;e branch g is high (expensive).</p><h2 id="when-should-a-terminate">When should A* terminate?</h2><figure><img src="https://pic.imgdb.cn/item/6671359fd9c307b7e905950a.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><blockquote><p>No: only stop when we dequeue a goal</p></blockquote><figure><img src="https://pic.imgdb.cn/item/667135ced9c307b7e905e8a7.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667136c2d9c307b7e907a605.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Inadmissible (pessimistic) heuristics break optimality by trappinggood plans on the fringe</p><p>Admissible (optimistic) heuristics slow down bad plans but neveroutweigh true costs</p><p>If heuristic lies, and overestimates. Mistake.<br />Underestimate might reduce to UCS.</p><figure><img src="https://pic.imgdb.cn/item/66713722d9c307b7e90883f0.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Coming up with admissible heuristics is most of what’s involved inusing A* in practice.</p><h2 id="optimality-of-a-tree-search">Optimality of A* Tree Search</h2><figure><img src="https://pic.imgdb.cn/item/66713781d9c307b7e90973dd.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667137bad9c307b7e909dbe8.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667138a1d9c307b7e90bb958.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667139d0d9c307b7e90e39c0.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667139efd9c307b7e90e77af.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/66713a14d9c307b7e90ebf80.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>UCS ragged based on cost.<br />A* narrows when near goal, heuristic</p><figure><img src="https://pic.imgdb.cn/item/66713a36d9c307b7e90efa63.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Uniform-cost expands equally in all “directions”</p><p>A* expands mainly toward the goal, but does hedge its bets to ensureoptimality</p><figure><img src="https://pic.imgdb.cn/item/66713a99d9c307b7e90fb03a.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Change problem – same or easier. And cheaper.<br />Imagine a new direct road.<br />Walk through walls spell.<br />Inadmissible – a little bit suboptimal is okay.</p><figure><img src="https://pic.imgdb.cn/item/66713c79d9c307b7e913d378.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/66713c9dd9c307b7e9141a33.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/66713fded9c307b7e91b91ac.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Another relaxation, but “harder” than previous.<br />Lower bound.<br />Show it’s relaxed or prove.<br />At LEAST 18 away.<br />As heuristic gets close to the true cost, you do less search.</p><figure><img src="https://pic.imgdb.cn/item/66714004d9c307b7e91bd71a.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Looks great. Each node launches search as hard as the originalproblem.<br />You’ll might see this in P1. Come up with great heuristic, makessolution slower.</p><h2 id="graph-search">Graph Search</h2><figure><img src="https://pic.imgdb.cn/item/66714071d9c307b7e91cb9ba.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667140bbd9c307b7e91d612c.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Failure to detect repeated states can cause exponentially morework.</p><p>Exponential unrolling. Generally what happens.<br />May need to consider both paths to B, but what’s underneath B is thesame.<br />Should be able to save the work.</p><figure><img src="https://pic.imgdb.cn/item/6671415fd9c307b7e91ebe25.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Idea: never expand a state twice</p><p>How to implement:<br />Tree search + set of expanded states (“closed set”)<br />Expand the search tree node-by-node, but…<br />Before expanding a node, check to make sure its state has never beenexpanded before<br />If not new, skip it, if new add to closed set</p><p>Important: store the closed set as a set, not a list</p><p>Can graph search wreck completeness? Why/why not?</p><p>How about optimality?</p><figure><img src="https://pic.imgdb.cn/item/667142d5d9c307b7e9219839.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667142f3d9c307b7e921d40f.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h2 id="a-summary">A*: Summary</h2><p>A* uses both backward costs and (estimates of) forward costs</p><p>A* is optimal with admissible / consistent heuristics</p><p>Heuristic design is key: often use relaxed problems</p><figure><img src="https://pic.imgdb.cn/item/667143a9d9c307b7e922fa3e.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667143f7d9c307b7e9238299.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h2 id="optimality-of-a-graph-search">Optimality of A* Graph Search</h2><p>Consider what A* does:</p><p>Expands nodes in increasing total f value (f-contours) Reminder: f(n)= g(n) + h(n) = cost to n + heuristic</p><p>Proof idea: the optimal goal(s) have the lowest f value, so it mustget expanded first</p><p>There’s a problem with this argument. What are we assuming istrue?</p><figure><img src="https://pic.imgdb.cn/item/66714499d9c307b7e924f49b.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Proof:<br />New possible problem: some n on path to G* isn’t in queue when we needit, because some worse n’ for the same state dequeued and expanded first(disaster!)<br />Take the highest such n in tree<br />Let p be the ancestor of n that was on the queue when n’ waspopped<br />f(p) &lt; f(n) because of consistency<br />f(n) &lt; f(n’) because n’ is suboptimal<br />p would have been expanded before n’<br />Contradiction!</p><figure><img src="https://pic.imgdb.cn/item/667ae797d9c307b7e926bfdd.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p><code>可接受性</code>与<code>一致性</code></p><p>分别对应不同的h计算公式</p><p>然而，<code>如果启发式函数不是可采纳的或一致的，A算法可能会找到次优路径</code>。在实际应用中，选择合适的启发式函数对于A算法的性能至关重要。如果启发式函数过于乐观，可能会导致搜索过程中忽略实际的最优路径。如果启发式函数<code>过于保守</code>，可能会导致搜索过程效率低下，尽管<code>最终仍然能够找到最优路径</code>。</p><p>因此，要确保A*算法搜索的路径是最优的，需要选择一个既不过于乐观也不过于保守的启发式函数，这通常需要对特定问题的领域知识有深入的理解。</p><p>原文链接：https://blog.csdn.net/abcwoabcwo/article/details/139211597</p><p>总结就是必须满足上市条件A*才是最优的！</p><figure><img src="https://pic.imgdb.cn/item/667ae866d9c307b7e92839b1.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Combining UCS and Greedy</p><figure><img src="https://pic.imgdb.cn/item/667ae96ed9c307b7e92a7ec9.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>上面很重要</p><p>树搜索需要启发式是可接受的</p><p>图搜索需要启发式是一致的</p><p>一致性意味着可接受性，大多数算法是一致的！</p>]]></content>
    
    
    <categories>
      
      <category>人工智能原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能原理复习2</title>
    <link href="/2024/06/17/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-2/"/>
    <url>/2024/06/17/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-2/</url>
    
    <content type="html"><![CDATA[<h2id="ai.berkeley.edu课件资料来源">ai.berkeley.edu（课件资料来源）</h2><h2 id="search-problems">Search Problems</h2><p><strong>Uninformed Search Methods</strong></p><blockquote><p>Depth-First Search<br />Breadth-First Search<br />Uniform-Cost Search<br />Unified formalism leading to A* search (search guided by heuristic)</p></blockquote><p>Uninformed SearchMethods（无信息搜索方法）是一组在没有关于目标位置的额外信息的情况下，用于在图或树结构中搜索目标的方法。这些搜索算法不依赖于任何关于目标位置的启发式信息，它们通常用于解决一些简单的搜索问题，如迷宫探索或路径查找。以下是一些常见的无信息搜索方法：</p><ol type="1"><li><strong>广度优先搜索（Breadth-First Search, BFS）</strong>：<ul><li>BFS是一种从根节点开始，逐层扩展节点的搜索方法。</li><li>它使用队列作为其主要的数据结构，以确保按照层次顺序访问节点。</li><li>BFS保证找到的是从起点到目标的最短路径。</li></ul></li><li><strong>深度优先搜索（Depth-First Search, DFS）</strong>：<ul><li>DFS通过递归或显式栈的方式尽可能深地搜索树的分支。</li><li>它使用栈（可以是递归调用堆栈或显式的栈数据结构）来存储待访问的节点。</li><li>DFS不保证找到最短路径，但通常用于探索所有可能的路径。</li></ul></li><li><strong>迭代加深深度优先搜索（Iterative Deepening Depth-FirstSearch, IDDFS）</strong>：<ul><li>IDDFS是DFS的改进版本，它通过逐层增加搜索深度来避免DFS的递归深度限制问题。</li><li>它结合了BFS和DFS的优点，可以在不使用大量内存的情况下找到最短路径。</li></ul></li><li><strong>Uniform-Cost Search（均匀成本搜索）（代价优先）</strong>：<ul><li>这种搜索方法总是扩展具有最低路径成本的节点。</li><li>它适用于所有边的权重都是非负的情况，并保证找到最短路径。</li></ul></li><li><strong>双向搜索（Bidirectional Search）</strong>：<ul><li>双向搜索从起点和终点同时进行，向中间点扩展。</li><li>这种方法可以加快搜索速度，尤其是在起点和终点之间的距离较短时。</li></ul></li></ol><p>无信息搜索方法的优点是它们简单易实现，不需要关于问题领域的额外信息。然而，它们的缺点是在某些情况下效率不高，特别是当搜索空间很大或目标很远时。这些方法通常作为更复杂搜索算法的基础，或者在问题规模较小或结构简单时使用。</p><p>1、2、4需要理解掌握</p><p>Unified formalism leading to A* search (search guided byheuristic)</p><h2 id="reflex-agents">Reflex Agents</h2><p><strong>在人工智能领域，反射式智能体是一种基于简单条件反射规则做出决策的智能体。它们通常对环境的感知非常直接，并且立即做出反应，而不需要复杂的内部状态或长期规划。反射式智能体的决策过程类似于人类的本能反应，例如，当手碰到热的物体时立即缩回。</strong></p><p>Reflex agents:</p><p><strong>Choose action based on current percept (and maybe memory) Mayhave memory or a model of the world’s current state Do not consider thefuture consequences of their actions Consider how the world IS<br />反射代理:根据当前感知(也可能是记忆)选择行动,可能对世界当前状态有记忆或模型不考虑其行动的未来后果考虑世界是怎样的</strong></p><p>Can a reflex agent be rational?</p><figure><img src="https://pic.imgdb.cn/item/66703dd5d9c307b7e9ab57aa.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Reflex Optimal</p><p>Optimality is not defined by algorithm, but by rational behavior.</p><h2 id="planning-agents">Planning Agents</h2><p>Planning agents:</p><blockquote><p>Ask “what if”<br />Decisions based on (hypothesized) consequences of actions<br />Must have a model of how the world evolves in response to actions<br />Must formulate a goal (test)<br />Consider how the world WOULD BE</p></blockquote><p>Optimal vs. complete planning<br />最优规划vs.完全规划</p><p>Planning vs. replanning<br />规划vs.重新规划</p><p>You could figure out the consequences by doing it. But instead,planning considers what the world would be without actually doing it.Simulate many games, execute one. Doesn’t do it in the world, does it inthe model. Consequences of action. &gt; Complete – a solution; optimal –best</p><h2 id="search-problems-1">Search Problems*****</h2><p>How do we formalize a search problem?</p><figure><img src="https://pic.imgdb.cn/item/66704092d9c307b7e9b14407.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><ol type="1"><li><p>StateSpace（状态空间）状态空间是所有可能状态的集合，其中每个状态代表了问题的一个特定配置或位置。</p></li><li><p>Successorfunction（后继函数）定义了从给定状态出发，通过执行某个动作所能到达的所有可能的后继状态。换句话说，后继函数是从一个状态到其可能的下一个状态的映射。</p></li><li><p>start state（初始状态）初始状态是搜索过程开始时的状态。在很多搜索问题中，它通常是已知的，并且只有一个。初始状态定义了搜索的起点，所有搜索算法都从这个状态开始进行探索。</p></li><li><p>goal test（目标测试）是搜索算法中用来确定一个状态是否为目标状态的检查过程。在搜索问题中，目标测试是至关重要的，因为它决定了搜索何时结束。</p></li></ol><blockquote><p>解决方案是将开始状态转换为目标状态的一系列行动(计划)</p></blockquote><p><strong>Goal test – sometimes more than one state that satisfieshaving achieved the goal, for example, “eat all the dots”<br />目标测试——有时不止一种状态满足实现目标，例如，“吃掉所有的圆豆”</strong></p><figure><img src="https://pic.imgdb.cn/item/66704d80d9c307b7e9cb84d9.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Models aren’t perfect.<br />Too detailed, you can’t solve.<br />Not detailed enough, doesn’t solve.</p><figure><img src="https://pic.imgdb.cn/item/66704dd7d9c307b7e9cc30e2.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>State space: &gt; Cities</p><p>Successor function:</p><blockquote><p>Roads: Go to adjacent city with cost = distance</p></blockquote><p>Start state: &gt; Arad</p><p>Goal test: &gt; Is state == Bucharest?</p><p>Solution?</p><h2 id="whats-in-a-state-space">What’s in a State Space?</h2><p>The world state includes every last detail of the environment</p><p>A search state keeps only the details needed for planning(abstraction)</p><p>Problem: Pathing<br />States: (x,y) location<br />Actions: NSEW<br />Successor: update location only<br />Goal test: is (x,y)=END</p><p>Problem: Eat-All-Dots<br />States: {(x,y), dot booleans} (点布尔值)<br />Actions: NSEW<br />Successor: update location and possibly a dot boolean<br />Goal test: dots all false</p><h2 id="state-space-sizes">State Space Sizes?</h2><figure><img src="https://pic.imgdb.cn/item/66705004d9c307b7e9d0d767.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><h2 id="state-space-graphs-and-search-trees">State Space Graphs andSearch Trees</h2><figure><img src="https://pic.imgdb.cn/item/66705264d9c307b7e9d5c6b8.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p><strong>State Space Graphs</strong></p><figure><img src="https://pic.imgdb.cn/item/667052a8d9c307b7e9d68cf5.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>State space graph: A mathematical representation of a searchproblem</p><p>Nodes are (abstracted) world configurations<br />Arcs represent successors (action results)<br />The goal test is a set of goal nodes (maybe only one)</p><p>In a state space graph, each state occurs only once!</p><p>We can rarely build this full graph in memory (it’s too big), butit’s a useful idea</p><p><strong>Search Trees</strong></p><p>A search tree:<br />A “what if” tree of plans and their outcomes<br />The start state is the root node<br />Children correspond to successors<br />Nodes show states, but correspond to PLANS that achieve thosestates<br />For most problems, we can never actually build the whole tree</p><p>Different plans that achieve the same state, will be different nodesin the tree.<br />Every plan in the tree.<br />Search ignores most of the tree.</p><h2 id="tree-search">Tree Search</h2><p>Important ideas:</p><p>Fringe<br />Expansion<br />Exploration strategy</p><p>Main question: which fringe nodes to explore?</p><h2 id="depth-first-search">Depth-First Search</h2><p>Strategy: expand a deepest node first<br />Implementation: Fringe is a LIFO stack</p><figure><img src="https://pic.imgdb.cn/item/66705ebbd9c307b7e9ef8ec1.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6670611ed9c307b7e9f41774.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>DFS扩展了哪些节点?<br />树的一些左前缀。<br />可以处理整棵树!<br />如果m是有限的，耗时O(b^m)</p><p>How much space does the fringe take?<br />Only has siblings on path to root, so O(bm)</p><p>Is it complete?<br />m could be infinite, so only if we prevent cycles (more later)</p><p>Is it optimal?<br />No, it finds the “leftmost” solution, regardless of depth or cost</p><p>Process whole tree if goal is lower right.<br />Space: At each level, children of one node at most on fringe, so b.Times number of layers m. (Small!)</p><h2 id="breadth-first-search">Breadth-First Search</h2><figure><img src="https://pic.imgdb.cn/item/667067c7d9c307b7e9fff91f.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Strategy: expand a shallowest node first<br />Implementation: Fringe is a FIFO queue</p><figure><img src="https://pic.imgdb.cn/item/6670685dd9c307b7e900efb4.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p><strong>What nodes does BFS expand?</strong><br />Processes all nodes above shallowest solution<br />Let depth of shallowest solution be s<br />Search takes time O(b^s)</p><p>How much space does the fringe take?<br />Has roughly the last tier, so O(b^s)</p><p>Is it complete?<br />s must be finite if a solution exists</p><p>Is it optimal?<br />Only if costs are all 1 (more on costs later)</p><p>Tier of best solution. If on right, b^s. Exponential Big.最佳解决方案层。如果在右边，b^s。指数大。</p><h2 id="dfs-vs-bfs">DFS vs BFS</h2><p>When will BFS outperform DFS?</p><p>When will DFS outperform BFS?</p><p>BFS:解决方案不太靠下。DFS:需要查到底。内存限制。</p><h2 id="iterative-deepening迭代加深">Iterative Deepening(迭代加深)</h2><figure><img src="https://pic.imgdb.cn/item/66706d21d9c307b7e90908b4.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Idea: get DFS’s space advantage with BFS’s time / shallow-solutionadvantages<br />Run a DFS with depth limit 1. If no solution…<br />运行深度限制为1的DFS。如果没有解决方案……<br />Run a DFS with depth limit 2. If no solution…<br />Run a DFS with depth limit 3. …..</p><p>Isn’t that wastefully redundant?<br />Generally most work happens in the lowest level searched, so not sobad!</p><p>Another strategy. Combine best of both.<br />DFS – successor says if deeper than one, stop.<br />Really common.</p><figure><img src="https://pic.imgdb.cn/item/66706e24d9c307b7e90aad39.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>BFS finds the shortest path in terms of number of actions.<br />It does not find the least-cost path. We will now cover a similaralgorithm which does find the least-cost path.</p><h2 id="uniform-cost-search代价优先">Uniform CostSearch（代价优先）</h2><p>Strategy: expand a cheapest node first<br />Fringe is a priority queue (priority: cumulative cost)<br />首先扩展最便宜的节点<br />边缘是一个优先级队列(优先级:累积开销)</p><p>Like breadth first，but with costs<br />Contours show equal cost.</p><figure><img src="https://pic.imgdb.cn/item/6670de39d9c307b7e97247bf.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/6670de82d9c307b7e972a314.png"alt="https://pic.imgdb.cn/item/6670de82d9c307b7e972a314.pn" /><figcaptionaria-hidden="true">https://pic.imgdb.cn/item/6670de82d9c307b7e972a314.pn</figcaption></figure><p>What nodes does UCS expand?<br />Processes all nodes with cost less than cheapest solution!<br />If that solution costs C* and arcs cost at least e , then the “effectivedepth” is roughly C<em>/e<br />Takes time O(b^(C</em>/e)) (exponential in effective depth)</p><p>How much space does the fringe take?<br />Has roughly the last tier, so O(b^(C*/e))</p><p>Is it complete?<br />Assuming best solution has a finite cost and minimum arc cost ispositive, yes!</p><p>Is it optimal? Yes! (Proof next lecture via A*)</p><p>Let’s say C* is 10 and minimum step size is 2. How deep in the tree?C*/e = 5. How many nodes is that?</p><figure><img src="https://pic.imgdb.cn/item/6670e2c7d9c307b7e977e177.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>The good:<br />UCS is complete and optimal!</p><p>The bad:<br />Explores options in every “direction”<br />No information about goal location</p><figure><img src="https://pic.imgdb.cn/item/6670e33ed9c307b7e9788062.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><blockquote><p>All these search algorithms are the same except for fringestrategies</p></blockquote><h2 id="search-gone-wrong">Search Gone Wrong?</h2><p>Next time – guided search where you know something about direction ofsolution.</p>]]></content>
    
    
    <categories>
      
      <category>人工智能原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能原理复习1</title>
    <link href="/2024/06/17/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-1/"/>
    <url>/2024/06/17/ren-gong-zhi-neng-yuan-li/ren-gong-zhi-neng-yuan-li-fu-xi-1/</url>
    
    <content type="html"><![CDATA[<h2 id="what-is-artificial-intelligence">What is artificialintelligence?</h2><p><strong>A (Short) History of AI</strong></p><p>1940-1950: Early days 1943: McCulloch &amp; Pitts: Boolean circuitmodel of brain 1950: Turing's “Computing Machinery and Intelligence”</p><p>1950—70: The golden years! 1950s: Early AI programs, includingSamuel's checkers program, Newell &amp; Simon's Logic Theorist,Gelernter's Geometry Engine 1956: Dartmouth meeting: “ArtificialIntelligence” adopted 1965: Robinson's complete algorithm for logicalreasoning</p><p>1970—90: Knowledge-based approaches 1969—79: Early development ofknowledge-based systems 1980—88: Expert systems industry booms 1988—93:Expert systems industry busts: “AI Winter”</p><p>1990—: Statistical approaches Resurgence of probability, focus onuncertainty General increase in technical depth Agents and learningsystems… “AI Spring”?</p><p>2000—: Where are we now?</p><p>上面需要注意的点是：</p><p>1950: Turing's “Computing Machinery and Intelligence”</p><p>1956: Dartmouth meeting: “Artificial Intelligence” adopted</p><p><strong>GameAgents（一个智能体是一个具有感知及行动的实体）</strong></p><p>Classic Moment: May, '97: Deep Blue vs. Kasparov First match wonagainst world champion “Intelligent creative” play 200 million boardpositions per second Humans understood 99.9 of Deep Blue's moves Can doabout the same now with a PC cluster</p><p>1996: Kasparov Beats Deep Blue “I could feel --- I could smell --- anew kind of intelligence across the table.”</p><p>1997: Deep Blue Beats Kasparov “Deep Blue hasn't provenanything.”</p><p><strong>Reinforcement learning</strong></p><p>注：DeepMind 是一个专注于人工智能研究的公司，而 OpenSpiel 是 DeepMind开发的一个开源库，用于研究和实现各种游戏和强化学习算法。</p><p><strong>What is Artifical Intelligence?---Definition oftextbook</strong></p><blockquote><p>Think like people</p></blockquote><blockquote><p>Act like people</p></blockquote><blockquote><p>Think rationally</p></blockquote><blockquote><p>Act rationally</p></blockquote><p><strong>Human Intelligence</strong></p><p>Brains (human minds) are very good at making rational decisions, butnot perfect</p><p>Language -&gt; Concept -&gt; Rule</p><figure><img src="https://pic.imgdb.cn/item/66702fefd9c307b7e98cfea1.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Stopped making wings that flap(蝴蝶效应嘛这句话啥意思哈哈哈哈哈看不懂)</p><ol type="1"><li>人类大约20万年前就形成了现在的解刨结构；</li><li>在接下来的15万年中，人类并没有发生较大的变化；</li><li>在大约5万年前，一小撮人类发明出人类区别于其他物种的能力，（虽然只有极少数的个体，就像是跑程序，只有极少数个体能够寻找到更优的位置，他们就能带领整个群体走向更好的区域），也就是使用语言（举例，袋鼠摇，管晨辰）（语言-&gt;概念-&gt;规则）</li></ol><figure><img src="https://pic.imgdb.cn/item/66703073d9c307b7e98de996.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><blockquote><p>思考，感知，行动</p></blockquote><blockquote><p>智能是关于什么的智能？thinking , perception, action（什么是thinking，伽利略比萨斜塔，大球、小球、大球+小球，得到矛盾）</p></blockquote><blockquote><p>The model of that（1000瓶水，10只小白鼠，一次实验）（概率论模型，均匀分布，星座，1/12）</p></blockquote><blockquote><p>The representation 表示</p></blockquote><blockquote><p>The constraints 约束</p></blockquote><blockquote><p>The algorithm 算法</p></blockquote><figure><img src="https://pic.imgdb.cn/item/667032fad9c307b7e99320cd.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>Desiging a rational agent that selects actions that maximize its(expected) utility.</p><p><strong>This course is about:</strong></p><p>Learning to recognize when and how a new problem can be solved withan existing technique</p><p>Learning the mechanism of numerious algorithms</p><figure><img src="https://pic.imgdb.cn/item/66703439d9c307b7e9969095.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p><strong>Rational Decisions</strong></p><p>We’ll use the term rational in a very specific, technical way:</p><blockquote><p>Rational: maximally achieving pre-defined goals Rationality onlyconcerns what decisions are made (not the thought process behind them)Goals are expressed in terms of the utility of outcomes Being rationalmeans maximizing your expected utility</p></blockquote><blockquote><p>我们将以一种非常特定、技术性的方式使用“理性”这个词：理性：最大限度地实现预定义的目标，理性只关注所做出的决策（而不是决策背后的思考过程），目标以结果效用的形式表达，理性意味着最大化你的预期效用</p></blockquote><p>Computational Rationality ！！！</p><p><strong>Maximize Your Expected Utility</strong></p><p>What is a utility</p><figure><img src="https://pic.imgdb.cn/item/667035d2d9c307b7e999dcd4.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/66703698d9c307b7e99b967f.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure><img src="https://pic.imgdb.cn/item/667036ffd9c307b7e99c675b.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>人工智能原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用深度神经网络建模长期和短期时间模式</title>
    <link href="/2024/05/02/lun-wen-fu-xian-0/"/>
    <url>/2024/05/02/lun-wen-fu-xian-0/</url>
    
    <content type="html"><![CDATA[<h2 id="参考论文">参考论文</h2><p>https://arxiv.org/abs/1703.07015</p><p>https://paperswithcode.com/paper/modeling-long-and-short-term-temporal</p><h2 id="abstract">Abstract</h2><p>多变量时间序列预测是许多领域中重要的机器学习问题，包括太阳能发电量预测、电力消耗预测和交通拥堵情况预测。这些实际应用中的时间数据通常涉及长期和短期模式的混合，传统方法如自回归模型和高斯过程可能会失败。在本文中，我们提出了一种新颖的深度学习框架，即长期和短期时间序列网络（LSTNet），以解决这个开放性挑战。LSTNet使用卷积神经网络（CNN）和循环神经网络（RNN）提取变量之间的短期局部依赖模式，并发现时间序列趋势的长期模式。此外，我们利用传统的自回归模型来解决神经网络模型的尺度不敏感问题。在对具有复杂重复模式的实际数据进行评估时，LSTNet相对于几种最先进的基准方法取得了显著的性能改进。</p><h2 id="部分内容">部分内容</h2><p><strong>1</strong>多变量时间序列预测通常面临一个重大的研究挑战，即如何捕获和利用多个变量之间的动态依赖关系。具体而言，实际应用通常需要短期和长期重复模式的混合</p><p><strong>2</strong>深度神经网络在相关领域得到了深入研究，并对各种问题的解决方案产生了非凡的影响。例如，递归神经网络（RNN）模型在最近的自然语言处理（NLP）研究中变得最受欢迎。特别是RNN的两种变体，即长短期记忆（LSTM）和门控循环单元（GRU），显著提高了机器翻译、语音识别和其他NLP任务中的最新性能，因为它们可以根据输入文档中单词之间的长期和短期依赖关系有效地捕获单词的含义。在计算机视觉领域，卷积神经网络（CNN）模型成功地从输入图像中提取了不同粒度级别的局部和移位不变特征（有时称为“shapelets”），显示出了出色的性能。</p><p><strong>3</strong>深度神经网络也被研究用于时间序列预测，即使用过去观测到的时间序列来预测前瞻性视界中的未知时间序列的任务——视界越大，问题越难。这方面的工作范围很广，如朴素RNN模型和混合模型到使用ARIMA模型和多层感知器（MLP），以及将普通RNN和动态玻尔兹曼机组合的方法。</p><p><strong>4</strong>本文中，我们提出了一个为多变量时间序列预测而设计的深度学习框架，即长期和短期时间序列网络（LSTNet），如下图所示。它利用卷积层的优势来发现多维输入变量之间的局部依赖模式，并利用循环层来捕获复杂的长期依赖关系。这是一种新的循环结构，即循环跳跃，旨在捕获非常长期的依赖模式，并使优化更容易，因为它利用了输入时间序列信号的周期性。最后，LSTNet将传统的自回归线性模型与非线性神经网络部分并行，使得非线性深度学习模型在违反尺度变化的时间序列中更具鲁棒性。</p><p><img src="https://pic.imgdb.cn/item/66332d720ea9cb14033fce79.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/66332f680ea9cb140344cd4c.png"alt="alt text" /></p><p><strong>5</strong>最突出的单变量时间序列模型之一是自回归综合移动平均线模型（ARIMA）。ARIMA模型的流行是由于其统计特性以及模型选择过程中著名的Box-Jenkins方法。ARIMA模型不仅适应各种指数平滑技术，而且足够灵活，可以包含其他类型的时间序列模型，包括自回归（AR）、移动平均线（MA）和自回归移动平均线（ARMA）。然而，由于计算成本高，ARIMA模型（包括其用于模拟长期时间依赖关系的变体），很少用于高维多变量时间序列预测。</p><p><strong>6</strong>在多变量时间序列中，向量自回归（VAR）可以说是使用最广泛的模型，因为它很简单。VAR模型自然地将 AR模型扩展到多变量设置，这忽略了输出变量之间的依赖关系。近年来，各种VAR模型都取得了重大进展，包括用于重尾时间序列的椭圆VAR模型和用于更好地解释高维变量之间依赖关系的结构化VAR模型等。然而，VAR的模型容量在时间窗口大小上呈线性增长，在变量数量上呈二次增长。这意味着，在处理长期时间模式时，继承的大模型容易出现过拟合。为了缓解这个问题，有学者提出将原来的高维信号简化为低维的隐式表示，然后应用VAR进行预测，并有多种正则化选择。</p><p><strong>7</strong>时间序列预测问题也可以被视为具有时变参数的标准回归问题。因此，将具有不同损失函数和正则化项的各种回归模型应用于时间序列预测任务也就不足为奇了。例如，线性支持向量回归（SVR）使用控制预测误差阈值的超参数ε基于回归损失学习最大边际超平面。岭回归是另一个例子，可以通过将ε 设置为零来从 SVR 模型中恢复。</p><p><strong>8</strong> 高斯过程 （GP）是一种非参数方法，用于对连续函数域上的分布进行建模。这与由参数化函数类定义的模型形成鲜明对比。GP可以应用于多变量时间序列预测任务，并且可以用作贝叶斯推理中函数空间的先验。（看不懂就先放一下...会懂的...）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>回归—小波神经网络</title>
    <link href="/2024/05/01/hui-gui-xiao-bo-shen-jing-wang-luo/"/>
    <url>/2024/05/01/hui-gui-xiao-bo-shen-jing-wang-luo/</url>
    
    <content type="html"><![CDATA[<h2 id="小波神经网络回归">小波神经网络回归</h2><p>小波神经网络（Wavelet Neural Network,WNN）是一种利用小波变换作为激活函数的前馈神经网络。小波变换是一种数学方法，用于将信号分解为构成其的小波，这些小波可以捕捉信号的局部特征。在神经网络中，小波变换可以作为一种强有力的工具来处理和分析数据，尤其是在时间序列分析和信号处理领域。</p><p>小波神经网络回归是指使用小波神经网络对数据进行回归分析，以预测连续的输出值。这种回归分析可以应用于多种领域，比如金融市场预测、气象预测、交通流量预测等。</p><p>小波神经网络的关键特点包括：</p><ol type="1"><li><p><strong>小波变换</strong>：用作隐含层的激活函数，能够捕捉数据的局部特征。</p></li><li><p><strong>自适应学习</strong>：网络通过学习数据集来自动调整其权值和阈值。</p></li><li><p><strong>非线性映射</strong>：小波变换提供了一种从输入空间到高维特征空间的非线性映射，有助于网络捕捉复杂的非线性关系。</p></li><li><p><strong>泛化能力</strong>：通过训练，小波神经网络能够学习到数据的内在规律，从而对未知数据进行有效的预测。</p></li><li><p><strong>优化算法</strong>：通常使用梯度下降或其变种（如动量法、AdaGrad等）来优化网络的权值，以最小化预测误差。</p></li></ol><p>在小波神经网络回归中，通常的步骤包括：</p><ul><li><p><strong>数据预处理</strong>：包括归一化处理，使数据处于一个合适的范围内，提高网络训练的稳定性和收敛速度。</p></li><li><p><strong>网络初始化</strong>：随机初始化网络的权值和阈值。</p></li><li><p><strong>前向传播</strong>：计算隐含层的小波变换，并将结果传递到输出层。</p></li><li><p><strong>计算误差</strong>：使用某种误差度量（如均方误差）计算网络预测值和实际值之间的差异。</p></li><li><p><strong>反向传播</strong>：根据误差计算每个参数的梯度，并更新权值以减少误差。</p></li><li><p><strong>迭代优化</strong>：重复前向传播和反向传播步骤，直到网络达到预定的迭代次数或误差降低到可接受的程度。</p></li><li><p><strong>模型评估</strong>：使用测试数据集评估网络的预测性能。</p></li><li><p><strong>结果分析</strong>：对模型的预测结果进行分析，以了解其准确性和可靠性。</p></li></ul><p>小波神经网络因其在处理具有局部特征的信号方面的优势而被广泛应用于回归分析中。然而，选择合适的小波基和网络结构对于获得良好的预测性能至关重要。</p><h2 id="实例分析">实例分析</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs m">clc; <span class="hljs-comment">% 清除命令窗口</span><br>clear; <span class="hljs-comment">% 清除所有变量</span><br><br><span class="hljs-comment">%% 网络参数配置</span><br>load traffic_flux input output input_test output_test; <span class="hljs-comment">% 加载训练数据和测试数据</span><br><br>M<span class="hljs-built_in">=</span>size(input,<span class="hljs-number">2</span>); <span class="hljs-comment">% 输入节点个数</span><br>N<span class="hljs-built_in">=</span>size(output,<span class="hljs-number">2</span>); <span class="hljs-comment">% 输出节点个数</span><br><br>n<span class="hljs-built_in">=</span><span class="hljs-number">6</span>; <span class="hljs-comment">% 隐含层节点个数</span><br>lr1<span class="hljs-built_in">=</span><span class="hljs-number">0.01</span>; <span class="hljs-comment">% 学习率1</span><br>lr2<span class="hljs-built_in">=</span><span class="hljs-number">0.001</span>; <span class="hljs-comment">% 学习率2</span><br>maxgen<span class="hljs-built_in">=</span><span class="hljs-number">100</span>; <span class="hljs-comment">% 迭代次数</span><br><br><span class="hljs-comment">% 权值初始化</span><br>Wjk<span class="hljs-built_in">=</span>randn(n,M); Wjk_1<span class="hljs-built_in">=</span>Wjk; Wjk_2<span class="hljs-built_in">=</span>Wjk_1; <span class="hljs-comment">% 隐含层到输入层的权值</span><br>Wij<span class="hljs-built_in">=</span>randn(N,n); Wij_1<span class="hljs-built_in">=</span>Wij; Wij_2<span class="hljs-built_in">=</span>Wij_1; <span class="hljs-comment">% 输出层到隐含层的权值</span><br>a<span class="hljs-built_in">=</span>randn(<span class="hljs-number">1</span>,n); a_1<span class="hljs-built_in">=</span>a; a_2<span class="hljs-built_in">=</span>a_1; <span class="hljs-comment">% 激活函数的参数a</span><br>b<span class="hljs-built_in">=</span>randn(<span class="hljs-number">1</span>,n); b_1<span class="hljs-built_in">=</span>b; b_2<span class="hljs-built_in">=</span>b_1; <span class="hljs-comment">% 激活函数的参数b</span><br><br><span class="hljs-comment">% 节点初始化</span><br>y<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,N); <span class="hljs-comment">% 输出层的初始化</span><br>net<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n); <span class="hljs-comment">% 隐含层的初始化</span><br>net_ab<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n); <span class="hljs-comment">% 隐含层激活函数的输入初始化</span><br><br><span class="hljs-comment">% 权值学习增量初始化</span><br>d_Wjk<span class="hljs-built_in">=</span>zeros(n,M); <span class="hljs-comment">% Wjk的梯度</span><br>d_Wij<span class="hljs-built_in">=</span>zeros(N,n); <span class="hljs-comment">% Wij的梯度</span><br>d_a<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n); <span class="hljs-comment">% a的梯度</span><br>d_b<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n); <span class="hljs-comment">% b的梯度</span><br><br><span class="hljs-comment">%% 输入输出数据归一化</span><br>[inputn,inputps]<span class="hljs-built_in">=</span>mapminmax(input<span class="hljs-string">&#x27;); % 输入数据归一化并保存参数</span><br><span class="hljs-string">[outputn,outputps]=mapminmax(output&#x27;</span>); <span class="hljs-comment">% 输出数据归一化并保存参数</span><br>inputn<span class="hljs-built_in">=</span>inputn<span class="hljs-string">&#x27;; % 转置</span><br><span class="hljs-string">outputn=outputn&#x27;</span>; <span class="hljs-comment">% 转置</span><br><br>error<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,maxgen); <span class="hljs-comment">% 初始化误差数组</span><br><br><span class="hljs-comment">%% 网络训练</span><br>for i<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:maxgen <span class="hljs-comment">% 迭代次数循环</span><br>    <br>    <span class="hljs-comment">% 误差累计</span><br>    error(i)<span class="hljs-built_in">=</span><span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">% 循环训练</span><br>    for kk<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:size(input,<span class="hljs-number">1</span>) <span class="hljs-comment">% 对每个输入样本进行训练</span><br>        x<span class="hljs-built_in">=</span>inputn(kk,:); <span class="hljs-comment">% 当前输入样本</span><br>        yqw<span class="hljs-built_in">=</span>outputn(kk,:); <span class="hljs-comment">% 当前输出样本</span><br>        <br>        <span class="hljs-comment">% 计算隐含层的输出</span><br>        for j<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:n<br>            for k<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:M<br>                net(j)<span class="hljs-built_in">=</span>net(j)+Wjk(j,k)*x(k); <span class="hljs-comment">% 计算隐含层的输入加权和</span><br>            end<br>            net_ab(j)<span class="hljs-built_in">=</span>(net(j)-b(j))/a(j); <span class="hljs-comment">% 应用小波变换</span><br>            temp<span class="hljs-built_in">=</span>mymorlet(net_ab(j)); <span class="hljs-comment">% 计算小波函数的值</span><br>            for k<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:N<br>                y<span class="hljs-built_in">=</span>y+Wij(k,j)*temp; <span class="hljs-comment">% 计算输出层的输出</span><br>            end<br>        end<br>        <br>        <span class="hljs-comment">% 计算误差和</span><br>        error(i)<span class="hljs-built_in">=</span>error(i)+sum(abs(yqw-y)); <span class="hljs-comment">% 计算当前样本的误差</span><br>        <br>        <span class="hljs-comment">% 权值调整</span><br>        for j<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:n<br>            <span class="hljs-comment">% 计算d_Wij</span><br>            temp<span class="hljs-built_in">=</span>mymorlet(net_ab(j));<br>            for k<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:N<br>                d_Wij(k,j)<span class="hljs-built_in">=</span>d_Wij(k,j)-(yqw(k)-y(k))*temp; <span class="hljs-comment">% 计算Wij的梯度</span><br>            end<br>            <span class="hljs-comment">% 计算d_Wjk</span><br>            temp<span class="hljs-built_in">=</span>d_mymorlet(net_ab(j)); <span class="hljs-comment">% 计算小波函数的导数</span><br>            for k<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:M<br>                for l<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:N<br>                    d_Wjk(j,k)<span class="hljs-built_in">=</span>d_Wjk(j,k)+(yqw(l)-y(l))*Wij(l,j); <span class="hljs-comment">% 计算Wjk的梯度</span><br>                end<br>                d_Wjk(j,k)<span class="hljs-built_in">=</span>-d_Wjk(j,k)*temp*x(k)/a(j); <span class="hljs-comment">% 更新Wjk的梯度</span><br>            end<br>            <span class="hljs-comment">% 计算d_b</span><br>            for k<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:N<br>                d_b(j)<span class="hljs-built_in">=</span>d_b(j)+(yqw(k)-y(k))*Wij(k,j); <span class="hljs-comment">% 计算b的梯度</span><br>            end<br>            d_b(j)<span class="hljs-built_in">=</span>d_b(j)*temp/a(j); <span class="hljs-comment">% 更新b的梯度</span><br>            <span class="hljs-comment">% 计算d_a</span><br>            for k<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:N<br>                d_a(j)<span class="hljs-built_in">=</span>d_a(j)+(yqw(k)-y(k))*Wij(k,j); <span class="hljs-comment">% 计算a的梯度</span><br>            end<br>            d_a(j)<span class="hljs-built_in">=</span>d_a(j)*temp*((net(j)-b(j))/b(j))/a(j); <span class="hljs-comment">% 更新a的梯度</span><br>        end<br>        <br>        <span class="hljs-comment">% 权值参数更新      </span><br>        Wij<span class="hljs-built_in">=</span>Wij-lr1*d_Wij; <span class="hljs-comment">% 更新Wij</span><br>        Wjk<span class="hljs-built_in">=</span>Wjk-lr1*d_Wjk; <span class="hljs-comment">% 更新Wjk</span><br>        b<span class="hljs-built_in">=</span>b-lr2*d_b; <span class="hljs-comment">% 更新b</span><br>        a<span class="hljs-built_in">=</span>a-lr2*d_a; <span class="hljs-comment">% 更新a</span><br>    <br>        <span class="hljs-comment">% 重置梯度和节点状态</span><br>        d_Wjk<span class="hljs-built_in">=</span>zeros(n,M);<br>        d_Wij<span class="hljs-built_in">=</span>zeros(N,n);<br>        d_a<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n);<br>        d_b<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n);<br>        <br>        y<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,N);<br>        net<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n);<br>        net_ab<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n);<br>        <br>        <span class="hljs-comment">% 存储旧的权值和参数用于后续更新</span><br>        Wjk_1<span class="hljs-built_in">=</span>Wjk; Wjk_2<span class="hljs-built_in">=</span>Wjk_1;<br>        Wij_1<span class="hljs-built_in">=</span>Wij; Wij_2<span class="hljs-built_in">=</span>Wij_1;<br>        a_1<span class="hljs-built_in">=</span>a; a_2<span class="hljs-built_in">=</span>a_1;<br>        b_1<span class="hljs-built_in">=</span>b; b_2<span class="hljs-built_in">=</span>b_1;<br>    end<br>end<br><br><span class="hljs-comment">%% 网络预测</span><br><span class="hljs-comment">% 预测输入归一化</span><br>x<span class="hljs-built_in">=</span>mapminmax(<span class="hljs-string">&#x27;apply&#x27;</span>,input_test<span class="hljs-string">&#x27;,inputps); % 应用归一化参数</span><br><span class="hljs-string">x=x&#x27;</span>; <span class="hljs-comment">% 转置</span><br>yuce<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">92</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">% 初始化预测输出数组</span><br><span class="hljs-comment">% 网络预测</span><br>for i<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:<span class="hljs-number">92</span> <span class="hljs-comment">% 对每个测试样本进行预测</span><br>    x_test<span class="hljs-built_in">=</span>x(i,:); <span class="hljs-comment">% 当前测试输入样本</span><br>    <br>    <span class="hljs-comment">% 计算隐含层的输出</span><br>    for j<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:<span class="hljs-number">1</span>:n<br>        for k<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:<span class="hljs-number">1</span>:M<br>            net(j)<span class="hljs-built_in">=</span>net(j)+Wjk(j,k)*x_test(k); <span class="hljs-comment">% 计算隐含层的输入加权和</span><br>            net_ab(j)<span class="hljs-built_in">=</span>(net(j)-b(j))/a(j); <span class="hljs-comment">% 应用小波变换</span><br>        end<br>        temp<span class="hljs-built_in">=</span>mymorlet(net_ab(j)); <span class="hljs-comment">% 计算小波函数的值</span><br>        for k<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:N<br>            y(k)<span class="hljs-built_in">=</span>y(k)+Wij(k,j)*temp; <span class="hljs-comment">% 计算输出层的输出</span><br>        end<br>    end<br>    <br>    yuce(i)<span class="hljs-built_in">=</span>y(k); <span class="hljs-comment">% 存储预测结果</span><br>    <span class="hljs-comment">% 重置节点状态为下一个样本做准备</span><br>    y<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,N);<br>    net<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n);<br>    net_ab<span class="hljs-built_in">=</span>zeros(<span class="hljs-number">1</span>,n);<br>end<br><span class="hljs-comment">% 预测输出反归一化</span><br>ynn<span class="hljs-built_in">=</span>mapminmax(<span class="hljs-string">&#x27;reverse&#x27;</span>,yuce,outputps); <span class="hljs-comment">% 应用反归一化参数</span><br><br><span class="hljs-comment">%% 结果分析</span><br>figure(<span class="hljs-number">1</span>); <span class="hljs-comment">% 创建图形窗口</span><br>plot(ynn,<span class="hljs-string">&#x27;r*:&#x27;</span>); <span class="hljs-comment">% 绘制预测的交通流量</span><br>hold on; <span class="hljs-comment">% 保持当前图形</span><br>plot(output_test,<span class="hljs-string">&#x27;bo--&#x27;</span>); <span class="hljs-comment">% 绘制实际的交通流量</span><br>title(<span class="hljs-string">&#x27;预测交通流量&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); <span class="hljs-comment">% 设置图形标题</span><br>legend(<span class="hljs-string">&#x27;预测交通流量&#x27;</span>,<span class="hljs-string">&#x27;实际交通流量&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); <span class="hljs-comment">% 添加图例</span><br>xlabel(<span class="hljs-string">&#x27;时间点&#x27;</span>); <span class="hljs-comment">% 设置x轴标签</span><br>ylabel(<span class="hljs-string">&#x27;交通流量&#x27;</span>); <span class="hljs-comment">% 设置y轴标签</span><br></code></pre></td></tr></table></figure><p>这里用到的两个子程序分别是： <figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs m">function y<span class="hljs-built_in">=</span>mymorlet(t)<br><br>y <span class="hljs-built_in">=</span> exp(-(t.^<span class="hljs-number">2</span>)/<span class="hljs-number">2</span>) * cos(<span class="hljs-number">1.75</span>*t);<br></code></pre></td></tr></table></figure> 函数 <code>mymorlet</code>是一个自定义的函数，它定义了一个莫勒特小波（Morletwavelet），也称为Gabor小波。莫勒特小波是一种复数小波，常用于信号处理和小波变换中，尤其是在连续小波变换（ContinuousWavelet Transform, CWT）中。</p><p>函数的功能是计算输入参数 <code>t</code>对应的莫勒特小波的值。莫勒特小波是一个复数函数，由高斯函数的指数部分和一个余弦函数相乘组成。具体来说，莫勒特小波可以表示为：</p><p><span class="math inline">\(\psi(t) = e^{-\frac{t^2}{2}} \cdot\cos(1.75 \cdot t)\)</span></p><p>其中： - <span class="math inline">\(e^{-\frac{t^2}{2}}\)</span>是高斯包络，它控制着小波在时间域的宽度。 - <spanclass="math inline">\(\cos(1.75 \cdot t)\)</span>是小波的振荡部分，它控制着小波的频率。</p><p>莫勒特小波由于其良好的局部化特性，常用于分析具有振荡性质的非平稳信号，例如在脑电波（EEG）分析、地震信号分析等领域。在小波神经网络中，莫勒特小波可以作为激活函数，帮助网络捕捉输入数据的局部特征。<figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs m">function y<span class="hljs-built_in">=</span>d_mymorlet(t)<br><br>y <span class="hljs-built_in">=</span> -<span class="hljs-number">1.75</span>*sin(<span class="hljs-number">1.75</span>*t).*exp(-(t.^<span class="hljs-number">2</span>)/<span class="hljs-number">2</span>)-t* cos(<span class="hljs-number">1.75</span>*t).*exp(-(t.^<span class="hljs-number">2</span>)/<span class="hljs-number">2</span>) ;<br></code></pre></td></tr></table></figure> <code>d_mymorlet</code> 定义了莫勒特小波（Morletwavelet）的导数。这个函数计算这个小波在时间 <code>t</code>处的导数，即小波变换中的时间导数。</p><p>函数的功能是计算输入参数 <code>t</code>对应的莫勒特小波导数的值。这个导数由两部分组成：</p><ol type="1"><li><p><span class="math inline">\(-1.75 \sin(1.75 \cdot t) \cdote^{-\frac{t^2}{2}}\)</span>：这是莫勒特小波中余弦项的导数，由链式法则和余弦函数的导数（负的正弦函数）得到。</p></li><li><p><span class="math inline">\(-t \cdot \cos(1.75 \cdot t) \cdote^{-\frac{t^2}{2}}\)</span>：这是莫勒特小波中高斯项与余弦项乘积的导数，由高斯项<code>t</code> 的导数（1）和乘积的导数构成。</p></li></ol><p>莫勒特小波的导数在小波变换中非常重要，因为它提供了信号局部变化率的信息。在小波神经网络中，这个导数可能用于捕捉输入数据的局部变化特征，从而提高网络对信号变化的敏感性。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>元胞自动机</title>
    <link href="/2024/05/01/yuan-bao-zi-dong-ji/"/>
    <url>/2024/05/01/yuan-bao-zi-dong-ji/</url>
    
    <content type="html"><![CDATA[<h2 id="元胞自动机的一些基本特性">元胞自动机的一些基本特性：</h2><ol type="1"><li><p><strong>离散空间</strong>：元胞自动机通常定义在一个规则的网格上，如一维、二维或三维的格子。</p></li><li><p><strong>有限状态</strong>：每个元胞在任何给定时间都处于有限个状态中的一个，状态可以是二进制的（例如0和1）或具有更多可能值。</p></li><li><p><strong>局部规则</strong>：元胞的状态更新基于局部规则，这些规则只依赖于元胞自身和其邻居的状态。</p></li><li><p><strong>同步更新</strong>：在每个时间步，所有元胞的状态都是同时更新的。</p></li><li><p><strong>初始条件</strong>：元胞自动机的初始状态对系统的长期行为有很大影响。</p></li><li><p><strong>时间演化</strong>：元胞自动机的状态随时间演化，形成一系列状态。</p></li><li><p><strong>Wolfram分类</strong>：斯蒂芬·沃尔夫勒姆（StephenWolfram）提出了一种著名的元胞自动机分类方法，将一维元胞自动机分为四类，从简单的规则到复杂的混沌行为。</p></li><li><p><strong>图灵完备性</strong>：某些元胞自动机被证明具有图灵完备性，这意味着它们能够模拟任何图灵机的计算。</p></li><li><p><strong>应用</strong>：元胞自动机被用于模拟各种自然现象，如流体动力学、细胞生长、疾病传播、交通流等。</p></li><li><p><strong>可视化</strong>：元胞自动机的演化常常通过图形方式展示，以直观地理解其动态行为。</p></li></ol><h2 id="康威的生命游戏conways-game-of-life">康威的生命游戏（Conway'sGame of Life）</h2><p>生命游戏是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。它包括一个二维矩形世界，这个世界中的每个方格居住着一个活着的或死了的细胞。一个细胞在下一个时刻生死取决于相邻八个方格中活着的或死了的细胞的数量。通常情况，游戏的规则就是：当一个方格周围有2或3个活细胞时，方格中的活细胞在下一个时刻继续存活；即使这个时刻方格中没有活细胞，在下一个时刻也会“诞生”活细胞。规则是：</p><p><strong>1.</strong> 对周围的 8 个近邻的元胞状态求和</p><p><strong>2.</strong> 如果总和为 2 的话，则下一时刻的状态不改变</p><p><strong>3.</strong> 如果总和为 3 ，则下一时刻的状态为 1，否则状态为0</p><h2 id="二维元胞自动机模拟">二维元胞自动机模拟：</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs m"><span class="hljs-comment">%% 设置GUI按键</span><br>plotbutton<span class="hljs-built_in">=</span>uicontrol(<span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">&#x27;pushbutton&#x27;</span>,<span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-string">&#x27;运行&#x27;</span>, <span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;position&#x27;</span>,[<span class="hljs-number">150</span>,<span class="hljs-number">400</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>], <span class="hljs-string">&#x27;callback&#x27;</span>, <span class="hljs-string">&#x27;run=1;&#x27;</span>);<br>erasebutton<span class="hljs-built_in">=</span>uicontrol(<span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">&#x27;pushbutton&#x27;</span>,<span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-string">&#x27;停止&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;position&#x27;</span>,[<span class="hljs-number">250</span>,<span class="hljs-number">400</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>],<span class="hljs-string">&#x27;callback&#x27;</span>,<span class="hljs-string">&#x27;freeze=1;&#x27;</span>);<br>quitbutton<span class="hljs-built_in">=</span>uicontrol(<span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">&#x27;pushbutton&#x27;</span>,<span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-string">&#x27;退出&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;position&#x27;</span>,[<span class="hljs-number">350</span>,<span class="hljs-number">400</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>],<span class="hljs-string">&#x27;callback&#x27;</span>,<span class="hljs-string">&#x27;stop=1;close;&#x27;</span>);<br>number <span class="hljs-built_in">=</span> uicontrol(<span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;position&#x27;</span>,[<span class="hljs-number">20</span>,<span class="hljs-number">400</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>]);<br><span class="hljs-comment">%% 元胞自动机设置</span><br>n<span class="hljs-built_in">=</span><span class="hljs-number">200</span>;<br><span class="hljs-comment">%初始化各元胞状态</span><br>z <span class="hljs-built_in">=</span> zeros(n,n);<br>sum <span class="hljs-built_in">=</span> z;<br>cells <span class="hljs-built_in">=</span> (rand(n,n))&lt;.<span class="hljs-number">6</span>;<br><span class="hljs-comment">% 建立图像句柄</span><br>imh <span class="hljs-built_in">=</span> image(cat(<span class="hljs-number">3</span>,cells,z,z));<br>set(imh, <span class="hljs-string">&#x27;erasemode&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>)<br><span class="hljs-comment">% 元胞更新的行列数设置</span><br>x <span class="hljs-built_in">=</span> <span class="hljs-number">2</span>:n-<span class="hljs-number">1</span>;<br>y <span class="hljs-built_in">=</span> <span class="hljs-number">2</span>:n-<span class="hljs-number">1</span>;<br><span class="hljs-comment">% 主事件循环</span><br>stop<span class="hljs-built_in">=</span> <span class="hljs-number">0</span>; run <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;freeze <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>; <br>while stop<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span><span class="hljs-number">0</span><br>    <span class="hljs-built_in">if</span> run<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span><span class="hljs-number">1</span><br>        <span class="hljs-comment">% 计算邻居存活的总数</span><br>        sum(x,y) <span class="hljs-built_in">=</span> cells(x,y-<span class="hljs-number">1</span>) + cells(x,y+<span class="hljs-number">1</span>) + cells(x-<span class="hljs-number">1</span>, y) + cells(x+<span class="hljs-number">1</span>,y)...<br>            + cells(x-<span class="hljs-number">1</span>,y-<span class="hljs-number">1</span>) + cells(x-<span class="hljs-number">1</span>,y+<span class="hljs-number">1</span>) + cells(x+<span class="hljs-number">1</span>,y-<span class="hljs-number">1</span>) + cells(x+<span class="hljs-number">1</span>,y+<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">% 按照规则更新</span><br>        cells <span class="hljs-built_in">=</span> (sum<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span><span class="hljs-number">3</span>) | (sum<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span><span class="hljs-number">2</span> &amp; cells);<br>        set(imh, <span class="hljs-string">&#x27;cdata&#x27;</span>, cat(<span class="hljs-number">3</span>,cells,z,z) )<br>        stepnumber <span class="hljs-built_in">=</span> <span class="hljs-number">1</span> + str2double(get(number,<span class="hljs-string">&#x27;string&#x27;</span>));<br>        set(number,<span class="hljs-string">&#x27;string&#x27;</span>,num2str(stepnumber))<br>    end<br>    <span class="hljs-built_in">if</span> freeze<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span><span class="hljs-number">1</span><br>        run <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>        freeze <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>    end<br>    drawnow<br>end<br></code></pre></td></tr></table></figure><h2 id="元胞自动机模拟案例二">元胞自动机模拟案例二</h2><p><strong>规则制定：</strong>首先定义平面中心点的数值为1，接着在每一时间步对每一点，如果周围八个点的和为偶数，则变为0，为奇数则变为1 <figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs m"><span class="hljs-comment">% 颜色控制</span><br>Map <span class="hljs-built_in">=</span> [<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>];<br>colormap(Map);    <span class="hljs-comment">%定义所有值为1的元胞将显示为白色，值为0的元胞将显示为黑色</span><br><span class="hljs-comment">% 设置网格大小</span><br>S <span class="hljs-built_in">=</span> <span class="hljs-number">121</span>;<br>L <span class="hljs-built_in">=</span> zeros(S);<br><span class="hljs-comment">% 把中间一个数设置为 1 作为元胞种子</span><br>M <span class="hljs-built_in">=</span> (S+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>L(M, M) <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>;<br>Temp <span class="hljs-built_in">=</span> L;<br>imagesc(L);<br><span class="hljs-comment">% 计算层数</span><br>Layer <span class="hljs-built_in">=</span> (S-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br><br>for t<span class="hljs-built_in">=</span><span class="hljs-number">2</span>:Layer<br>    for x<span class="hljs-built_in">=</span>M-t+<span class="hljs-number">1</span>:M+t-<span class="hljs-number">1</span><br>       <span class="hljs-built_in">if</span> x<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span>M-t+<span class="hljs-number">1</span> || x<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span>M+t-<span class="hljs-number">1</span><br><br>          for y<span class="hljs-built_in">=</span>M-t+<span class="hljs-number">1</span>:M+t-<span class="hljs-number">1</span><br>            SUM <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>            for m<span class="hljs-built_in">=</span>-<span class="hljs-number">1</span>:<span class="hljs-number">1</span><br>               for n<span class="hljs-built_in">=</span>-<span class="hljs-number">1</span>:<span class="hljs-number">1</span><br>                  <span class="hljs-built_in">if</span> x+m&gt;<span class="hljs-number">0</span> &amp;&amp; x+m<span class="hljs-built_in">&lt;=</span>S &amp;&amp; y+n&gt;<span class="hljs-number">0</span> &amp;&amp; y+n<span class="hljs-built_in">&lt;=</span>S<br>                     SUM <span class="hljs-built_in">=</span> SUM + L(x+m, y+n); <br>                  end<br>               end<br>            end<br>            SUM <span class="hljs-built_in">=</span> SUM - L(x, y);<br>            Temp(x, y) <span class="hljs-built_in">=</span> mod(SUM, <span class="hljs-number">2</span>);<br>          end<br>          <br>       <span class="hljs-built_in">else</span><br>            y <span class="hljs-built_in">=</span> M-t+<span class="hljs-number">1</span>;<br>            SUM <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>            for m<span class="hljs-built_in">=</span>-<span class="hljs-number">1</span>:<span class="hljs-number">1</span><br>               for n<span class="hljs-built_in">=</span>-<span class="hljs-number">1</span>:<span class="hljs-number">1</span><br>                  <span class="hljs-built_in">if</span> x+m&gt;<span class="hljs-number">0</span> &amp;&amp; x+m<span class="hljs-built_in">&lt;=</span>S &amp;&amp; y+n&gt;<span class="hljs-number">0</span> &amp;&amp; y+n<span class="hljs-built_in">&lt;=</span>S<br>                     SUM <span class="hljs-built_in">=</span> SUM + L(x+m, y+n); <br>                  end<br>               end<br>            end<br>            SUM <span class="hljs-built_in">=</span> SUM - L(x, y);<br>            Temp(x, y) <span class="hljs-built_in">=</span> mod(SUM, <span class="hljs-number">2</span>);<br>            <br>            y <span class="hljs-built_in">=</span> M+t-<span class="hljs-number">1</span>;<br>            SUM <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>            for m<span class="hljs-built_in">=</span>-<span class="hljs-number">1</span>:<span class="hljs-number">1</span><br>               for n<span class="hljs-built_in">=</span>-<span class="hljs-number">1</span>:<span class="hljs-number">1</span><br>                  <span class="hljs-built_in">if</span> x+m&gt;<span class="hljs-number">0</span> &amp;&amp; x+m<span class="hljs-built_in">&lt;=</span>S &amp;&amp; y+n&gt;<span class="hljs-number">0</span> &amp;&amp; y+n<span class="hljs-built_in">&lt;=</span>S<br>                     SUM <span class="hljs-built_in">=</span> SUM + L(x+m, y+n); <br>                  end<br>               end<br>            end<br>            SUM <span class="hljs-built_in">=</span> SUM - L(x, y);<br>            Temp(x, y) <span class="hljs-built_in">=</span> mod(SUM, <span class="hljs-number">2</span>);<br>       end<br>    end<br>    L <span class="hljs-built_in">=</span> Temp;<br>    imagesc(L);<br>    <span class="hljs-comment">% 速度控制</span><br>    pause(<span class="hljs-number">0.2</span>);<br>end<br></code></pre></td></tr></table></figure></p><h2id="元胞自动机的应用实例---nagel-schreckenberg-模型模拟">元胞自动机的应用实例---NagelSchreckenberg 模型模拟</h2><h3 id="模型介绍">模型介绍</h3><p>Nagel-Schreckenberg模型是一种用于模拟交通流的简单而有效的元胞自动机模型，由德国物理学家ReinhardNagel和MichaelSchreckenberg在1992年提出。该模型主要用于描述单向道路上车辆流动的行为，能够展示出交通堵塞的形成、消散以及密度波的传播等现象。它通过规则定义车辆的加速、减速、保持速度以及换道行为，每个时间步长内，模型中的每一辆车根据以下规则更新其速度和位置：</p><ol type="1"><li><p><strong>加速规则</strong>：如果一辆车的速度v小于最大速度v_max，并且前方距离为d空白格（无车占据），则该车的速度增加1，直到达到v_max或者前方空位不足。</p></li><li><p><strong>减速规则</strong>：考虑安全距离，如果前方只有一辆车且两车距离小于安全距离d_0（通常是车速v的一倍，即d_0=v），则必须减速直到两车距离满足安全要求，但最多减到0（即停车）。</p></li><li><p><strong>随机刹车</strong>：即使前车距离足够，也有一定概率p降低速度，模拟驾驶员的不可预测行为或道路状况的变化，通常取p较小，如0.15。</p></li><li><p><strong>速度限制</strong>：确保更新后的速度不会超过最大速度v_max，也不会低于0（即不会出现负速度）。</p></li></ol><p>模型中的每辆车占据一格空间，每一步更新时，车辆按照其当前速度前移相应的格数，然后根据上述规则调整速度，以此循环模拟交通流随时间的动态变化。Nagel-Schreckenberg模型因其简明性和能够捕捉交通流宏观特性而广泛应用于交通工程、复杂系统科学和物理学的研究中。</p><h2 id="代码实现">代码实现</h2><p>python简单模拟 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 参考链接：http://t.csdnimg.cn/2QgNz</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> time<br> <br>start = time.time()<br>path = <span class="hljs-number">5000</span>  <span class="hljs-comment"># 道路长度</span><br>n = <span class="hljs-number">100</span>  <span class="hljs-comment"># 车辆数目</span><br>v0 = <span class="hljs-number">90</span>  <span class="hljs-comment"># 初始速度</span><br>p = <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 车辆减速概率</span><br>Times = <span class="hljs-number">6000</span>  <span class="hljs-comment"># 模拟的时刻数目,时刻越长所耗时间越长</span><br> <br> <br>np.random.seed(<span class="hljs-number">0</span>)<br>x = np.random.rand(n) * path  <span class="hljs-comment"># 保存每辆车在道路上的位置,随机进行初始化</span><br>x.sort()<br>v = np.tile([v0], n).astype(np.float64)  <span class="hljs-comment"># 保存每辆车的速度,并且初速度相同</span><br> <br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>), facecolor=<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-comment"># 模拟每个时刻</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Times):<br>    plt.scatter(x, [t] * n, s=<span class="hljs-number">1</span>, c=<span class="hljs-string">&#x27;k&#x27;</span>, alpha=<span class="hljs-number">0.05</span>)<br>    <span class="hljs-comment"># 模拟每辆车</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-comment"># 计算当前车与前车的距离（是环形车道）</span><br>        <span class="hljs-keyword">if</span> x[(i + <span class="hljs-number">1</span>) % n] &gt; x[i]:<br>            d = x[(i + <span class="hljs-number">1</span>) % n] - x[i]<br>        <span class="hljs-keyword">else</span>:<br>            d = path - x[i] + x[(i + <span class="hljs-number">1</span>) % n]<br>        <span class="hljs-comment"># 根据距离计算下一秒的速度</span><br>        <span class="hljs-keyword">if</span> v[i] &lt; d:<br>            <span class="hljs-keyword">if</span> np.random.rand() &gt; p:<br>                v[i] += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                v[i] -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            v[i] = d - <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 对速度进行限制(最高速度不得超过120)</span><br>    v = v.clip(<span class="hljs-number">0</span>, <span class="hljs-number">120</span>)<br>    <span class="hljs-comment"># 一秒后,车辆的位置发生变化</span><br>    x += v<br>    x %= path<br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>plt.xlim(<span class="hljs-number">0</span>, path)<br>plt.ylim(<span class="hljs-number">0</span>, Times)<br>plt.xlabel(<span class="hljs-string">&#x27;车辆位置&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;模拟时间&#x27;</span>)<br>plt.title(<span class="hljs-string">f&#x27;Nagel-Schreckenberg模型模拟(车道长度:<span class="hljs-subst">&#123;path&#125;</span>,车辆数:<span class="hljs-subst">&#123;n&#125;</span>,初速度:<span class="hljs-subst">&#123;v0&#125;</span>,减速概率:<span class="hljs-subst">&#123;p&#125;</span>)&#x27;</span>)<br>end = time.time()<br>plt.text(<span class="hljs-number">1800</span>, <span class="hljs-number">6400</span>, s=<span class="hljs-string">f&#x27;Running time: <span class="hljs-subst">&#123;(end - start)&#125;</span> seconds&#x27;</span>, fontsize=<span class="hljs-number">15</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>)<br> <br>plt.show()<br></code></pre></td></tr></table></figure></p><p>基于MATLAB编写交通流模拟程序，通过计算机仿真来探索和分析交通流量与道路密度之间的关系，这通常被称为“流量-密度曲线”（FundamentalDiagram of Traffic Flow）。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs m"><span class="hljs-comment">% 初始化参数</span><br>clear; <br>clc;   <br>vmax <span class="hljs-built_in">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">% 最大速度</span><br>p <span class="hljs-built_in">=</span> <span class="hljs-number">0.6</span>;       <span class="hljs-comment">% 随机制动的概率（原始数据为0.8）</span><br>road_length <span class="hljs-built_in">=</span> <span class="hljs-number">1000</span>; <span class="hljs-comment">% 道路长度</span><br>simulation_steps <span class="hljs-built_in">=</span> <span class="hljs-number">1000</span>; <span class="hljs-comment">% 模拟步数</span><br>render_on <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">% 是否渲染图形界面</span><br>pause_on <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">% 是否在模拟中暂停</span><br>delay_on <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">% 是否在模拟中延迟</span><br>delay_length <span class="hljs-built_in">=</span> <span class="hljs-number">0.02</span>;    <span class="hljs-comment">% 延迟时间，用于控制帧率（10 FPS）</span><br><br><span class="hljs-comment">% 初始化道路和速度状态</span><br>road <span class="hljs-built_in">=</span> zeros(<span class="hljs-number">1</span>,road_length); <span class="hljs-comment">% 道路占用状态数组</span><br>road_next <span class="hljs-built_in">=</span> road; <span class="hljs-comment">% 下一状态的数组</span><br>velocities <span class="hljs-built_in">=</span> zeros(<span class="hljs-number">1</span>,road_length); <span class="hljs-comment">% 车辆速度状态数组</span><br>velocities_next <span class="hljs-built_in">=</span> velocities; <span class="hljs-comment">% 下一速度状态的数组</span><br><br><span class="hljs-comment">% 采样设置</span><br>num_samples <span class="hljs-built_in">=</span> <span class="hljs-number">2000</span>; <span class="hljs-comment">% 采样数量</span><br>samples <span class="hljs-built_in">=</span> zeros(<span class="hljs-number">2</span>,num_samples); <span class="hljs-comment">% 存储密度和流量的数组</span><br>density_step <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>/num_samples; <span class="hljs-comment">% 密度步长</span><br><br><span class="hljs-comment">% 初始化历史记录数组</span><br>history <span class="hljs-built_in">=</span> zeros(simulation_steps, road_length); <span class="hljs-comment">% 记录道路状态历史</span><br>velocity_history <span class="hljs-built_in">=</span> zeros(simulation_steps, road_length); <span class="hljs-comment">% 记录速度状态历史</span><br><br><span class="hljs-comment">% 打开图形界面</span><br>figure;<br><br><span class="hljs-comment">% 采样循环</span><br>for g<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:num_samples<br>    <span class="hljs-comment">% 生成不同密度的交通流</span><br>    road <span class="hljs-built_in">=</span> zeros(<span class="hljs-number">1</span>,road_length); <span class="hljs-comment">% 重置道路状态</span><br>    road_next <span class="hljs-built_in">=</span> road; <span class="hljs-comment">% 重置下一状态</span><br>    density <span class="hljs-built_in">=</span> g/num_samples; <span class="hljs-comment">% 当前密度</span><br><br>    <span class="hljs-comment">% 根据密度在道路上随机放置车辆</span><br>    for i<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:road_length<br>        <span class="hljs-built_in">if</span> rand &lt; density<br>            road(i) <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>;<br>        end<br>    end<br><br>    <span class="hljs-comment">% 如果开启渲染，显示当前道路状态</span><br>    <span class="hljs-built_in">if</span> render_on<br>        imshow(road);<br>        drawnow;<br>    end<br><br>    <span class="hljs-comment">% 模拟循环</span><br>    for i<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:simulation_steps<br>        <span class="hljs-comment">% 记录当前状态</span><br>        history(i, :) <span class="hljs-built_in">=</span> road;<br>        velocity_history(i,:) <span class="hljs-built_in">=</span> velocities;<br><br>        <span class="hljs-comment">% 速度更新</span><br>        for j<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:road_length<br>            <span class="hljs-built_in">if</span> road(j) <span class="hljs-built_in">=</span><span class="hljs-built_in">=</span> <span class="hljs-number">1</span><br>                <span class="hljs-comment">% 寻找前方 vmax 个单元格内没有车辆的最远距离</span><br>                distance <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>                bf <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">% 标志变量，表示是否找到车辆</span><br>                for k<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:vmax<br>                    distance <span class="hljs-built_in">=</span> k;<br>                    <span class="hljs-built_in">if</span> j+k <span class="hljs-built_in">&lt;=</span> road_length<br>                        index <span class="hljs-built_in">=</span> j+k;<br>                    <span class="hljs-built_in">else</span><br>                        index <span class="hljs-built_in">=</span> j+k-road_length; <span class="hljs-comment">% 处理循环道路的边界情况</span><br>                    end<br>                    <span class="hljs-built_in">if</span> road(index) <span class="hljs-built_in">=</span><span class="hljs-built_in">=</span> <span class="hljs-number">1</span><br>                        bf <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>;<br>                    end<br>                    <span class="hljs-built_in">if</span> bf <span class="hljs-built_in">=</span><span class="hljs-built_in">=</span> <span class="hljs-number">1</span>, break, end<br>                end<br><br>                <span class="hljs-comment">% 根据规则更新车辆速度</span><br>                <span class="hljs-built_in">if</span> velocities(j) &lt; vmax<br>                    velocities(j) <span class="hljs-built_in">=</span> velocities(j) + <span class="hljs-number">1</span>; <span class="hljs-comment">% 加速</span><br>                end<br>                <span class="hljs-built_in">if</span> (velocities(j) &gt; distance - <span class="hljs-number">1</span>) &amp;&amp; bf <span class="hljs-built_in">=</span><span class="hljs-built_in">=</span> <span class="hljs-number">1</span><br>                    velocities(j) <span class="hljs-built_in">=</span> distance - <span class="hljs-number">1</span>; <span class="hljs-comment">% 避免碰撞</span><br>                end<br>                <span class="hljs-built_in">if</span> rand &lt; p &amp;&amp; velocities(j) &gt; <span class="hljs-number">0</span><br>                    velocities(j) <span class="hljs-built_in">=</span> velocities(j) - <span class="hljs-number">1</span>; <span class="hljs-comment">% 随机减速</span><br>                end<br>            end<br>        end<br><br>        <span class="hljs-comment">% 移动更新</span><br>        for j<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:road_length<br>            <span class="hljs-built_in">if</span> road(j) <span class="hljs-built_in">=</span><span class="hljs-built_in">=</span> <span class="hljs-number">1</span><br>                <span class="hljs-built_in">if</span> j+velocities(j) <span class="hljs-built_in">&lt;=</span> road_length<br>                    index <span class="hljs-built_in">=</span> j+velocities(j);<br>                <span class="hljs-built_in">else</span><br>                    index <span class="hljs-built_in">=</span> j+velocities(j) - road_length; <span class="hljs-comment">% 处理循环道路的边界情况</span><br>                end<br>                <span class="hljs-comment">% 检测碰撞</span><br>                <span class="hljs-built_in">if</span> road_next(index) <span class="hljs-built_in">=</span><span class="hljs-built_in">=</span> <span class="hljs-number">1</span><br>                    disp(<span class="hljs-string">&#x27;Collision detected&#x27;</span>);<br>                end<br>                road_next(index) <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>;<br>                velocities_next(index) <span class="hljs-built_in">=</span> velocities(j);<br>            end<br>        end<br><br>        <span class="hljs-comment">% 更新道路和速度状态</span><br>        velocities <span class="hljs-built_in">=</span> velocities_next;<br>        road <span class="hljs-built_in">=</span> road_next;<br>        road_next <span class="hljs-built_in">=</span> zeros(<span class="hljs-number">1</span>,road_length);<br><br>        <span class="hljs-comment">% 如果开启渲染，显示当前道路状态</span><br>        <span class="hljs-built_in">if</span> render_on<br>            imshow(road);<br>            drawnow;<br>        end<br><br>        <span class="hljs-comment">% 如果开启暂停，等待用户操作</span><br>        <span class="hljs-built_in">if</span> pause_on<br>            pause;<br>        end<br><br>        <span class="hljs-comment">% 如果开启延迟，暂停一段时间</span><br>        <span class="hljs-built_in">if</span> delay_on<br>            pause(delay_length);<br>        end<br>    end<br><br>    <span class="hljs-comment">% 记录当前密度下的流量和密度</span><br>    velocity_history <span class="hljs-built_in">=</span> velocity_history.*history; <span class="hljs-comment">% 计算流量</span><br>    samples(:,g) <span class="hljs-built_in">=</span> [mean2(history) (sum(velocity_history(:))/sum(history(:)))*mean2(history)]; <span class="hljs-comment">% 计算平均密度和流量</span><br>    disp(<span class="hljs-string">&#x27;Sample step:&#x27;</span>)<br>    g <span class="hljs-comment">% 显示当前采样步骤</span><br>end<br><br><span class="hljs-comment">% 绘制流量-密度曲线</span><br>scatter(samples(<span class="hljs-number">1</span>,:), samples(<span class="hljs-number">2</span>,:));<br>axis([<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>]); <span class="hljs-comment">% 设置坐标轴范围</span><br>xlabel(<span class="hljs-string">&#x27;Density&#x27;</span>); <span class="hljs-comment">% X轴标签</span><br>ylabel(<span class="hljs-string">&#x27;Flow (normalized)&#x27;</span>); <span class="hljs-comment">% Y轴标签</span><br>title(<span class="hljs-string">&#x27;Flow-density Curve&#x27;</span>); <span class="hljs-comment">% 图形标题</span><br><br><span class="hljs-comment">% 可以选择显示整个模拟过程中的道路状态或流量状态</span><br><span class="hljs-comment">%imshow(history);</span><br><span class="hljs-comment">%ts(simulation_steps,history);</span><br></code></pre></td></tr></table></figure><ol type="1"><li><strong>初始化变量</strong>:<ul><li><code>vmax = 10;</code>：设置车辆的最大速度。</li><li><code>p = 0.6;</code>：随机制动的概率。</li><li><code>road_length = 1000;</code>：道路长度，单位为车道单元。</li><li><code>simulation_steps = 1000;</code>：仿真步数。</li><li><code>render_on</code>, <code>pause_on</code>,<code>delay_on</code>: 控制是否渲染图形、暂停和延迟的布尔变量。</li><li><code>delay_length = 0.02;</code>：控制每帧渲染间隔时间，这里对应大约10帧每秒的刷新率。</li></ul></li><li><strong>定义数组</strong>:<ul><li>初始化道路状态数组<code>road</code>和<code>road_next</code>，以及速度状态数组<code>velocities</code>和<code>velocities_next</code>，用于存储车道上车辆的分布和速度。</li></ul></li><li><strong>采样循环</strong> (<code>for g=1:num_samples</code>):<ul><li>这个循环用于在不同的车辆密度下进行多次模拟。</li><li>计算当前的密度并随机生成初始交通分布。</li><li>如果<code>render_on</code>为真，则显示当前的道路状态。</li></ul></li><li><strong>仿真循环</strong> (<code>for i=1:simulation_steps</code>):<ul><li><strong>速度更新</strong>:根据前方空闲空间调整车辆速度，考虑加速、碰撞避免和随机制动。</li><li><strong>移动更新</strong>:根据当前速度移动车辆，并处理道路两端的环绕逻辑。</li><li>检查碰撞，更新<code>road_next</code>和<code>velocities_next</code>，然后将它们应用于当前状态。</li><li>再次检查是否需要渲染、暂停或延迟。</li></ul></li><li><strong>后处理</strong>:<ul><li>在每次采样结束后，计算并记录平均密度和流量（流率），存储于<code>samples</code>矩阵中。</li><li>最后，使用散点图展示所有样本点，横坐标为密度，纵坐标为归一化后的流量，得到流量-密度曲线。</li></ul></li><li><strong>可视化</strong>:<ul><li>使用MATLAB的图形功能绘制流量-密度曲线，帮助直观理解不同密度下的平均流量变化。</li></ul></li></ol><h3 id="注意点"><strong>注意点：</strong></h3><p>这里的"密度"（density）是指在模拟的道路长度单位内单位时间内存在的车辆数，或者说是单位长度车道上的车辆数。具体到代码实现中，它是通过变量<code>density = g/num_samples;</code>来定义的，其中<code>g</code>是当前的采样序号，<code>num_samples</code>是总的采样数量，因此<code>density</code>实质上代表了一个从0到1范围内的比例值，用来模拟从完全没有车辆（密度为0）到道路完全被车辆占据（密度接近1）的各种情况。这个密度值决定了初始时在模拟道路上放置车辆的随机概率，即<code>if rand &lt; density</code>这一条件控制下的车辆分布。</p><p><code>ts</code>的函数，用于绘制交通模拟的时间-空间图。时间-空间图是一种展示随时间变化的空间分布情况的图表，常用于交通流模拟中，以观察车辆在道路上随时间的移动情况。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs m">function ts(simulation_steps,history)<br>figTS<span class="hljs-built_in">=</span>figure;<br>axes1 <span class="hljs-built_in">=</span> axes(<span class="hljs-string">&#x27;Parent&#x27;</span>,figTS,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Arial&#x27;</span>);<br>for i<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:<span class="hljs-number">1</span>:simulation_steps<br>    [~,col]<span class="hljs-built_in">=</span>find(history(i,:)<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span><span class="hljs-number">1</span>);<br>    plot(i*ones(<span class="hljs-number">1</span>,length(col)),col,<span class="hljs-string">&#x27;k.&#x27;</span>);<br>    hold on<br>end<br>xlabel(<span class="hljs-string">&#x27;Time&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Arial&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;Space&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Arial&#x27;</span>)<br></code></pre></td></tr></table></figure><ol type="1"><li><p><code>function ts(simulation_steps,history)</code>：定义了一个名为<code>ts</code>的函数，它接受两个参数：<code>simulation_steps</code>（模拟步数）和<code>history</code>（记录每一步道路状态的矩阵）。</p></li><li><p><code>figTS=figure;</code>：创建一个新的图形窗口。</p></li><li><p><code>axes1 = axes('Parent',figTS,'FontSize',12,'FontName','Arial');</code>：在图形窗口中创建一个坐标轴，设置字体大小为12，字体类型为Arial。</p></li><li><p><code>for i=1:1:simulation_steps</code>：开始一个循环，从1到<code>simulation_steps</code>（模拟步数）。</p></li><li><p><code>[~,col]=find(history(i,:)==1);</code>：在每次模拟步<code>i</code>的历史记录中，找到所有值为1（表示有车辆）的位置，并将其存储在<code>col</code> 变量中。<code>find</code>函数返回的首个输出（在这里被忽略，用 <code>~</code>表示）是行索引，第二个输出是列索引。</p></li><li><p><code>plot(i*ones(1,length(col)),col,'k.');</code>：在坐标轴上绘制点。<code>i*ones(1,length(col))</code>创建一个与 <code>col</code> 长度相同的数组，所有元素都是当前的模拟步数<code>i</code>，代表时间。<code>col</code>代表空间位置。<code>'k.'</code>指定了点的颜色和样式，这里是黑色圆点。</p></li><li><p><code>hold on</code>：保持当前的坐标轴和图形，以便在同一个图上绘制更多的数据。</p></li><li><p><code>xlabel('Time','FontSize',12,'FontName','Arial')</code>：设置X 轴的标签为 "Time"，并设置字体大小和类型。</p></li><li><p><code>ylabel('Space','FontSize',12,'FontName','Arial')</code>：设置Y 轴的标签为 "Space"，并设置字体大小和类型。</p></li></ol><p>上述函数的功能是绘制出每个时间步长上车辆的位置，从而形成时间-空间图。图中的每个点代表在特定时间步长下道路上的一个车辆位置。通过观察这个图，可以直观地看到车辆随时间在道路上的分布和移动情况。</p>]]></content>
    
    
    <categories>
      
      <category>数模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>吸引-排斥优化算法</title>
    <link href="/2024/04/26/xi-yin-pai-chi-you-hua-suan-fa/"/>
    <url>/2024/04/26/xi-yin-pai-chi-you-hua-suan-fa/</url>
    
    <content type="html"><![CDATA[<h2 id="论文参考">论文参考</h2><p>Karol Cymerys, Mariusz Oszust,Attraction–Repulsion OptimizationAlgorithm for Global Optimization Problems,Swarm and EvolutionaryComputation,Volume 84, 2024, 101459,https://doi.org/10.1016/j.swevo.2023.101459.</p><h2 id="demoglobaloptimization.m">demoGlobalOptimization.m</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs m"><span class="hljs-comment">% Attraction - Repulsion Optimization Algorithm (AROA) for Global Optimization Problems</span><br><span class="hljs-comment">% K. Cymerys, M. Oszust </span><br><br>clear <span class="hljs-built_in">all</span><br>clc<br><br>SearchAgents_no <span class="hljs-built_in">=</span> <span class="hljs-number">40</span>;    <span class="hljs-comment">%   Number of search agents  </span><br>Max_FES <span class="hljs-built_in">=</span> <span class="hljs-number">3000</span>;          <span class="hljs-comment">% Maximum number of fitness function evaluations</span><br>NoRepeats <span class="hljs-built_in">=</span> <span class="hljs-number">3</span>;           <span class="hljs-comment">% </span><br>  <br>fobj <span class="hljs-built_in">=</span> @(x)F22(x);       <span class="hljs-comment">%just a function</span><br><br>dim <span class="hljs-built_in">=</span> <span class="hljs-number">100</span>;<br>lb <span class="hljs-built_in">=</span> -<span class="hljs-number">5.12</span> * ones(<span class="hljs-number">1</span>,dim);<br>ub <span class="hljs-built_in">=</span> <span class="hljs-number">5.12</span> * ones(<span class="hljs-number">1</span>,dim);<br><span class="hljs-comment">%%fmin = 0; </span><br><br>outputF<span class="hljs-built_in">=</span>[];<br>outputX<span class="hljs-built_in">=</span>[];<br>    for k <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>:NoRepeats<br><br>        tic;<br><br>            [Best_score, Best_pos, cg_curve] <span class="hljs-built_in">=</span> AROA(SearchAgents_no,dim,lb,ub, fobj,Max_FES);<br><br>        toc <br><br>       Best_score            <br>       outputF <span class="hljs-built_in">=</span> [outputF;Best_score];<br>       outputX <span class="hljs-built_in">=</span> [outputX;Best_pos];<br><br>    end<br>[Y,I] <span class="hljs-built_in">=</span> min(outputF) ;<br>Y<br>meanV <span class="hljs-built_in">=</span> mean(outputF)<br>stdV <span class="hljs-built_in">=</span> std(outputF)<br></code></pre></td></tr></table></figure><p>定义参数与设置：</p><p><code>SearchAgents_no = 40</code>：设定搜索代理（即种群个体）的数量为40。</p><p><code>Max_FES = 3000</code>：设置最大适应度函数评估次数为3000，作为算法的迭代终止条件。</p><p><code>NoRepeats = 3</code>：设置算法重复运行次数为3次，以获取多次运行结果的统计信息。</p><p>定义目标函数与问题维度：</p><p><code>fobj = @(x)F22(x)</code>：将目标函数F22封装为匿名函数fobj，用于计算给定解x的目标函数值。</p><p><code>dim = 100</code>：设定问题的维度为100，即目标函数的自变量为100维向量。</p><p><code>lb = -5.12 * ones(1,dim)</code>：设定搜索空间下界为-5.12的100维全1向量，即每个自变量的最小值均为-5.12。</p><p><code>ub = 5.12 * ones(1,dim)</code>：设定搜索空间上界为5.12的100维全1向量，即每个自变量的最大值均为5.12。</p><p><code>%%fmin = 0;</code>：注释行，未启用（可能原本打算设置目标函数最小值为0，但被注释掉了）。</p><p>初始化结果存储数组：</p><p><code>outputF=[]</code>：创建空矩阵outputF，用于存储每次运行得到的最佳目标函数值。</p><p><code>outputX=[]</code>：创建空矩阵outputX，用于存储每次运行得到的最佳解（即最优自变量值）。</p><p>主循环：重复运行AROA算法并记录结果</p><p><code>for k = 1:NoRepeats</code>：对于设定的重复次数（3次），执行以下操作。1. <code>tic</code>：开始计时，记录本次AROA算法运行时间。 2.<code>[Best_score, Best_pos, cg_curve] = AROA(SearchAgents_no,dim,lb,ub, fobj,Max_FES);</code>：调用AROA函数，输入参数包括搜索代理数量、问题维度、搜索空间上下界、目标函数以及最大适应度函数评估次数。函数返回本次运行的最佳目标函数值（Best_score）、最佳解（Best_pos）以及收敛曲线数据（cg_curve）。3. <code>toc</code>：结束计时，输出本次AROA算法运行时间。 4.<code>Best_score</code>：显示本次运行的最佳目标函数值。 5.<code>outputF = [outputF;Best_score];</code>：将本次最佳目标函数值添加到outputF矩阵中。6.<code>outputX = [outputX;Best_pos];</code>：将本次最佳解添加到outputX矩阵中。</p><p>统计分析多次运行结果：</p><p><code>[Y,I] = min(outputF)</code>：从outputF矩阵中找出最小目标函数值（Y）及其对应的索引（I）。</p><p><code>Y</code>：显示最小目标函数值。</p><p><code>meanV = mean(outputF)</code>：计算outputF矩阵中所有最佳目标函数值的平均值（meanV）。</p><p><code>stdV = std(outputF)</code>：计算outputF矩阵中所有最佳目标函数值的标准差（stdV）。</p><p>综上所述，该代码使用AROA算法对具有100维搜索空间的问题进行全局优化，重复运行3次，并记录每次运行的最佳解和目标函数值。最后，对多次运行结果进行统计分析，输出最小目标函数值、平均值及标准差。</p><h2 id="f22.m">F22.m</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs m">function  y  <span class="hljs-built_in">=</span> F22(x)<br> <br>sum <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>for ii <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>:length(x) <br>sum <span class="hljs-built_in">=</span> sum + x(ii)^<span class="hljs-number">2</span>;<br>end<br><br>y <span class="hljs-built_in">=</span> sum;<br></code></pre></td></tr></table></figure><h2 id="aroa.m">AROA.m</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs m">function [fbest, xbest, Convergence_curve] <span class="hljs-built_in">=</span> AROA(N, dim, lb, ub, fobj, maxEvals)<br>    <br>    <span class="hljs-comment">% Algorithm parameters definition</span><br>    c <span class="hljs-built_in">=</span> <span class="hljs-number">0.95</span>;<br>    fr1 <span class="hljs-built_in">=</span> <span class="hljs-number">0.15</span>;<br>    fr2 <span class="hljs-built_in">=</span> <span class="hljs-number">0.6</span>;<br>    p1 <span class="hljs-built_in">=</span> <span class="hljs-number">0.2</span>;  <br>    p2 <span class="hljs-built_in">=</span> <span class="hljs-number">0.8</span>; <br>    Ef <span class="hljs-built_in">=</span> <span class="hljs-number">0.4</span>;<br>    tr1 <span class="hljs-built_in">=</span> <span class="hljs-number">0.9</span>;<br>    tr2 <span class="hljs-built_in">=</span> <span class="hljs-number">0.85</span>; <br>    tr3 <span class="hljs-built_in">=</span> <span class="hljs-number">0.9</span>;<br>    <span class="hljs-comment">% Algorithm parameters definition</span><br>    <br>    tmax <span class="hljs-built_in">=</span> ceil((maxEvals - N)/(<span class="hljs-number">2</span>*N));<br>    evalCounter <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br><br>    Convergence_curve <span class="hljs-built_in">=</span> zeros(<span class="hljs-number">1</span>,tmax);<br>    Xmin <span class="hljs-built_in">=</span> repmat(ones(<span class="hljs-number">1</span>,dim).*lb,N,<span class="hljs-number">1</span>);<br>    Xmax <span class="hljs-built_in">=</span> repmat(ones(<span class="hljs-number">1</span>,dim).*ub,N,<span class="hljs-number">1</span>);<br><br><br>    <span class="hljs-comment">% random initialization - Eq (3)</span><br>    X <span class="hljs-built_in">=</span> rand(N,dim).*(ub-lb) + lb;<br>    [X, F, evalCounter] <span class="hljs-built_in">=</span> evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals);<br>    [fbest, ibest] <span class="hljs-built_in">=</span> min(F);<br>    xbest <span class="hljs-built_in">=</span> X(ibest,:);<br>    <span class="hljs-comment">% random initialization - Eq (3)</span><br><br>    X_memory <span class="hljs-built_in">=</span> X;<br>    F_memory <span class="hljs-built_in">=</span> F;<br><br>    <span class="hljs-comment">% Main loop</span><br>    for t<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:tmax<br>        D <span class="hljs-built_in">=</span> squareform(pdist(X, <span class="hljs-string">&#x27;squaredeuclidean&#x27;</span>));  <span class="hljs-comment">% Eq (4) </span><br>        m <span class="hljs-built_in">=</span> tanh(t, tmax, [-<span class="hljs-number">2</span>, <span class="hljs-number">7</span>]);   <span class="hljs-comment">% Eq (11)    </span><br><br>        for i<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:N<br>           Dimax <span class="hljs-built_in">=</span> max(D(i,:));<br>           k <span class="hljs-built_in">=</span> floor((<span class="hljs-number">1</span>-t/tmax)*N)+<span class="hljs-number">1</span>;  <span class="hljs-comment">% Eq (9)</span><br>           [~, neighbors] <span class="hljs-built_in">=</span> sort(D(i,:));<br>           <br>           <span class="hljs-comment">% Attraction-Repulsion operator % Eq (6)</span><br>           delta_ni <span class="hljs-built_in">=</span> zeros(<span class="hljs-number">1</span>,dim);<br>           for j<span class="hljs-built_in">=</span>neighbors(<span class="hljs-number">1</span>:k)<br>                I <span class="hljs-built_in">=</span> <span class="hljs-number">1</span> - (D(i,j)/Dimax);  <span class="hljs-comment">% Eq (7)</span><br>                s <span class="hljs-built_in">=</span> sign(F(j)-F(i));  <span class="hljs-comment">% Eq (8)</span><br>                delta_ni <span class="hljs-built_in">=</span> delta_ni + c*(X_memory(i,:)-X_memory(j,:))*I*s;<br>           end<br>           ni <span class="hljs-built_in">=</span> delta_ni/N;<br>           <span class="hljs-comment">% Attraction-Repulsion operator % Eq (6)</span><br><br>           <span class="hljs-comment">% Attraction to best solusion Eq (10)</span><br>           <span class="hljs-built_in">if</span> rand &lt; p1<br>               bi <span class="hljs-built_in">=</span> m*c.*(rand(<span class="hljs-number">1</span>,dim).*xbest - X_memory(i,:));<br>           <span class="hljs-built_in">else</span><br>               bi <span class="hljs-built_in">=</span> m*c.*(xbest - X_memory(i,:));<br>           end<br>           <span class="hljs-comment">% Attraction to best solusion Eq (10)</span><br><br>           <span class="hljs-comment">% Local search operators Eq (15)</span><br>           <span class="hljs-built_in">if</span> rand &lt; p2<br>               <span class="hljs-built_in">if</span> rand &gt; <span class="hljs-number">0.5</span>*t/tmax + <span class="hljs-number">0.25</span><br>                   u1 <span class="hljs-built_in">=</span> rand(<span class="hljs-number">1</span>, dim) &gt; tr1;<br>                   ri <span class="hljs-built_in">=</span> u1.*random(<span class="hljs-string">&#x27;Normal&#x27;</span>, zeros(<span class="hljs-number">1</span>,dim), fr1*(<span class="hljs-number">1</span>-t/tmax)*(ub-lb));  <span class="hljs-comment">% Eq (12)</span><br>               <span class="hljs-built_in">else</span><br>                   <span class="hljs-comment">% Eq (13)</span><br>                   u2 <span class="hljs-built_in">=</span> rand(<span class="hljs-number">1</span>,dim) &gt; tr2;<br>                   w <span class="hljs-built_in">=</span> index_roulette_wheel_selection(F, k);<br>                   Xw <span class="hljs-built_in">=</span> X_memory(w,:);<br>                   <span class="hljs-built_in">if</span> rand &lt; <span class="hljs-number">0.5</span><br>                       ri <span class="hljs-built_in">=</span> fr2*u2.*(<span class="hljs-number">1</span>-t/tmax).*sin(<span class="hljs-number">2</span>*pi*rand(<span class="hljs-number">1</span>,dim)).*abs(rand(<span class="hljs-number">1</span>,dim).*Xw-X_memory(i,:));<br>                   <span class="hljs-built_in">else</span><br>                       ri <span class="hljs-built_in">=</span> fr2*u2.*(<span class="hljs-number">1</span>-t/tmax).*cos(<span class="hljs-number">2</span>*pi*rand(<span class="hljs-number">1</span>,dim)).*abs(rand(<span class="hljs-number">1</span>,dim).*Xw-X_memory(i,:));<br>                   end<br>                   <span class="hljs-comment">% Eq (13)</span><br>               end<br>           <span class="hljs-built_in">else</span><br>               u3 <span class="hljs-built_in">=</span> rand(<span class="hljs-number">1</span>,dim) &gt; tr3;<br>               ri <span class="hljs-built_in">=</span> u3.*(<span class="hljs-number">2</span>*rand(<span class="hljs-number">1</span>,dim)-ones(<span class="hljs-number">1</span>,dim)) .* (ub-lb);  <span class="hljs-comment">% Eq (14)</span><br>           end<br>           <span class="hljs-comment">% Local search operators Eq (15)</span><br><br>           X(i,:) <span class="hljs-built_in">=</span> X(i,:) + ni + bi + ri;  <span class="hljs-comment">% Eq(16)</span><br>        end<br>        <br>        [X, F, evalCounter] <span class="hljs-built_in">=</span> evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals);<br>        [fbest_candidate, ibest_candidate] <span class="hljs-built_in">=</span> min(F);<br><br>        <span class="hljs-built_in">if</span> fbest_candidate &lt; fbest<br>            fbest <span class="hljs-built_in">=</span> fbest_candidate;<br>            xbest <span class="hljs-built_in">=</span> X(ibest_candidate, :);<br>        end<br><br>    [X, F] <span class="hljs-built_in">=</span> memory_operator(X, F, X_memory, F_memory);  <span class="hljs-comment">% Eq (18)</span><br>        X_memory <span class="hljs-built_in">=</span> X;<br>        F_memory <span class="hljs-built_in">=</span> F; <br><br>        <span class="hljs-comment">% Eq (17) </span><br>        CF<span class="hljs-built_in">=</span>(<span class="hljs-number">1</span>-t/tmax)^<span class="hljs-number">3</span> ; <br>        <span class="hljs-built_in">if</span> rand &lt; Ef<br>            u4 <span class="hljs-built_in">=</span> rand(N,dim) &lt; Ef;                                                                                              <br>            X <span class="hljs-built_in">=</span> X + CF*(u4.*(rand(N,dim).*(Xmax-Xmin) + Xmin));<br>        <span class="hljs-built_in">else</span><br>            r7 <span class="hljs-built_in">=</span> rand();<br>            X <span class="hljs-built_in">=</span> X + (CF*(<span class="hljs-number">1</span>-r7) + r7)*(X(randperm(N),:) - X(randperm(N),:));<br>        end<br><span class="hljs-comment">% Eq (17)</span><br><br>        [X, F, evalCounter] <span class="hljs-built_in">=</span> evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals);<br>        [fbest_candidate, ibest_candidate] <span class="hljs-built_in">=</span> min(F);<br><br>        <span class="hljs-built_in">if</span> fbest_candidate &lt; fbest<br>            fbest <span class="hljs-built_in">=</span> fbest_candidate;<br>            xbest <span class="hljs-built_in">=</span> X(ibest_candidate, :);<br>        end<br> <br>        [X, F] <span class="hljs-built_in">=</span> memory_operator(X, F, X_memory, F_memory);  <span class="hljs-comment">% Eq (18)</span><br>        X_memory <span class="hljs-built_in">=</span> X;<br>        F_memory <span class="hljs-built_in">=</span> F; <br><br>      Convergence_curve(t) <span class="hljs-built_in">=</span> fbest;<br>    end<br>end<br><br>function [X, F, evalCounter] <span class="hljs-built_in">=</span> evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals)<br>    N <span class="hljs-built_in">=</span> size(X,<span class="hljs-number">1</span>);<br>    F <span class="hljs-built_in">=</span> Inf(N,<span class="hljs-number">1</span>);<br>    X <span class="hljs-built_in">=</span> max(lb, min(ub, X)); <span class="hljs-comment">% Check space bounds</span><br>    <br>    for i<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:N<br>        <span class="hljs-built_in">if</span> evalCounter &gt;<span class="hljs-built_in">=</span> maxEvals<br>            break<br>        end<br>        F(i) <span class="hljs-built_in">=</span> fobj(X(i,:));<br>        evalCounter <span class="hljs-built_in">=</span> evalCounter + <span class="hljs-number">1</span>;<br>    end<br>end<br><br>function [X, F] <span class="hljs-built_in">=</span> memory_operator(X, F, X_memory, F_memory)<br>    dim <span class="hljs-built_in">=</span> size(X, <span class="hljs-number">2</span>);<br>    Inx <span class="hljs-built_in">=</span> F_memory &lt; F;<br>    Indx <span class="hljs-built_in">=</span> repmat(Inx,<span class="hljs-number">1</span>,dim);<br>    X <span class="hljs-built_in">=</span> Indx.*X_memory + ~Indx.*X;<br>    F <span class="hljs-built_in">=</span> Inx.*F_memory + ~Inx.*F;<br>end<br><br>function [y] <span class="hljs-built_in">=</span> tanh(t, tmax, range)<br>    z <span class="hljs-built_in">=</span> <span class="hljs-number">2</span>*(t/tmax*(range(<span class="hljs-number">2</span>)-range(<span class="hljs-number">1</span>)) + range(<span class="hljs-number">1</span>));<br>    y <span class="hljs-built_in">=</span> <span class="hljs-number">0.5</span>*((exp(z)-<span class="hljs-number">1</span>)/(exp(z)+<span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);<br>end<br><br><br>function [selected_index] <span class="hljs-built_in">=</span> index_roulette_wheel_selection(F, k)<br>    fitness <span class="hljs-built_in">=</span> F(<span class="hljs-number">1</span>:k);<br>    weights <span class="hljs-built_in">=</span> max(fitness) - fitness;<br>    weights <span class="hljs-built_in">=</span> cumsum(weights/sum(weights));<br>    <br>    selected_index <span class="hljs-built_in">=</span> roulette_wheel_selection(weights);<br>end<br><br>function [selected_index] <span class="hljs-built_in">=</span> roulette_wheel_selection(weights)<br>    r <span class="hljs-built_in">=</span> rand();<br>    selected_index <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>;<br>    for index<span class="hljs-built_in">=</span>size(weights,<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">if</span> r <span class="hljs-built_in">&lt;=</span> weights(index)<br>            selected_index <span class="hljs-built_in">=</span> index;<br>            break;<br>        end<br>    end<br>end<br></code></pre></td></tr></table></figure><p><strong>解释：</strong> - <code>N</code>: 搜索代理（种群个体）数量 -<code>dim</code>: 问题维度 - <code>lb</code>: 搜索空间下界向量 -<code>ub</code>: 搜索空间上界向量 - <code>fobj</code>:目标函数（匿名函数） - <code>maxEvals</code>: 最大适应度函数评估次数</p><p><strong>函数返回以下输出结果：</strong></p><ul><li><code>fbest</code>: 找到的最小目标函数值</li><li><code>xbest</code>: 对应最小目标函数值的最优解</li><li><code>Convergence_curve</code>: 收敛曲线数据</li></ul><p><strong>算法参数定义</strong> -定义了AROA算法中涉及的多个常数参数，如c、fr1、fr2等，这些参数用于控制算法中不同操作的比例、强度等。</p><p><strong>初始化</strong> -计算最大迭代次数<code>tmax</code>，初始化评价计数器<code>evalCounter</code>。-初始化用于记录全局最优解的<code>fbest</code>、<code>xbest</code>，以及用于记录收敛曲线的<code>Convergence_curve</code>。- 初始化搜索空间边界向量<code>Xmin</code>、<code>Xmax</code>。 -随机生成初始种群<code>X</code>，并对其进行适应度评估（通过<code>evaluate_population</code>函数），得到目标函数值<code>F</code>。根据<code>F</code>找到当前全局最优解<code>fbest</code>、<code>xbest</code>，以及保存当前种群状态的<code>X_memory</code>和<code>F_memory</code>。</p><p><strong>主循环（tmax次迭代）</strong> -计算种群间距离矩阵<code>D</code>（欧氏距离）。 -根据当前迭代次数<code>t</code>计算参数<code>m</code>。 -对每个搜索代理（<code>i</code>）执行以下操作： - 计算吸引力-排斥力操作：- 计算当前搜索代理与其他邻居间的吸引力-排斥力向量<code>delta_ni</code>。- 合并所有邻居的贡献得到<code>ni</code>。 - 吸引至全局最优解操作： -根据概率<code>p1</code>决定是否使用随机缩放的全局最优解。 -计算吸引至全局最优解的向量<code>bi</code>。 - 局部搜索操作： -根据概率<code>p2</code>决定采用哪种局部搜索策略（高斯扰动、邻域扰动或均匀扰动）。- 根据所选策略计算局部搜索向量<code>ri</code>。 -更新搜索代理位置：<code>X(i,:) = X(i,:) + ni + bi + ri</code>。 -对更新后的种群<code>X</code>进行适应度评估（通过<code>evaluate_population</code>函数），并检查是否找到新的全局最优解。-执行记忆操作（通过<code>memory_operator</code>函数），更新种群<code>X</code>和目标函数值<code>F</code>，同时更新记忆中的种群状态<code>X_memory</code>和<code>F_memory</code>。-执行混沌扰动操作，对种群进行混沌移动，再次进行适应度评估并检查全局最优解。- 再次执行记忆操作，更新相关变量。 -记录当前迭代的全局最优解<code>fbest</code>至收敛曲线<code>Convergence_curve</code>。</p><p><strong>辅助函数</strong> -<code>evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals)</code>:评估种群<code>X</code>在目标函数<code>fobj</code>下的适应度，确保解位于搜索空间内，并更新评价计数器。- <code>memory_operator(X, F, X_memory, F_memory)</code>:根据记忆中的最优解和当前种群的最优解，选择保留更好的解。 -<code>tanh(t, tmax, range)</code>:计算双曲正切函数（tanh）的值，用于调整算法参数。 -<code>index_roulette_wheel_selection(F, k)</code>:使用轮盘赌选择法在前<code>k</code>个个体中按适应度比例选取一个个体的索引。- <code>roulette_wheel_selection(weights)</code>:实现基本的轮盘赌选择算法，根据权重向量<code>weights</code>随机选择一个索引。</p><p>选一个函数做测试（2维0-10范围的最小值为:-18.5547） <figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs m">function z <span class="hljs-built_in">=</span> F22(x)<br>    X <span class="hljs-built_in">=</span> x(:, <span class="hljs-number">1</span>);<br>    Y <span class="hljs-built_in">=</span> x(:, <span class="hljs-number">2</span>);    <br>    <span class="hljs-comment">%z = X.^2 + Y.^2 + (25 * (sin(X).^2 + sin(Y).^2));</span><br>    z<span class="hljs-built_in">=</span>X.*sin(<span class="hljs-number">4</span>.*X)+ <span class="hljs-number">1.1</span>.*Y.*sin(<span class="hljs-number">2</span>.*Y);<br>    y <span class="hljs-built_in">=</span> z;<br>end <br></code></pre></td></tr></table></figure><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs m">...<br>Y <span class="hljs-built_in">=</span><br><br>  -<span class="hljs-number">18.5547</span><br><br>meanV <span class="hljs-built_in">=</span><br><br>  -<span class="hljs-number">18.5547</span><br><br>stdV <span class="hljs-built_in">=</span><br><br>   <span class="hljs-number">1.4862</span>e-<span class="hljs-number">14</span><br>&gt;&gt; <br></code></pre></td></tr></table></figure></p><p>测试函数： ## Rastrigin <figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs m">function z <span class="hljs-built_in">=</span> F22(x)<br><span class="hljs-comment">% F22- Rastrigin  lower=[-5.12], upper=[5.12] gminimum=[0], dim=30</span><br>n <span class="hljs-built_in">=</span> size(x, <span class="hljs-number">2</span>);<br>A <span class="hljs-built_in">=</span> <span class="hljs-number">10</span>;<br>z <span class="hljs-built_in">=</span> (A * n) + (sum(x .^<span class="hljs-number">2</span> - A * cos(<span class="hljs-number">2</span> * pi .* x), <span class="hljs-number">2</span>));<br>end<br></code></pre></td></tr></table></figure> <figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs m">Y <span class="hljs-built_in">=</span><br><br>   <span class="hljs-number">1.0630</span>e-<span class="hljs-number">11</span><br><br>meanV <span class="hljs-built_in">=</span><br><br>   <span class="hljs-number">24.0180</span><br><br>stdV <span class="hljs-built_in">=</span><br><br>   <span class="hljs-number">23.2159</span><br></code></pre></td></tr></table></figure>Rastrigin函数是一个典型的非线性多峰函数，在搜索区域内存在许多极大值和极小值，导致寻找全局最小值比较困难，常用来测试寻优算法的性能。Rastrigin函数表达式和函数图像如下：<img src="https://pic.imgdb.cn/item/662bded90ea9cb1403fa9b7c.png"alt="alt text" /> <img src="" alt="alt text" /></p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs m">clc<br>clear<br>close <span class="hljs-built_in">all</span><br>[x,y]<span class="hljs-built_in">=</span> meshgrid(-<span class="hljs-number">5</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">5</span>);<br><br>z <span class="hljs-built_in">=</span> x.^<span class="hljs-number">2</span>+y.^<span class="hljs-number">2</span>+(<span class="hljs-number">0.5</span>.*i.*x).^<span class="hljs-number">2</span>+(<span class="hljs-number">0.5</span>.*i*y).^<span class="hljs-number">2</span>+(<span class="hljs-number">0.5</span>.*i.*x).^<span class="hljs-number">4</span>+(<span class="hljs-number">0.5</span>.*i.*y).^<span class="hljs-number">4</span>;<br><br>xx<span class="hljs-built_in">=</span><span class="hljs-number">15</span>*rand(<span class="hljs-number">30</span>,<span class="hljs-number">1</span>)-<span class="hljs-number">5</span>;<br>yy<span class="hljs-built_in">=</span><span class="hljs-number">15</span>*rand(<span class="hljs-number">30</span>,<span class="hljs-number">1</span>)-<span class="hljs-number">5</span>;<br>zz <span class="hljs-built_in">=</span> xx.^<span class="hljs-number">2</span>+yy.^<span class="hljs-number">2</span>+(<span class="hljs-number">0.5</span>.*i.*xx).^<span class="hljs-number">2</span>+(<span class="hljs-number">0.5</span>.*i*yy).^<span class="hljs-number">2</span>+(<span class="hljs-number">0.5</span>.*i.*xx).^<span class="hljs-number">4</span>+(<span class="hljs-number">0.5</span>.*i.*yy).^<span class="hljs-number">4</span>;<br><br>[nx,ny] <span class="hljs-built_in">=</span> min(z);<br>[mx,my] <span class="hljs-built_in">=</span> min(nx);<br>figure<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>surf(x,y,z)<br>hold on<br>plot3(xx,yy,zz,<span class="hljs-string">&#x27;k*&#x27;</span>)<span class="hljs-comment">%,&#x27;MarkerFaceColor&#x27;,&#x27;r&#x27;</span><br>shading interp<br>xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>zlabel(<span class="hljs-string">&#x27;f&#x27;</span>)<br>colormap(jet)<br>view([-<span class="hljs-number">107</span> <span class="hljs-number">49</span>])<br>set(gca,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>)<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>surf(x,y,z)<br>hold on<br>plot3(x(ny(<span class="hljs-number">1</span>),my),y(ny(<span class="hljs-number">1</span>),my),mx,<span class="hljs-string">&#x27;ro&#x27;</span>,<span class="hljs-string">&#x27;MarkerFaceColor&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;MarkerSize&#x27;</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">%,&#x27;MarkerFaceColor&#x27;,&#x27;r&#x27;</span><br>shading interp<br>xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>zlabel(<span class="hljs-string">&#x27;f&#x27;</span>)<br>view([-<span class="hljs-number">107</span> <span class="hljs-number">49</span>])<br>colormap(jet)<br>set(gca,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>)<br></code></pre></td></tr></table></figure><h2 id="schwefels-problem-1.2">Schwefel’s Problem 1.2</h2><p>Schwefel’s Problem 1.2</p><p>https://al-roomi.org/component/content/article?id=188:schwefel-s-function-no-1-2-double-sum-or-rotated-hyper-ellipsoid-function</p><p>https://www.oreilly.com/library/view/evolutionary-computation-with/9781848218079/16_appendix01.xhtml</p><p>https://blog.csdn.net/abc991835105/article/details/127936204</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs m">function z <span class="hljs-built_in">=</span> F2(x)<br><span class="hljs-comment">% F22- Schwefel 1.2 lower=[-100], upper=[100], gminimum=[0], dim=30</span><br>z <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>v1 <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>dim<span class="hljs-built_in">=</span>size(x,<span class="hljs-number">2</span>);<br>for i <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>:dim<br>    v1<span class="hljs-built_in">=</span><span class="hljs-number">0</span>;<br>    for j <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>: i<br>        v1 <span class="hljs-built_in">=</span> v1 + x(:,j);<br>    end<br>    z <span class="hljs-built_in">=</span> z + v1.^<span class="hljs-number">2</span>;<br>end<br>end<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109c81.jpg"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109d04.jpg"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109d2b.jpg"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109c57.jpg"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109c0b.jpg"alt="alt text" /></p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs m"><span class="hljs-comment">% Schwefel&#x27;s Problem # 1.2 (Double-Sum or Rotated Hyper-Ellipsoid Function)</span><br><span class="hljs-comment">% Range of initial points: -100 &lt;= xj &lt;= 100 , j=1,2,...,n</span><br><span class="hljs-comment">% Global maxima: (x1,x2,...,xn)=0</span><br><span class="hljs-comment">% f(X)=0</span><br><span class="hljs-comment">% Coded by: Ali R. Alroomi | Last Update: 07 June 2015 | www.al-roomi.org</span><br>    <br>clear<br>clc<br>warning off<br>    <br>x1min<span class="hljs-built_in">=</span>-<span class="hljs-number">100</span>;<br>x1max<span class="hljs-built_in">=</span><span class="hljs-number">100</span>;<br>x2min<span class="hljs-built_in">=</span>-<span class="hljs-number">100</span>;<br>x2max<span class="hljs-built_in">=</span><span class="hljs-number">100</span>;<br>R<span class="hljs-built_in">=</span><span class="hljs-number">1500</span>; <span class="hljs-comment">% steps resolution</span><br>x1<span class="hljs-built_in">=</span>x1min:(x1max-x1min)/R:x1max;<br>x2<span class="hljs-built_in">=</span>x2min:(x2max-x2min)/R:x2max;<br> <br>for j<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:length(x1)<br>    <br>    <span class="hljs-comment">% For 1-dimensional plotting</span><br>    f1(j)<span class="hljs-built_in">=</span>x1(j)^<span class="hljs-number">2</span>;<br>    <br>    <span class="hljs-comment">% For 2-dimensional plotting</span><br>    for i<span class="hljs-built_in">=</span><span class="hljs-number">1</span>:length(x2)<br>        fn(i)<span class="hljs-built_in">=</span>x1(j)^<span class="hljs-number">2</span>+(x1(j)+x2(i))^<span class="hljs-number">2</span>;<br>    end<br>    <br>    fn_tot(j,:)<span class="hljs-built_in">=</span>fn;<br> <br>end<br><br>figure(<span class="hljs-number">1</span>)<br>plot(x1,f1);set(gca,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>);<br>xlabel(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;f(x)&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>title(<span class="hljs-string">&#x27;2D View&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&#x27;FontWeight&#x27;</span>,<span class="hljs-string">&#x27;bold&#x27;</span>);<br> <br>figure(<span class="hljs-number">2</span>)<br>meshc(x1,x2,fn_tot);colorbar;set(gca,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>);<br>xlabel(<span class="hljs-string">&#x27;x_2&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>set(get(gca,<span class="hljs-string">&#x27;xlabel&#x27;</span>),<span class="hljs-string">&#x27;rotation&#x27;</span>,<span class="hljs-number">25</span>,<span class="hljs-string">&#x27;VerticalAlignment&#x27;</span>,<span class="hljs-string">&#x27;bottom&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;x_1&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>set(get(gca,<span class="hljs-string">&#x27;ylabel&#x27;</span>),<span class="hljs-string">&#x27;rotation&#x27;</span>,-<span class="hljs-number">25</span>,<span class="hljs-string">&#x27;VerticalAlignment&#x27;</span>,<span class="hljs-string">&#x27;bottom&#x27;</span>);<br>zlabel(<span class="hljs-string">&#x27;f(X)&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>title(<span class="hljs-string">&#x27;3D View&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&#x27;FontWeight&#x27;</span>,<span class="hljs-string">&#x27;bold&#x27;</span>);<br> <br>figure(<span class="hljs-number">3</span>)<br>mesh(x1,x2,fn_tot);view(<span class="hljs-number">0</span>,<span class="hljs-number">90</span>);colorbar;set(gca,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>);<br>xlabel(<span class="hljs-string">&#x27;x_2&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;x_1&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>zlabel(<span class="hljs-string">&#x27;f(X)&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>title(<span class="hljs-string">&#x27;X-Y Plane View&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&#x27;FontWeight&#x27;</span>,<span class="hljs-string">&#x27;bold&#x27;</span>);<br> <br>figure(<span class="hljs-number">4</span>)<br>mesh(x1,x2,fn_tot);view(<span class="hljs-number">90</span>,<span class="hljs-number">0</span>);colorbar;set(gca,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>);<br>xlabel(<span class="hljs-string">&#x27;x_2&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;x_1&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>zlabel(<span class="hljs-string">&#x27;f(X)&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>title(<span class="hljs-string">&#x27;X-Z Plane View&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&#x27;FontWeight&#x27;</span>,<span class="hljs-string">&#x27;bold&#x27;</span>);<br> <br>figure(<span class="hljs-number">5</span>)<br>mesh(x1,x2,fn_tot);view(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);colorbar;set(gca,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>);<br>xlabel(<span class="hljs-string">&#x27;x_2&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;x_1&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>zlabel(<span class="hljs-string">&#x27;f(X)&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;FontAngle&#x27;</span>,<span class="hljs-string">&#x27;italic&#x27;</span>);<br>title(<span class="hljs-string">&#x27;Y-Z Plane View&#x27;</span>,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&#x27;FontWeight&#x27;</span>,<span class="hljs-string">&#x27;bold&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法优化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>季节优化算法</title>
    <link href="/2024/04/26/ji-jie-you-hua-suan-fa/"/>
    <url>/2024/04/26/ji-jie-you-hua-suan-fa/</url>
    
    <content type="html"><![CDATA[<h2 id="参考论文">参考论文</h2><p>Emami, Hojjat. “Seasons Optimization Algorithm.” Engineering withComputers, vol. 38, no. 2, Springer Science and Business Media LLC, Aug.2020, pp. 1845–65, doi:10.1007/s00366-020-01133-5.</p><h2 id="脚本解读">脚本解读</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs m">clear <span class="hljs-built_in">all</span>;<br>clc;<br><br><span class="hljs-comment">%% Problem Statement</span><br>ProblemParams.CostFuncName <span class="hljs-built_in">=</span> <span class="hljs-string">&#x27;F8&#x27;</span>;<br>[fobj, lowerbound, upperbound, globalCost, dimension]<span class="hljs-built_in">=</span>GetBenchmarkFunction(ProblemParams.CostFuncName);<br>ProblemParams.CostFuncName<span class="hljs-built_in">=</span>fobj;<br>ProblemParams.lb<span class="hljs-built_in">=</span>lowerbound;<br>ProblemParams.ub<span class="hljs-built_in">=</span>upperbound;<br>ProblemParams.NPar <span class="hljs-built_in">=</span> dimension;<br>ProblemParams.gcost<span class="hljs-built_in">=</span>globalCost;<br><br>ProblemParams.VarMin <span class="hljs-built_in">=</span>ProblemParams.lb;<br>ProblemParams.VarMax <span class="hljs-built_in">=</span> ProblemParams.ub;<br><br><span class="hljs-built_in">if</span> numel(ProblemParams.VarMin)<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span><span class="hljs-number">1</span><br>    ProblemParams.VarMin<span class="hljs-built_in">=</span>repmat(ProblemParams.VarMin,<span class="hljs-number">1</span>,ProblemParams.NPar);<br>    ProblemParams.VarMax<span class="hljs-built_in">=</span>repmat(ProblemParams.VarMax,<span class="hljs-number">1</span>,ProblemParams.NPar);<br>end<br>ProblemParams.SearchSpaceSize <span class="hljs-built_in">=</span> ProblemParams.VarMax - ProblemParams.VarMin;<br><br><br>AlgorithmParams.NumOfTrees <span class="hljs-built_in">=</span> <span class="hljs-number">8</span>;<br>AlgorithmParams.NumOfYears <span class="hljs-built_in">=</span> <span class="hljs-number">50</span>;<br>AlgorithmParams.Pmin <span class="hljs-built_in">=</span> <span class="hljs-number">0.4</span>;<br>AlgorithmParams.Pmax <span class="hljs-built_in">=</span> <span class="hljs-number">0.6</span>;<br><br><br><span class="hljs-comment">%% Main Loop</span><br><br><br>for year<span class="hljs-built_in">=</span> <span class="hljs-number">1</span>:AlgorithmParams.NumOfYears<br>    <br>    p<span class="hljs-built_in">=</span>AlgorithmParams.Pmax-(year/AlgorithmParams.NumOfYears)*(AlgorithmParams.Pmax-AlgorithmParams.Pmin);            <span class="hljs-comment">%pr, ps and pw are in the range [0.4, 0.6]</span><br>    AlgorithmParams.RenewRate<span class="hljs-built_in">=</span>p;<br>    AlgorithmParams.SeedingRate<span class="hljs-built_in">=</span>p;<br>    AlgorithmParams.ColdThreshold<span class="hljs-built_in">=</span>p;<br>    AlgorithmParams.CompetitionRate <span class="hljs-built_in">=</span> p;<br>    <br>    <br>    <span class="hljs-comment">%% Spring Season</span><br>    <span class="hljs-built_in">if</span> (year<span class="hljs-built_in">=</span><span class="hljs-built_in">=</span><span class="hljs-number">1</span>)<br>        InitialTrees <span class="hljs-built_in">=</span> CreateForest(AlgorithmParams, ProblemParams);<br>        Forest<span class="hljs-built_in">=</span>InitialTrees;<br>        InitialCost <span class="hljs-built_in">=</span> feval(ProblemParams.CostFuncName,InitialTrees);<br>        Forest(:,end+<span class="hljs-number">1</span>) <span class="hljs-built_in">=</span> InitialCost;<br>    <span class="hljs-built_in">else</span><br>        Forest <span class="hljs-built_in">=</span> Renew(Forest, Seeds, AlgorithmParams, ProblemParams);<br>    end<br>    <br>    <br>    <span class="hljs-comment">%% Summer Season  (Growth &amp; Competition)</span><br>    [Forest] <span class="hljs-built_in">=</span> Competition (Forest, AlgorithmParams, ProblemParams, year);<br>    <br>    <span class="hljs-comment">%% Autumn Season</span><br>    Seeds <span class="hljs-built_in">=</span> Seeding(Forest,AlgorithmParams, ProblemParams);<br>    s<span class="hljs-built_in">=</span>size(Seeds,<span class="hljs-number">1</span>);<br>    AlgorithmParams.s<span class="hljs-built_in">=</span>s;<br>    <br>    <span class="hljs-comment">%% Winter Season</span><br>    Forest <span class="hljs-built_in">=</span> Resistance(Forest,AlgorithmParams, ProblemParams);<br>    <br>    Costs <span class="hljs-built_in">=</span> Forest(:,end);<br>    MinimumCost(year) <span class="hljs-built_in">=</span> min(Costs);<br>    <br>    fprintf(<span class="hljs-string">&#x27;Minimum Cost in Iteration %d is %3.16f \n&#x27;</span>, year,MinimumCost(year));<br>    <br>end  <br></code></pre></td></tr></table></figure><p>这是一个MATLAB脚本，用于模拟森林生态系统演化过程，并寻找最优树种分布以最小化特定成本函数。</p><p><strong>初始化部分</strong> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear all;  <span class="hljs-comment">% 清除工作空间中的所有变量</span><br>clc;        <span class="hljs-comment">% 清除命令窗口中的输出信息</span><br></code></pre></td></tr></table></figure></p><p><strong>问题参数设定</strong> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义问题参数</span><br>ProblemParams.CostFuncName = <span class="hljs-string">&#x27;F8&#x27;</span>;   <span class="hljs-comment">% 设置成本函数为F8</span><br>[fobj, lowerbound, upperbound, globalCost, dimension] = GetBenchmarkFunction(ProblemParams.CostFuncName);<br>ProblemParams.CostFuncName = fobj;    <span class="hljs-comment">% 将成本函数句柄赋值给ProblemParams.CostFuncName</span><br>ProblemParams.lb = lowerbound;       <span class="hljs-comment">% 设置变量下界</span><br>ProblemParams.ub = upperbound;       <span class="hljs-comment">% 设置变量上界</span><br>ProblemParams.NPar = dimension;      <span class="hljs-comment">% 设置问题维度（即决策变量个数）</span><br>ProblemParams.gcost = globalCost;     <span class="hljs-comment">% 设置全局最小成本</span><br><br>ProblemParams.VarMin = ProblemParams.lb;   <span class="hljs-comment">% 变量最小值</span><br>ProblemParams.VarMax = ProblemParams.ub;   <span class="hljs-comment">% 变量最大值</span><br><br><span class="hljs-comment">% 如果变量上下界只给出一个值（即所有变量有相同的上下界），则扩展为与维度相匹配的向量</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">numel</span>(ProblemParams.VarMin) == <span class="hljs-number">1</span><br>    ProblemParams.VarMin = <span class="hljs-built_in">repmat</span>(ProblemParams.VarMin, <span class="hljs-number">1</span>, ProblemParams.NPar);<br>    ProblemParams.VarMax = <span class="hljs-built_in">repmat</span>(ProblemParams.VarMax, <span class="hljs-number">1</span>, ProblemParams.NPar);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% 计算搜索空间大小（即变量取值范围）</span><br>ProblemParams.SearchSpaceSize = ProblemParams.VarMax - ProblemParams.VarMin;<br></code></pre></td></tr></table></figure>这部分代码定义了问题参数结构体<code>ProblemParams</code>，包括成本函数名、变量上下界、问题维度、全局最小成本、变量最小值、变量最大值和搜索空间大小。其中，<code>GetBenchmarkFunction</code>函数用于获取成本函数相关信息。</p><p><strong>算法参数设定</strong> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义算法参数</span><br>AlgorithmParams.NumOfTrees = <span class="hljs-number">8</span>;         <span class="hljs-comment">% 设置每棵树种的数量</span><br>AlgorithmParams.NumOfYears = <span class="hljs-number">50</span>;        <span class="hljs-comment">% 设置模拟年数</span><br>AlgorithmParams.Pmin = <span class="hljs-number">0.4</span>;            <span class="hljs-comment">% 设置参数P的最小值</span><br>AlgorithmParams.Pmax = <span class="hljs-number">0.6</span>;            <span class="hljs-comment">% 设置参数P的最大值</span><br></code></pre></td></tr></table></figure>这部分代码定义了算法参数结构体<code>AlgorithmParams</code>，包括每棵树种数量、模拟年数和参数P的范围（P在森林生态模型中可能代表更新率、播种率、冷阈值、竞争率等）。</p><p><strong>主循环</strong> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-keyword">for</span> year = <span class="hljs-number">1</span>:AlgorithmParams.NumOfYears<br>    <span class="hljs-comment">% 根据模拟年份计算参数P的值</span><br>    p = AlgorithmParams.Pmax - (year / AlgorithmParams.NumOfYears) * (AlgorithmParams.Pmax - AlgorithmParams.Pmin);<br><br>    <span class="hljs-comment">% 更新参数P对应的森林生态模型参数</span><br>    AlgorithmParams.RenewRate = p;          <span class="hljs-comment">% 更新率</span><br>    AlgorithmParams.SeedingRate = p;        <span class="hljs-comment">% 播种率</span><br>    AlgorithmParams.ColdThreshold = p;      <span class="hljs-comment">% 冷阈值</span><br>    AlgorithmParams.CompetitionRate = p;    <span class="hljs-comment">% 竞争率</span><br><br>    <span class="hljs-comment">%% 春季：创建或更新森林</span><br>    <span class="hljs-keyword">if</span> year == <span class="hljs-number">1</span><br>        InitialTrees = CreateForest(AlgorithmParams, ProblemParams);  <span class="hljs-comment">% 第一年创建初始森林</span><br>        Forest = InitialTrees;<br>        InitialCost = feval(ProblemParams.CostFuncName, InitialTrees);  <span class="hljs-comment">% 计算初始森林的成本</span><br>        Forest(:, <span class="hljs-keyword">end</span> + <span class="hljs-number">1</span>) = InitialCost;                             <span class="hljs-comment">% 在森林矩阵末尾添加成本列</span><br>    <span class="hljs-keyword">else</span><br>        Forest = Renew(Forest, Seeds, AlgorithmParams, ProblemParams);  <span class="hljs-comment">% 后续年份更新森林</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-comment">%% 夏季：生长与竞争</span><br>    [Forest] = Competition(Forest, AlgorithmParams, ProblemParams, year);<br><br>    <span class="hljs-comment">%% 秋季：播种</span><br>    Seeds = Seeding(Forest, AlgorithmParams, ProblemParams);<br>    s = <span class="hljs-built_in">size</span>(Seeds, <span class="hljs-number">1</span>);<br>    AlgorithmParams.s = s;  <span class="hljs-comment">% 更新种子数量</span><br><br>    <span class="hljs-comment">%% 冬季：抵抗寒冷</span><br>    Forest = Resistance(Forest, AlgorithmParams, ProblemParams);<br><br>    <span class="hljs-comment">%% 记录当前年份最小成本</span><br>    Costs = Forest(:, <span class="hljs-keyword">end</span>);<br>    MinimumCost(year) = <span class="hljs-built_in">min</span>(Costs);<br><br>    <span class="hljs-comment">% 输出当前年份最小成本</span><br>    fprintf(<span class="hljs-string">&#x27;Minimum Cost in Iteration %d is %3.16f \n&#x27;</span>, year, MinimumCost(year));<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>这部分代码是主循环，模拟森林生态系统演化过程。每年按照春季、夏季、秋季、冬季四个季节进行操作，包括创建或更新森林、生长与竞争、播种、抵抗寒冷等步骤，并在每个年份结束时记录最小成本。最后，输出当前年份的最小成本。整个循环共模拟<code>AlgorithmParams.NumOfYears</code>年。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs m"><span class="hljs-comment">%% GetBenchmarkFunction.m</span><br>function [fobj, l, u, g, d]<span class="hljs-built_in">=</span>GetBenchmarkFunction(number)<br>dim<span class="hljs-built_in">=</span><span class="hljs-number">2</span>;<br>switch number<br>    <br>    case <span class="hljs-string">&#x27;F1&#x27;</span><br>        <span class="hljs-comment">% F1- SumSquares lower=[-10], upper=[10], gminimum=[0], dim=30</span><br>        fobj <span class="hljs-built_in">=</span> @F4;<br>        l<span class="hljs-built_in">=</span>[-<span class="hljs-number">10</span>];<br>        u<span class="hljs-built_in">=</span>[<span class="hljs-number">10</span>];<br>        g<span class="hljs-built_in">=</span><span class="hljs-number">0</span>;<br>        d<span class="hljs-built_in">=</span>dim;<br>        <br>    case <span class="hljs-string">&#x27;F2&#x27;</span><br>        <span class="hljs-comment">% F2- Schwefel 1.2 lower=[-100], upper=[100], gminimum=[0], dim=30</span><br>        fobj <span class="hljs-built_in">=</span> @F2;<br>        l<span class="hljs-built_in">=</span>[-<span class="hljs-number">100</span>];<br>        u<span class="hljs-built_in">=</span>[<span class="hljs-number">100</span>];<br>        g<span class="hljs-built_in">=</span><span class="hljs-number">0</span>;<br>        d<span class="hljs-built_in">=</span>dim;<br>    case <span class="hljs-string">&#x27;F3&#x27;</span><br>        <span class="hljs-comment">% F3- Rosenbrock  lower=[-30], upper=[30], gminimum=[0], dim=30</span><br>        fobj <span class="hljs-built_in">=</span> @F1;<br>        l<span class="hljs-built_in">=</span>[-<span class="hljs-number">30</span>];<br>        u<span class="hljs-built_in">=</span>[<span class="hljs-number">30</span>];<br>        g<span class="hljs-built_in">=</span><span class="hljs-number">0</span>;<br>        d<span class="hljs-built_in">=</span>dim;<br>        <br>    case <span class="hljs-string">&#x27;F4&#x27;</span><br>        <span class="hljs-comment">% F4- Sphere lower=[-100], upper=[100], gminimum=[0], dim=30</span><br>        fobj <span class="hljs-built_in">=</span> @F3;<br>        l<span class="hljs-built_in">=</span>[-<span class="hljs-number">100</span>];<br>        u<span class="hljs-built_in">=</span>[<span class="hljs-number">100</span>];<br>        g<span class="hljs-built_in">=</span><span class="hljs-number">0</span>;<br>        d<span class="hljs-built_in">=</span>dim;<br>        <br>        <br>    case <span class="hljs-string">&#x27;F5&#x27;</span><br>        <span class="hljs-comment">% F5- Zakharov lower=[-5], upper=[10], gminimum=[0], dim=10</span><br>        fobj <span class="hljs-built_in">=</span> @F5;<br>        l<span class="hljs-built_in">=</span>[-<span class="hljs-number">5</span>];<br>        u<span class="hljs-built_in">=</span>[<span class="hljs-number">10</span>];<br>        g<span class="hljs-built_in">=</span><span class="hljs-number">0</span>;<br>        d<span class="hljs-built_in">=</span>dim;<br>        <br>    case <span class="hljs-string">&#x27;F6&#x27;</span><br>        <span class="hljs-comment">% F7- Griewank  lower=[-600], upper=[600] gminimum=[0], dim=30</span><br>        fobj <span class="hljs-built_in">=</span> @F6;<br>        l<span class="hljs-built_in">=</span>[-<span class="hljs-number">600</span>];<br>        u<span class="hljs-built_in">=</span>[<span class="hljs-number">600</span>];<br>        g<span class="hljs-built_in">=</span>[<span class="hljs-number">0</span>];<br>        d<span class="hljs-built_in">=</span>dim;<br>        <br>    case <span class="hljs-string">&#x27;F7&#x27;</span><br>        <span class="hljs-comment">% F7- Rastrigin  lower=[-5.12], upper=[5.12] gminimum=[0], dim=30</span><br>        fobj <span class="hljs-built_in">=</span> @F7;<br>        l<span class="hljs-built_in">=</span>[-<span class="hljs-number">5.12</span>];<br>        u<span class="hljs-built_in">=</span>[<span class="hljs-number">5.12</span>];<br>        g<span class="hljs-built_in">=</span><span class="hljs-number">0</span>;<br>        d<span class="hljs-built_in">=</span>dim;<br>                <br>    case <span class="hljs-string">&#x27;F8&#x27;</span><br>        <span class="hljs-comment">% F8- Egg Crate Function  lower=[0], upper=[10] gminimum=[0], dim=2</span><br>        fobj <span class="hljs-built_in">=</span> @F8;<br>        l<span class="hljs-built_in">=</span>[<span class="hljs-number">0</span>];<br>        u<span class="hljs-built_in">=</span>[<span class="hljs-number">10</span>];<br>        g<span class="hljs-built_in">=</span>-<span class="hljs-number">18.5547</span>;<br>        d<span class="hljs-built_in">=</span>dim;<br>end<br>end<br><br>function z <span class="hljs-built_in">=</span> F1(x)<br><span class="hljs-comment">% F1- SumSquares lower=[-10], upper=[10], gminimum=[0], dim=30</span><br>[m, n] <span class="hljs-built_in">=</span> size(x);<br>x2 <span class="hljs-built_in">=</span> x .^<span class="hljs-number">2</span>;<br>I <span class="hljs-built_in">=</span> repmat(<span class="hljs-number">1</span>:n, m, <span class="hljs-number">1</span>);<br>z <span class="hljs-built_in">=</span> sum( I .* x2, <span class="hljs-number">2</span>);<br>end<br><br><br>function z <span class="hljs-built_in">=</span> F2(x)<br><span class="hljs-comment">% F2- Schwefel 1.2 lower=[-100], upper=[100], gminimum=[0], dim=30</span><br>z <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>v1 <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>dim<span class="hljs-built_in">=</span>size(x,<span class="hljs-number">2</span>);<br>for i <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>:dim<br>    v1<span class="hljs-built_in">=</span><span class="hljs-number">0</span>;<br>    for j <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>: i<br>        v1 <span class="hljs-built_in">=</span> v1 + x(:,j);<br>    end<br>    z <span class="hljs-built_in">=</span> z + v1.^<span class="hljs-number">2</span>;<br>end<br>end<br><br>function z <span class="hljs-built_in">=</span> F3(x)<br><span class="hljs-comment">% F3- Rosenbrock  lower=[-30], upper=[30], gminimum=[0], dim=30</span><br>z <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>n <span class="hljs-built_in">=</span> size(x, <span class="hljs-number">2</span>);<br>assert(n &gt;<span class="hljs-built_in">=</span> <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Given input X cannot be empty&#x27;</span>);<br>a <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>;<br>b <span class="hljs-built_in">=</span> <span class="hljs-number">100</span>;<br>for i <span class="hljs-built_in">=</span> <span class="hljs-number">1</span> : (n-<span class="hljs-number">1</span>)<br>    z <span class="hljs-built_in">=</span> z + (b * ((x(:, i+<span class="hljs-number">1</span>) - (x(:, i).^<span class="hljs-number">2</span>)) .^ <span class="hljs-number">2</span>)) + ((a - x(:, i)) .^ <span class="hljs-number">2</span>);<br>end<br>end<br><br>function z <span class="hljs-built_in">=</span> F4(x)<br><span class="hljs-comment">% F4- Sphere lower=[-100], upper=[100], gminimum=[0], dim=30</span><br>z<span class="hljs-built_in">=</span>sum(x<span class="hljs-string">&#x27;.^2)&#x27;</span>;<br>end<br>function z <span class="hljs-built_in">=</span> F5(x)<br><span class="hljs-comment">% F5- Zakharov lower=[-5], upper=[10], gminimum=[0], dim=10</span><br>n <span class="hljs-built_in">=</span> size(x, <span class="hljs-number">2</span>);<br>comp1 <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>comp2 <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>for i <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>:n<br>    comp1 <span class="hljs-built_in">=</span> comp1 + (x(:, i) .^ <span class="hljs-number">2</span>);<br>    comp2 <span class="hljs-built_in">=</span> comp2 + (<span class="hljs-number">0.5</span> * i * x(:, i));<br>end<br>z <span class="hljs-built_in">=</span> comp1 + (comp2 .^ <span class="hljs-number">2</span>) + (comp2 .^ <span class="hljs-number">4</span>);<br>end<br><br>function z <span class="hljs-built_in">=</span> F6(x)<br><span class="hljs-comment">% F6- Griewank  lower=[-600], upper=[600] gminimum=[0], dim=30</span><br>n <span class="hljs-built_in">=</span> size(x, <span class="hljs-number">2</span>);<br>sumcomp <span class="hljs-built_in">=</span> <span class="hljs-number">0</span>;<br>prodcomp <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>;<br>for i <span class="hljs-built_in">=</span> <span class="hljs-number">1</span>:n<br>    sumcomp <span class="hljs-built_in">=</span> sumcomp + (x(:, i) .^ <span class="hljs-number">2</span>);<br>    prodcomp <span class="hljs-built_in">=</span> prodcomp .* (cos(x(:, i) / sqrt(i)));<br>end<br>z <span class="hljs-built_in">=</span> (sumcomp / <span class="hljs-number">4000</span>) - prodcomp + <span class="hljs-number">1</span>;<br>end<br><br>function z <span class="hljs-built_in">=</span> F7(x)<br><span class="hljs-comment">% F7- Rastrigin  lower=[-5.12], upper=[5.12] gminimum=[0], dim=30</span><br>n <span class="hljs-built_in">=</span> size(x, <span class="hljs-number">2</span>);<br>A <span class="hljs-built_in">=</span> <span class="hljs-number">10</span>;<br>z <span class="hljs-built_in">=</span> (A * n) + (sum(x .^<span class="hljs-number">2</span> - A * cos(<span class="hljs-number">2</span> * pi .* x), <span class="hljs-number">2</span>));<br>end<br><br>function z <span class="hljs-built_in">=</span> F8(x)<br>    X <span class="hljs-built_in">=</span> x(:, <span class="hljs-number">1</span>);<br>    Y <span class="hljs-built_in">=</span> x(:, <span class="hljs-number">2</span>);    <br>    <span class="hljs-comment">%z = X.^2 + Y.^2 + (25 * (sin(X).^2 + sin(Y).^2));</span><br>    z<span class="hljs-built_in">=</span>X.*sin(<span class="hljs-number">4</span>.*X)+ <span class="hljs-number">1.1</span>.*Y.*sin(<span class="hljs-number">2</span>.*Y);<br>end <br></code></pre></td></tr></table></figure><h2 id="两个变量">两个变量</h2><p>输入参数：</p><p>number：字符串，表示要选择的基准测试函数编号（如"F1"、"F2"等）。</p><p>输出参数：</p><p>fobj：函数句柄，指向对应的基准测试函数。</p><p>l：变量下界向量，表示优化问题中每个变量的最小允许值。</p><p>u：变量上界向量，表示优化问题中每个变量的最大允许值。</p><p>g：全局最小值，表示所选基准测试函数的已知全局最小解对应的函数值。</p><p>d：问题维度，表示优化问题中变量的个数。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs m">Minimum Cost in Iteration <span class="hljs-number">1</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">4.6682556618584661</span> <br>Minimum Cost in Iteration <span class="hljs-number">2</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">8.1975662567254535</span> <br>Minimum Cost in Iteration <span class="hljs-number">3</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">8.1975662567254535</span> <br>Minimum Cost in Iteration <span class="hljs-number">4</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">14.6935300252384948</span> <br>Minimum Cost in Iteration <span class="hljs-number">5</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">14.6935300252384948</span> <br>Minimum Cost in Iteration <span class="hljs-number">6</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">14.6935300252384948</span> <br>Minimum Cost in Iteration <span class="hljs-number">7</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">14.6935300252384948</span> <br>Minimum Cost in Iteration <span class="hljs-number">8</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">14.6935300252384948</span> <br>Minimum Cost in Iteration <span class="hljs-number">9</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">14.6935300252384948</span> <br>Minimum Cost in Iteration <span class="hljs-number">10</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">14.6935300252384948</span> <br>Minimum Cost in Iteration <span class="hljs-number">11</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.6789369064143571</span> <br>Minimum Cost in Iteration <span class="hljs-number">12</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.6789369064143571</span> <br>Minimum Cost in Iteration <span class="hljs-number">13</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.6789369064143571</span> <br>Minimum Cost in Iteration <span class="hljs-number">14</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.6789369064143571</span> <br>Minimum Cost in Iteration <span class="hljs-number">15</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.8433233416086168</span> <br>Minimum Cost in Iteration <span class="hljs-number">16</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.8433233416086168</span> <br>Minimum Cost in Iteration <span class="hljs-number">17</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.8433233416086168</span> <br>Minimum Cost in Iteration <span class="hljs-number">18</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.8433233416086168</span> <br>Minimum Cost in Iteration <span class="hljs-number">19</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.8433233416086168</span> <br>Minimum Cost in Iteration <span class="hljs-number">20</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.8433233416086168</span> <br>Minimum Cost in Iteration <span class="hljs-number">21</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.8433233416086168</span> <br>Minimum Cost in Iteration <span class="hljs-number">22</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.8433233416086168</span> <br>Minimum Cost in Iteration <span class="hljs-number">23</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">17.8433233416086168</span> <br>Minimum Cost in Iteration <span class="hljs-number">24</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.4564913551477119</span> <br>Minimum Cost in Iteration <span class="hljs-number">25</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.4564913551477119</span> <br>Minimum Cost in Iteration <span class="hljs-number">26</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5092203075349104</span> <br>Minimum Cost in Iteration <span class="hljs-number">27</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5092203075349104</span> <br>Minimum Cost in Iteration <span class="hljs-number">28</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5092203075349104</span> <br>Minimum Cost in Iteration <span class="hljs-number">29</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5092203075349104</span> <br>Minimum Cost in Iteration <span class="hljs-number">30</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">31</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">32</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">33</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">34</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">35</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">36</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">37</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">38</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">39</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">40</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">41</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">42</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">43</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">44</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">45</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">46</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">47</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">48</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">49</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br>Minimum Cost in Iteration <span class="hljs-number">50</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">18.5365046804113760</span> <br></code></pre></td></tr></table></figure><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs m">xx<span class="hljs-built_in">=</span><span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">10</span>;<br>yy<span class="hljs-built_in">=</span><span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">10</span>;<br>[x,y]<span class="hljs-built_in">=</span>meshgrid(xx,yy);<br>z<span class="hljs-built_in">=</span>x.*sin(<span class="hljs-number">4</span>.*x)+ <span class="hljs-number">1.1</span>.*y.*sin(<span class="hljs-number">2</span>.*y);<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>mesh(x,y,z)<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>contour(x,y,z)<br>colorbar<br></code></pre></td></tr></table></figure><p>F8 : z=x.<em>sin(4.</em>x)+ 1.1.<em>y.</em>sin(2.*y)</p><figure><img src="https://pic.imgdb.cn/item/662b6cb70ea9cb1403eaff37.jpg"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>算法优化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MATLAB制图</title>
    <link href="/2024/04/25/matlab-zhi-tu/"/>
    <url>/2024/04/25/matlab-zhi-tu/</url>
    
    <content type="html"><![CDATA[<h3 id="散点图">散点图</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 利用预测的新值绘制散点图</span><br><span class="hljs-comment">% 导入数据 </span><br>traditional_sales = [<span class="hljs-number">6561</span>, <span class="hljs-number">6899</span>, <span class="hljs-number">7264</span>, <span class="hljs-number">7372</span>, <span class="hljs-number">7595</span>, <span class="hljs-number">7882</span>, <span class="hljs-number">7992</span>, <span class="hljs-number">7513</span>, <span class="hljs-number">8157.1</span>, <span class="hljs-number">8341.8</span>, <span class="hljs-number">8530.7</span>];<br>new_energy_sales = [<span class="hljs-number">11.82</span>, <span class="hljs-number">21.8</span>, <span class="hljs-number">32.1</span>, <span class="hljs-number">56.8</span>, <span class="hljs-number">77.4</span>, <span class="hljs-number">122.8</span>, <span class="hljs-number">208.8</span>, <span class="hljs-number">240.9</span>, <span class="hljs-number">373.64</span>, <span class="hljs-number">541.99</span>, <span class="hljs-number">786.18</span>];<br><br><span class="hljs-comment">% 绘制散点图</span><br><span class="hljs-built_in">scatter</span>(traditional_sales, new_energy_sales, <span class="hljs-string">&#x27;filled&#x27;</span>);<br>title(<span class="hljs-string">&#x27;传统能源汽车与新能源汽车销量散点图&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;传统能源汽车销量（万辆）&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;新能源汽车销量（万辆）&#x27;</span>);<br>grid on;<br></code></pre></td></tr></table></figure><h3 id="折线-柱状图">折线-柱状图</h3><figure><img src="https://pic.imgdb.cn/item/66e18c6ed9c307b7e9221caf.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% Data</span><br>years = [<span class="hljs-number">2012</span>, <span class="hljs-number">2013</span>, <span class="hljs-number">2014</span>, <span class="hljs-number">2015</span>, <span class="hljs-number">2016</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2020</span>, <span class="hljs-number">2021</span>, <span class="hljs-number">2022</span>];<br>traditionalSales = [<span class="hljs-number">6561</span>, <span class="hljs-number">6899</span>, <span class="hljs-number">7264.2</span>, <span class="hljs-number">7372</span>, <span class="hljs-number">7595</span>, <span class="hljs-number">7882</span>, <span class="hljs-number">7992</span>, <span class="hljs-number">7513</span>, <span class="hljs-number">5489</span>, <span class="hljs-number">6387</span>, <span class="hljs-number">6498</span>];<br>newEnergySales = [<span class="hljs-number">11.82</span>, <span class="hljs-number">21.8</span>, <span class="hljs-number">32.1</span>, <span class="hljs-number">56.8</span>, <span class="hljs-number">77.4</span>, <span class="hljs-number">122.8</span>, <span class="hljs-number">208.8</span>, <span class="hljs-number">240.9</span>, <span class="hljs-number">305.2</span>, <span class="hljs-number">551.8</span>, <span class="hljs-number">1031</span>];<br>marketShare = [<span class="hljs-number">0.18</span>, <span class="hljs-number">0.31</span>, <span class="hljs-number">0.44</span>, <span class="hljs-number">0.76</span>, <span class="hljs-number">1.01</span>, <span class="hljs-number">1.53</span>, <span class="hljs-number">2.55</span>, <span class="hljs-number">3.11</span>, <span class="hljs-number">5.27</span>, <span class="hljs-number">7.95</span>, <span class="hljs-number">13.69</span>];<br><br><span class="hljs-comment">% Plotting</span><br><span class="hljs-built_in">figure</span>;<br><br><span class="hljs-comment">% Line plot for traditional car sales</span><br>yyaxis left;<br><span class="hljs-built_in">plot</span>(years, traditionalSales, <span class="hljs-string">&#x27;-o&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;MarkerSize&#x27;</span>, <span class="hljs-number">8</span>);<br>ylabel(<span class="hljs-string">&#x27;Traditional Car Sales (in thousands)&#x27;</span>);<br><br><span class="hljs-built_in">hold</span> on;<br><br><span class="hljs-comment">% Line plot for new energy car sales</span><br><span class="hljs-built_in">plot</span>(years, newEnergySales, <span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;MarkerSize&#x27;</span>, <span class="hljs-number">8</span>);<br>ylabel(<span class="hljs-string">&#x27;New Energy Car Sales (in thousands)&#x27;</span>);<br><br><span class="hljs-comment">% Bar plot for market share</span><br>yyaxis right;<br>bar(years, marketShare, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;FaceColor&#x27;</span>, [<span class="hljs-number">0.5</span> <span class="hljs-number">0.5</span> <span class="hljs-number">0.5</span>], <span class="hljs-string">&#x27;FaceAlpha&#x27;</span>, <span class="hljs-number">0.5</span>);  <span class="hljs-comment">% Adjust FaceAlpha</span><br>ylabel(<span class="hljs-string">&#x27;New Energy Car Market Share (%)&#x27;</span>);<br><br>xlabel(<span class="hljs-string">&#x27;Year&#x27;</span>);<br>title(<span class="hljs-string">&#x27;Global Car Sales and New Energy Car Market Share Over the Years&#x27;</span>);<br><br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;Traditional Car Sales&#x27;</span>, <span class="hljs-string">&#x27;New Energy Car Sales&#x27;</span>, <span class="hljs-string">&#x27;New Energy Car Market Share&#x27;</span>, <span class="hljs-string">&#x27;Location&#x27;</span>, <span class="hljs-string">&#x27;Best&#x27;</span>);<br>grid on;<br></code></pre></td></tr></table></figure><h3 id="相关系数热力图">相关系数热力图</h3><figure><img src="https://pic.imgdb.cn/item/66e18953d9c307b7e91bfd51.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 相关系数矩阵</span><br>correlation_matrix = [<span class="hljs-number">1.000000</span>  <span class="hljs-number">0.598759</span> <span class="hljs-number">-0.223368</span>;<br>                       <span class="hljs-number">0.598759</span>  <span class="hljs-number">1.000000</span> <span class="hljs-number">-0.217538</span>;<br>                       <span class="hljs-number">-0.223368</span> <span class="hljs-number">-0.217538</span>  <span class="hljs-number">1.000000</span>];<br><br>h = heatmap(correlation_matrix)<br><br>column_labels = &#123;<span class="hljs-string">&#x27;平均销售单价&#x27;</span>, <span class="hljs-string">&#x27;种植成本&#x27;</span>, <span class="hljs-string">&#x27;预期销售量&#x27;</span>&#125;;<br>h.XData = column_labels;<br><br>row_labels = &#123;<span class="hljs-string">&#x27;平均销售单价&#x27;</span>, <span class="hljs-string">&#x27;种植成本&#x27;</span>, <span class="hljs-string">&#x27;预期销售量&#x27;</span>&#125;;<br>h.YData = row_labels;<br></code></pre></td></tr></table></figure><p>下同理</p><figure><img src="https://pic.imgdb.cn/item/66e189a9d9c307b7e91c57f2.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义数据</span><br>land = &#123;<span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>, <span class="hljs-string">&#x27;A3&#x27;</span>, <span class="hljs-string">&#x27;A4&#x27;</span>, <span class="hljs-string">&#x27;A5&#x27;</span>, <span class="hljs-string">&#x27;A6&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>, <span class="hljs-string">&#x27;B3&#x27;</span>, <span class="hljs-string">&#x27;B4&#x27;</span>, <span class="hljs-string">&#x27;B5&#x27;</span>, <span class="hljs-string">&#x27;B6&#x27;</span>, <span class="hljs-string">&#x27;B7&#x27;</span>, <span class="hljs-string">&#x27;B8&#x27;</span>, <span class="hljs-string">&#x27;B9&#x27;</span>, <span class="hljs-string">&#x27;B10&#x27;</span>, <span class="hljs-string">&#x27;B11&#x27;</span>, <span class="hljs-string">&#x27;B12&#x27;</span>, <span class="hljs-string">&#x27;B13&#x27;</span>, <span class="hljs-string">&#x27;B14&#x27;</span>, <span class="hljs-string">&#x27;C1&#x27;</span>, <span class="hljs-string">&#x27;C2&#x27;</span>, <span class="hljs-string">&#x27;C3&#x27;</span>, <span class="hljs-string">&#x27;C4&#x27;</span>, <span class="hljs-string">&#x27;C5&#x27;</span>, <span class="hljs-string">&#x27;C6&#x27;</span>&#125;;<br>years = [<span class="hljs-number">2024</span>, <span class="hljs-number">2025</span>, <span class="hljs-number">2026</span>, <span class="hljs-number">2027</span>, <span class="hljs-number">2028</span>, <span class="hljs-number">2029</span>, <span class="hljs-number">2030</span>];<br>planting_numbers = [<br>    <span class="hljs-number">1</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>;<br>    <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>;<br>    <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>;<br>    <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">13</span>;<br>    <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">8</span>;<br>    <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>;<br>    <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>];<br><br><span class="hljs-comment">% 转置矩阵，使年份对齐X轴，土地编号对齐Y轴</span><br>planting_numbers = planting_numbers&#x27;; <br><br><span class="hljs-comment">% 创建热图</span><br><span class="hljs-built_in">figure</span>;<br>h = heatmap(years, land, planting_numbers);<br><br><span class="hljs-comment">% 设置标题和轴标签</span><br>h.Title = <span class="hljs-string">&#x27;&#x27;</span>;<br>h.XLabel = <span class="hljs-string">&#x27;&#x27;</span>;<br>h.YLabel = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-comment">% 调整颜色图</span><br>h.Colormap = parula; <span class="hljs-comment">% 可以根据喜好调整为其他配色，例如 jet, hot, cool</span><br>h.ColorbarVisible = <span class="hljs-built_in">true</span>; <span class="hljs-comment">% 显示颜色条</span><br><br><span class="hljs-comment">% 设置字体大小</span><br>h.FontSize = <span class="hljs-number">12</span>;<br></code></pre></td></tr></table></figure><h3 id="多对象柱状图">多对象柱状图</h3><figure><img src="https://pic.imgdb.cn/item/66e18a2ad9c307b7e91cf2ca.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义地块类型和对应的地块面积</span><br>land_type = &#123;<span class="hljs-string">&#x27;平旱地&#x27;</span>, <span class="hljs-string">&#x27;梯田&#x27;</span>, <span class="hljs-string">&#x27;山坡地&#x27;</span>, <span class="hljs-string">&#x27;水浇地&#x27;</span>, <span class="hljs-string">&#x27;普通大棚&#x27;</span>, <span class="hljs-string">&#x27;智慧大棚&#x27;</span>&#125;;<br>land_area = [<span class="hljs-number">80</span>, <span class="hljs-number">55</span>, <span class="hljs-number">35</span>, <span class="hljs-number">72</span>, <span class="hljs-number">68</span>, <span class="hljs-number">55</span>,... <span class="hljs-comment">% 平旱地</span><br>             <span class="hljs-number">60</span>, <span class="hljs-number">46</span>, <span class="hljs-number">40</span>, <span class="hljs-number">28</span>, <span class="hljs-number">25</span>, <span class="hljs-number">86</span>, <span class="hljs-number">55</span>, <span class="hljs-number">44</span>, <span class="hljs-number">50</span>, <span class="hljs-number">25</span>, <span class="hljs-number">60</span>, <span class="hljs-number">45</span>, <span class="hljs-number">35</span>, <span class="hljs-number">20</span>,... <span class="hljs-comment">% 梯田</span><br>             <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">27</span>, <span class="hljs-number">20</span>,... <span class="hljs-comment">% 山坡地</span><br>             <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">20</span>,... <span class="hljs-comment">% 水浇地</span><br>             <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>... <span class="hljs-comment">% 普通大棚</span><br>             <span class="hljs-number">0.6</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.6</span>]; <span class="hljs-comment">% 智慧大棚</span><br><br><span class="hljs-comment">% 每种地块类型的索引</span><br>idx_pinghandi = <span class="hljs-number">1</span>:<span class="hljs-number">6</span>;<br>idx_titian = <span class="hljs-number">7</span>:<span class="hljs-number">20</span>;<br>idx_shanpodi = <span class="hljs-number">21</span>:<span class="hljs-number">26</span>;<br>idx_shuijiaodi = <span class="hljs-number">27</span>:<span class="hljs-number">34</span>;<br>idx_putongdapeng = <span class="hljs-number">35</span>:<span class="hljs-number">50</span>;  <br>idx_zhihuidapeng = <span class="hljs-number">51</span>:<span class="hljs-number">54</span>;<br><br><span class="hljs-comment">% 计算各个类型地块的总面积</span><br>total_pinghandi = sum(land_area(idx_pinghandi));<br>total_titian = sum(land_area(idx_titian));<br>total_shanpodi = sum(land_area(idx_shanpodi));<br>total_shuijiaodi = sum(land_area(idx_shuijiaodi));<br>total_putongdapeng = sum(land_area(idx_putongdapeng));<br>total_zhihuidapeng = sum(land_area(idx_zhihuidapeng));<br><br><span class="hljs-comment">% 各类型总面积数组</span><br>total_area = [total_pinghandi, total_titian, total_shanpodi, total_shuijiaodi, total_putongdapeng, total_zhihuidapeng];<br><br><span class="hljs-comment">% 绘制柱状图</span><br><span class="hljs-built_in">figure</span>;<br>bar(total_area);<br>set(gca, <span class="hljs-string">&#x27;XTickLabel&#x27;</span>, land_type);<br>xlabel(<span class="hljs-string">&#x27;地块类型&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;总面积（亩）&#x27;</span>);<br>title(<span class="hljs-string">&#x27;各类地块总面积柱状图&#x27;</span>);<br>grid on;<br><br><span class="hljs-comment">% 添加文本标签显示具体面积数据</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">numel</span>(land_type)<br>    text(<span class="hljs-built_in">i</span>, total_area(<span class="hljs-built_in">i</span>), num2str(total_area(<span class="hljs-built_in">i</span>)), <span class="hljs-string">&#x27;HorizontalAlignment&#x27;</span>, <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-string">&#x27;VerticalAlignment&#x27;</span>, <span class="hljs-string">&#x27;bottom&#x27;</span>);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="饼状图">饼状图</h3><figure><img src="https://pic.imgdb.cn/item/66e18a5ed9c307b7e91d2bfc.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc,clear;<br>crop_names = &#123;<span class="hljs-string">&#x27;刀豆&#x27;</span>,<span class="hljs-string">&#x27;包菜&#x27;</span>,<span class="hljs-string">&#x27;南瓜&#x27;</span>,<span class="hljs-string">&#x27;土豆&#x27;</span>,<span class="hljs-string">&#x27;大白菜&#x27;</span>,<span class="hljs-string">&#x27;大麦&#x27;</span>,<span class="hljs-string">&#x27;小青菜&#x27;</span>,<span class="hljs-string">&#x27;小麦&#x27;</span>,<span class="hljs-string">&#x27;榆黄菇&#x27;</span>,<span class="hljs-string">&#x27;水稻&#x27;</span>,<span class="hljs-string">&#x27;油麦菜&#x27;</span>,<span class="hljs-string">&#x27;爬豆&#x27;</span>,<span class="hljs-string">&#x27;玉米&#x27;</span>,<span class="hljs-string">&#x27;生菜&#x27;</span>,<span class="hljs-string">&#x27;白灵菇&#x27;</span>,<span class="hljs-string">&#x27;白萝卜&#x27;</span>,<span class="hljs-string">&#x27;空心菜&#x27;</span>,<span class="hljs-string">&#x27;红萝卜&#x27;</span>,<span class="hljs-string">&#x27;红薯&#x27;</span>,<span class="hljs-string">&#x27;红豆&#x27;</span>,<span class="hljs-string">&#x27;绿豆&#x27;</span>,<span class="hljs-string">&#x27;羊肚菌&#x27;</span>,<span class="hljs-string">&#x27;芸豆&#x27;</span>,<span class="hljs-string">&#x27;芹菜&#x27;</span>,<span class="hljs-string">&#x27;茄子&#x27;</span>,<span class="hljs-string">&#x27;荞麦&#x27;</span>,<span class="hljs-string">&#x27;莜麦&#x27;</span>,<span class="hljs-string">&#x27;菜花&#x27;</span>,<span class="hljs-string">&#x27;菠菜&#x27;</span>,<span class="hljs-string">&#x27;西红柿&#x27;</span>,<span class="hljs-string">&#x27;谷子&#x27;</span>,<span class="hljs-string">&#x27;豇豆&#x27;</span>,<span class="hljs-string">&#x27;辣椒&#x27;</span>,<span class="hljs-string">&#x27;青椒&#x27;</span>,<span class="hljs-string">&#x27;香菇&#x27;</span>,<span class="hljs-string">&#x27;高粱&#x27;</span>,<span class="hljs-string">&#x27;黄心菜&#x27;</span>,<span class="hljs-string">&#x27;黄瓜&#x27;</span>,<span class="hljs-string">&#x27;黄豆&#x27;</span>,<span class="hljs-string">&#x27;黍子&#x27;</span>,<span class="hljs-string">&#x27;黑豆&#x27;</span>&#125;;<br>total_yields = [<span class="hljs-number">26880</span>,<span class="hljs-number">3930</span>,<span class="hljs-number">35100</span>,<span class="hljs-number">30000</span>,<span class="hljs-number">150000</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">35480</span>,<span class="hljs-number">170840</span>,<span class="hljs-number">9000</span>,<span class="hljs-number">21000</span>,<span class="hljs-number">4500</span>,<span class="hljs-number">9875</span>,<span class="hljs-number">132750</span>,<span class="hljs-number">2850</span>,<span class="hljs-number">18000</span>,<span class="hljs-number">100000</span>,<span class="hljs-number">3300</span>,<span class="hljs-number">36000</span>,<span class="hljs-number">36000</span>,<span class="hljs-number">22400</span>,<span class="hljs-number">33040</span>,<span class="hljs-number">4200</span>,<span class="hljs-number">6240</span>,<span class="hljs-number">1800</span>,<span class="hljs-number">45360</span>,<span class="hljs-number">1500</span>,<span class="hljs-number">14000</span>,<span class="hljs-number">3480</span>,<span class="hljs-number">900</span>,<span class="hljs-number">36210</span>,<span class="hljs-number">71400</span>,<span class="hljs-number">36240</span>,<span class="hljs-number">1200</span>,<span class="hljs-number">2610</span>,<span class="hljs-number">7200</span>,<span class="hljs-number">30000</span>,<span class="hljs-number">1620</span>,<span class="hljs-number">13050</span>,<span class="hljs-number">57000</span>,<span class="hljs-number">12500</span>,<span class="hljs-number">21850</span>];<br><br><span class="hljs-comment">% 找到总产量最大的 6 种作物的索引</span><br>[sorted_yields, indices] = <span class="hljs-built_in">sort</span>(total_yields, <span class="hljs-string">&#x27;descend&#x27;</span>);<br>top_6_indices = indices(<span class="hljs-number">1</span>:<span class="hljs-number">6</span>);<br><br><span class="hljs-comment">% 提取总产量最大的 6 种作物的名称和产量</span><br>top_6_crop_names = crop_names(top_6_indices);<br>top_6_yields = sorted_yields(<span class="hljs-number">1</span>:<span class="hljs-number">6</span>);<br><br><span class="hljs-comment">% 计算占比</span><br>total_yield = sum(total_yields);  <span class="hljs-comment">% 计算全部作物的总产量</span><br>percentages = top_6_yields / total_yield;<br><br><span class="hljs-comment">% 绘制饼图</span><br>pie(top_6_yields);<br><span class="hljs-built_in">legend</span>(cellstr(strcat(top_6_crop_names)));<br>title(<span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="共轴折线图">共轴折线图</h3><figure><img src="https://pic.imgdb.cn/item/66e18a98d9c307b7e91d6d02.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc,clear;<br><span class="hljs-comment">% 数据准备</span><br>yield_percentages = [<span class="hljs-number">93</span> <span class="hljs-number">96</span> <span class="hljs-number">99</span> <span class="hljs-number">101</span> <span class="hljs-number">104</span> <span class="hljs-number">107</span> <span class="hljs-number">110</span>];<br>profit_yield = [<span class="hljs-number">5918674.225</span> <span class="hljs-number">7160341.775</span> <span class="hljs-number">7133337.781</span> <span class="hljs-number">8161369.288</span> <span class="hljs-number">8600767.775</span> <span class="hljs-number">8918903.188</span> <span class="hljs-number">9086045.75</span>];<br>cost_percentages = [<span class="hljs-number">95</span> <span class="hljs-number">100</span> <span class="hljs-number">105</span> <span class="hljs-number">110</span> <span class="hljs-number">115</span> ];<br>profit_cost = [<span class="hljs-number">8350873.55</span> <span class="hljs-number">8782234</span> <span class="hljs-number">8442952.9</span> <span class="hljs-number">6415051.275</span> <span class="hljs-number">5898857.225</span>];<br>sales_percentages = [<span class="hljs-number">95</span> <span class="hljs-number">97</span> <span class="hljs-number">99</span> <span class="hljs-number">101</span> <span class="hljs-number">103</span> <span class="hljs-number">105</span>];<br>profit_sales = [<span class="hljs-number">7225529.469</span> <span class="hljs-number">7749355.981</span> <span class="hljs-number">7894046.581</span> <span class="hljs-number">9346733.056</span> <span class="hljs-number">8425265.481</span> <span class="hljs-number">9151209.469</span>];<br><br><span class="hljs-comment">% 绘制三个共坐标轴的折线图</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">plot</span>(yield_percentages, profit_yield, <span class="hljs-string">&#x27;-o&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;MarkerSize&#x27;</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;亩产量与收益&#x27;</span>);<br><span class="hljs-built_in">hold</span> on;<br><span class="hljs-built_in">plot</span>(cost_percentages, profit_cost, <span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;MarkerSize&#x27;</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;种植成本与收益&#x27;</span>);<br><span class="hljs-built_in">plot</span>(sales_percentages, profit_sales, <span class="hljs-string">&#x27;-d&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;MarkerSize&#x27;</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;预期销售量与收益&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;变化范围&#x27;</span>);<br><span class="hljs-comment">% 设置横坐标刻度标签</span><br>xticks(yield_percentages);<br>xticklabels(cellstr(strcat(num2str(yield_percentages&#x27;), <span class="hljs-string">&#x27;%&#x27;</span>))); <span class="hljs-comment">% 在原始的数据基础上添加百分号</span><br>ylabel(<span class="hljs-string">&#x27;最优种植方案的收益&#x27;</span>);<br>title(<span class="hljs-string">&#x27;不同因素对最优种植方案收益的影响&#x27;</span>);<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;show&#x27;</span>);<br>grid on;<br></code></pre></td></tr></table></figure><h3 id="双折线面积填充图">双折线面积填充图</h3><figure><img src="https://pic.imgdb.cn/item/66e18abbd9c307b7e91d98f9.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义年份</span><br>years = <span class="hljs-number">2024</span>:<span class="hljs-number">2030</span>;<br><br><span class="hljs-comment">% 定义问题二和问题三的数据</span><br>problem_2 = [<span class="hljs-number">6073137.855</span>, <span class="hljs-number">9703740.231</span>, <span class="hljs-number">8240189.817</span>, <span class="hljs-number">8520396.352</span>, <span class="hljs-number">10605292.94</span>, <span class="hljs-number">9159255.435</span>, <span class="hljs-number">7725378.371</span>];<br>problem_3 = [<span class="hljs-number">6102450.555</span>, <span class="hljs-number">10786663.11</span>, <span class="hljs-number">11004881.17</span>, <span class="hljs-number">9784583.747</span>, <span class="hljs-number">13440646.73</span>, <span class="hljs-number">13191190.89</span>, <span class="hljs-number">10449639.38</span>];<br><br><span class="hljs-comment">% 绘制双折线图</span><br><span class="hljs-built_in">figure</span>;<br><br><span class="hljs-comment">% 填充两条折线之间的区域</span><br>fill([years, <span class="hljs-built_in">fliplr</span>(years)], [problem_2, <span class="hljs-built_in">fliplr</span>(problem_3)], [<span class="hljs-number">0.8</span> <span class="hljs-number">0.8</span> <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;EdgeColor&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>); <span class="hljs-comment">% 蓝色填充</span><br><br><span class="hljs-built_in">hold</span> on;<br><br><span class="hljs-comment">% 绘制问题二和问题三的折线</span><br><span class="hljs-built_in">plot</span>(years, problem_2, <span class="hljs-string">&#x27;-o&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;问题二&#x27;</span>, <span class="hljs-string">&#x27;Color&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">% 问题二</span><br><span class="hljs-built_in">plot</span>(years, problem_3, <span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;问题三&#x27;</span>, <span class="hljs-string">&#x27;Color&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>); <span class="hljs-comment">% 问题三</span><br><br><span class="hljs-comment">% 添加图例</span><br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;show&#x27;</span>);<br><br><span class="hljs-comment">% 设置坐标轴标签</span><br>xlabel(<span class="hljs-string">&#x27;年份&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;数据值&#x27;</span>);<br><br><span class="hljs-comment">% 添加标题</span><br>title(<span class="hljs-string">&#x27;问题二与问题三的变化趋势（颜色填充）&#x27;</span>);<br><br><span class="hljs-comment">% 显示网格</span><br>grid on;<br><br><span class="hljs-comment">% 保持图形</span><br><span class="hljs-built_in">hold</span> off;<br></code></pre></td></tr></table></figure><h3 id="二次函数曲线预测">二次函数曲线预测</h3><figure><img src="https://pic.imgdb.cn/item/66e188d6d9c307b7e91b6e27.png"alt="https://pic.imgdb.cn/item/66e188d6d9c307b7e91b6e27.png" /><figcaptionaria-hidden="true">https://pic.imgdb.cn/item/66e188d6d9c307b7e91b6e27.png</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 提供的数据</span><br>time = datetime(&#123;<span class="hljs-string">&#x27;2021.10&#x27;</span>, <span class="hljs-string">&#x27;2021.11&#x27;</span>, <span class="hljs-string">&#x27;2021.12&#x27;</span>, <span class="hljs-string">&#x27;2022.1&#x27;</span>, <span class="hljs-string">&#x27;2022.2&#x27;</span>, <span class="hljs-string">&#x27;2022.3&#x27;</span>, <span class="hljs-string">&#x27;2022.4&#x27;</span>, <span class="hljs-string">&#x27;2022.5&#x27;</span>, <span class="hljs-string">&#x27;2022.6&#x27;</span>, <span class="hljs-string">&#x27;2022.7&#x27;</span>, <span class="hljs-string">&#x27;2022.8&#x27;</span>, <span class="hljs-string">&#x27;2022.9&#x27;</span>, <span class="hljs-string">&#x27;2022.10&#x27;</span>, <span class="hljs-string">&#x27;2022.11&#x27;</span>, <span class="hljs-string">&#x27;2022.12&#x27;</span>&#125;, <span class="hljs-string">&#x27;InputFormat&#x27;</span>, <span class="hljs-string">&#x27;yyyy.MM&#x27;</span>);<br>export_data = [<span class="hljs-number">6</span>, <span class="hljs-number">3.7</span>, <span class="hljs-number">1.8</span>, <span class="hljs-number">5.6</span>, <span class="hljs-number">10.4</span>, <span class="hljs-number">12.0</span>, <span class="hljs-number">13.1</span>, <span class="hljs-number">17.4</span>, <span class="hljs-number">20.2</span>, <span class="hljs-number">25.7</span>, <span class="hljs-number">34</span>, <span class="hljs-number">38.9</span>, <span class="hljs-number">49.9</span>, <span class="hljs-number">59.3</span>, <span class="hljs-number">67.9</span>];<br><br><span class="hljs-comment">% 计算相对日期序列号</span><br>time_relative_serial = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(time);<br><br><span class="hljs-comment">% 给定的二次曲线参数</span><br>const = <span class="hljs-number">6.897</span>;<br>linear_coeff = <span class="hljs-number">-1.939</span>;<br>quadratic_coeff = <span class="hljs-number">0.399</span>;<br><br><span class="hljs-comment">% 使用二次曲线拟合</span><br>quadratic_fit = @(x) const + linear_coeff * x + quadratic_coeff * x.^<span class="hljs-number">2</span>;<br><br><span class="hljs-comment">% 预测未来10个月的值</span><br>forecast_horizon = <span class="hljs-number">10</span>;<br>forecast_time_relative_serial = (<span class="hljs-number">1</span>:forecast_horizon) + <span class="hljs-built_in">max</span>(time_relative_serial);<br>forecast_values = quadratic_fit(forecast_time_relative_serial);<br><br><span class="hljs-comment">% 绘制实际值、二次曲线和预测值</span><br><span class="hljs-built_in">figure</span>;<br><span class="hljs-built_in">plot</span>(time_relative_serial, export_data, <span class="hljs-string">&#x27;o-&#x27;</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;实际值&#x27;</span>);<br><span class="hljs-built_in">hold</span> on;<br><span class="hljs-built_in">plot</span>(forecast_time_relative_serial, forecast_values, <span class="hljs-string">&#x27;r--o&#x27;</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;预测值&#x27;</span>);<br><span class="hljs-built_in">plot</span>(time_relative_serial, quadratic_fit(time_relative_serial), <span class="hljs-string">&#x27;k-&#x27;</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;二次曲线拟合&#x27;</span>);<br>title(<span class="hljs-string">&#x27;新能源汽车出口量预测（二次曲线拟合）&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;相对时间序列号&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;出口量（万）&#x27;</span>);<br><br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;Location&#x27;</span>, <span class="hljs-string">&#x27;Best&#x27;</span>);<br>grid on;<br></code></pre></td></tr></table></figure><h3 id="拟合---线性趋势模型">拟合---线性趋势模型</h3><figure><img src="https://pic.imgdb.cn/item/66e18b87d9c307b7e91ea6a2.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%2.0线性预测</span><br><span class="hljs-comment">% 提供的数据</span><br>time = datetime(&#123;<span class="hljs-string">&#x27;2021.10&#x27;</span>, <span class="hljs-string">&#x27;2021.11&#x27;</span>, <span class="hljs-string">&#x27;2021.12&#x27;</span>, <span class="hljs-string">&#x27;2022.1&#x27;</span>, <span class="hljs-string">&#x27;2022.2&#x27;</span>, <span class="hljs-string">&#x27;2022.3&#x27;</span>, <span class="hljs-string">&#x27;2022.4&#x27;</span>, <span class="hljs-string">&#x27;2022.5&#x27;</span>, <span class="hljs-string">&#x27;2022.6&#x27;</span>, <span class="hljs-string">&#x27;2022.7&#x27;</span>, <span class="hljs-string">&#x27;2022.8&#x27;</span>, <span class="hljs-string">&#x27;2022.9&#x27;</span>, <span class="hljs-string">&#x27;2022.10&#x27;</span>, <span class="hljs-string">&#x27;2022.11&#x27;</span>, <span class="hljs-string">&#x27;2022.12&#x27;</span>&#125;, <span class="hljs-string">&#x27;InputFormat&#x27;</span>, <span class="hljs-string">&#x27;yyyy.MM&#x27;</span>);<br>export_data = [<span class="hljs-number">6</span>, <span class="hljs-number">3.7</span>, <span class="hljs-number">1.8</span>, <span class="hljs-number">5.6</span>, <span class="hljs-number">10.4</span>, <span class="hljs-number">12.0</span>, <span class="hljs-number">13.1</span>, <span class="hljs-number">17.4</span>, <span class="hljs-number">20.2</span>, <span class="hljs-number">25.7</span>, <span class="hljs-number">34</span>, <span class="hljs-number">38.9</span>, <span class="hljs-number">49.9</span>, <span class="hljs-number">59.3</span>, <span class="hljs-number">67.9</span>];<br><br><span class="hljs-comment">% 使用序列号代替日期时间</span><br>time_serial = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(time);<br><br><span class="hljs-comment">% 拟合线性趋势模型</span><br>linear_trend_model = fit(time_serial&#x27;, export_data&#x27;, <span class="hljs-string">&#x27;poly1&#x27;</span>);<br><br><span class="hljs-comment">% 预测未来值</span><br>forecast_horizon = <span class="hljs-number">12</span>;<br>forecast_time_serial = <span class="hljs-built_in">length</span>(time_serial) + (<span class="hljs-number">1</span>:forecast_horizon);<br>forecast_values = feval(linear_trend_model, forecast_time_serial);<br><br><span class="hljs-comment">% 将序列号转换回日期时间</span><br>forecast_time = time(<span class="hljs-keyword">end</span>) + calmonths(<span class="hljs-number">1</span>:forecast_horizon);<br><br><span class="hljs-comment">% 绘制实际值、线性趋势和预测值</span><br><span class="hljs-built_in">figure</span>;<br><span class="hljs-built_in">plot</span>(time, export_data, <span class="hljs-string">&#x27;o-&#x27;</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;实际值&#x27;</span>);<br><span class="hljs-built_in">hold</span> on;<br><span class="hljs-built_in">plot</span>(forecast_time, forecast_values, <span class="hljs-string">&#x27;r--o&#x27;</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;预测值&#x27;</span>);<br><span class="hljs-built_in">plot</span>(time, feval(linear_trend_model, time_serial), <span class="hljs-string">&#x27;k-&#x27;</span>, <span class="hljs-string">&#x27;DisplayName&#x27;</span>, <span class="hljs-string">&#x27;线性趋势&#x27;</span>);<br>title(<span class="hljs-string">&#x27;新能源汽车出口量预测（线性趋势模型）&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;时间&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;出口量（万）&#x27;</span>);<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;Location&#x27;</span>, <span class="hljs-string">&#x27;Best&#x27;</span>);<br>grid on;<br><br><span class="hljs-comment">% 不设置横坐标刻度标签</span><br>xticks([]);<br>xticklabels([]);<br></code></pre></td></tr></table></figure><h3 id="曲线填充图">曲线填充图</h3><p><code>area</code>函数是Y轴数值对 <code>x</code>坐标轴围成的面积图，该函数根据 <code>Y</code>的形状填充曲线之间的区域。</p><p><code>fill</code>函数是创建二维填充补片（patch），即填充多边形区域绘制为补片，其顶点位于由X和Y指定的(x,y)坐标位置，主要用于平面中多个区域的颜色填充。</p><p>patch函数是创建彩色多边形的补片，即按X和Y指定为每个顶点的坐标创建一个或多个彩色多边形补片，主要用于平面中多边形的颜色填充。</p><p><code>patch</code> 与 <code>fill</code>函数功能和用法类似。<code>area</code>函数主要针对与坐标轴围成的区域的填充，如果需要对图形窗口内任意闭合区域或多边形区域及进行填充，则需要用到<code>fill</code>和<code>patch</code>函数。</p><figure><img src="https://pic.imgdb.cn/item/662a276d0ea9cb1403757781.jpg"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc; clear; close all;<br><br><span class="hljs-comment">% 数据</span><br>x = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">-8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">100</span>);<br>y1 = normpdf(x,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>);<span class="hljs-comment">% Normal probability density function</span><br>y2 = normpdf(x,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).*<span class="hljs-number">0.5</span>+normpdf(x,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>).*<span class="hljs-number">0.5</span>;<br>y3 = normpdf(x,<span class="hljs-number">-3</span>,<span class="hljs-number">2</span>);<br>y = [y1;y2;y3];<br><br><span class="hljs-comment">% 颜色</span><br>c = [<span class="hljs-number">184</span> <span class="hljs-number">194</span> <span class="hljs-number">140</span>; <span class="hljs-number">201</span> <span class="hljs-number">226</span> <span class="hljs-number">240</span>; <span class="hljs-number">250</span> <span class="hljs-number">181</span> <span class="hljs-number">157</span>]./<span class="hljs-number">255</span>; <span class="hljs-comment">% Three colors</span><br><br><span class="hljs-comment">% 绘图</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(y,<span class="hljs-number">1</span>)<br>area(x,y(<span class="hljs-built_in">i</span>,:),<span class="hljs-string">&#x27;FaceColor&#x27;</span>,c(<span class="hljs-built_in">i</span>,:),<span class="hljs-string">&#x27;EdgeColor&#x27;</span>,<span class="hljs-string">&#x27;none&#x27;</span>,<span class="hljs-string">&#x27;FaceAlpha&#x27;</span>,<span class="hljs-number">0.5</span>); <span class="hljs-built_in">hold</span> on<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% 坐标轴</span><br>xlabel(<span class="hljs-string">&#x27;x/Samples&#x27;</span>),ylabel(<span class="hljs-string">&#x27;y/Value&#x27;</span>)<br><span class="hljs-built_in">legend</span>(&#123;<span class="hljs-string">&#x27;- Area No.1&#x27;</span>,<span class="hljs-string">&#x27;- Area No.2&#x27;</span>,<span class="hljs-string">&#x27;- Area No.3&#x27;</span>&#125;)<br>set(gca,<span class="hljs-string">&#x27;XLim&#x27;</span>,[<span class="hljs-number">-8</span> <span class="hljs-number">12</span>]);<br><br><span class="hljs-comment">% 修饰</span><br>defaultAxes<br></code></pre></td></tr></table></figure><p><strong>数据生成</strong></p><ol type="1"><li><code>x = linspace(-8,12,100);</code><ul><li>生成向量<code>x</code>，包含从-8到12之间均匀分布的100个点，这些点将用于绘制函数曲线。</li></ul></li></ol><p><strong>计算概率密度函数</strong></p><ol start="2" type="1"><li><code>y1 = normpdf(x,4,6);</code><ul><li>计算正态分布PDF，其中均值为4，标准差为6。结果存储在 <code>y1</code>中。</li></ul></li><li><code>y2 = normpdf(x,0,1).*0.5+normpdf(x,4,2).*0.5;</code><ul><li>计算两个正态分布PDF的线性组合，其中一个均值为0，标准差为1，权重为0.5；另一个均值为4，标准差为2，权重也为0.5。结果合并后存入<code>y2</code>。</li></ul></li><li><code>y3 = normpdf(x,-3,2);</code><ul><li>计算均值为-3，标准差为2的正态分布PDF，并将其结果保存在<code>y3</code> 中。</li></ul></li></ol><p><strong>定义颜色</strong></p><ol start="5" type="1"><li><code>c = [184 194 140; 201 226 240; 250 181 157]./255;</code><ul><li>定义一个3×3矩阵，包含三组RGB颜色值，分别对应三个分布的填充颜色。这些数值经过除以255的操作，将它们归一化到0到1之间，以便MATLAB能够正确理解。</li></ul></li></ol><p><strong>绘制图形</strong></p><ol start="6" type="1"><li><code>for i = 1:size(y,1)</code><ul><li>使用循环结构，遍历 <code>y</code> 的每一行（即每一个分布）。</li></ul></li><li><code>area(x,y(i,:), ...)</code><ul><li>对于每个分布，调用 <code>area</code> 函数绘制面积图。输入参数为<code>x</code> 轴坐标向量和对应的 <code>y</code> 值向量。</li></ul></li><li><code>'FaceColor', c(i,:), 'EdgeColor', 'none', 'FaceAlpha', 0.5</code><ul><li>设置面积图的填充颜色为当前循环索引对应的色彩，边缘颜色为无（即不显示边缘线），并设置填充透明度为0.5，使得底层分布能部分透过上层分布显现。</li></ul></li><li><code>hold on</code><ul><li>在同一张图上保持绘制状态，允许后续循环中的面积图叠加在同一坐标系中。</li></ul></li><li><code>end</code><ul><li>结束循环。</li></ul></li></ol><p><strong>坐标轴与图例</strong></p><ol start="11" type="1"><li><code>xlabel('x/Samples'), ylabel('y/Value')</code><ul><li>设置横纵坐标的标签，分别为“x/Samples”和“y/Value”。</li></ul></li><li><code>legend(&#123;'- Area No.1', '- Area No.2', '- Area No.3'&#125;)</code><ul><li>添加图例，标识三个面积区域分别为“Area No.1”、“Area No.2”和“AreaNo.3”。</li></ul></li></ol><p><strong>坐标轴范围设定</strong></p><ol start="13" type="1"><li><code>set(gca, 'XLim', [-8 12])</code><ul><li>设置当前坐标轴（gca）的x轴范围为-8到12，确保图形覆盖指定的x轴区间。</li></ul></li></ol><h3 id="双向对比图">双向对比图</h3><figure><img src="https://pic.imgdb.cn/item/662a2c000ea9cb140382bfbc.jpg"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 设置参数</span><br>num_values = <span class="hljs-number">100</span>;     <span class="hljs-comment">% 随机数数量</span><br>min_value = <span class="hljs-number">-100</span>;    <span class="hljs-comment">% 最小值（包括）</span><br>max_value = <span class="hljs-number">100</span>;     <span class="hljs-comment">% 最大值（包括）</span><br><br><span class="hljs-comment">% 生成随机数列表</span><br>y = min_value + (max_value - min_value) * <span class="hljs-built_in">rand</span>(num_values, <span class="hljs-number">1</span>);<br>x = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-built_in">length</span>(y));<br>y1 = y; y1(y1&lt;<span class="hljs-number">0</span>)=<span class="hljs-number">0</span>;      <span class="hljs-comment">% 负数</span><br>y2 = y; y2(y2&gt;<span class="hljs-number">0</span>)=<span class="hljs-number">0</span>;      <span class="hljs-comment">% 正数</span><br><span class="hljs-built_in">figure</span>,<br>area(x,y1,<span class="hljs-string">&#x27;FaceColor&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;EdgeColor&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;FaceAlpha&#x27;</span>,<span class="hljs-number">0.6</span>); <span class="hljs-built_in">hold</span> on<br>area(x,y2,<span class="hljs-string">&#x27;FaceColor&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;EdgeColor&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;FaceAlpha&#x27;</span>,<span class="hljs-number">0.6</span>);<br>xlabel(<span class="hljs-string">&#x27;x-axis/Samples&#x27;</span>),ylabel(<span class="hljs-string">&#x27;y-axis/Intensity value&#x27;</span>)<br>set(gca,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times New Roman&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>)<br><span class="hljs-built_in">legend</span>(&#123;<span class="hljs-string">&#x27;- Positive value area&#x27;</span>,<span class="hljs-string">&#x27;- Negative value area&#x27;</span>&#125;)<br>set(gcf,<span class="hljs-string">&#x27;Color&#x27;</span>,<span class="hljs-string">&#x27;White&#x27;</span>);  <span class="hljs-comment">%设置背景颜色</span><br><span class="hljs-comment">% 修饰</span><br>defaultAxes<br></code></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 生成随机数列表</span><br>y = min_value + (max_value - min_value) * <span class="hljs-built_in">rand</span>(num_values, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>这一行利用Matlab内置函数<code>rand()</code>生成一个<code>num_values</code>行、1列的矩阵，其中元素值为在[0,1]之间均匀分布的随机数。然后将这些随机数乘以<code>(max_value - min_value)</code>得到一个缩放后的范围，并加上<code>min_value</code>，确保最终生成的随机数在<code>[-100, 100]</code>范围内。结果存储在变量<code>y</code>中。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">x = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-built_in">length</span>(y));<br></code></pre></td></tr></table></figure><p>这里使用<code>linspace()</code>函数创建一个等差数列<code>x</code>，起点为0，终点为100，包含的点数与<code>y</code>的长度相同。这意味着<code>x</code>将作为面积图的x轴坐标，与<code>y</code>中的随机数值一一对应。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">y1 = y; y1(y1&lt;<span class="hljs-number">0</span>)=<span class="hljs-number">0</span>;      <span class="hljs-comment">% 负数</span><br>y2 = y; y2(y2&gt;<span class="hljs-number">0</span>)=<span class="hljs-number">0</span>;      <span class="hljs-comment">% 正数</span><br></code></pre></td></tr></table></figure><p>为了分别绘制正负值部分的面积图，创建两个新变量<code>y1</code>和<code>y2</code>。它们最初都复制自<code>y</code>，然后通过逻辑索引将：- <code>y1</code>中所有小于0的值置为0，保留所有负数部分； -<code>y2</code>中所有大于0的值置为0，保留所有正数部分。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">figure</span>,<br>area(x,y1,<span class="hljs-string">&#x27;FaceColor&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;EdgeColor&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;FaceAlpha&#x27;</span>,<span class="hljs-number">0.6</span>); <span class="hljs-built_in">hold</span> on<br>area(x,y2,<span class="hljs-string">&#x27;FaceColor&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;EdgeColor&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;FaceAlpha&#x27;</span>,<span class="hljs-number">0.6</span>);<br></code></pre></td></tr></table></figure><p>首先打开一个新的图形窗口(<code>figure</code>)，然后使用<code>area()</code>函数绘制面积图：-第一个面积图基于<code>x</code>和<code>y1</code>，表示负值部分，其填充颜色(<code>FaceColor</code>)和边缘颜色(<code>EdgeColor</code>)均为红色(<code>'r'</code>)，透明度(<code>FaceAlpha</code>)设为0.6；-第二个面积图基于<code>x</code>和<code>y2</code>，表示正值部分，颜色属性与第一个面积图相同，只是颜色为蓝色(<code>'b'</code>)。</p><p><code>hold on</code>命令确保在同一张图上绘制这两个面积图，不会被自动清空。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs m">xlabel(<span class="hljs-string">&#x27;x-axis/Samples&#x27;</span>),ylabel(<span class="hljs-string">&#x27;y-axis/Intensity value&#x27;</span>)<br>set(gca,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times New Roman&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>)<br>legend(&#123;<span class="hljs-string">&#x27;- Positive value area&#x27;</span>,<span class="hljs-string">&#x27;- Negative value area&#x27;</span>&#125;)<br>set(gcf,<span class="hljs-string">&#x27;Color&#x27;</span>,<span class="hljs-string">&#x27;White&#x27;</span>);  <span class="hljs-comment">%设置背景颜色</span><br></code></pre></td></tr></table></figure><p>接下来对图形进行标注和样式调整： -设置x轴标签为“x-axis/Samples”，y轴标签为“y-axis/Intensity value”； -使用<code>set(gca,...)</code>修改当前坐标轴属性，将字体设为“Times NewRoman”，字号设为12； - 添加图例，说明两个面积图分别代表“- Positive valuearea”（正值区域）和“- Negative value area”（负值区域）； -使用<code>set(gcf,...)</code>设置当前图形窗口的背景颜色为白色。</p><p>fill和patch函数，这两个函数功能和用法类似，它们的基本用法MATLAB帮助文件均有详细说明。以下以fill函数为例，用一个稍复杂的应用为例进行说明。</p><h3 id="置信度区间图">置信度区间图</h3><p>首先，我们产生一条含随机噪声的Bessel分布数据。然后，对其进行多项式拟合，绘制拟合误差范围的置信度区间。<img src="https://pic.imgdb.cn/item/662a37920ea9cb140399520b.jpg"alt="alt text" /> <figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs m">x <span class="hljs-built_in">=</span> <span class="hljs-number">0</span> : <span class="hljs-number">0.2</span> : <span class="hljs-number">10</span>;<br>y <span class="hljs-built_in">=</span> besselj(<span class="hljs-number">0</span>, x);   <span class="hljs-comment">% Bessel 函数</span><br>y <span class="hljs-built_in">=</span> y+<span class="hljs-number">0.8</span>*rand([<span class="hljs-number">1</span>,length(x)]);<br><span class="hljs-comment">% 多项式拟合</span><br>[p,S] <span class="hljs-built_in">=</span> polyfit(x,y,<span class="hljs-number">3</span>);<br>[y_fit, delta] <span class="hljs-built_in">=</span> polyval(p,x,S);   <span class="hljs-comment">% delta 标准误差估计值</span><br><span class="hljs-comment">%绘制原始数据、线性拟合及95%预测区间 y±2Δ</span><br>uy <span class="hljs-built_in">=</span> y_fit+<span class="hljs-number">2</span>*delta;<br>dy <span class="hljs-built_in">=</span> y_fit-<span class="hljs-number">2</span>*delta;<br>figure,<br><span class="hljs-comment">% 绘制原始数据</span><br>plot(x,y,<span class="hljs-string">&#x27;rx&#x27;</span>,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">1.5</span>)<br>hold on<br><span class="hljs-comment">%绘制拟合曲线 </span><br>plot(x,y_fit,<span class="hljs-string">&#x27;Color&#x27;</span>,[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>],<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">1.5</span>)<br>hold on<br><span class="hljs-comment">%绘制置信区间</span><br>xconf <span class="hljs-built_in">=</span> [x x(end:-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>)] ;<span class="hljs-comment">% x坐标回转形成闭合区域</span><br>yconf <span class="hljs-built_in">=</span> [uy dy(end:-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>)]; <span class="hljs-comment">% 扩大数据区间</span><br>c2 <span class="hljs-built_in">=</span> [<span class="hljs-number">182</span>,<span class="hljs-number">100</span>,<span class="hljs-number">199</span>]./<span class="hljs-number">255</span>;<br>plot([x<span class="hljs-string">&#x27;,x&#x27;</span>],[uy<span class="hljs-string">&#x27;,dy&#x27;</span>],<span class="hljs-string">&#x27;Color&#x27;</span>,c2,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">1.2</span>,<span class="hljs-string">&#x27;LineStyle&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>)<br>fill(xconf, yconf,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;FaceColor&#x27;</span>,c2,<span class="hljs-string">&#x27;EdgeColor&#x27;</span>,<span class="hljs-string">&#x27;none&#x27;</span>,<span class="hljs-string">&#x27;FaceAlpha&#x27;</span>,<span class="hljs-number">0.1</span>);<br>xlabel(<span class="hljs-string">&#x27;x-axis/Samples&#x27;</span>),ylabel(<span class="hljs-string">&#x27;y-axis/Intensity value&#x27;</span>)<br>set(gca,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times New Roman&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>)<br>legend(&#123;<span class="hljs-string">&#x27;- Data&#x27;</span>,<span class="hljs-string">&#x27;- Linear fit&#x27;</span>,<span class="hljs-string">&#x27;- 95% Prediction Interval&#x27;</span>&#125;)<br>set(gcf,<span class="hljs-string">&#x27;Color&#x27;</span>,<span class="hljs-string">&#x27;White&#x27;</span>);  <span class="hljs-comment">% Background is white</span><br></code></pre></td></tr></table></figure></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">x = <span class="hljs-number">0</span> : <span class="hljs-number">0.2</span> : <span class="hljs-number">10</span>;<br>y = <span class="hljs-built_in">besselj</span>(<span class="hljs-number">0</span>, x);   <span class="hljs-comment">% Bessel 函数</span><br>y = y+<span class="hljs-number">0.8</span>*<span class="hljs-built_in">rand</span>([<span class="hljs-number">1</span>,<span class="hljs-built_in">length</span>(x)]);<br></code></pre></td></tr></table></figure><p>这部分定义了x轴的取值范围，并计算相应的Bessel函数值。具体步骤如下： -<code>x = 0 : 0.2 : 10;</code>：创建一个从0开始，以0.2为步长递增到10的向量，作为x轴坐标值。-<code>y = besselj(0, x);</code>：利用Matlab内置函数<code>besselj</code>计算阶数为0的Bessel函数在给定x值上的值，结果存储在向量<code>y</code>中。-<code>y = y+0.8*rand([1,length(x)]);</code>：为Bessel函数值添加随机噪声。生成一个与<code>y</code>同长度的随机向量（均值为0，标准差为1），乘以常数0.8后加到<code>y</code>上，使得数据点带有一定随机扰动。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 多项式拟合</span><br>[p,S] = polyfit(x,y,<span class="hljs-number">3</span>);<br>[y_fit, delta] = polyval(p,x,S);   <span class="hljs-comment">% delta 标准误差估计值</span><br></code></pre></td></tr></table></figure><p>这部分进行数据的三次多项式拟合： -<code>polyfit(x,y,3)</code>：使用<code>polyfit</code>函数对<code>x</code>和<code>y</code>数据进行三次多项式拟合，返回拟合多项式的系数向量<code>p</code>和结构体<code>S</code>，其中包含了拟合的标准误差等信息。-<code>polyval(p,x,S)</code>：使用<code>polyval</code>函数基于拟合的系数<code>p</code>和x坐标<code>x</code>计算拟合值，并利用结构体<code>S</code>中的信息计算标准误差估计值<code>delta</code>。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 绘制原始数据、线性拟合及95%预测区间 y±2Δ</span><br>uy = y_fit+<span class="hljs-number">2</span>*delta;<br>dy = y_fit<span class="hljs-number">-2</span>*delta;<br></code></pre></td></tr></table></figure><p>计算95%预测区间的上下界： -<code>uy = y_fit+2*delta;</code>：计算拟合值<code>y_fit</code>上方两倍标准误差的位置，即预测区间的上界。-<code>dy = y_fit-2*delta;</code>：计算拟合值<code>y_fit</code>下方两倍标准误差的位置，即预测区间的下界。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">figure</span>,<br><span class="hljs-comment">% 绘制原始数据</span><br><span class="hljs-built_in">plot</span>(x,y,<span class="hljs-string">&#x27;rx&#x27;</span>,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">1.5</span>)<br><span class="hljs-built_in">hold</span> on<br><span class="hljs-comment">% 绘制拟合曲线</span><br><span class="hljs-built_in">plot</span>(x,y_fit,<span class="hljs-string">&#x27;Color&#x27;</span>,[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>],<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">1.5</span>)<br><span class="hljs-built_in">hold</span> on<br><span class="hljs-comment">% 绘制置信区间</span><br>xconf = [x x(<span class="hljs-keyword">end</span>:<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>)] ;<span class="hljs-comment">% x坐标回转形成闭合区域</span><br>yconf = [uy dy(<span class="hljs-keyword">end</span>:<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>)]; <span class="hljs-comment">% 扩大数据区间</span><br>c2 = [<span class="hljs-number">182</span>,<span class="hljs-number">100</span>,<span class="hljs-number">199</span>]./<span class="hljs-number">255</span>;<br><span class="hljs-built_in">plot</span>([x&#x27;,x&#x27;],[uy&#x27;,dy&#x27;],<span class="hljs-string">&#x27;Color&#x27;</span>,c2,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">1.2</span>,<span class="hljs-string">&#x27;LineStyle&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>)<br>fill(xconf, yconf,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;FaceColor&#x27;</span>,c2,<span class="hljs-string">&#x27;EdgeColor&#x27;</span>,<span class="hljs-string">&#x27;none&#x27;</span>,<span class="hljs-string">&#x27;FaceAlpha&#x27;</span>,<span class="hljs-number">0.1</span>);<br></code></pre></td></tr></table></figure><p>这部分绘制图形并设置相关样式： -<code>figure</code>：创建一个新的图形窗口。 -<code>plot(x,y,'rx','LineWidth',1.5)</code>：绘制原始数据点，使用红色菱形标记('rx')，线宽为1.5。- <code>hold on</code>：保持当前图形，后续绘制将在同一窗口中进行。 -<code>plot(x,y_fit,'Color',[0 1 1],'LineWidth',1.5)</code>：绘制拟合曲线，颜色为亮青色，线宽为1.5。-<code>xconf = [x x(end:-1:1)]</code>：构造一个包含x轴坐标原序列及其逆序的向量，用于闭合预测区间图形。-<code>yconf = [uy dy(end:-1:1)]</code>：构造一个包含预测区间上界和下界逆序的向量，使区间闭合。-<code>c2 = [182,100,199]./255;</code>：定义预测区间颜色为淡紫色（RGB值转换为[0,1]范围）。-<code>plot([x',x'],[uy',dy'],'Color',c2,'LineWidth',1.2,'LineStyle','--')</code>：绘制预测区间的边界线，颜色为淡紫色，线宽1.2，虚线样式。-<code>fill(xconf, yconf,'k','FaceColor',c2,'EdgeColor','none','FaceAlpha',0.1)</code>：填充预测区间，内部颜色为淡紫色，无边框，填充透明度为0.1。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">xlabel(<span class="hljs-string">&#x27;x-axis/Samples&#x27;</span>),ylabel(<span class="hljs-string">&#x27;y-axis/Intensity value&#x27;</span>)<br>set(gca,<span class="hljs-string">&#x27;FontName&#x27;</span>,<span class="hljs-string">&#x27;Times New Roman&#x27;</span>,<span class="hljs-string">&#x27;FontSize&#x27;</span>,<span class="hljs-number">12</span>)<br><span class="hljs-built_in">legend</span>(&#123;<span class="hljs-string">&#x27;- Data&#x27;</span>,<span class="hljs-string">&#x27;- Linear fit&#x27;</span>,<span class="hljs-string">&#x27;- 95% Prediction Interval&#x27;</span>&#125;)<br>set(gcf,<span class="hljs-string">&#x27;Color&#x27;</span>,<span class="hljs-string">&#x27;White&#x27;</span>);  <span class="hljs-comment">% Background is white</span><br></code></pre></td></tr></table></figure><p>最后进行图形的标签、字体、图例及背景设置： -<code>xlabel('x-axis/Samples')</code>：设置x轴标签为“x-axis/Samples”。 -<code>ylabel('y-axis/Intensity value')</code>：设置y轴标签为“y-axis/Intensityvalue”。 -<code>set(gca,'FontName','Times New Roman','FontSize',12)</code>：将当前坐标轴的字体设为“TimesNew Roman”，字号为12。 -<code>legend(&#123;'- Data','- Linear fit','- 95% Prediction Interval'&#125;)</code>：添加图例，分别标识原始数据、拟合曲线和95%预测区间。-<code>set(gcf,'Color','White')</code>：设置当前图形窗口背景颜色为白色。</p><h2 id="参考">参考</h2><p>https://mp.weixin.qq.com/s/PJoY5QrlgRGecBStkFiTEQ</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024XCTF4/1-5/1</title>
    <link href="/2024/04/12/ctf/2024xctf4-1-5-1/"/>
    <url>/2024/04/12/ctf/2024xctf4-1-5-1/</url>
    
    <content type="html"><![CDATA[<h2 id="签到题">签到题</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>flag=<span class="hljs-string">b&#x27;XYCTF&#123;uuid&#125;&#x27;</span><br>flag=bytes_to_long(flag)  <span class="hljs-comment">#将字节串 flag 转换为大整数</span><br>leak=<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(flag))   <span class="hljs-comment">#转换为二进制字符串的形式</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:       <span class="hljs-comment"># 末位补0到514</span><br>    leak += <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(leak) == <span class="hljs-number">514</span>:    <br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">swap_bits</span>(<span class="hljs-params">input_str</span>):   <span class="hljs-comment">#交换列表中对应位置的元素</span><br>    input_list = <span class="hljs-built_in">list</span>(input_str[<span class="hljs-number">2</span>:])<br>    length = <span class="hljs-built_in">len</span>(input_list)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length // <span class="hljs-number">2</span>):<br>        temp = input_list[i]<br>        input_list[i] = input_list[length - <span class="hljs-number">1</span> - i]<br>        input_list[length - <span class="hljs-number">1</span> - i] = temp<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(input_list)<br><br>input_str = leak<br>result = swap_bits(input_str)<br>a=result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_add</span>(<span class="hljs-params">input_str</span>):<br>    input_list = <span class="hljs-built_in">list</span>(input_str)<br>    length = <span class="hljs-built_in">len</span>(input_list)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        input_list[i] = <span class="hljs-built_in">str</span>((<span class="hljs-built_in">int</span>(input_list[i]) + i + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span>)<br><br>    result = <span class="hljs-string">&#x27;&#x27;</span>.join(input_list)<br>    <span class="hljs-keyword">return</span> result<br><br><br>input_str = a<br>result = custom_add(input_str)<br>b=result<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-comment">#12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891134567789013445789912234667900123557889112356678911245568891223457790013345689901245667890234457799023355788001334678891124566790113445778902335578800133556899112346778011245567991223557880012355788902234677900124557889023355788001245568991133566790013445688912234577900124457889112456679001245578801233467789112355779912234577990233556780113</span><br></code></pre></td></tr></table></figure><p>根据上面的加密方式倒推出解密的函数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_sub</span>(<span class="hljs-params">input_str</span>):<br>    input_list = <span class="hljs-built_in">list</span>(input_str)<br>    length = <span class="hljs-built_in">len</span>(input_list)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        input_list[i] = <span class="hljs-built_in">str</span>((<span class="hljs-built_in">int</span>(input_list[i]) + <span class="hljs-number">10</span> - i - <span class="hljs-number">1</span>) % <span class="hljs-number">10</span>)<br><br>    result = <span class="hljs-string">&#x27;&#x27;</span>.join(input_list)<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_swap_bits</span>(<span class="hljs-params">input_str</span>):<br>    input_list = <span class="hljs-built_in">list</span>(input_str)<br>    length = <span class="hljs-built_in">len</span>(input_list)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length // <span class="hljs-number">2</span>):<br>        temp = input_list[i]<br>        input_list[i] = input_list[length - <span class="hljs-number">1</span> - i]<br>        input_list[length - <span class="hljs-number">1</span> - i] = temp<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(input_list)<br><br>encrypted_flag = <span class="hljs-string">&quotquot;</span> <br><br><span class="hljs-comment"># 第一步：解除自定义加法</span><br>step1 = custom_sub(encrypted_flag)<br><br><span class="hljs-comment"># 第二步：逆向位交换</span><br>step2 = reverse_swap_bits(step1)<br><br><span class="hljs-built_in">print</span>(step2)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(step2,<span class="hljs-number">2</span>))<br>x=<span class="hljs-string">&quot;1011000010110010100001101010100010001100111101101100011001110010011001000110100001100100011001100110101011001100010110101100011011000110110001000110100001011010011010001100110011000010110010100101101011000010011011100111001001110010010110101100101001110000011100001100001001101000011001001100100001100010011010000110010001101110011000001111101&quot;</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(x,<span class="hljs-number">2</span>)))<br><br><span class="hljs-commentspan><br><span class="hljs-comment"># 9254392036983367729993565657642756163106647020423020921597044715242734027281359079743634890921671710476305652413203664281624325410548175719951158501965824</span><br><span class="hljs-comment"># b&#x27;XYCTF&#123;c924235f-ccb4-4fae-a799-e88a42d14270&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="happy_to_solve1">happy_to_solve1</h2><p>题目： <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_happy_prime</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = sympy.nextprime(p ^ ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">512</span>) - <span class="hljs-number">1</span>))  <br>    <span class="hljs-keyword">return</span> p, q<br><br>m = bytes_to_long(flag)<br>p, q = get_happy_prime()<br>n = p * q<br>e = <span class="hljs-number">65537</span><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(m, e, n))<br><span class="hljs-comment"># n=24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span><br><span class="hljs-comment"># c=14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span><br></code></pre></td></tr></table></figure></p><p>参考这里： <imgsrc="https://pic.imgdb.cn/item/663308a10ea9cb1403ef5d97.webp"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/663308a10ea9cb1403ef5db6.webp"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/663308a10ea9cb1403ef5dd3.webp"alt="alt text" /></p><p>改一下上面的代码即可 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> sympy<br>n = <span class="hljs-number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span><br>c = <span class="hljs-number">14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span><br>e = <span class="hljs-number">65537</span><br>p=(gmpy2.iroot(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1024</span>)-<span class="hljs-number">4</span>*n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]+<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">512</span>))//<span class="hljs-number">2</span><br>p=<span class="hljs-built_in">int</span>(p)<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    p=sympy.nextprime(p)<br>    <span class="hljs-keyword">if</span>(n%p==<span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(p)<br>        <span class="hljs-keyword">break</span><br>q=n//p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>flag=long_to_bytes(<span class="hljs-built_in">int</span>(m))<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># b&#x27;XYCTF&#123;3f22f4efe3bbbc71bbcc999a0a622a1a23303cdc&#125;&#x27;</span><br></code></pre></td></tr></table></figure></p><h2 id="熊博士">熊博士</h2><p>题目:</p><p>CBXGU{ORF_BV_NVR_BLF_CRZL_QQ}</p><p>搜索发现是一种特定的加密方式</p><figure><img src="https://pic.imgdb.cn/item/6632fe6d0ea9cb1403daf772.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">xyctf&#123;liu_ye_mei_you_xiao_jj&#125;<br></code></pre></td></tr></table></figure><h2 id="happy_to_solve2">happy_to_solve2</h2><p>题目： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_happy_prime</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        p = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([random.choice(<span class="hljs-string">&quot;123&quot;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>)]))<br>        q = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([random.choice(<span class="hljs-string">&quot;567&quot;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>)]))<br>        <span class="hljs-keyword">if</span> isPrime(p) <span class="hljs-keyword">and</span> isPrime(q):<br>            <span class="hljs-keyword">return</span> (p,q)<br><br>m = bytes_to_long(flag)<br>p ,q= get_happy_prime()<br>n = p * q<br>e = <span class="hljs-number">65537</span><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(m, e, n))<br><span class="hljs-comment"># 697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129104495659093134763261751546990704365966783697780787341963138501</span><br><span class="hljs-comment"># 153383826085102296581238539677668696644156148059026868813759015106139131297135097831661048493079405226972222492151356105759235749502324303047037349410709021152255315429280760639113724345836532087970918453353723090554450581657930847674930226113840172368662838756446364482977092478979838209396761279326533419699056209983721842484996150025403009644653678928025861445324715419893797015875541525590135843027312322236085581571452084477262582966972702577136904385741443870527205640874446616413917231260133364227248928492574610248881137364204914001412269740461851747883355414968499272944590071623223603501698004227753335552646715567802825755799597955409228004284739743749531270833084850113574712041224896044525292591264637452797151098802604186311724597450780520140413704697374209653369969451501627583467893160412780732575085846467289134920886789952338174193202234175299652687560232593212131693456966318670843605238958724126368185289703563591477049105538528244632434869965333722691837462591128379816582723367039674028619947057144546</span><br></code></pre></td></tr></table></figure> 本题参考常乐村驾校队伍的wp</p><p>用pq ≡ 10 mod 10^i DFS 搜寻</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>n =<br><span class="hljs-number">697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166</span><br><span class="hljs-number">486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628</span><br><span class="hljs-number">583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331</span><br><span class="hljs-number">897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326</span><br><span class="hljs-number">655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069</span><br><span class="hljs-number">834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661</span><br><span class="hljs-number">553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850</span><br><span class="hljs-number">851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129</span><br><span class="hljs-number">104495659093134763261751546990704365966783697780787341963138501</span><br>c =<br><span class="hljs-number">153383826085102296581238539677668696644156148059026868813759015106139131297135097831661048493079</span><br><span class="hljs-number">405226972222492151356105759235749502324303047037349410709021152255315429280760639113724345836532087970918453353723090554450581657930847674930226113840172368662838756446364482977092478979838209</span><br><span class="hljs-number">396761279326533419699056209983721842484996150025403009644653678928025861445324715419893797015875</span><br><span class="hljs-number">541525590135843027312322236085581571452084477262582966972702577136904385741443870527205640874446</span><br><span class="hljs-number">616413917231260133364227248928492574610248881137364204914001412269740461851747883355414968499272</span><br><span class="hljs-number">944590071623223603501698004227753335552646715567802825755799597955409228004284739743749531270833084850113574712041224896044525292591264637452797151098802604186311724597450780520140413704697374</span><br><span class="hljs-number">209653369969451501627583467893160412780732575085846467289134920886789952338174193202234175299652</span><br><span class="hljs-number">687560232593212131693456966318670843605238958724126368185289703563591477049105538528244632434869</span><br><span class="hljs-number">965333722691837462591128379816582723367039674028619947057144546</span><br>e = <span class="hljs-number">65537</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base10</span>(<span class="hljs-params">ss</span>):<br>r = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ss[: -<span class="hljs-number">1</span>]:<br>r = r * <span class="hljs-number">10</span> + x<br><span class="hljs-keyword">return</span> r<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">ps, qs, mod</span>):<br><span class="hljs-keyword">if</span> base10(ps) * base10(qs) = n:<br><span class="hljs-keyword">yield</span> base10(ps), base10(qs)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">for</span> pp, qq <span class="hljs-keyword">in</span> product((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>)):<br>p = base10(ps + [pp])<br>q = base10(qs + [qq])<br><span class="hljs-keyword">if</span> p * q % mod = n % mod:<br><span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> dfs(ps + [pp], qs + [qq], mod * <span class="hljs-number">10</span>)<br>p, q = <span class="hljs-built_in">next</span>(dfs([], [], <span class="hljs-number">1</span>))<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">XYCTF&#123;7f4b2241951976ce5ef6df44503209059997e5085d1bc21f6bef4d9effb29fd0&#125;</span><br></code></pre></td></tr></table></figure><h2 id="factor1">factor1</h2><p>题目： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>d = getPrime(<span class="hljs-number">512</span>)<br>e = gmpy2.invert(d, (p**<span class="hljs-number">3</span> - <span class="hljs-number">1</span>) * (q**<span class="hljs-number">3</span> - <span class="hljs-number">1</span>))<br>flag = <span class="hljs-string">&quot;XYCTF&#123;&quot;</span> + hashlib.md5(<span class="hljs-built_in">str</span>(p + q).encode()).hexdigest() + <span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-built_in">print</span>(p * q)<br><span class="hljs-comment"># 172005065945326769176157335849432320425605083524943730546805772515111751580759726759492349719668775270727323745284785341119685198468883978645793770975366048506237371435027612758232099414404389043740306443065413069994232238075194102578269859784981454218948784071599231415554297361219709787507633404217550013282713899284609273532223781487419770338416653260109238572639243087280632577902857385265070736208291583497988891353312351322545840742380550393294960815728021248513046077985900158814037534487146730483099151396746751774427787635287611736111679074330407715700153025952858666841328055071403960165321273972935204988906850585454805923440635864200149694398767776539993952528995717480620593326867245714074205285828967234591508039849777840636255379730281105670496110061909219669860172557450779495125345533232776767292561378244884362014224844319802810586344516400297830227894063759083198761120293919537342405893653545157892446163</span><br><span class="hljs-comment"># 99075185389443078008327214328328747792385153883836599753096971412377366865826254033534293886034828804219037466246175526347014045811852531994537520303063113985486063022444972761276531422538694915030159420989401280012025249129111871649831185047820236417385693285461420040134313833571949090757635806658958193793</span><br></code></pre></td></tr></table></figure> <imgsrc="https://pic.imgdb.cn/item/663309e70ea9cb1403f260fd.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/66330a050ea9cb1403f2aa31.png"alt="alt text" /> https://www.cnblogs.com/futihuanhuan/p/18126544</p><p>e = gmpy2.invert(d, (p<strong>3 - 1) * (q</strong>3 - 1))</p><p>ed=1 mol (p<sup>3-1)(q</sup>3-1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params">x, y</span>):  <span class="hljs-comment"># 使用辗转相处将分数 x/y 转为连分数的形式</span><br>    res = []<br>    <span class="hljs-keyword">while</span> y:<br>        res.append(x // y)<br>        x, y = y, x % y<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continued_fraction</span>(<span class="hljs-params">sub_res</span>):<br>    numerator, denominator = <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sub_res[::-<span class="hljs-number">1</span>]:  <span class="hljs-comment"># 从sublist的后面往前循环</span><br>        denominator, numerator = numerator, i * numerator + denominator<br>    <span class="hljs-keyword">return</span> denominator, numerator  <span class="hljs-comment"># 得到渐进分数的分母和分子，并返回</span><br><br><span class="hljs-comment"># 求解每个渐进分数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_fraction</span>(<span class="hljs-params">x, y</span>):<br>    res = transform(x, y)<br>    res = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(continued_fraction, (res[<span class="hljs-number">0</span>:i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(res)))))  <span class="hljs-comment"># 将连分数的结果逐一截取以求渐进分数</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pq</span>(<span class="hljs-params">a, b, c</span>):  <span class="hljs-comment"># 由p+q和pq的值通过维达定理来求解p和q</span><br>    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)  <span class="hljs-comment"># 由上述可得，开根号一定是整数，因为有解</span><br>    x1, x2 = (-b + par) // (<span class="hljs-number">2</span> * a), (-b - par) // (<span class="hljs-number">2</span> * a)<br>    <span class="hljs-keyword">return</span> x1, x2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e, n</span>):<br>    <span class="hljs-keyword">for</span> (d, k) <span class="hljs-keyword">in</span> sub_fraction(e, <span class="hljs-built_in">pow</span>(n,<span class="hljs-number">3</span>)):  <span class="hljs-comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span><br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 可能会出现连分数的第一个为0的情况，排除</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:  <span class="hljs-comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span><br>            <span class="hljs-keyword">continue</span><br>        phi = (e * d - <span class="hljs-number">1</span>) // k  <span class="hljs-comment"># 这个结果就是 φ(n)</span><br>        <span class="hljs-built_in">print</span>(phi)<br><br>e = <span class="hljs-number">172005065945326769176157335849432320425605083524943730546805772515111751580759726759492349719668775270727323745284785341119685198468883978645793770975366048506237371435027612758232099414404389043740306443065413069994232238075194102578269859784981454218948784071599231415554297361219709787507633404217550013282713899284609273532223781487419770338416653260109238572639243087280632577902857385265070736208291583497988891353312351322545840742380550393294960815728021248513046077985900158814037534487146730483099151396746751774427787635287611736111679074330407715700153025952858666841328055071403960165321273972935204988906850585454805923440635864200149694398767776539993952528995717480620593326867245714074205285828967234591508039849777840636255379730281105670496110061909219669860172557450779495125345533232776767292561378244884362014224844319802810586344516400297830227894063759083198761120293919537342405893653545157892446163</span><br>n = <span class="hljs-number">99075185389443078008327214328328747792385153883836599753096971412377366865826254033534293886034828804219037466246175526347014045811852531994537520303063113985486063022444972761276531422538694915030159420989401280012025249129111871649831185047820236417385693285461420040134313833571949090757635806658958193793</span><br>d = wienerAttack(e, n)<br><br><span class="hljs-comment"># 得到了phi的值（有四个，这里选择了最后一个才行）</span><br>phi=<span class="hljs-number">972511355325113364052631731298241810108224336674853638392467496531221801463760422905081649486798893513235333261259026447362914449581968126150102058615785246984679107185088051540510676300698365173661664885922445984655201183939191294572815083110772280365015589954234618105130449050794187936653858911777331129374894613360180493778922390477471639230901499329286970066470938409172561402078020835704490763798033121327637376099345951393869066421256289755264836484293517455899841236893445058111156336783915080237891217097045326088433225353906745033086359517592587665091898519726306522216078946862525938605393095583476688928534868739031136603910653270126346663043777160589940969589929595662661998764846989622496897301967409430643458710968400436993966533764128546870219134569546167184537791250407432987498639475713973006971493363603598769092342912760402244358599858957999731973699418392072577594301810589012112435730728238977588777556</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">p+q=<span class="hljs-number">19967005847503923034507166918794965506267503428119552203292911361615132318903414819134103287113608735292986181147786515878575262609755277623932397581187246</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols, Eq, solve <br><br><span class="hljs-comment"># 定义符号变量</span><br>x= symbols(<span class="hljs-string">&#x27;x&#x27;</span>)<br><br><span class="hljs-comment"># 已知的值</span><br>phi = <span class="hljs-number">972511355325113364052631731298241810108224336674853638392467496531221801463760422905081649486798893513235333261259026447362914449581968126150102058615785246984679107185088051540510676300698365173661664885922445984655201183939191294572815083110772280365015589954234618105130449050794187936653858911777331129374894613360180493778922390477471639230901499329286970066470938409172561402078020835704490763798033121327637376099345951393869066421256289755264836484293517455899841236893445058111156336783915080237891217097045326088433225353906745033086359517592587665091898519726306522216078946862525938605393095583476688928534868739031136603910653270126346663043777160589940969589929595662661998764846989622496897301967409430643458710968400436993966533764128546870219134569546167184537791250407432987498639475713973006971493363603598769092342912760402244358599858957999731973699418392072577594301810589012112435730728238977588777556</span><br><br>n = <span class="hljs-number">99075185389443078008327214328328747792385153883836599753096971412377366865826254033534293886034828804219037466246175526347014045811852531994537520303063113985486063022444972761276531422538694915030159420989401280012025249129111871649831185047820236417385693285461420040134313833571949090757635806658958193793</span><br><br><span class="hljs-comment"># 定义方程    </span><br>equation = Eq(n ** <span class="hljs-number">3</span> - x ** <span class="hljs-number">3</span> + <span class="hljs-number">3</span> * n * x + <span class="hljs-number">1</span>, phi)<br><br><span class="hljs-comment"># 解方程</span><br>solutions = solve(equation, x)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x&quot;</span>, solutions)<br><span class="hljs-comment"># x [19967005847503923034507166918794965506267503428119552203292911361615132318903414819134103287113608735292986181147786515878575262609755277623932397581187246, -9983502923751961517253583459397482753133751714059776101646455680807566159451707409567051643556804367646493090573893257939287631304877638811966198790593623 - 771456569821584922256693369902764016239372722068394853403923361178938709770043333485345978614898773234557340570790401703783946838483311130240494535029156*sqrt(3)*I, -9983502923751961517253583459397482753133751714059776101646455680807566159451707409567051643556804367646493090573893257939287631304877638811966198790593623 + 771456569821584922256693369902764016239372722068394853403923361178938709770043333485345978614898773234557340570790401703783946838483311130240494535029156*sqrt(3)*I]</span><br><br><span class="hljs-keyword">import</span> hashlib<br>x=<span class="hljs-number">19967005847503923034507166918794965506267503428119552203292911361615132318903414819134103287113608735292986181147786515878575262609755277623932397581187246</span><br>flag = <span class="hljs-string">&quot;XYCTF&#123;&quot;</span> + hashlib.md5(<span class="hljs-built_in">str</span>(x).encode()).hexdigest() + <span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="factor3">factor3</h2><p>加密代码： <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br>flag = <span class="hljs-string">b&#x27;XYCTF&#123;*****&#125;&#x27;</span><br>m = bytes_to_long(flag)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gainPrime</span>():<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>x = random.getrandbits(<span class="hljs-number">256</span>)<br>y = random.getrandbits(<span class="hljs-number">256</span>)<br><span class="hljs-keyword">if</span> y % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br>p = x ** <span class="hljs-number">3</span> + <span class="hljs-number">3</span> * y ** <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> p.bit_length() == <span class="hljs-number">768</span> <span class="hljs-keyword">and</span> p % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> isPrime(p):<br><span class="hljs-keyword">return</span> p<br>p, q = gainPrime(), gainPrime()<br>N = p * q<br>phi = (p ** <span class="hljs-number">2</span> + p + <span class="hljs-number">1</span>) * (q ** <span class="hljs-number">2</span> + q + <span class="hljs-number">1</span>)<br>d = getPrime(<span class="hljs-number">320</span>)<br>e = inverse(d, phi)<br>c = d**<span class="hljs-number">2</span>^m<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;N: <span class="hljs-subst">&#123;N&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c: <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br>N:<br><span class="hljs-number">913125842482770239379848062277162627509794409924607555622246822717218133091223291889541294440266178282194506242444509803611492259403578922020590</span><br><span class="hljs-number">849630191477864719052980160940803309686069818208833547621252544423652489</span><br><span class="hljs-number">179493083138385424424384165228024273745733240109761707533778691158938848</span><br><span class="hljs-number">158094054261174692601673435971526522219273943464877956131040249169850420</span><br><span class="hljs-number">336023942653021547841666224446678539579529590840999008107782784268926145</span><br><span class="hljs-number">671962239929431694391039559247</span><br>e:<br><span class="hljs-number">494518390582436635999115147756676313570637682518235195828939117782099618</span><br><span class="hljs-number">734167908630788943568232122157772909140885391963441876427590731524706959</span><br><span class="hljs-number">546524212914108888799081844320513851526790475333924396837458796755678072</span><br><span class="hljs-number">486028072639014677580265244176441153444956871730684233063789931539669072</span><br><span class="hljs-number">735599696830757690822185323538738397827461580678488181113667710378657058</span><br><span class="hljs-number">297572328491762536595872579603698945272140918157163640403488075948987156</span><br><span class="hljs-number">585480146162739943419183496337465468187233821931312507662218106713861638</span><br><span class="hljs-number">334075899266373256620752680354704533272722692596941861606161634082613228</span><br><span class="hljs-number">896420520465402725359166156632884432690715903666803067996854084671477445</span><br><span class="hljs-number">131853993177110154928274312496230096270510089973592664248613332000290545</span><br><span class="hljs-number">537840595645944390047611474888693558676781309912289044962293014118087259</span><br><span class="hljs-number">307560444929227407113819165713213046898243995956550944640168932947118400</span><br><span class="hljs-number">215917515277554126694376415569909534496134700668701465649939</span><br>c:<br><span class="hljs-number">445093133736946148210694599254213355758596289403050506511087038911256532</span><br><span class="hljs-number">987550295276218237292611703737321050951657095848360656627436984055113238</span><br><span class="hljs-number">1128665744266165792377925899683228751870742727716</span><br></code></pre></td></tr></table></figure> 解密参考：列向量队</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<span class="hljs-comment">#多元copper</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>d = f.degree()<br>R = f.base_ring()<br>N = R.cardinality()<br>f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>f = f.change_ring(ZZ)<br>G = <span class="hljs-type">Sequence</span>([], f.parent())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>base = N ^ (m - i) * f ^ i<br><span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d),<br>repeat=f.nvariables()):<br>g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>G.append(g)<br>B, monomials = G.coefficient_matrix()<br>monomials = vector(monomials)<br>factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br><span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>B.rescale_col(i, factor)<br>B = B.dense_matrix().LLL()<br>B = B.change_ring(QQ)<br><span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>B.rescale_col(i, <span class="hljs-number">1</span> / factor)<br>H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br><span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):<br>H.append(h)<br>I = H.ideal()<br><span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>H.pop()<br><span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>roots = []<br><span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>roots.append(root)<br><span class="hljs-keyword">return</span> roots<br><span class="hljs-keyword">return</span> []<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>n =<br><span class="hljs-number">913125842482770239379848062277162627509794409924607555622246822717218133091223291889541294440266178282194506242444509803611492259403578922020590</span><br><span class="hljs-number">849630191477864719052980160940803309686069818208833547621252544423652489</span><br><span class="hljs-number">179493083138385424424384165228024273745733240109761707533778691158938848</span><br><span class="hljs-number">158094054261174692601673435971526522219273943464877956131040249169850420</span><br><span class="hljs-number">336023942653021547841666224446678539579529590840999008107782784268926145</span><br><span class="hljs-number">671962239929431694391039559247</span><br>e =<br><span class="hljs-number">494518390582436635999115147756676313570637682518235195828939117782099618</span><br><span class="hljs-number">734167908630788943568232122157772909140885391963441876427590731524706959</span><br><span class="hljs-number">546524212914108888799081844320513851526790475333924396837458796755678072</span><br><span class="hljs-number">486028072639014677580265244176441153444956871730684233063789931539669072</span><br><span class="hljs-number">735599696830757690822185323538738397827461580678488181113667710378657058</span><br><span class="hljs-number">297572328491762536595872579603698945272140918157163640403488075948987156</span><br><span class="hljs-number">585480146162739943419183496337465468187233821931312507662218106713861638</span><br><span class="hljs-number">334075899266373256620752680354704533272722692596941861606161634082613228</span><br><span class="hljs-number">896420520465402725359166156632884432690715903666803067996854084671477445</span><br><span class="hljs-number">131853993177110154928274312496230096270510089973592664248613332000290545</span><br><span class="hljs-number">537840595645944390047611474888693558676781309912289044962293014118087259</span><br><span class="hljs-number">307560444929227407113819165713213046898243995956550944640168932947118400</span><br><span class="hljs-number">215917515277554126694376415569909534496134700668701465649939</span><br>P = PolynomialRing(Zmod(e), <span class="hljs-string">&quot;k,s&quot;</span>)<br>k, s = P.gens()<br>f = <span class="hljs-number">1</span> + k * (n ^ <span class="hljs-number">2</span> + (n + <span class="hljs-number">1</span>) * (s + <span class="hljs-number">1</span>) + s ^ <span class="hljs-number">2</span> - <span class="hljs-number">2</span> * n)<br>k, s = small_roots(f, (<span class="hljs-number">2</span> ** <span class="hljs-number">320</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">768</span>), m=<span class="hljs-number">3</span>, d=<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment"># take ~1min</span><br>k, s = ZZ(k), ZZ(s)<br><span class="hljs-built_in">print</span>(k)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">125125730665737365965460573948581759569571720243814978163777784963537129</span><br><span class="hljs-string">2306024253248630690054410</span><br><span class="hljs-string">192542022902257858340613955458155183565501196469577365750108215823363337</span><br><span class="hljs-string">683394973722208794410902290438994342045520906008135423459729237892362733</span><br><span class="hljs-string">695782276383497516564289875792818430615786451024154774031397254880170824</span><br><span class="hljs-string">9946480791494352</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#求出k和s之后，直接可以求出d了</span><br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> solve, symbols<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, isPrime, bytes_to_long,<br>getPrime<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p_q =</span><br><span class="hljs-string">192542022902257858340613955458155183565501196469577365750108215823363337</span><br><span class="hljs-string">683394973722208794410902290438994342045520906008135423459729237892362733</span><br><span class="hljs-string">695782276383497516564289875792818430615786451024154774031397254880170824</span><br><span class="hljs-string">9946480791494352</span><br><span class="hljs-string">n =</span><br><span class="hljs-string">913125842482770239379848062277162627509794409924607555622246822717218133</span><br><span class="hljs-string">091223291889541294440266178282194506242444509803611492259403578922020590</span><br><span class="hljs-string">849630191477864719052980160940803309686069818208833547621252544423652489</span><br><span class="hljs-string">179493083138385424424384165228024273745733240109761707533778691158938848</span><br><span class="hljs-string">158094054261174692601673435971526522219273943464877956131040249169850420</span><br><span class="hljs-string">336023942653021547841666224446678539579529590840999008107782784268926145</span><br><span class="hljs-string">671962239929431694391039559247</span><br><span class="hljs-string">p, q = symbols(&#x27;p q&#x27;)</span><br><span class="hljs-string">res = solve([p + q - p_q, p * q - n], [p, q])</span><br><span class="hljs-string">print(res)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>e =<br><span class="hljs-number">494518390582436635999115147756676313570637682518235195828939117782099618</span><br><span class="hljs-number">734167908630788943568232122157772909140885391963441876427590731524706959</span><br><span class="hljs-number">546524212914108888799081844320513851526790475333924396837458796755678072</span><br><span class="hljs-number">486028072639014677580265244176441153444956871730684233063789931539669072</span><br><span class="hljs-number">735599696830757690822185323538738397827461580678488181113667710378657058</span><br><span class="hljs-number">297572328491762536595872579603698945272140918157163640403488075948987156</span><br><span class="hljs-number">585480146162739943419183496337465468187233821931312507662218106713861638</span><br><span class="hljs-number">334075899266373256620752680354704533272722692596941861606161634082613228</span><br><span class="hljs-number">896420520465402725359166156632884432690715903666803067996854084671477445</span><br><span class="hljs-number">131853993177110154928274312496230096270510089973592664248613332000290545</span><br><span class="hljs-number">537840595645944390047611474888693558676781309912289044962293014118087259</span><br><span class="hljs-number">307560444929227407113819165713213046898243995956550944640168932947118400</span><br><span class="hljs-number">215917515277554126694376415569909534496134700668701465649939</span><br>p =<br><span class="hljs-number">845727542734252771097508620366884787581346823455578404917525769041539439</span><br><span class="hljs-number">746914530374958818236462967773717478357930648479282951655380705183747821</span><br><span class="hljs-number">800053493097745787392338644671787997907165214166274630065657567039034950</span><br><span class="hljs-number">440073852768399</span><br>q =<br><span class="hljs-number">107969268628832581230863093421466704807366514124019525258355638919209393</span><br><span class="hljs-number">708703520684712912587255993661622594209727841160207128294191167373987951</span><br><span class="hljs-number">515776927073722937825056011325639630825069929607527311024831498176267329</span><br><span class="hljs-number">9506406938725953</span><br>phi = (p ** <span class="hljs-number">2</span> + p + <span class="hljs-number">1</span>) * (q ** <span class="hljs-number">2</span> + q + <span class="hljs-number">1</span>)<br>d = invert(e, phi)<br>c =<br><span class="hljs-number">445093133736946148210694599254213355758596289403050506511087038911256532</span><br><span class="hljs-number">987550295276218237292611703737321050951657095848360656627436984055113238</span><br><span class="hljs-number">1128665744266165792377925899683228751870742727716</span><br>happy_to_solve2<br>加密代码：<br>m = c ^ (d ** <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#b&#x27;XYCTF&#123;I_love_to_read_the_crypto_paper_and_try_to_ak_them&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="babyrsmax">babyRSMAX</h2><p><img src="https://pic.imgdb.cn/item/66330abe0ea9cb1403f48f98.png"alt="alt text" /> 题目： <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs 1c">from Crypto.Util.number import *<br>from gmpy2 import *<br>from random import choice<br><br>flag = b&#x27;XYCTF&#123;******&#125;&#x27;<br>e = &#x27;?&#x27;<br>def getBabyPrime(nbits):<br>    while True:<br>        p = <span class="hljs-number">1</span><br>        while p.bit_length() &lt;= nbits:<br>            p *= choice(sieve_base)<br>        <br>        if isPrime(p+<span class="hljs-number">1</span>):<br>            return p+<span class="hljs-number">1</span><br><br>p = getBabyPrime(<span class="hljs-number">512</span>)<br>q = getBabyPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>gift1 = (<span class="hljs-built_in">pow</span>(p,e,n)-<span class="hljs-built_in">pow</span>(q,e,n)) % n<br>gift2 = <span class="hljs-built_in">pow</span>(p+q,e,n)<br><br>t = <span class="hljs-number">65537</span><br>x = bytes_to_long(e)<br>y = <span class="hljs-built_in">pow</span>(x, t, n)<br><br>m = bytes_to_long(flag)<br>c = powmod(m, e, n)<br><br>print(f&#x27;n = &#123;n&#125;&#x27;)<br>print(f&#x27;gift1 = &#123;gift1&#125;&#x27;)<br>print(f&#x27;gift2 = &#123;gift2&#125;&#x27;)<br>print(f&#x27;c = &#123;c&#125;&#x27;)<br>print(f&#x27;y = &#123;y&#125;&#x27;)<br><br>&#x27;&#x27;&#x27;<br>n = <span class="hljs-number">39332423872740</span><span class="hljs-number">21078324606903</span><span class="hljs-number">08559462441049</span><span class="hljs-number">82381157166843</span><span class="hljs-number">97759978023391</span><span class="hljs-number">11831585609013</span><span class="hljs-number">77359925435092</span><span class="hljs-number">32665330396426</span><span class="hljs-number">15501586585515</span><span class="hljs-number">18626014048783</span><span class="hljs-number">43524547153695</span><span class="hljs-number">98448740365169</span><span class="hljs-number">31542444719549</span><span class="hljs-number">99797148264490</span><span class="hljs-number">55234594077753</span><span class="hljs-number">92702211086149</span><span class="hljs-number">27947378479620</span><span class="hljs-number">20202819097067</span><span class="hljs-number">23380472571862</span><span class="hljs-number">79200368742379</span><span class="hljs-number">15765300857477</span><span class="hljs-number">16706475220532</span>321<br>gift1 = <span class="hljs-number">45494024447463</span><span class="hljs-number">38327349007235</span><span class="hljs-number">81818779395028</span><span class="hljs-number">51050917261675</span><span class="hljs-number">73552412678416</span><span class="hljs-number">75969466016695</span><span class="hljs-number">67827556314472</span><span class="hljs-number">71662108564084</span><span class="hljs-number">38209856299995</span><span class="hljs-number">02287083009022</span><span class="hljs-number">01571583419116</span><span class="hljs-number">29993226447838</span><span class="hljs-number">11970344023384</span><span class="hljs-number">81872937576172</span><span class="hljs-number">19720251977078</span><span class="hljs-number">24583436060605</span><span class="hljs-number">44694608852844</span><span class="hljs-number">22840045723210</span><span class="hljs-number">09042170629140</span><span class="hljs-number">47342663534138</span><span class="hljs-number">66849032840002</span><span class="hljs-number">26518165973673</span>10<br>gift2 = <span class="hljs-number">11106121599895</span><span class="hljs-number">97099207364480</span><span class="hljs-number">50860427855012</span><span class="hljs-number">02681537667206</span><span class="hljs-number">76012440535805</span><span class="hljs-number">66359594802604</span><span class="hljs-number">25199298638218</span><span class="hljs-number">78910225832479</span><span class="hljs-number">97994146019970</span><span class="hljs-number">44524750911971</span><span class="hljs-number">94113107604919</span><span class="hljs-number">83876636264003</span><span class="hljs-number">94287075640232</span><span class="hljs-number">86340921467998</span><span class="hljs-number">25005835867245</span><span class="hljs-number">56342013525304</span><span class="hljs-number">82238983344600</span><span class="hljs-number">67523975023732</span><span class="hljs-number">15323079113687</span><span class="hljs-number">03243022591271</span><span class="hljs-number">59852763634051</span><span class="hljs-number">23881196916101</span><span class="hljs-number">1462</span><br>c = <span class="hljs-number">16938927825234</span><span class="hljs-number">40726702601756</span><span class="hljs-number">10454902656984</span><span class="hljs-number">91840814929432</span><span class="hljs-number">15283974503594</span><span class="hljs-number">61187437145666</span><span class="hljs-number">23315033802681</span><span class="hljs-number">00901769552637</span><span class="hljs-number">43973703439843</span><span class="hljs-number">60997903165842</span><span class="hljs-number">59141420319718</span><span class="hljs-number">49465884703557</span><span class="hljs-number">28984912522040</span><span class="hljs-number">74469197481963</span><span class="hljs-number">01181639762592</span><span class="hljs-number">46941579063687</span><span class="hljs-number">85799419330955</span><span class="hljs-number">41298162689316</span><span class="hljs-number">72391946592680</span><span class="hljs-number">57868127069358</span><span class="hljs-number">99110214657524</span><span class="hljs-number">54315629283033</span>043<br>y = <span class="hljs-number">18136500012709</span><span class="hljs-number">67709841306491</span><span class="hljs-number">29771690896942</span><span class="hljs-number">52488885109851</span><span class="hljs-number">09381881270362</span><span class="hljs-number">75503138556492</span><span class="hljs-number">78693131125405</span><span class="hljs-number">34780853966341</span><span class="hljs-number">04452685670558</span><span class="hljs-number">90202950484733</span><span class="hljs-number">05762088786992</span><span class="hljs-number">44635006002488</span><span class="hljs-number">11177410412603</span><span class="hljs-number">91405962817182</span><span class="hljs-number">67442171523919</span><span class="hljs-number">72112746684509</span><span class="hljs-number">47666394594121</span><span class="hljs-number">76433379413830</span><span class="hljs-number">84421241147448</span><span class="hljs-number">92164155894256</span><span class="hljs-number">32696160513747</span><span class="hljs-number">92860829645202</span>17<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure> 本题参考了常乐村驾校队伍的wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br>n =<br><span class="hljs-number">393324238727402107832460690308559462441049823811571668439775997802339111831585609013773599254350</span><br><span class="hljs-number">923266533039642615501586585515186260140487834352454715369598448740365169315424447195499979714826</span><br><span class="hljs-number">449055234594077753927022110861492794737847962020202819097067233804725718627920036874237915765300</span><br><span class="hljs-number">85747716706475220532321</span><br>g1 =<br><span class="hljs-number">454940244474633832734900723581818779395028510509172616757355241267841675969466016695678275563144</span><br><span class="hljs-number">727166210856408438209856299995022870830090220157158341911629993226447838119703440233848187293757</span><br><span class="hljs-number">617219720251977078245834360606054469460885284422840045723210090421706291404734266353413866849032</span><br><span class="hljs-number">8400022651816597367310</span><br>g2 =<br><span class="hljs-number">111061215998959709920736448050860427855012026815376672067601244053580566359594802604251992986382</span><br><span class="hljs-number">187891022583247997994146019970445247509119719411310760491983876636264003942870756402328634092146</span><br><span class="hljs-number">799825005835867245563420135253048223898334460067523975023732153230791136870324302259127159852763</span><br><span class="hljs-number">634051238811969161011462</span><br>c =<br><span class="hljs-number">169389278252344072670260175610454902656984918408149294321528397450359461187437145666233150338026</span><br><span class="hljs-number">810090176955263743973703439843609979031658425914142031971849465884703557289849125220407446919748</span><br><span class="hljs-number">196301181639762592469415790636878579941933095541298162689316723919465926805786812706935899110214</span><br><span class="hljs-number">65752454315629283033043</span><br>y =<br><span class="hljs-number">181365000127096770984130649129771690896942524888851098510938188127036275503138556492786931311254053478085396634104452685670558902029504847330576208878699244635006002488111774104126039140596281</span><br><span class="hljs-number">718267442171523919721127466845094766639459412176433379413830844212411474489216415589425632696160</span><br><span class="hljs-number">5137479286082964520217</span><br>pe = ((g1+g2)/ <span class="hljs-number">2</span>)%n<br>qe = ((g2-g1)/ <span class="hljs-number">2</span>)%n<br>p = gmpy2.gcd(pe,n)<br>q = gmpy2.gcd(qe,n)<br><span class="hljs-built_in">print</span>(p,q)<br><span class="hljs-built_in">print</span>(p*q= n)<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>t = <span class="hljs-number">65537</span><br>x = <span class="hljs-built_in">pow</span>(y,gmpy2.invert(t,phi),n)<br>e = x<br><span class="hljs-built_in">print</span>(long_to_bytes(e))<br>e = <span class="hljs-number">4096</span><br>phi = phi/ <span class="hljs-number">4</span><br>d_ = gmpy2.invert(e,phi)<br><span class="hljs-comment">#print(d)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiplication</span>(<span class="hljs-params">x1,y1,x2,y2,w,p</span>):<br>x=(x1*x2+y1*y2*w)%p<br>y=(x1*y2+x2*y1)%p<br><span class="hljs-keyword">return</span> x,y<br><span class="hljs-comment"># 获取w,使得w = -1 mod p, w是复数元的平方</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_w</span>(<span class="hljs-params">c,p</span>):<br>a=randint(<span class="hljs-number">1</span>,p)<br>w=<span class="hljs-built_in">pow</span>(a, <span class="hljs-number">2</span>) - c<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">pow</span>(w,(p - <span class="hljs-number">1</span>)/ <span class="hljs-number">2</span>,p)! p-<span class="hljs-number">1</span>:<br>a=randint(<span class="hljs-number">1</span>,p)<br>w=<span class="hljs-built_in">pow</span>(a,<span class="hljs-number">2</span>)-c<br><span class="hljs-keyword">return</span> w,a<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Cipolla_algorithm</span>(<span class="hljs-params">c,p</span>):<br>    <span class="hljs-comment">#主体部分</span><br>    w,a=get_w(c,p)<br>    power=(p+<span class="hljs-number">1</span>)/ <span class="hljs-number">2</span><br>    x1=a<br>    y1=<span class="hljs-number">1</span><br>    x=<span class="hljs-number">1</span><br>    y=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span>(power! <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">if</span>(power! (p+<span class="hljs-number">1</span>)/ <span class="hljs-number">2</span>):<br>            x1,y1=multiplication(x1,y1,x1,y1,w,p)<br>        <span class="hljs-keyword">if</span>(power &amp; <span class="hljs-number">1</span>):<br>            x,y=multiplication(x,y,x1,y1,w,p)<br>        power&gt; <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> x<br>cn =<br><span class="hljs-built_in">pow</span>(c,<span class="hljs-number">4</span>*<span class="hljs-number">1534022146892150554839736212812313821410100326022914405108745499241300613161518580076912</span><br><span class="hljs-number">4140840468748</span><br><span class="hljs-number">23035337005158475621433705623268639417140515158078335142054666787229183797173181186377993649280</span>,<br>n)<br>cp = cn%p<br>Cipolla_algorithm(cn,p)%p<br><span class="hljs-number">166353789373057352195268573847472134983952212264580315606750168640904529917560511398152614100259</span><br><span class="hljs-number">694276272602506054433757749654828608600573448732931745676174</span><br>sage: Cipolla_algorithm(cn,p)%p<br><span class="hljs-number">132092561537869160993667319333430266730451609506565594486832556247939179580442437134355292265094</span><br><span class="hljs-number">6388889883899419614130483678902025</span><br>sage: Cipolla_algorithm(cn,p)%p<br><span class="hljs-number">166353789373057352195268573847472134983952212264580315606750168640904529917560511398152614100259</span><br><span class="hljs-number">694276272602506054433757749654828608600573448732931745676174</span><br>sage:<br>Cipolla_algorithm(<span class="hljs-number">166353789373057352195268573847472134983952212264580315606750168640904529917560</span><br><span class="hljs-number">511398152614100259694276272602506054433757749654828608600573448732931745676174</span>,p)%p<br><span class="hljs-number">0</span><br>sage:<br>Cipolla_algorithm(<span class="hljs-number">132092561537869160993667319333430266730451609506565594486832556247939179580442</span><br><span class="hljs-number">4371343552922650946388889883899419614130483678902025</span>,p)%p<br><span class="hljs-number">36344540379246669047243921781711114415694316462518391812884210045</span><br>sage:<br>Cipolla_algorithm(<span class="hljs-number">132092561537869160993667319333430266730451609506565594486832556247939179580442</span><br><span class="hljs-number">4371343552922650946388889883899419614130483678902025</span>,p)%p<br><span class="hljs-number">166353789373057352195268575168397750362643822201253508941052835945420624983216456266478176543306</span><br><span class="hljs-number">949701450304802363434626984929302798183530544471602540368154</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#长度较短的通常会是flag，尝试l2b</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-number">36344540379246669047243921781711114415694316462518391812884210045</span>))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">b&#x27;XYCTF&#123;Rabin_is_so_biggggg!&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pyecharts绘制中国地图</title>
    <link href="/2024/04/10/python/pyecharts-hui-zhi-zhong-guo-di-tu/"/>
    <url>/2024/04/10/python/pyecharts-hui-zhi-zhong-guo-di-tu/</url>
    
    <content type="html"><![CDATA[<h2 id="pyecharts库">pyecharts库</h2><p>通过测试发现，安装0.1.9.4版本最为稳定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pyecharts==<span class="hljs-number">0.1</span><span class="hljs-number">.9</span><span class="hljs-number">.4</span><br></code></pre></td></tr></table></figure><p>安装完成后，下面是一个简单的测试案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyecharts <span class="hljs-keyword">import</span> Map<br><br>province_distribution  = &#123;<br>    <span class="hljs-string">&quot;北京&quot;</span>: <span class="hljs-number">3.923916945</span>,<br>    <span class="hljs-string">&quot;天津&quot;</span>: <span class="hljs-number">1.974557674</span>,<br>    <span class="hljs-string">&quot;河北&quot;</span>: <span class="hljs-number">0.031448024</span>,<br>    <span class="hljs-string">&quot;山西&quot;</span>: -<span class="hljs-number">0.243928321</span>,<br>    <span class="hljs-string">&quot;内蒙古&quot;</span>: <span class="hljs-number">0.285642805</span>,<br>    <span class="hljs-string">&quot;辽宁&quot;</span>: -<span class="hljs-number">0.012222464</span>,<br>    <span class="hljs-string">&quot;吉林&quot;</span>: <span class="hljs-number">0.037753234</span>,<br>    <span class="hljs-string">&quot;黑龙江&quot;</span>: -<span class="hljs-number">0.098705912</span>,<br>    <span class="hljs-string">&quot;上海&quot;</span>: <span class="hljs-number">2.498539306</span>,<br>    <span class="hljs-string">&quot;江苏&quot;</span>: <span class="hljs-number">0.367988799</span>,<br>    <span class="hljs-string">&quot;浙江&quot;</span>: <span class="hljs-number">0.889074231</span>,<br>    <span class="hljs-string">&quot;安徽&quot;</span>: -<span class="hljs-number">0.6519182</span>,<br>    <span class="hljs-string">&quot;福建&quot;</span>: -<span class="hljs-number">0.202640638</span>,<br>    <span class="hljs-string">&quot;江西&quot;</span>: -<span class="hljs-number">0.968214234</span>,<br>    <span class="hljs-string">&quot;山东&quot;</span>: <span class="hljs-number">0.355384584</span>,<br>    <span class="hljs-string">&quot;河南&quot;</span>: -<span class="hljs-number">0.99580695</span>,<br>    <span class="hljs-string">&quot;湖北&quot;</span>: -<span class="hljs-number">0.264681358</span>,<br>    <span class="hljs-string">&quot;湖南&quot;</span>: -<span class="hljs-number">1.012688352</span>,<br>    <span class="hljs-string">&quot;广东&quot;</span>: <span class="hljs-number">0.574760013</span>,<br>    <span class="hljs-string">&quot;广西&quot;</span>: -<span class="hljs-number">0.830955316</span>,<br>    <span class="hljs-string">&quot;海南&quot;</span>: <span class="hljs-number">0.149846753</span>,<br>    <span class="hljs-string">&quot;重庆&quot;</span>: -<span class="hljs-number">0.431589086</span>,<br>    <span class="hljs-string">&quot;四川&quot;</span>: -<span class="hljs-number">0.717277576</span>,<br>    <span class="hljs-string">&quot;贵州&quot;</span>: -<span class="hljs-number">1.400394406</span>,<br>    <span class="hljs-string">&quot;云南&quot;</span>: -<span class="hljs-number">1.016323672</span>,<br>    <span class="hljs-string">&quot;西藏&quot;</span>: -<span class="hljs-number">0.146483877</span>,<br>    <span class="hljs-string">&quot;陕西&quot;</span>: -<span class="hljs-number">0.202472393</span>,<br>    <span class="hljs-string">&quot;甘肃&quot;</span>: -<span class="hljs-number">0.976863652</span>,<br>    <span class="hljs-string">&quot;青海&quot;</span>: -<span class="hljs-number">0.352463859</span>,<br>    <span class="hljs-string">&quot;宁夏&quot;</span>: -<span class="hljs-number">0.001899423</span>,<br>    <span class="hljs-string">&quot;新疆&quot;</span>: -<span class="hljs-number">0.561382676</span><br>&#125;<br>provice = <span class="hljs-built_in">list</span>(province_distribution.keys())<br>num = <span class="hljs-built_in">list</span>(province_distribution.values())<br><br>chinaMap = Map(width=<span class="hljs-number">1200</span>, height=<span class="hljs-number">600</span>)<br>chinaMap.add(name=<span class="hljs-string">&quot;医疗水平综合得分&quot;</span>,<br>             attr=provice,<br>             value=num,<br>             visual_range=[-<span class="hljs-number">1.1</span>, <span class="hljs-number">1.5</span>],<br>             maptype=<span class="hljs-string">&#x27;china&#x27;</span>,<br>             is_visualmap=<span class="hljs-literal">True</span>)<br>chinaMap.render(path=<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行，会在同一目录下得到一个'中国地图.html'的文件，通过浏览器打开，可以得到如下的交互式地图</p><figure><img src="https://pic.imgdb.cn/item/6616ab5468eb9357130f74dd.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>但是发现得到的地图无法自动显示各个省份的名称，因此可以使用<code>notepad++</code>打开'中国地图.html'，在一千九百多行的位置找到</p><figure><img src="https://pic.imgdb.cn/item/6616ac1f68eb935713101e1f.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>添加如下内容并保存</p><figure><img src="https://pic.imgdb.cn/item/6616ad3f68eb935713117bef.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>最终就可以得到带有省份名称的中国地图，可以下载保存</p><figure><img src="https://pic.imgdb.cn/item/66169f6568eb935713011b92.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>标准化、归一化、去中心化辨析</title>
    <link href="/2024/04/08/biao-zhun-hua-gui-yi-hua-qu-zhong-xin-hua-bian-xi/"/>
    <url>/2024/04/08/biao-zhun-hua-gui-yi-hua-qu-zhong-xin-hua-bian-xi/</url>
    
    <content type="html"><![CDATA[<p>标准化（Standardization）、归一化（Normalization）和去中心化（Centering）是数据预处理中常用的三种不同的缩放技术，它们都旨在调整数据的尺度，以便于进行后续的分析和机器学习任务。虽然这些术语有时被交替使用，但它们在数学上有着不同的含义和应用场景。</p><h3 id="标准化standardization">标准化（Standardization）</h3><p>标准化是将数据转换为具有特定均值和标准差的过程。通常，标准化会使得数据的均值变为0，标准差变为1。这是通过以下公式完成的（Z-score规范化）：</p><p><span class="math display">\[ z = \frac{(x - \mu)}{\sigma}\]</span></p><p>其中，$ x $ 是原始数据点，$ $ 是数据集的均值，$ $ 是数据集的标准差，$z $ 是标准化后的值。</p><p>标准化的主要目的是消除不同量纲和尺度的影响，使得数据在进行计算和比较时更加公平。它在许多机器学习算法中非常有用，尤其是那些基于距离的算法，如K-近邻（KNN）和主成分分析（PCA）。</p><h3 id="归一化normalization">归一化（Normalization）</h3><p>归一化通常指的是将数据缩放到一个固定的范围，最常见的是[0,1]。归一化的公式如下：</p><p><span class="math display">\[ x_{\text{norm}} = \frac{x -\text{min}(x)}{\text{max}(x) - \text{min}(x)} \]</span></p><p>其中，$ x $是原始数据点，<code>min(x)</code>和<code>max(x)</code>分别是数据集中的最小值和最大值，$x_{} $ 是归一化后的值。</p><p>归一化对于需要数据在固定范围内进行计算的算法非常有用，如梯度下降和神经网络。它也常用于数据可视化，使得不同的数据点可以在同一尺度下比较。</p><h3 id="去中心化centering">去中心化（Centering）</h3><p>中心化是将数据的均值变为0的过程，但不改变数据的标准差。这可以通过以下公式完成：</p><p><span class="math display">\[ x_{\text{centered}} = x - \mu\]</span></p><p>其中，<span class="math inline">\(\ x\)</span> 是原始数据点 ，$ $是数据集的均值，$ x_{} $ 是去中心化后的值。</p><p>去中心化有助于突出数据中的异常值和波动，因为它保留了原始数据的方差。它在某些统计分析和时间序列分析中非常有用，尤其是在计算偏差或平均偏差时。</p><h3 id="总结">总结</h3><ul><li><strong>标准化</strong>：调整数据的均值和标准差，使其具有均值为0和标准差为1的特性。</li><li><strong>归一化</strong>：将数据缩放到一个固定范围，通常是[0,1]。</li><li><strong>去中心化</strong>：仅将数据的均值调整为0，不改变其标准差。</li></ul><p>在实际应用中，选择哪种方法取决于数据的特性和后续分析的需求。有时，这些方法可以组合使用，以达到最佳的预处理效果。例如，可以先进行去中心化，然后进行标准化或归一化。</p><h2 id="参考文献">参考文献</h2><p>http://t.csdnimg.cn/uvG6k</p><p>http://t.csdnimg.cn/80z2S</p>]]></content>
    
    
    <categories>
      
      <category>数模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据标准化处理疑问</title>
    <link href="/2024/04/08/shu-ju-biao-zhun-hua-chu-li-yi-wen/"/>
    <url>/2024/04/08/shu-ju-biao-zhun-hua-chu-li-yi-wen/</url>
    
    <content type="html"><![CDATA[<h2 id="标准化常使用的工具">标准化常使用的工具</h2><p>1.使用 <code>sklearn</code> 库中的 <code>StandardScaler</code></p><p><code>StandardScaler</code> 是 <code>scikit-learn</code>库中用于数据预处理的一个工具，它对每个特征进行标准化，使得特征的均值为0，标准差为1。这样做可以确保每个特征在PCA或其他算法中具有相同的重要性，因为算法通常对特征的尺度敏感。</p><p><code>StandardScaler</code> 使用的公式如下：</p><p>对于每个特征中的每个数据点 <code>x</code>，标准化后的值<code>x_std</code> 计算方法为： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x_std = (x - mean) / std<br></code></pre></td></tr></table></figure> 其中，<code>mean</code>是该特征所有数据点的均值，<code>std</code>是该特征所有数据点的标准差。</p><p><code>StandardScaler</code>首先计算整个数据集的均值和标准差，然后使用这些参数对每个特征的每个数据点进行标准化。这个过程通过<code>fit</code> 方法完成，然后 <code>transform</code>方法应用于原始数据，以生成标准化后的数据。</p><p>在实际应用中，<code>fit_transform</code>方法通常一起使用，因为它首先计算均值和标准差（fit），然后使用这些参数来转换数据（transform）。这样可以确保数据的标准化是基于整个数据集的，而不是基于数据集的一部分。</p><p>转化后的数值，均值为0，标准差为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 读取数据</span><br>MVdata=pd.read_excel(<span class="hljs-string">r&quot;C:\Users\Jr.hu\Desktop\指标正向化后.xlsx&quot;</span>,index_col=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 数据标准化</span><br>scaler = StandardScaler()<br>MVdata_scaled = scaler.fit_transform(MVdata)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据标准化后：\n&quot;</span>,MVdata_scaled)<br></code></pre></td></tr></table></figure><figure><img src="https://pic.imgdb.cn/item/66134e4e68eb93571348157b.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>2.自己定义公式进行计算 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">S=(MVdata-MVdata.mean())/MVdata.std()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;标准化处理后的数据:\n&quot;</span>, <span class="hljs-built_in">round</span>(S,<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure> <imgsrc="https://pic.imgdb.cn/item/66134f9d68eb9357134b57ff.png"alt="alt text" /></p><p>这里发现会有一点的误差，很奇怪，看公式应该是一样的，不知道为什么</p><p>对比之后我个人认为还是第二种方法计算出来的结果相对准确一点</p><p>后面有时间再详细测试一下为什么吧</p><h2 id="参考">参考</h2><p>https://www.cnblogs.com/chentiao/p/17203643.html</p><p>http://t.csdnimg.cn/wUqmh</p><p>上面两篇还未认真学习，先放一下</p><h2 id="一起进步">一起进步！</h2>]]></content>
    
    
    <categories>
      
      <category>数模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>主成分分析</title>
    <link href="/2024/04/08/zhu-cheng-fen-fen-xi/"/>
    <url>/2024/04/08/zhu-cheng-fen-fen-xi/</url>
    
    <content type="html"><![CDATA[<h2 id="主成分能用来做什么">主成分能用来做什么</h2><p>聚类、回归、寻找变量之间的共线性关系！！！</p><p>主成分分析的一般目的由两点组成：（参考王学民老师）</p><p>（1）将多个有相关关系的变量压缩成少数几个不相关的主成分（综合变量），并保留绝大部分信息；</p><p>（2）给出各主成分的具有实际背景和意义的解释</p><h2 id="雷点在于">雷点在于！！！</h2><p><img src="https://pic.imgdb.cn/item/6612cf7b68eb935713aeefb1.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/6612d01468eb935713b00017.png"alt="alt text" /></p><p>多数论文以及博客使用主成分进行综合评价，王学民老师认为这是不对的，个人参考了一些这方面的研究后觉得王老师说的对。。。</p><p><img src="https://pic.imgdb.cn/item/6612d0cc68eb935713b139ed.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/6612d20768eb935713b347d3.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/6612d20068eb935713b345a0.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/6612d20768eb935713b347eb.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/6612d20768eb935713b347ff.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/6612d20668eb935713b347c3.png"alt="alt text" /></p><p>因为个人理解能力有限，一知半解，只好放老师的文章来观摩学习</p><p>下面是复现一篇论文时写的python代码，除了最后评价分析这里不科学，其他的地方还行吧，权当存档留念，以后再也不傻乎乎的用主成分进行综合评价了。。。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> scale<br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><span class="hljs-keyword">from</span> factor_analyzer.factor_analyzer <span class="hljs-keyword">import</span> calculate_bartlett_sphericity<br><span class="hljs-keyword">from</span> factor_analyzer.factor_analyzer <span class="hljs-keyword">import</span> calculate_kmo<br><br><span class="hljs-comment"># 设置中文字符及负号</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>]=[<span class="hljs-string">&#x27;Kaiti&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 读取文件</span><br>MVdata=pd.read_excel(<span class="hljs-string">r&quot;C:\Users\Jr.hu\Desktop\指标正向化后.xlsx&quot;</span>,index_col=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 展示数据</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原始数据展示:\n&quot;</span>, MVdata)<br><br><span class="hljs-comment"># 首先对数据进行检验分析</span><br><span class="hljs-comment"># 1.Bartlett&#x27;s球状检验</span><br>chi_square_value, p_value = calculate_bartlett_sphericity(MVdata)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bartlett球状检验参数：\n卡方值为：&#123;&#125;，p值为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(chi_square_value, p_value))<br><br><span class="hljs-comment"># 2.KMO检验</span><br>kmo_all, kmo_model = calculate_kmo(MVdata)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;KMO检验参数：\n&quot;</span>, kmo_model)<br><span class="hljs-comment"># 参数检验通过</span><br><br><br><span class="hljs-comment"># 这里需要先进行一些分析，为主成分分析做铺垫</span><br><span class="hljs-comment"># 对原始数据进行标准差标准化  这里采用课件中的方法</span><br>S=(MVdata-MVdata.mean())/MVdata.std()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;标准化处理后的数据:\n&quot;</span>, <span class="hljs-built_in">round</span>(S,<span class="hljs-number">4</span>))<br><br><span class="hljs-comment"># 求相关系数矩阵</span><br>CovX=np.around(np.corrcoef(MVdata.T),decimals=<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;相关系数矩阵为：\n&quot;</span>,CovX)<br><br><span class="hljs-comment"># 求解特征值和特征向量</span><br>featValue,featVec=np.linalg.eig(CovX.T)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;特征值为：\n&quot;</span>,featValue)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;特征向量为：\n&quot;</span>,featVec)<br><br><span class="hljs-comment"># 对特征值进行排序输出</span><br>featValue=<span class="hljs-built_in">sorted</span>(featValue,reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;特征值从高到低依次为：\n&quot;</span>,featValue)<br><br><span class="hljs-comment"># 绘制特征值碎石图</span><br>plt.scatter(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,MVdata.shape[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>),featValue)<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,MVdata.shape[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>),featValue)<br>plt.hlines(y=<span class="hljs-number">1</span>,xmin=<span class="hljs-number">0</span>,xmax=<span class="hljs-number">14</span>,colors=<span class="hljs-string">&#x27;red&#x27;</span>,linestyles=<span class="hljs-string">&#x27;--&#x27;</span>)<br>plt.title(<span class="hljs-string">&quot;Scree Plot&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Factors&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Eigenvalue&quot;</span>)<br>plt.grid()  <span class="hljs-comment"># 显示网格</span><br>plt.show()  <span class="hljs-comment"># 显示图形</span><br><br><span class="hljs-comment"># 绘制累计贡献度折线图</span><br>gx=featValue/np.<span class="hljs-built_in">sum</span>(featValue)   <span class="hljs-comment"># 贡献度</span><br>lg=np.cumsum(gx)    <span class="hljs-comment"># 累计贡献度</span><br>plt.scatter(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,MVdata.shape[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>),lg)<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,MVdata.shape[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>),lg)<br>plt.hlines(y=<span class="hljs-number">0.85</span>,xmin=<span class="hljs-number">0</span>,xmax=<span class="hljs-number">14</span>,colors=<span class="hljs-string">&#x27;red&#x27;</span>,linestyles=<span class="hljs-string">&#x27;--&#x27;</span>)<br>plt.text(<span class="hljs-number">1</span>,<span class="hljs-number">0.86</span>,<span class="hljs-string">&quot;85%水平线&quot;</span>)<br>plt.title(<span class="hljs-string">&quot;累计贡献度&quot;</span>)<br>plt.grid()  <span class="hljs-comment"># 显示网格</span><br>plt.show()  <span class="hljs-comment"># 显示图形</span><br><span class="hljs-comment"># 由碎石图及折线图综合分析可知，主成分分析应分为四类，k=4</span><br><br><br><span class="hljs-comment"># 第一步，计算主成分对象</span><br>pcal =PCA(n_components=<span class="hljs-number">4</span>).fit(S)<br><br><span class="hljs-comment"># 第二步，确定主成分</span><br>V=pcal.explained_variance_   <span class="hljs-comment"># 各个主成分所解释的数据方差</span><br>W=pcal.explained_variance_ratio_  <span class="hljs-comment"># 各个主成分的方差解释比例</span><br>W.<span class="hljs-built_in">sum</span>()    <span class="hljs-comment"># 所有主成分解释的总方差</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;各个主成分所解释的数据方差为:\n&quot;</span>, V)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;各个主成分的方差贡献率为:\n&quot;</span>, W)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;累计方差贡献率为:\n&quot;</span>, W.<span class="hljs-built_in">sum</span>())<br><br><span class="hljs-comment"># 第三步，主成分负荷</span><br>Comp_P=pd.DataFrame(pcal.components_.T)   <span class="hljs-comment"># 主成分载荷矩阵</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;主成分载荷矩阵为:\n&quot;</span>, Comp_P)<br><br><span class="hljs-comment"># 这里可以绘制一张热力图表示原先的13个因子与降维后的4个主成分之间的关系</span><br>ax = sns.heatmap(Comp_P, annot=<span class="hljs-literal">True</span>, cmap=<span class="hljs-string">&quot;coolwarm&quot;</span>)<br>ax.set_xticks([<span class="hljs-number">0.5</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">3.5</span>])<br>ax.set_xticklabels([<span class="hljs-string">&#x27;Comp1&#x27;</span>, <span class="hljs-string">&#x27;Comp2&#x27;</span>, <span class="hljs-string">&#x27;Comp3&#x27;</span>, <span class="hljs-string">&#x27;Comp4&#x27;</span>])  <span class="hljs-comment"># 设置x轴的标签</span><br>ax.set_yticks([<span class="hljs-number">0.5</span>,<span class="hljs-number">1.5</span>,<span class="hljs-number">2.5</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">4.5</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">6.5</span>,<span class="hljs-number">7.5</span>,<span class="hljs-number">8.5</span>,<span class="hljs-number">9.5</span>,<span class="hljs-number">10.5</span>,<span class="hljs-number">11.5</span>,<span class="hljs-number">12.5</span>])<br>ax.set_yticklabels([<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;x4&#x27;</span>,<span class="hljs-string">&#x27;x5&#x27;</span>,<span class="hljs-string">&#x27;x6&#x27;</span>,<span class="hljs-string">&#x27;x7&#x27;</span>,<span class="hljs-string">&#x27;x8&#x27;</span>,<span class="hljs-string">&#x27;x9&#x27;</span>,<span class="hljs-string">&#x27;x10&#x27;</span>,<span class="hljs-string">&#x27;x11&#x27;</span>,<span class="hljs-string">&#x27;x12&#x27;</span>,<span class="hljs-string">&#x27;x13&#x27;</span>])  <span class="hljs-comment"># 设置y轴的标签</span><br>plt.title(<span class="hljs-string">&quot;Factor Analysis&quot;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 第四步，先算各个主成分得分</span><br>Si=pcal.fit_transform(S)<br>SR=pd.DataFrame(Si,columns=[<span class="hljs-string">&#x27;Comp1&#x27;</span>,<span class="hljs-string">&#x27;Comp2&#x27;</span>,<span class="hljs-string">&#x27;Comp3&#x27;</span>,<span class="hljs-string">&#x27;Comp4&#x27;</span>],index=MVdata.index)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;主成分得分:\n&quot;</span>, SR)<br><br><span class="hljs-comment"># 第五步，再算综合评价得分</span><br>SR[<span class="hljs-string">&#x27;Comp&#x27;</span>]=Si.dot(W)<br>SR[<span class="hljs-string">&#x27;Rank&#x27;</span>]=SR.Comp.rank(ascending=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;主成分综合评价得分:\n&quot;</span>, SR)<br><br><br><span class="hljs-comment"># 数据可视化一：箱线图</span><br><span class="hljs-comment"># 箱线图1.0(最终得分的箱线图)</span><br>sns.boxplot(y=SR[<span class="hljs-string">&#x27;Comp&#x27;</span>])   <span class="hljs-comment"># y轴为各地最终的评价得分</span><br>plt.ylabel(<span class="hljs-string">&#x27;综合评价最终得分&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;最终得分箱线图&#x27;</span>)<br>plt.tight_layout()<br>plt.show()<br><br><span class="hljs-comment"># 箱线图2.0(四个主成分得分的箱线图)</span><br>fig, axes = plt.subplots(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>))   <span class="hljs-comment"># 创建包含四个子图的画布</span><br>sns.boxplot(y=SR[<span class="hljs-string">&#x27;Comp1&#x27;</span>], ax=axes[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br>sns.boxplot(y=SR[<span class="hljs-string">&#x27;Comp2&#x27;</span>], ax=axes[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>sns.boxplot(y=SR[<span class="hljs-string">&#x27;Comp3&#x27;</span>], ax=axes[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>])<br>sns.boxplot(y=SR[<span class="hljs-string">&#x27;Comp4&#x27;</span>], ax=axes[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>plt.tight_layout()<br>plt.show()<br><br><span class="hljs-comment"># 数据可视化二：小提琴图</span><br><span class="hljs-comment"># 小提琴图1.0(最终得分小提琴图)</span><br>sns.violinplot(x=<span class="hljs-string">&#x27;Comp&#x27;</span>,data=SR)<br>plt.title(<span class="hljs-string">&#x27;最终得分小提琴图&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;综合评价最终得分&#x27;</span>)<br>plt.tight_layout()<br>plt.show()<br><br><span class="hljs-comment"># 小提琴图2.0(四个主成分得分的小提琴图)</span><br>fig, axes = plt.subplots(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>))   <span class="hljs-comment"># 创建包含四个子图的画布</span><br>sns.violinplot(y=SR[<span class="hljs-string">&#x27;Comp1&#x27;</span>], ax=axes[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br>sns.violinplot(y=SR[<span class="hljs-string">&#x27;Comp2&#x27;</span>], ax=axes[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>sns.violinplot(y=SR[<span class="hljs-string">&#x27;Comp3&#x27;</span>], ax=axes[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>])<br>sns.violinplot(y=SR[<span class="hljs-string">&#x27;Comp4&#x27;</span>], ax=axes[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>plt.tight_layout()<br>plt.show()<br><br><span class="hljs-comment"># 可视化三：条图</span><br><span class="hljs-comment"># 这个没想到合适的数据，先放一放</span><br><br><span class="hljs-comment"># 可视化四：概率分布图</span><br><span class="hljs-comment"># 概率分布图1.0---数据标准化处理之后的概率分布图</span><br>sns.histplot(S,kde=<span class="hljs-literal">True</span>,color=<span class="hljs-string">&#x27;blue&#x27;</span>,bins=<span class="hljs-number">30</span>)   <span class="hljs-comment"># 这里可以单独看S[&quot;x1&quot;]...</span><br>plt.title(<span class="hljs-string">&#x27;数据标准化处理后的概率分布图&#x27;</span>)  <span class="hljs-comment"># 标准化处理后满足正态分布</span><br>plt.ylabel(<span class="hljs-string">&#x27;概率密度&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;数值&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 概率分布图2.0---这里我们选取了最终评价得分Comp为y轴,主成分一得分Comp1为x轴,可以呈现出较好的效果</span><br>sns.jointplot(x=SR[<span class="hljs-string">&#x27;Comp1&#x27;</span>],y=SR[<span class="hljs-string">&#x27;Comp&#x27;</span>],data=SR)<br>plt.show()<br><br><span class="hljs-comment"># 概率分布图3.0---多个变量,四个主成分的得分</span><br>sns.pairplot(SR, <span class="hljs-built_in">vars</span>=[<span class="hljs-string">&#x27;Comp1&#x27;</span>,<span class="hljs-string">&#x27;Comp2&#x27;</span>,<span class="hljs-string">&#x27;Comp3&#x27;</span>,<span class="hljs-string">&#x27;Comp4&#x27;</span>])<br>plt.show()<br><br><span class="hljs-comment"># 可视化五：柱状图</span><br><span class="hljs-comment"># 柱状图1.0---各个主成分的方差贡献率</span><br>x = [<span class="hljs-string">&#x27;Comp1&#x27;</span>,<span class="hljs-string">&#x27;Comp2&#x27;</span>,<span class="hljs-string">&#x27;Comp3&#x27;</span>,<span class="hljs-string">&#x27;Comp4&#x27;</span>]<br>y = [<span class="hljs-string">&#x27;Comp1&#x27;</span>,<span class="hljs-string">&#x27;Comp1、2&#x27;</span>,<span class="hljs-string">&#x27;Comp1、2、3&#x27;</span>,<span class="hljs-string">&#x27;Comp1、2、3、4&#x27;</span>]<br>plt.grid(ls=<span class="hljs-string">&quot;--&quot;</span>, alpha=<span class="hljs-number">0.5</span>)<br>plt.title(<span class="hljs-string">&quot;各个主成分的方差贡献率&quot;</span>)<br>bars = plt.bar(x, W)<br><span class="hljs-keyword">for</span> i, bar <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(bars):   <span class="hljs-comment"># 添加百分比标签</span><br>    plt.text(bar.get_x() + bar.get_width() / <span class="hljs-number">2</span>, bar.get_height(), <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;W[i]*<span class="hljs-number">100</span>:<span class="hljs-number">.2</span>f&#125;</span>%&quot;</span>,<br>             ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 柱状图2.0---累计方差贡献率柱状图</span><br>cumulative_variance = [<span class="hljs-built_in">sum</span>(W[:i+<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(W))]    <span class="hljs-comment"># 计算累计方差贡献率</span><br>plt.figure()<br>plt.grid(ls=<span class="hljs-string">&quot;--&quot;</span>,alpha=<span class="hljs-number">0.5</span>)<br>plt.title(<span class="hljs-string">&quot;累计方差贡献率&quot;</span>)<br>bars = plt.bar(y, cumulative_variance)<br><span class="hljs-keyword">for</span> i, bar <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(bars):      <span class="hljs-comment"># 添加百分比标签</span><br>    plt.text(bar.get_x() + bar.get_width() / <span class="hljs-number">2</span>, bar.get_height(), <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;cumulative_variance[i]*<span class="hljs-number">100</span>:<span class="hljs-number">.2</span>f&#125;</span>%&quot;</span>,<br>             ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 柱状图3.0---综合评级得分柱状图</span><br>plt.figure()<br>plt.grid(ls=<span class="hljs-string">&quot;--&quot;</span>,alpha=<span class="hljs-number">0.5</span>)<br>plt.title(<span class="hljs-string">&quot;各省份综合评价得分条形图&quot;</span>)<br>bars = plt.bar(SR[<span class="hljs-string">&#x27;Rank&#x27;</span>], SR[<span class="hljs-string">&#x27;Comp&#x27;</span>])<br>text= [<br>    <span class="hljs-string">&quot;北京市&quot;</span>, <span class="hljs-string">&quot;天津市&quot;</span>, <span class="hljs-string">&quot;河北省&quot;</span>, <span class="hljs-string">&quot;山西省&quot;</span>, <span class="hljs-string">&quot;内蒙古自治区&quot;</span>,<br>    <span class="hljs-string">&quot;辽宁省&quot;</span>, <span class="hljs-string">&quot;吉林省&quot;</span>, <span class="hljs-string">&quot;黑龙江省&quot;</span>, <span class="hljs-string">&quot;上海市&quot;</span>, <span class="hljs-string">&quot;江苏省&quot;</span>,<br>    <span class="hljs-string">&quot;浙江省&quot;</span>, <span class="hljs-string">&quot;安徽省&quot;</span>, <span class="hljs-string">&quot;福建省&quot;</span>, <span class="hljs-string">&quot;江西省&quot;</span>, <span class="hljs-string">&quot;山东省&quot;</span>,<br>    <span class="hljs-string">&quot;河南省&quot;</span>, <span class="hljs-string">&quot;湖北省&quot;</span>, <span class="hljs-string">&quot;湖南省&quot;</span>, <span class="hljs-string">&quot;广东省&quot;</span>, <span class="hljs-string">&quot;广西壮族自治区&quot;</span>,<br>    <span class="hljs-string">&quot;海南省&quot;</span>, <span class="hljs-string">&quot;重庆市&quot;</span>, <span class="hljs-string">&quot;四川省&quot;</span>, <span class="hljs-string">&quot;贵州省&quot;</span>, <span class="hljs-string">&quot;云南省&quot;</span>,<br>    <span class="hljs-string">&quot;西藏自治区&quot;</span>, <span class="hljs-string">&quot;陕西省&quot;</span>, <span class="hljs-string">&quot;甘肃省&quot;</span>, <span class="hljs-string">&quot;青海省&quot;</span>, <span class="hljs-string">&quot;宁夏回族自治区&quot;</span>,<br>    <span class="hljs-string">&quot;新疆维吾尔自治区&quot;</span>]<br><span class="hljs-keyword">for</span> bar, province <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(bars, text):<br>    yval = bar.get_height()<br>    plt.text(bar.get_x() + bar.get_width()/<span class="hljs-number">2</span>, yval, province, ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 主成分图（取前两个主成分）</span><br>plt.plot(SR.Comp1,SR.Comp2,<span class="hljs-string">&#x27;.&#x27;</span>)<br>A1=SR.Comp1<br>A2=SR.Comp2<br>AI=SR.index<br>plt.hlines(<span class="hljs-number">0</span>,A1.<span class="hljs-built_in">min</span>(),A1.<span class="hljs-built_in">max</span>(),linestyles=<span class="hljs-string">&quot;dotted&quot;</span>)<br>plt.vlines(<span class="hljs-number">0</span>,A2.<span class="hljs-built_in">min</span>(),A2.<span class="hljs-built_in">max</span>(),linestyles=<span class="hljs-string">&quot;dotted&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SR.index.shape[<span class="hljs-number">0</span>]):<br>    plt.text(A1[i],A2[i],AI[i])<br>plt.show()<br></code></pre></td></tr></table></figure></p><h2 id="关于相关系数矩阵与协方差矩阵">关于相关系数矩阵与协方差矩阵</h2><p>主成分分析（PCA）既可以使用协方差矩阵，也可以使用相关系数矩阵，具体选择哪种取决于数据的特性和分析的目的。以下是对两种矩阵在PCA中使用的考量因素：</p><p><strong>协方差矩阵</strong>： -<strong>适用情况</strong>：当原始数据的各个变量具有不同的量纲（如长度、重量、时间等）或者变量的尺度差异较大时，使用协方差矩阵更为合适。协方差矩阵直接反映了变量间因数值大小变化引起的线性关系，保留了原始变量的量纲信息。-<strong>优点</strong>：能够捕捉变量间原始的、未经标准化的波动关系，对于那些量纲差异显著且这种差异对分析有重要意义的情况，使用协方差矩阵能够保持这些差异对主成分的影响。</p><p><strong>相关系数矩阵</strong>： -<strong>适用情况</strong>：当原始数据的各个变量在同一量纲下或者经过标准化处理（即所有变量均转化为无量纲的、均值为0、标准差为1的状态）时，使用相关系数矩阵更为合适。相关系数矩阵衡量的是变量间关系的方向和强度，不受变量尺度的影响。- <strong>优点</strong>： -<strong>消除量纲影响</strong>：由于相关系数矩阵中的元素是标准化数据的协方差，它已经消除了变量各自尺度的影响，只反映变量间相对变化的一致性。这使得不同量纲或不同尺度的变量在PCA中得以公平比较，避免了量纲较大或波动范围较大的变量对分析结果的主导。-<strong>易于解释</strong>：相关系数的取值范围在-1到1之间，可以直接解读为变量间的线性相关程度，更便于理解和解释变量间的关系。</p><p><strong>选择原则</strong>： -如果数据集中的变量具有相同的量纲或已经过标准化处理，通常建议使用相关系数矩阵，因为它能够更纯粹地反映变量间的相对关系，不受变量自身尺度的干扰。- 如果变量间存在显著的量纲差异，并且这些差异对分析结果有重要含义</p><h2 id="sklearn库默认使用协方差矩阵">sklearn库默认使用协方差矩阵</h2><p><code>sklearn</code>库在执行主成分分析（PCA）时，默认使用的是协方差矩阵。这是因为<code>sklearn.decomposition.PCA</code>类在计算主成分时，默认计算的是数据的协方差矩阵。然而，用户可以根据实际需求选择是否对输入数据进行预处理（如标准化），从而转换为使用相关系数矩阵进行PCA。</p><p>以下是使用 <code>sklearn</code>进行PCA时与矩阵选择相关的几点说明：</p><ol type="1"><li><p><strong>默认行为</strong>：如果不进行额外的预处理，直接将原始数据传递给<code>sklearn.decomposition.PCA</code>类的实例，并进行拟合（fit），那么PCA将基于数据的协方差矩阵来确定主成分。</p></li><li><p><strong>标准化选项</strong>：如果希望使用相关系数矩阵进行PCA，通常需要先对数据进行标准化，即将数据转换为无量纲的、均值为0、标准差为1的形式。在<code>sklearn</code> 中，可以使用 <code>preprocessing</code> 模块中的<code>StandardScaler</code>类来完成这一操作。对数据标准化后再进行PCA，此时虽然PCA内部依然计算的是标准化后数据的协方差矩阵，但由于标准化数据的均值和方差已调整为一致，此时的协方差矩阵实际上等价于相关系数矩阵，因为标准化消除了量纲和尺度的影响。</p></li></ol><p>例如，一个完整的流程可能如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><br><span class="hljs-comment"># 假设 data 是未标准化的原始数据</span><br>scaler = StandardScaler()<br>scaled_data = scaler.fit_transform(data)<br><br><span class="hljs-comment"># 创建并拟合PCA模型，此时使用的是等价于相关系数矩阵的标准化数据的协方差矩阵</span><br>pca = PCA()<br>pca.fit(scaled_data)<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li><strong>参数设置</strong>：<code>sklearn</code> 的 <code>PCA</code>类提供了 <code>covariance</code> 参数（从 <code>scikit-learn</code> 1.1及更高版本开始），允许用户直接指定是否基于数据的协方差矩阵还是基于相关系数矩阵来进行PCA计算。不过，需要注意的是，设置<code>covariance='corr'</code> 时，<code>sklearn</code>会自动对数据进行标准化，然后计算相关系数矩阵。因此，对于用户来说，直接对数据进行标准化仍然是推荐的做法，而不需要显式设置<code>covariance</code> 参数。</li></ol><p>总结起来，在使用 <code>sklearn</code>库进行主成分分析时，默认是基于协方差矩阵。若要基于相关系数矩阵进行分析，通常做法是先对数据进行标准化处理，确保变量间的关系不受量纲和尺度差异的影响。尽管<code>sklearn</code>提供了参数来直接指定基于相关系数矩阵计算，但实践中更常见的是通过预处理步骤标准化数据，间接实现基于相关系数矩阵的PCA。</p><h2 id="错上加错载荷矩阵">错上加错（载荷矩阵）</h2><p>关于<code>载荷矩阵</code>的一点思考与说明</p><p>在上面的处理过程中，使用到了载荷矩阵，但是按照同样的思路使用<code>spss</code>来分析，得到的主成分系数矩阵不一样，结果相差很大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第三步，主成分负荷</span><br>Comp_P=pd.DataFrame(pcal.components_.T)   <span class="hljs-comment"># 主成分载荷矩阵</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;主成分载荷矩阵为:\n&quot;</span>, Comp_P)<br></code></pre></td></tr></table></figure><p>上面的代码中关于<code>载荷矩阵</code>的计算是没有问题的，<code>载荷矩阵</code>描述了主变量与原始变量之间的相关系数，各个主成分的<code>得分系数矩阵</code>需要使用<code>载荷矩阵</code>除以对应<code>特征值的平方根</code>，这个系数才能表示各个变量与主变量之间的<code>线性关系</code></p><p>在上面的代码中，使用<code>sklrean</code>库进行分析直接用载荷矩阵描述各个变量与主变量之间的线性关系，缺少了一步转换<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 主成分得分系数矩阵  </span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>): <br>    Comp_P[i]=Comp_P[i]/math.sqrt(V[i])    <span class="hljs-comment"># 计算公式为载荷矩阵除以对应主成分的特征值，这个操作是参考这篇文章：https://zhuanlan.zhihu.com/p/49481213</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;主成分得分矩阵:\n&quot;</span>, Comp_P)<br></code></pre></td></tr></table></figure>至于使用spss分析时，做主成分分析不要选择<code>旋转</code>,否则就变成了<code>因子分析</code>,结果当然不一样</p><p><img src="https://pic.imgdb.cn/item/6613ca9868eb9357132a62c2.png"alt="alt text" /> <imgsrc="https://pic.imgdb.cn/item/6613ca9868eb9357132a6267.png"alt="alt text" /></p><p>关于<code>因子分析</code>与<code>主成分分析</code>的区别和联系，下面放了一篇很好的文章</p><p>但是换句话说，反正都错了，错上加错也无所谓了。。。。 ## 参考借鉴</p><p>做综合评价：</p><p>http://t.csdnimg.cn/VvKCZ</p><p>http://t.csdnimg.cn/ak1oY</p><p>http://t.csdnimg.cn/V8Cak</p><p>做降维、聚类：</p><p>https://www.cnblogs.com/RHadoop-Hive/p/9441505.html</p><p>做回归：</p><p>主成分分析 - Sophie的文章 - 知乎https://zhuanlan.zhihu.com/p/653310400</p><p>关于载荷矩阵的说明：</p><p>主成分分析PCA之Python与SPSS展示的区别 - canhui87的文章 - 知乎</p><p>https://zhuanlan.zhihu.com/p/76622543</p><p>如何做主成分分析和因子分析？它们的区别与联系在哪里？ - 胡保强的文章 -知乎</p><p>https://zhuanlan.zhihu.com/p/49481213</p><h2 id="一起进步">一起进步！</h2>]]></content>
    
    
    <categories>
      
      <category>数模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WP_2024NKCTF_CRYPTO_ezmath</title>
    <link href="/2024/03/26/ctf/wp-2024nkctf-crypto-ezmath/"/>
    <url>/2024/03/26/ctf/wp-2024nkctf-crypto-ezmath/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>m1, m2 = bytes_to_long(flag[:<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>]), bytes_to_long(flag[<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>:])<br>p, q, r, s = [getStrongPrime(<span class="hljs-number">512</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>e = <span class="hljs-number">0x10001</span><br><br>n = p * q * r * s<br>x = <span class="hljs-built_in">pow</span>(q + r, p, n)<br>y = <span class="hljs-built_in">pow</span>(p * q + r, p, n)<br>z = <span class="hljs-built_in">pow</span>(s + <span class="hljs-number">1</span>, m1, s ** <span class="hljs-number">3</span>)<br>c = <span class="hljs-built_in">pow</span>(m2, e * (s - <span class="hljs-number">1</span>), n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;y = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;z = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c = &#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># n = 16063619267258988011034805988633616492558472337115259037200126862563048933118401979462064790962157697989038876156970157178132518189429914950166878537819575544418107719419007799951815657212334175336430766777427972314839713871744747439745897638084891777417411340564312381163685003204182743581513722530953822420925665928135283753941119399766754107671729392716849464530701015719632309411962242638805053491529098780122555818774774959577492378249768503656934696409965037843388835948033129997732058133842695370074265039977902884020467413323500218577769082193651281154702147769044514475692164145099161948955990463002411473013</span><br><span class="hljs-comment"># x = 3021730035236300354492366560252387204933590210661279960796549263827016146230329262559940840168033978439210301546282150367717272453598367244078695402717500358042032604007007155898199149948267938948641512214616076878271433754986480186150178487625316601499002827958344941689933374158456614113935145081427421623647242719093642478556263121508238995676370877385638074444859047640771188280945186355013165130171802867101829647797879344213688981448535289683363612035513789240264618036062440178755665951650666056478493289870170026121826588708849844053588998886259091357236645819074078054595561158630194224419831088510266212458</span><br><span class="hljs-comment"># y = 8995787142441643101775260550632842535051686960331455373408888374295557050896156890779515089927839904014859222004906681231525326673182671984194300730575609496770604394218160422560576866112460837985407931067753009696969997384839637927957848613356269534870170452152926447601781637641134982178028922559652443398183848786034348994249923007092159192374765197460466878587635412657807328348343062302127490267456095927890461140420639805398464266081441243108883599713672104446500850203779995739675784794478089863001309614674686652597236324659979849324914804032046113978246674538411441434320732570934185579553749616238819583998</span><br><span class="hljs-comment"># z = 1283646988194723153191718393109711130382429329041718186548715246082834666179475883560020086589684603980734305610989683434078096863563033623169666389076830792095374856743015929373461198718962686411467443788047511292138922700655772772117855226419561159782734009961921473456332468653898105909729309377890721920937410781006337057478451806364879679045839945032594716202888196404203782734864187890231653321470085251</span><br><span class="hljs-comment"># c = 4988583141177813116287729619098477713529507701428689219486720439476625736884177254107631282807612305211904876847916760967188201601494592359879509876201418493870112712105543214178376471651715703062382025712952561985261461883133695993952914519494709871429166239968478488380137336776740647671348901626710334330855078254188539448122493675463406596681080368929986034772169421577420193671300532508625180845417164660544286332963072804192276425664877337357353975758574262657585309762422727680851018467657523970318042829660721433987195369353660020476598195375492128671951807024027929490113371463210453342974983253996717176870</span><br></code></pre></td></tr></table></figure><h2 id="解">解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>n = <span class="hljs-number">16063619267258988011034805988633616492558472337115259037200126862563048933118401979462064790962157697989038876156970157178132518189429914950166878537819575544418107719419007799951815657212334175336430766777427972314839713871744747439745897638084891777417411340564312381163685003204182743581513722530953822420925665928135283753941119399766754107671729392716849464530701015719632309411962242638805053491529098780122555818774774959577492378249768503656934696409965037843388835948033129997732058133842695370074265039977902884020467413323500218577769082193651281154702147769044514475692164145099161948955990463002411473013</span><br>x = <span class="hljs-number">3021730035236300354492366560252387204933590210661279960796549263827016146230329262559940840168033978439210301546282150367717272453598367244078695402717500358042032604007007155898199149948267938948641512214616076878271433754986480186150178487625316601499002827958344941689933374158456614113935145081427421623647242719093642478556263121508238995676370877385638074444859047640771188280945186355013165130171802867101829647797879344213688981448535289683363612035513789240264618036062440178755665951650666056478493289870170026121826588708849844053588998886259091357236645819074078054595561158630194224419831088510266212458</span><br>y = <span class="hljs-number">8995787142441643101775260550632842535051686960331455373408888374295557050896156890779515089927839904014859222004906681231525326673182671984194300730575609496770604394218160422560576866112460837985407931067753009696969997384839637927957848613356269534870170452152926447601781637641134982178028922559652443398183848786034348994249923007092159192374765197460466878587635412657807328348343062302127490267456095927890461140420639805398464266081441243108883599713672104446500850203779995739675784794478089863001309614674686652597236324659979849324914804032046113978246674538411441434320732570934185579553749616238819583998</span><br>z = <span class="hljs-number">1283646988194723153191718393109711130382429329041718186548715246082834666179475883560020086589684603980734305610989683434078096863563033623169666389076830792095374856743015929373461198718962686411467443788047511292138922700655772772117855226419561159782734009961921473456332468653898105909729309377890721920937410781006337057478451806364879679045839945032594716202888196404203782734864187890231653321470085251</span><br>c = <span class="hljs-number">4988583141177813116287729619098477713529507701428689219486720439476625736884177254107631282807612305211904876847916760967188201601494592359879509876201418493870112712105543214178376471651715703062382025712952561985261461883133695993952914519494709871429166239968478488380137336776740647671348901626710334330855078254188539448122493675463406596681080368929986034772169421577420193671300532508625180845417164660544286332963072804192276425664877337357353975758574262657585309762422727680851018467657523970318042829660721433987195369353660020476598195375492128671951807024027929490113371463210453342974983253996717176870</span><br>e = <span class="hljs-number">0x10001</span><br><br>s = GCD(c - <span class="hljs-number">1</span>, n)<br>m1 = ((z - <span class="hljs-number">1</span>) // s) % s<br>m1 = long_to_bytes(m1)<br>r3 = y ** <span class="hljs-number">3</span> % (n // s)<br>q = GCD(y - x, n)<br>p = GCD(x-y-q, n//q)<br>r = n//(p*q*s)<br>phi = (q - <span class="hljs-number">1</span>)*(p - <span class="hljs-number">1</span>)*(r - <span class="hljs-number">1</span>)<br>d = gmpy2.invert((e * (s - <span class="hljs-number">1</span>)) // <span class="hljs-number">4</span>, phi)<br>c_pqr = c % (p*q*r)<br>m2 = <span class="hljs-built_in">pow</span>(c, d, p*q*r)<br>m2 = gmpy2.iroot(m2, <span class="hljs-number">4</span>)<br>m2 = long_to_bytes(m2[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># print(m1)</span><br><span class="hljs-comment"># print(m2)</span><br><span class="hljs-built_in">print</span>(m1+m2)<br><span class="hljs-comment"># b&#x27;nkctf&#123;cb5b7392-cca4-4ce2-87e7-930cf6b29959&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>coding_note</title>
    <link href="/2024/03/20/cpp/codingnote/"/>
    <url>/2024/03/20/cpp/codingnote/</url>
    
    <content type="html"><![CDATA[<p>备赛蓝桥杯时做的一些题目，记录一下</p><h2 id="next_permutation">next_permutation()</h2><p>在C++中，<code>std::next_permutation</code>是一个标准库函数，用于生成序列的下一个排列。这个函数定义在头文件<code>&lt;algorithm&gt;</code>中，可以用于遍历一个序列的所有可能的排列。</p><p><code>std::next_permutation</code> 函数的基本用法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string s = <span class="hljs-string">&quot;ABC&quot;</span>;<br>    <span class="hljs-keyword">if</span> (std::<span class="hljs-built_in">next_permutation</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>())) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;The next permutation is: &quot;</span> &lt;&lt; s &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;There are no more permutations.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>std::next_permutation</code> 函数尝试为字符串<code>s</code> 生成下一个排列。如果成功，函数返回<code>true</code>，并且 <code>s</code>会被更新为下一个排列。如果已经是最后一个排列，函数返回<code>false</code>，<code>s</code> 保持不变。</p><p>函数的参数是序列的开始和结束迭代器。对于数组，可以使用数组的指针或数组的引用作为参数。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>std::<span class="hljs-built_in">next_permutation</span>(arr, arr + <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]));<br></code></pre></td></tr></table></figure><p>在使用 <code>std::next_permutation</code>时，通常将其放在一个循环中，以便遍历序列的所有排列。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : v) &#123;<br>            std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        std::cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125; <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">next_permutation</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>do-while</code> 循环确保了即使在最后一次调用<code>std::next_permutation</code>后，循环体内的代码也会执行，从而打印出最后一个排列。然后，<code>std::next_permutation</code>被调用，尝试生成下一个排列。循环会一直继续，直到所有的排列都被遍历完毕。</p><h2 id="无重复字符的最长子串">无重复字符的最长子串</h2><p>给定一个字符串s，请你找出其中不含有重复字符的最长子串的长度。</p><p>希哈表+快慢指针 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span> </span>&#123;<br><span class="hljs-type">int</span> result = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> length = <span class="hljs-built_in">strlen</span>(s);<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">128</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; length; j++) &#123;<br>cnt[s[j]]++;<br><span class="hljs-keyword">if</span> (cnt[s[j]] &gt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//遇到重复的字母</span><br>result = result &lt; j - i ? j - i : result;<span class="hljs-comment">//计算快慢指针间子串的长度并更新</span><br>      <span class="hljs-comment">//查找第一个重复字母并清零计数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i; k &lt; j; k++) &#123;<br>        cnt[s[k]]--;<span class="hljs-comment">//清零第一个重复字母（含）前的计数</span><br><span class="hljs-keyword">if</span> (s[k] == s[j]) &#123;<span class="hljs-comment">//找到第一个重复字母，退出查找循环</span><br>i = k;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>i++;<span class="hljs-comment">//慢指针指向第一个重复字母后的字母</span><br>&#125;<br>&#125;<br>result = result &lt; j - i ? j - i : result;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="对一列数排序火星人">对一列数排序(火星人)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> n,m;<br>  <span class="hljs-type">int</span> a[<span class="hljs-number">10110</span>];<br>  cin&gt;&gt;n;<br>  cin&gt;&gt;m;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <br>  &#123;<br>    cin&gt;&gt;a[i];<br>  &#125;<br>  <span class="hljs-keyword">while</span>(m--)<br>  &#123;<br>    <span class="hljs-built_in">next_permutation</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);   <span class="hljs-comment">//对数组排序传递索引即可</span><br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>  &#123;<br>    cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="排列序数">排列序数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//先对输入的字符串进行排列，然后输出全排列的情况，情况想等时结束</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  string s,o;<br>  cin&gt;&gt;s;<br>  o=s;<br>  <span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">//字符串内部排序的实现</span><br>  <span class="hljs-keyword">if</span>(s==o) cout&lt;&lt;<span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">next_permutation</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>()))<br>  &#123;<br>    cnt++;<br>    <span class="hljs-keyword">if</span>(s==o)  cout&lt;&lt;cnt;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第几个幸运数字">第几个幸运数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  <span class="hljs-comment">//cpp实现</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>   <span class="hljs-comment">//暴力搜索</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> n=<span class="hljs-number">59084709587505</span>;<br>  <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,i)&lt;n;i++)<br>  &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<span class="hljs-built_in">pow</span>(<span class="hljs-number">5</span>,j)&lt;n;j++)<br>    &#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-built_in">pow</span>(<span class="hljs-number">7</span>,k)&lt;n;k++)<br>      &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,i)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">5</span>,j)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">7</span>,k)&lt;=n)  cnt++;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,cnt<span class="hljs-number">-1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os  <span class="hljs-comment"># python实现</span><br><span class="hljs-keyword">import</span> sys<br>cnt=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">50</span>):<br>      a=<span class="hljs-number">3</span>**i;b=<span class="hljs-number">5</span>**j;c=<span class="hljs-number">7</span>**k<br>      <span class="hljs-keyword">if</span> a*b*c&lt;=<span class="hljs-number">59084709587505</span>:<br>        cnt+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(cnt-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="奖学金">奖学金</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">stu</span>&#123;    <span class="hljs-comment">//定义一个结构体来存储相关数据</span><br>  <span class="hljs-type">int</span> id;<br>  <span class="hljs-type">int</span> c,m,e;<br>  <span class="hljs-type">int</span> sum;<br>&#125;st[<span class="hljs-number">305</span>];  <span class="hljs-comment">//n&lt;=300</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(stu a,stu b)</span>   <span class="hljs-comment">//定义一个结构体比较的函数</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span>(a.sum&gt;b.sum)  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.sum&lt;b.sum)   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span>(a.c&gt;b.c)  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.c&lt;b.c)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">if</span>(a.id&gt;b.id)  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  cin&gt;&gt;n;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>  &#123;<br>    st[i].id=i+<span class="hljs-number">1</span>;  <span class="hljs-comment">//输入学号</span><br>    cin&gt;&gt;st[i].c&gt;&gt;st[i].m&gt;&gt;st[i].e;  <span class="hljs-comment">//输入三科成绩</span><br>    st[i].sum=st[i].c+st[i].m+st[i].e;<br>  &#125;<br>  <span class="hljs-built_in">sort</span>(st,st+n,cmp);   <span class="hljs-comment">//按照结构体比较的方式进行排序</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>  &#123;<br>    cout&lt;&lt;st[i].id&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;st[i].sum&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双向排序">双向排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N =<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-comment">//60%的解法 算法的复杂度为mnlogn</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">int</span> b)</span>  <span class="hljs-comment">//定义降序排列</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> a&gt;b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> n,m;<br>  cin&gt;&gt;n&gt;&gt;m;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)  a[i]=i;   <span class="hljs-comment">//先生成数组包含数1-n</span><br>  <span class="hljs-keyword">while</span>(m--)<br>  &#123;<br>  <span class="hljs-type">int</span> p,q;<br>  cin&gt;&gt;p&gt;&gt;q;<br>  <span class="hljs-keyword">if</span>(p==<span class="hljs-number">1</span>)  <span class="hljs-built_in">sort</span>(a+q,a+n+<span class="hljs-number">1</span>);<span class="hljs-comment">// 升序排列</span><br>  <span class="hljs-keyword">if</span>(p==<span class="hljs-number">0</span>)  <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+q+<span class="hljs-number">1</span>,cmp);<span class="hljs-comment">//降序排列</span><br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++)<br>  &#123;<br>    cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="错误票据">错误票据</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e4</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> m[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  cin&gt;&gt;n;<br>  <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m[cnt])!=EOF) cnt++;   <span class="hljs-comment">//这里需要关注对输入的处理</span><br>  <span class="hljs-built_in">sort</span>(m,m+cnt);<br>  <span class="hljs-type">int</span> ans1,ans2;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt<span class="hljs-number">-1</span>;i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span>(m[i+<span class="hljs-number">1</span>]-m[i]&gt;<span class="hljs-number">1</span>) ans1=m[i]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(m[i]==m[i+<span class="hljs-number">1</span>])  ans2=m[i];<br>  &#125;<br>  cout&lt;&lt;ans1&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;ans2; <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="统计数字">统计数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> m[<span class="hljs-number">200010</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>  &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m[i]);<br>  &#125;<br>  <span class="hljs-built_in">sort</span>(m,m+n);<br>  <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>  &#123;<br>    cnt++;<br>    <span class="hljs-keyword">if</span>(m[i]!=m[i+<span class="hljs-number">1</span>])<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,m[i],cnt);<br>      cnt=<span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="求和">求和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> n;<br>  cin&gt;&gt;n;<br>  <span class="hljs-type">int</span> a[<span class="hljs-number">200005</span>];<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum=<span class="hljs-number">0</span>;<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> temp=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>  &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    temp +=a[i];<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>  &#123;<br>    temp-=a[i];<br>    sum += a[i]*temp;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,sum);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拼数">782 拼数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//按两个数字组合的字典序排序，就是把数字看成字符串来排序</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(string a,string b)</span>  <span class="hljs-comment">//从大到小，按字典序的反序列排列</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> a+b&gt;b+a;   <span class="hljs-comment">//组合字符串的技巧，这里需要注意</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  cin&gt;&gt;n; <br>  string a[n];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)  cin&gt;&gt;a[i];<br>  <span class="hljs-built_in">sort</span>(a,a+n,cmp);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i];<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="带分数">208 带分数</h2><p>这题我不是很会，参考了题解，懂了一点，感觉好复杂啊啊啊啊啊</p><p>仔细看还是很好理解的，就是不太好想到欸，还是自己太菜了。。。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//排列题，9！共有362880种情况，全排列即可，不会超时</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> num[<span class="hljs-number">9</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a;i&lt;=b;i++)<br>  &#123;<br>    sum=sum*<span class="hljs-number">10</span>+num[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  cin&gt;&gt;n;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">next_permutation</span>(num,num+<span class="hljs-number">9</span>))<br>  &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)<br>    &#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">8</span>;j++)<br>      &#123;<br>        <span class="hljs-type">int</span> a=<span class="hljs-built_in">func</span>(<span class="hljs-number">0</span>,i);<br>        <span class="hljs-type">int</span> b=<span class="hljs-built_in">func</span>(i+<span class="hljs-number">1</span>,j);<br>        <span class="hljs-type">int</span> c=<span class="hljs-built_in">func</span>(j+<span class="hljs-number">1</span>,<span class="hljs-number">8</span>); <span class="hljs-comment">//9个数索引是0到8。。。</span><br>        <span class="hljs-keyword">if</span>(n*c==a*c+b)<br>        &#123;<br>          cnt++;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  cout&lt;&lt;cnt;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="回文判定双指针反向扫描">回文判定（双指针/反向扫描）</h2><p>实现一 for循环 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  string s;<br>  cin&gt;&gt;s;<br>  <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>();<br>  <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n/<span class="hljs-number">2</span>;i++)<br>    <span class="hljs-keyword">if</span>(s[i]!=s[n-i<span class="hljs-number">-1</span>]) cnt++;<br>  <span class="hljs-keyword">if</span>(cnt!=<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&#x27;N&#x27;</span>;<br>  <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27;Y&#x27;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure> 实现二 for循环加改进 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  string s;<br>  cin&gt;&gt;s;<br>  <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>();<br>  <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n/<span class="hljs-number">2</span>;i++)<br>    <span class="hljs-keyword">if</span>(s[i]!=s[n-i<span class="hljs-number">-1</span>]) <br>    &#123;<br>      cout&lt;&lt;<span class="hljs-string">&#x27;N&#x27;</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//这里通过return 0可以实现直接结束程序</span><br>    &#125;<br>  cout&lt;&lt;<span class="hljs-string">&#x27;Y&#x27;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>实现三 使用while循环 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  string s;<br>  cin&gt;&gt;s;<br>  <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>();<br>  <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=n<span class="hljs-number">-1</span>;  <span class="hljs-comment">//双指针</span><br>  <span class="hljs-keyword">while</span>(i&lt;j)<br>  &#123;<br>    <span class="hljs-keyword">if</span>(s[i]!=s[j])<br>    &#123;<br>      cout&lt;&lt;<span class="hljs-string">&#x27;N&#x27;</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    i++,j--;<br>  &#125;<br>  cout&lt;&lt;<span class="hljs-string">&#x27;Y&#x27;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2024_VCTF_crypto_狂飙</title>
    <link href="/2024/03/18/ctf/2024-vctf-crypto-kuang-biao/"/>
    <url>/2024/03/18/ctf/2024-vctf-crypto-kuang-biao/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>m = <span class="hljs-number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span><br>key = os.urandom(<span class="hljs-number">24</span>)<br>key = bytes_to_long(key)<br>n=m % key<br>flag += (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(flag) % <span class="hljs-number">16</span>) * <span class="hljs-string">b&#x27;\x00&#x27;</span><br>iv = os.urandom(<span class="hljs-number">16</span>)<br>aes = AES.new(key,AES.MODE_CBC,iv)<br>enc_flag = aes.encrypt(flag)<br><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(enc_flag)<br><span class="hljs-built_in">print</span>(iv)<br><br><br><span class="hljs-comment">#103560843006078708944833658339172896192389513625588</span><br><span class="hljs-comment">#b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span><br><span class="hljs-comment">#b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span><br></code></pre></td></tr></table></figure><p>由已知我们可以得到</p><p>m-s*key = n</p><p>将 m-n 分解即可得到 s*key 的组合</p><p>根据一个字节 8 位，得到 key 为 192 位</p><p>然后可以利用 sage 进行爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">103560843006078708944833658339172896192389513625588</span><br>m = <span class="hljs-number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span><br>key = m-n<br><span class="hljs-comment"># 88007513702424243702066490746035974298749130602173983187260701596410698439661</span><br>enc = <span class="hljs-string">b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span><br>iv = <span class="hljs-string">b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key.divisors():<br>    i=long_to_bytes(i,<span class="hljs-number">24</span>)<br>    aes=AES.new(i,AES.MODE_CBC,iv)<br>    flag=aes.decrypt(enc)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#123;&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gmpy2库的常用函数总结</title>
    <link href="/2024/03/11/python/gmpy2-ku-de-chang-yong-han-shu-zong-jie/"/>
    <url>/2024/03/11/python/gmpy2-ku-de-chang-yong-han-shu-zong-jie/</url>
    
    <content type="html"><![CDATA[<h2 id="gmpy2">gmpy2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><br>gmpy2.mpz(n)                <span class="hljs-comment"># 初始化一个大整数</span><br>gmpy2.mpfr(x)               <span class="hljs-comment"># 初始化一个高精度浮点数x</span><br>d = gmpy2.invert(e, n)      <span class="hljs-comment"># 求逆元，de = 1 mod n  模反元素</span><br>C = gmpy2.powmod(M, e, n)   <span class="hljs-comment"># 幂取模，结果是 C = (M^e) mod n</span><br>gmpy2.is_prime(n)           <span class="hljs-comment"># 素性检测</span><br>gmpy2.gcd(a, b)             <span class="hljs-comment"># 欧几里得算法，最大公约数</span><br>gmpy2.gcdext(a, b)          <span class="hljs-comment"># 扩展欧几里得算法</span><br>gmpy2.iroot(x, n)           <span class="hljs-comment"># x开n次根</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WP_2024HSCCTF_CRYPTO_STAR_CHASING_DIARY</title>
    <link href="/2024/03/10/ctf/wp-2024hscctf-crypto-star-chasing-diary/"/>
    <url>/2024/03/10/ctf/wp-2024hscctf-crypto-star-chasing-diary/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">小肖在学习的过程中,了解到了一种填充图片的算法,兴奋的她用它和RSA加密了偶像的照片,</span><br><span class="hljs-string">但是在传输的过程中丢失了一部分加密算法,你能帮她补全,并解出来偶像的照片吗?</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n, x, y</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    m = <span class="hljs-number">1</span> &lt;&lt; (n - <span class="hljs-number">1</span>)<br><br><br>j = <span class="hljs-number">128</span><br>mm = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">257</span>):<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">257</span>):<br>        mm.append(f(j, i, s) - <span class="hljs-number">1</span>)<br><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.jpg&#x27;</span>)<br>pixels = <span class="hljs-built_in">list</span>(img.getdata())<br>data = [pixel <span class="hljs-keyword">for</span> pixel <span class="hljs-keyword">in</span> pixels]<br><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key.png&#x27;</span>)<br>pixels = <span class="hljs-built_in">list</span>(img.getdata())<br>png_key = [pixel <span class="hljs-keyword">for</span> pixel <span class="hljs-keyword">in</span> pixels]<br><br>enc = [<span class="hljs-number">0</span>] * <span class="hljs-number">65536</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>    enc[i] = data[mm[i]]<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>    enc[s] = enc[s] ^ png_key[s]<br><br>image = Image.new(<span class="hljs-string">&#x27;L&#x27;</span>, (<span class="hljs-number">256</span>, <span class="hljs-number">256</span>))<br>image.putdata(enc)<br>image.save(<span class="hljs-string">&#x27;enc.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure><p>一张图片 enc.ipg</p><figure><img src="https://pic.imgdb.cn/item/65ed83e99f345e8d039b761d.jpg"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>还有一个压缩包</p><p>另外一个解密压缩包密码的文件 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q =&quot;</span>, q)<br>n = p * q<br>key = <span class="hljs-string">&#x27;********************&#x27;</span><br>m = bytes_to_long(key.encode())<br><span class="hljs-keyword">assert</span> m.bit_length() &lt; <span class="hljs-number">300</span><br>r = randint(<span class="hljs-number">1</span>, n)<br>c = (<span class="hljs-built_in">pow</span>(n + <span class="hljs-number">1</span>, m, n * n) * <span class="hljs-built_in">pow</span>(r, n, n * n)) % (n * n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><br><span class="hljs-comment"># p = 7828612943367317778189697443061863547768704021648982642807960201410438190347546379219450386530108335470584219657007036386835647156694512102467911388214639</span><br><span class="hljs-comment"># q = 11560196429251786803557082533869761370530605728500211999842201987445533038949033226473164866960007192683170489064961432891988337343103657552186800680461299</span><br><span class="hljs-comment"># c = 768905250861905487717845092484035532140840941871031779930259407348955511757335716790249355464829607714399266689960353955065504221985891074636544161678177920296971444880997864168042745264256952808480926755620637239135808617643874771066244234690401223758004286234917537720362007827248701308605961814972773704288547887039586934111562590676930853945316673164146667949991176600280451163710564978897622310650541491271961315592017251211248379608602287809736613530069187936569470129814949302440734244885473716072898519354127964155042421376782226235081303957997587618278341829891036314980185040102049478608445519994654780162</span><br></code></pre></td></tr></table></figure></p><h2 id="解">解</h2><p>这是一个 Paillier 加密，参考</p><p>https://zhuanlan.zhihu.com/p/106340045</p><p>解密分为以下几个步骤：</p><p>生成私钥： 私钥包含两个大质数 p 和 q。在本题中，p 和 q已经给出了。</p><p>计算 Carmichael λ 函数的值：其中 λ(n) = lcm(p-1, q-1)，lcm是最小公倍数函数。</p><p>计算 μ： μ 是 n 的欧拉函数的模反元素，满足</p><p>(L(g^λ(n) mod n<sup>2))</sup>-1 mod n</p><p>其中</p><p>L(x) = (x - 1) / n</p><p>g 是一个随机选择的整数且满足</p><p>gcd(L(g^λ(n) mod n^2), n) = 1</p><p>解密密文： 密文 c 可以通过以下公式计算得到明文 m：</p><p>m = L(c^λ(n) mod n^2) * μ mod n</p><p>代码参考： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> math<br>p = <span class="hljs-number">7828612943367317778189697443061863547768704021648982642807960201410438190347546379219450386530108335470584219657007036386835647156694512102467911388214639</span><br>q = <span class="hljs-number">11560196429251786803557082533869761370530605728500211999842201987445533038949033226473164866960007192683170489064961432891988337343103657552186800680461299</span><br>c = <span class="hljs-number">768905250861905487717845092484035532140840941871031779930259407348955511757335716790249355464829607714399266689960353955065504221985891074636544161678177920296971444880997864168042745264256952808480926755620637239135808617643874771066244234690401223758004286234917537720362007827248701308605961814972773704288547887039586934111562590676930853945316673164146667949991176600280451163710564978897622310650541491271961315592017251211248379608602287809736613530069187936569470129814949302440734244885473716072898519354127964155042421376782226235081303957997587618278341829891036314980185040102049478608445519994654780162</span><br>n = p * q<br><br><span class="hljs-comment"># 计算λ(n)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lcm</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(a*b) // math.gcd(a, b)<br><br>lambda_n = lcm(p-<span class="hljs-number">1</span>, q-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算μ</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod_inverse</span>(<span class="hljs-params">a, m</span>):<br>    m0, x0, x1 = m, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> a &gt; <span class="hljs-number">1</span>:<br>        q = a // m<br>        m, a = a % m, m<br>        x0, x1 = x1 - q * x0, x0<br>    <span class="hljs-keyword">return</span> x1 + m0 <span class="hljs-keyword">if</span> x1 &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> x1<br><br>mu = mod_inverse(lambda_n, n)<br><br><span class="hljs-comment"># 解密密文</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c, lambda_n, n, mu</span>):<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">pow</span>(c, lambda_n, n*n) - <span class="hljs-number">1</span>) // n * mu % n<br><br>ciphertext = <span class="hljs-number">768905250861905487717845092484035532140840941871031779930259407348955511757335716790249355464829607714399266689960353955065504221985891074636544161678177920296971444880997864168042745264256952808480926755620637239135808617643874771066244234690401223758004286234917537720362007827248701308605961814972773704288547887039586934111562590676930853945316673164146667949991176600280451163710564978897622310650541491271961315592017251211248379608602287809736613530069187936569470129814949302440734244885473716072898519354127964155042421376782226235081303957997587618278341829891036314980185040102049478608445519994654780162</span><br><br>plaintext = decrypt(ciphertext, lambda_n, n, mu)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;明文为:&quot;</span>, long_to_bytes(plaintext))<br><span class="hljs-comment"># 明文为: b&#x27;HSCCTF&#123;this_is_a_fake_flag&#125;&#x27;</span><br></code></pre></td></tr></table></figure></p><p>得到的 flag 为压缩包的密码，打开压缩包，发现了另外半份图片 key.png<img src="https://pic.imgdb.cn/item/65ed838c9f345e8d03996bca.png"alt="alt text" /></p><p>下面的首要问题是补全这个加密函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n, x, y</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    m = <span class="hljs-number">1</span> &lt;&lt; (n - <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 这里少了一句话</span><br></code></pre></td></tr></table></figure><p>出题人用这个函数来对两张图片 flag.jpg 和 key.png的像素点进行异或得到了 enc.jpg</p><p>但是这个函数我不知道是什么。。。。</p><p>over !</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WP_2024HSCCTF_CRYPTO_MIXED</title>
    <link href="/2024/03/10/ctf/wp-2024hscctf-crypto-mixed/"/>
    <url>/2024/03/10/ctf/wp-2024hscctf-crypto-mixed/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>m = libnum.s2n(flag)<br>e = <span class="hljs-number">65537</span><br>q = getPrime(<span class="hljs-number">1024</span>)<br>q1 = getPrime(<span class="hljs-number">1024</span>)<br>p = getPrime(<span class="hljs-number">1024</span>)<br>p1 = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>n1 = q * p1<br>n2 = p * q1<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br>h0 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span> * p + <span class="hljs-number">2024</span>, q1, n2)<br>h1 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2024</span> * p1 + <span class="hljs-number">2023</span> * q, <span class="hljs-number">114</span>, n1)<br>h2 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span> * p1 + <span class="hljs-number">2024</span> * q, <span class="hljs-number">514</span>, n1)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n1 = <span class="hljs-subst">&#123;n1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n2 = <span class="hljs-subst">&#123;n2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;h0 = <span class="hljs-subst">&#123;h0&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;h1 = <span class="hljs-subst">&#123;h1&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;h2 = <span class="hljs-subst">&#123;h2&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># n1 = 14689930167621480307737218855980844793204825453111553640005733004311399091452749419195261723160562669712981077205514482387428543859060408330555457873612388970840075555219318724209919379670375754436986322725018229701175825510253987615017542205904982728558285520666278391637251512741084978804344612886660251741043298476839942441197788722691248949008018299101517153067904692310160459839327965213126456776042470327923603098133019640956702820908299859534676381094974148722668171932091455546601087513513432342088579253210930555185169910878657816252698605590059713584044287411998445279104965229112287195772355914014694372863</span><br><span class="hljs-comment"># n2 = 17914624231045471060767877283214815212078805279600237578901916178851704643026979522270658635212967285131654546207286875722198040564094351690066028556053274118826426726436922152056884333790850220488793722836758989770231697392015361745717234225528175411653330848965062023338707342188196332661335758350340958332400847642883219650661408895191363079017750144776587598058350920393498114498603046807597288603882782473322630631915467470131090200369527436760313289344813744004003957932606166823948354564464154141854938585629799995141656546295799610158824771809513458197812936595649326475123400845178122171317543843802357238737</span><br><span class="hljs-comment"># c = 13183645788828584902734975771833842634134772971197066374278716198331982362845597338541987579827576129126962300555023319276896080171662261983323670516457816608069076576704379871559881585100353737989915143190277856145677733747073530969459479608854483866886381406790221076900624083605418670450439523062190633487764982399334967431524831264337949814367905185282600511829794170139623625545288981992093108619556180352620171550284923452864402624195790781899415138548827684042790774382313520961335293225295922563245148598807498320652973409239921962292395269739151692443069186695137458774227330748775469621908962878548784542656</span><br><span class="hljs-comment"># h0 = 5690435858632801053001568276569200811072324786394351282330736437777643891675713760267573500875018036769819201228707494676033534733516436880434000381152290529934127584047681184797730806321117079578438213106595566102910231831641994870770844810797745935336962801658360541755214075101149142486964461669833043007174173934693214526552375910644574723526164021660497474760514459351270699055076380763188021265735007339272243426286470006040246926184305520860068095134003662496837644875879106318233600478000160450338727054920011063536387532763661934972965357326471012678550188382945584128136131833085006239075931753900705852481</span><br><span class="hljs-comment"># h1 = 12771704142231361356944931328203992824809472923288035056741145310446323135378739806430357600688780862532180394967607429708811767590541126019805423171023560973250443508427614362854583240402451944730512334908779225174763498122005198084487562912524477476241978066554026569609494641830034817298185887790987627444544391680388213205514284116732325350187204519755399841372144149840914651521842402817701298224803289451378581226204084757079457612984358925767378458994608562174048729806309230061089552045138514542758457243626150673888166620841134063713151240297774551489301504222933127458884374866611598279831562420720169790688</span><br><span class="hljs-comment"># h2 = 10768269134499905916388929049595509895751098112372323618798542159569174051578701710549609054808995774168931375186213550074900373023970882450822655786787740452681278837907191091338575561570211280095894576674089666981683405385847773819238581725093823429776684561667462626941518248024517707992035438082636259838822562843169441572048956484831730615047363383911454662789736761572912893234212875097536978423758275178050708616505311352511923810654873380808201395656416903900326634569672173228265730515727327832588326581592485713225927319225942965110285477266200380452637746037672411388696006933080509164615786616058664496851</span><br></code></pre></td></tr></table></figure><h2 id="解">解</h2><p>本题可以看成一个混合加密的缝合怪，将几道类似的题目拼接到了一起，下面先放参考别的师傅写的WP</p><p>https://www.cnblogs.com/mumuhhh/p/17783610.html</p><p>具体而言分成了两个解密题，作用为别为求解p和q</p><p>第一个为 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">h0 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span> * p + <span class="hljs-number">2024</span>, q1, n2)<br></code></pre></td></tr></table></figure>上述公式中发现只有一个未知数（p和q1可以看成一个未知数）因此理论上可以轻松解出，实际上应该也不难。。。具体使用到了费马定理，前面已经讲过，化简后一行代码即可解决<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">p = gmpy2.gcd(h0-<span class="hljs-built_in">pow</span>(<span class="hljs-number">2024</span>,n2,n2),n2)<br></code></pre></td></tr></table></figure></p><p>第二个为 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">h1 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2024</span> * p1 + <span class="hljs-number">2023</span> * q, <span class="hljs-number">114</span>, n1)<br>h2 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span> * p1 + <span class="hljs-number">2024</span> * q, <span class="hljs-number">514</span>, n1)<br></code></pre></td></tr></table></figure>两个未知数（p1、q）,两个方程，理论上也能解决</p><p>但实际上这个要复杂一点点。。。</p><p>原理不是很懂，但是可以简单讲讲过程</p><p>首先需要求解一个叫k的东西，这个k与114和514这两个数有关，具体而言<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">k = <span class="hljs-number">2</span>*<span class="hljs-number">57</span>*<span class="hljs-number">257</span><br></code></pre></td></tr></table></figure> 如何计算的呢？</p><p>2代表的含义是114和514的最大公因数 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span>=gmpy2.gcd(<span class="hljs-number">114</span>, <span class="hljs-number">514</span>)<br></code></pre></td></tr></table></figure>然后57是114与2的商，257是514与2的商 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">57</span>=<span class="hljs-number">114</span>//<span class="hljs-number">2</span><br><span class="hljs-number">257</span>=<span class="hljs-number">514</span>//<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>知道了k之后就可以带入计算了，具体模板如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">h5 = <span class="hljs-built_in">pow</span>(h1,<span class="hljs-number">257</span>,n)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span>,k,n)-<span class="hljs-built_in">pow</span>(h2,<span class="hljs-number">57</span>,n)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2024</span>,k,n)<br>h6 = <span class="hljs-built_in">pow</span>(h1,<span class="hljs-number">257</span>,n)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2024</span>,k,n)-<span class="hljs-built_in">pow</span>(h2,<span class="hljs-number">57</span>,n)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span>,k,n)<br>k1 = inverse(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span>,<span class="hljs-number">2</span>*k,n)-<span class="hljs-built_in">pow</span>(<span class="hljs-number">2024</span>,<span class="hljs-number">2</span>*k,n), n)<br>k2 = inverse(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2024</span>,<span class="hljs-number">2</span>*k,n)-<span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span>,<span class="hljs-number">2</span>*k,n), n)<br>h3 = h5 * k1 % n<br>h4 = h6 * k2 % n<br>q = GCD(h3, n)<br></code></pre></td></tr></table></figure>求出p、q之后就可以解密了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n = p * q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><p>over!</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WP_2024HSCCTF_CRYPTO_SING_IN</title>
    <link href="/2024/03/10/ctf/wp-2024hscctf-crypto-sing-in/"/>
    <url>/2024/03/10/ctf/wp-2024hscctf-crypto-sing-in/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&#x27;HSCCTF&#123;66666666666666666666666666666666666&#125;&#x27;</span><br>m = bytes_to_long(flag.encode())<br><br><br>p, q = getPrime(<span class="hljs-number">1024</span>), getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>g, r1, r2, k1, k2 = [randint(<span class="hljs-number">1</span>, n) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br>g1 = powmod(g, r1 * (p - <span class="hljs-number">1</span>), n)<br>g2 = powmod(g, r2 * (q - <span class="hljs-number">1</span>), n)<br>c1 = m * powmod(g1, k1, n) % n<br>c2 = m * powmod(g2, k2, n) % n<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enc=&#x27;</span>, [c1, c2])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n, g1, g1=&#x27;</span>, [n, g1, g2])<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">enc= [15258813801182767957948809411445530114743580005667897427534365589851124401953952700888032330082278736578651674105204553630115929829327520950316902504433079359916257355896937562916556083469602985115254272625361902512966905366505705193603115063442567259505806926885597909346860116511116593562896739734663097631870026814495999405532329662713707140991693625596972404484374296588505369466138353714461787853643947646268147993568111775200297788443085689323703846485412670213780175163562460311256388185948613714551169278328397181176821021494625532973065606678522088011055084956579073665474553688838705105692370860815836968744, 6812252973072040071827764212287068485224506664962923279994614164374840095630460681859406585838865259535150445414577263383839286602668872146630568583093203237350230531896113453730563536559780725054737930704052263836882704963528437893607940373145674848731274193348770450738356162141551719346994698149112827383011042635625991946491545698464513315705253441372356270248537025391519052228332747340090073726648071921053097612521949040588826684887577900030607964457543549015338544684381220552952995724701579427363382069065679545196826947900332605250858694574423497096207350532949517663416877954484913664168104807510052994343]</span><br><span class="hljs-string">n, g1, g1= [20807018344486474639307429177279931766730766338068107239915507489300098048895435781756514265069820029246382818970733268271541419058569567895618666922180270584064313671561310704041755422624879418184008100473568396190523033929320245716340019444764233261191278982354931492880877566550189410854395486995604287009460090861952156686772486228583819235930673806632618770875593810617784176409247510465542253043645164164225524491704753384493817563203956665022724674535516870726747405974392352500432805602085261375142216501656342533659731098891481615791354504343987459436489040377662127479793769523359343534307819013289699807101, 13669954919111873554762685722926885077118528999414402163291237939605095249827361266585404348819936899557500751307328088850133462100189908649705354225171362748567332828733792410877365393472368767642223613483944864421225366984013053159643284842823692865975521013400160643858123645513020647367033022539177063702511618272018019345686324322865461583030805528508961559861228807898458344763909703624723082316946660539208262816734999777236686904487167545596412866146192769859422435979617441355968077981338491466670291310491623996943880557071723073298267310617017933994938481600905833829730599911183096116409487608858717083764, 16004755272896973088305242134835363565950101667041191767091338528075710730690484241256646402124331734165332717221873300040844257120250717798419429003342474882969292183331631773486056363790119500409511338474885148624744719334829519138941747721940978742668429331169327121848561577357339194970483392418062307133642660625962426570987080348107999849220769541832138719358407833846252908305766546561532003650472770370573552424932908544299331489147220956574184822433945571318688467182365231955276573176433559755313822566687880866791301904461559170416753669109833335824210853322226762705537051009387847122221014380228383127427]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>目测需要解决的问题是求出p和q，但是n无法分解，陷入沉思。。。后来不小心找到了这道题的原型</p><h2 id="vn2020-公开赛-fast">[V&amp;N2020 公开赛] Fast</h2><p>题目 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>N = p * q<br><br>g, r1, r2 = [getRandomRange(<span class="hljs-number">1</span>, N) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>g1 = <span class="hljs-built_in">pow</span>(g, r1 * (p-<span class="hljs-number">1</span>), N)<br>g2 = <span class="hljs-built_in">pow</span>(g, r2 * (q-<span class="hljs-number">1</span>), N)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m</span>):<br>    s1, s2 = [getRandomRange(<span class="hljs-number">1</span>, N) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>    c1 = (m * <span class="hljs-built_in">pow</span>(g1, s1, N)) % N<br>    c2 = (m * <span class="hljs-built_in">pow</span>(g2, s2, N)) % N<br>    <span class="hljs-keyword">return</span> (c1, c2)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c1, c2</span>):<br>    xp = c1 % p<br>    xq = c2 % q<br>    <span class="hljs-comment"># Chinese Remainder Theorem</span><br>    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N<br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-comment">#c = encrypt(bytes_to_long(flag))</span><br><br>N = <span class="hljs-number">18680643069610062851842282268594530254220611012409807422663284548187050713427682950720783343430650669361838067625768840896513125210105582070603021732086193955893838077699465426052925750736212977005683541174195320832791835197114668838654054444342903298662698415765898335350206380896849522280206304272801325820946987172164086644949521111058774180676742851681476123338557138770304164634321305204827406522957769478330124484710532963132900017800651579612646041955628867746525508376194147796920773364680264059390497210260540079810501777507814448518995581208169818764701641258963569599247156932381367802991222265241699715283</span><br>g1 = <span class="hljs-number">9143176283300810019842153344177123108612540016879643936458724056602746667157014763960725115919119704406826965726023263657276550779443988565368344040505696950820899770544814163379169539926317676679421275092688200844094929042154854719312788471536324082041360841253720783220459009201882865091829118575721525038404689868986360373373122049951274015083845966946475469982961355934516388706446794517870569063777231434618411404965077775991870069073539415961610645268985004687402050059891500490949250730689691141954694508001895390336750734542724392709744200091587065816283592253967715080611459937165344139809223328071517060208</span><br>g2 = <span class="hljs-number">14068322834597276347776814624877614869834816383564391664570268934537693322688875343215293618493363798985047779057952636529313879548457643220996398640913517182122425631198219387988691569709691279442005545716133131472147592456812502863851227108284027033557263611949365667779259585770738623603814004666845554284808166195201470503432803440754207350347128045893594280079379926676477680556845095378093693409219131090910168117334308781843178748431526974047817218228075136005979538773141427004682344298827618677773735288946271346252828348742296301538573408254015281232250841148556304927266143397565889649305095857756884049430</span><br>c1, c2 = (<span class="hljs-number">3976514029543484086411168675941075541422870678409709261442618832911574665848843566949154289825219682094719766762966082440586568781997199077781276145091509192208487682443007457513002005089654365915817414921574344557570444253187757317116858499013550050579856269915915792827620535138057468531410166908365364129001407147467636145589396570815405571923148902993581000542566387654639930651683044853608873583911638108204074537952317056718986683846742909366072461130053275195290631718363272923316002049685111871888148244026652658482359335651889139243735138819453744763293112267738369048641158946411500606588429007794613880534</span>, <span class="hljs-number">18524535479582837341745231233387403662294605513261199630593257391163433751052467785080620993007681605662927226603747560698627838567782891522546977611597418150309028806158429831471152782211111046118637630899456903846057977815397285171313888516791822545633820066408276065732715348834255021260666966934592884548856831383262013360819013814149529393178712576141627031723067564594282618223686778534522328204603249125537258294561872667849498796757523663858312311082034700705599706428944071848443463999351872482644584735305157234751806369172212650596041534643187402820399145288902719434158798638116870325144146218568810928344</span>)<br></code></pre></td></tr></table></figure></p><p>这题给了解密函数，简单了许多。根据解密函数，只要知道c1、c2、p、q就能求出m。因为c1、c2是已知的，所以求p和q即可</p><p>根据加密的过程，与p，q有关系的语句只有这两个： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">g1 = <span class="hljs-built_in">pow</span>(g, r1 * (p-<span class="hljs-number">1</span>), N)<br>g2 = <span class="hljs-built_in">pow</span>(g, r2 * (q-<span class="hljs-number">1</span>), N)<br></code></pre></td></tr></table></figure>接下来的推导我也没学过，就当懂了吧。。。</p><p>只看第一个式子： #### (g<sup>r1)</sup>(p-1) mod p<em>q = g1两边同模p： #### (g<sup>r1)</sup>(p-1) mod p = g1 mod p根据费马小定理（这个可以有）： #### a^（p-1）≡1（mod p）带入公式显然有： #### g1 mod 1 = p 简单转换一下就有： ####gcd(g1-1,p</em>q)=p</p><p>结合上述推导过程，我们可以得出一下结论： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">gcd(g1-<span class="hljs-number">1</span>,p*q)=p<br>gcd(g2-<span class="hljs-number">1</span>,p*q)=q<br></code></pre></td></tr></table></figure>因此可以使用g1,g2和n来求得p和q，与加密过程中的随机质数无关</p><h2 id="解">解</h2><p>利用上述结论以及母题提供的解密函数，构建如下解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c1, c2</span>):<br>    xp = c1 % p<br>    xq = c2 % q<br>    <span class="hljs-comment"># Chinese Remainder Theorem</span><br>    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N<br>    <span class="hljs-keyword">return</span> m<br><br>N = <span class="hljs-number">20807018344486474639307429177279931766730766338068107239915507489300098048895435781756514265069820029246382818970733268271541419058569567895618666922180270584064313671561310704041755422624879418184008100473568396190523033929320245716340019444764233261191278982354931492880877566550189410854395486995604287009460090861952156686772486228583819235930673806632618770875593810617784176409247510465542253043645164164225524491704753384493817563203956665022724674535516870726747405974392352500432805602085261375142216501656342533659731098891481615791354504343987459436489040377662127479793769523359343534307819013289699807101</span><br>g1 = <span class="hljs-number">13669954919111873554762685722926885077118528999414402163291237939605095249827361266585404348819936899557500751307328088850133462100189908649705354225171362748567332828733792410877365393472368767642223613483944864421225366984013053159643284842823692865975521013400160643858123645513020647367033022539177063702511618272018019345686324322865461583030805528508961559861228807898458344763909703624723082316946660539208262816734999777236686904487167545596412866146192769859422435979617441355968077981338491466670291310491623996943880557071723073298267310617017933994938481600905833829730599911183096116409487608858717083764</span><br>g2 = <span class="hljs-number">16004755272896973088305242134835363565950101667041191767091338528075710730690484241256646402124331734165332717221873300040844257120250717798419429003342474882969292183331631773486056363790119500409511338474885148624744719334829519138941747721940978742668429331169327121848561577357339194970483392418062307133642660625962426570987080348107999849220769541832138719358407833846252908305766546561532003650472770370573552424932908544299331489147220956574184822433945571318688467182365231955276573176433559755313822566687880866791301904461559170416753669109833335824210853322226762705537051009387847122221014380228383127427</span><br>c1, c2 = [<span class="hljs-number">15258813801182767957948809411445530114743580005667897427534365589851124401953952700888032330082278736578651674105204553630115929829327520950316902504433079359916257355896937562916556083469602985115254272625361902512966905366505705193603115063442567259505806926885597909346860116511116593562896739734663097631870026814495999405532329662713707140991693625596972404484374296588505369466138353714461787853643947646268147993568111775200297788443085689323703846485412670213780175163562460311256388185948613714551169278328397181176821021494625532973065606678522088011055084956579073665474553688838705105692370860815836968744</span>, <span class="hljs-number">6812252973072040071827764212287068485224506664962923279994614164374840095630460681859406585838865259535150445414577263383839286602668872146630568583093203237350230531896113453730563536559780725054737930704052263836882704963528437893607940373145674848731274193348770450738356162141551719346994698149112827383011042635625991946491545698464513315705253441372356270248537025391519052228332747340090073726648071921053097612521949040588826684887577900030607964457543549015338544684381220552952995724701579427363382069065679545196826947900332605250858694574423497096207350532949517663416877954484913664168104807510052994343</span>]<br>p=gcd(N,g1-<span class="hljs-number">1</span>)<br>q=gcd(N,g2-<span class="hljs-number">1</span>)<br>m=decrypt(c1,c2)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>over!</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WP_2024PearlCTF_CRYPTO_3spies</title>
    <link href="/2024/03/09/ctf/wp-2024pearlctf-crypto-3spies/"/>
    <url>/2024/03/09/ctf/wp-2024pearlctf-crypto-3spies/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>一个加密脚本: encrypt.py <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    flag = f.read()<br><br><br>n1 = getPrime(<span class="hljs-number">512</span>)*getPrime(<span class="hljs-number">512</span>)<br>n2 = getPrime(<span class="hljs-number">512</span>)*getPrime(<span class="hljs-number">512</span>)<br>n3 = getPrime(<span class="hljs-number">512</span>)*getPrime(<span class="hljs-number">512</span>)<br><br>e=<span class="hljs-number">3</span><br><br>m = bytes_to_long(flag)<br><br>c1 = <span class="hljs-built_in">pow</span>(m,e,n1)<br>c2 = <span class="hljs-built_in">pow</span>(m,e,n2)<br>c3 = <span class="hljs-built_in">pow</span>(m,e,n3)<br>    <br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;encrypted-messages.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">f&#x27;n1: <span class="hljs-subst">&#123;n1&#125;</span>\n&#x27;</span>)<br>    f.write(<span class="hljs-string">f&#x27;e: <span class="hljs-subst">&#123;e&#125;</span>\n&#x27;</span>)<br>    f.write(<span class="hljs-string">f&#x27;c1: <span class="hljs-subst">&#123;c1&#125;</span>\n\n&#x27;</span>)<br>    f.write(<span class="hljs-string">f&#x27;n2: <span class="hljs-subst">&#123;n2&#125;</span>\n&#x27;</span>)<br>    f.write(<span class="hljs-string">f&#x27;e: <span class="hljs-subst">&#123;e&#125;</span>\n&#x27;</span>)<br>    f.write(<span class="hljs-string">f&#x27;c2: <span class="hljs-subst">&#123;c2&#125;</span>\n\n&#x27;</span>)<br>    f.write(<span class="hljs-string">f&#x27;n3: <span class="hljs-subst">&#123;n3&#125;</span>\n&#x27;</span>)<br>    f.write(<span class="hljs-string">f&#x27;e: <span class="hljs-subst">&#123;e&#125;</span>\n&#x27;</span>)<br>    f.write(<span class="hljs-string">f&#x27;c3: <span class="hljs-subst">&#123;c3&#125;</span>\n&#x27;</span>)<br></code></pre></td></tr></table></figure>一个文本文件：encrypted-messages.txt <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">n1</span>: <span class="hljs-number">125267411676839013904356880992044234494446196964982422223130579882047339346910691451497681975351838034684254305738613386927222900898672184001345811471784343779083336010063097729870079645284178978512325038316112509718505547104307526489798594871208559607331790920412305711830820739308995357441030646151241475357</span><br><span class="hljs-attribute">e</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">c1</span>: <span class="hljs-number">53377681151597930200174280269480737905892580547675095951568028531545776989476273786562435486230550919422086944133253611872983670236114054374565938184593173194919064517779661178744278071496565181181705071524501841159717567250259220092464925447795412484629687708208662079791459184303259833667333882817260906165</span><br><br><span class="hljs-attribute">n2</span>: <span class="hljs-number">101985110329687359982214188967281711679876126442294375297547334583432698756724057183438691227371260175904715854057793173086301783390154807726779286131084537704721881438398569476214173211311977143694032174701007005033830070482491565424683664984059187439768982994371382763048098663670188786016786612348042190633</span><br><span class="hljs-attribute">e</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">c2</span>: <span class="hljs-number">86370003324603283962938004647941072863866893771153362222202759619566185050496089684606274416415418388916028237984708280964054009059814813483639010674182298294505525549842057730933691736372086557397211586739691237738757897947336698446258197604918828646265244195686107866422922575275382813594250335044143485624</span><br><br><span class="hljs-attribute">n3</span>: <span class="hljs-number">83259448903366278561128205003734328779222118906091604625605804813528274055482582431201682767294594942491788720967344243567819654813240542076250030802111361571504667752481579915864184180358691091092122509649590043074189547962292835856503625214027405901620103615424259796442446412031011575671410630232956892267</span><br><span class="hljs-attribute">e</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">c3</span>: <span class="hljs-number">25601241268900087228853235319569275926328919786631787991019848828558430219449358810095537362492238844266084660904521793373698736119824512458196492049138821633273765102576368573691391116632126183996786969554104441242376959688329346567745607825277943462236901478944551669406261301309719409165457168678763092118</span><br></code></pre></td></tr></table></figure></p><h2 id="解">解</h2><p>首先破解加密脚本，是一个常见的低指数加密广播攻击，e=3,可以参考一下如下内容：</p><p>https://blog.csdn.net/qq_46145027/article/details/125047313</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br><br>n1 = <span class="hljs-number">125267411676839013904356880992044234494446196964982422223130579882047339346910691451497681975351838034684254305738613386927222900898672184001345811471784343779083336010063097729870079645284178978512325038316112509718505547104307526489798594871208559607331790920412305711830820739308995357441030646151241475357</span><br>c1 = <span class="hljs-number">53377681151597930200174280269480737905892580547675095951568028531545776989476273786562435486230550919422086944133253611872983670236114054374565938184593173194919064517779661178744278071496565181181705071524501841159717567250259220092464925447795412484629687708208662079791459184303259833667333882817260906165</span><br>n2 = <span class="hljs-number">101985110329687359982214188967281711679876126442294375297547334583432698756724057183438691227371260175904715854057793173086301783390154807726779286131084537704721881438398569476214173211311977143694032174701007005033830070482491565424683664984059187439768982994371382763048098663670188786016786612348042190633</span><br>c2 = <span class="hljs-number">86370003324603283962938004647941072863866893771153362222202759619566185050496089684606274416415418388916028237984708280964054009059814813483639010674182298294505525549842057730933691736372086557397211586739691237738757897947336698446258197604918828646265244195686107866422922575275382813594250335044143485624</span><br>n3 = <span class="hljs-number">83259448903366278561128205003734328779222118906091604625605804813528274055482582431201682767294594942491788720967344243567819654813240542076250030802111361571504667752481579915864184180358691091092122509649590043074189547962292835856503625214027405901620103615424259796442446412031011575671410630232956892267</span><br>c3 = <span class="hljs-number">25601241268900087228853235319569275926328919786631787991019848828558430219449358810095537362492238844266084660904521793373698736119824512458196492049138821633273765102576368573691391116632126183996786969554104441242376959688329346567745607825277943462236901478944551669406261301309719409165457168678763092118</span><br><br>e = <span class="hljs-number">3</span><br>n = [n1, n2, n3]<br>c = [c1, c2, c3]<br>resultant, mod = crt(n, c)<br>value, is_perfect = gmpy2.iroot(resultant, e)<br><span class="hljs-built_in">print</span>(long_to_bytes(value))<br></code></pre></td></tr></table></figure><p>结果为一个网址： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;This is your destination: &quot;https://pastes.io/1yjswxlvl2&quot;\n&#x27;</span><br></code></pre></td></tr></table></figure></p><p>在该网页上下载了如下文件：Flag_it_is.txt <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-title class_">You</span> think this is <span class="hljs-title class_">Gibbrish</span>, but it<span class="hljs-string">&#x27;s something different...</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure></p><p>刚开始不是很懂，搞了半天没看明白如何破解，后来询问了一下身边的大佬，说是base64转图片，提供了一个在线工具：</p><p>https://www.lddgo.net/convert/base64-to-image</p><p>把上面的文件传入即可得到如下图片： <imgsrc="https://pic.imgdb.cn/item/65ec35129f345e8d03542289.jpg"alt="alt text" /></p><p>over!</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WP_2024HSCCTF_CRYPTO_REAL_SIGN_IN</title>
    <link href="/2024/03/09/ctf/wp-2024hscctf-crypto-real-sign-in/"/>
    <url>/2024/03/09/ctf/wp-2024hscctf-crypto-real-sign-in/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&#x27;HSCCTF&#123;*************************&#125;&#x27;</span><br>m = bytes_to_long(flag.encode())<br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    p = getPrime(<span class="hljs-number">1024</span>)<br>    q = getPrime(<span class="hljs-number">1024</span>)<br>    n = p * q<br>    c = powmod(m, e, n)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n&quot;</span>, i, <span class="hljs-string">&quot;=&quot;</span>, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c&quot;</span>, i, <span class="hljs-string">&quot;=&quot;</span>, c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n1 = 13266094979118433615107077438835111371457503704538616496563510289250600197984029767950953071723442381279904747724269706555801425883117040972832035397268347603612025741219452353130266755150965019441092380030226256032720651858600172996344598355816134478110939124633509594465443169697188695226358357129879780253706604232278678465680358018262084198108533077519049507811758423498512565521615931699494491595078723098101084217611204442585182103261006086144344612398896576066999950905966920722348056083426326740287336766359383868804991393096926457607860171709146742941740864780610226463852018204647096292737915760430291250813</span><br><span class="hljs-string">c1 = 10454892625278317641789872724686322205927252335791803070937784201169059579634108503308033729970364983743915474860354063759051514315619953792921367621385574749886778911471839079815820922430263016140141364094131496885155882486798302404238523986615316359385759537428069831379320707742928167131988641527992674882901567191207763547432299532710945549959580670112346830919500694014972444803904248586178887470465867991650480024904327432717911313867713120525202669101524778826445503383549733326775312427637839488477432162027468606568090607495541492335140760946449358303999218277269859230888292780234275495274787996001069959971</span><br><span class="hljs-string">n2 = 13561524319281645924409429988746244285924512610515302181526524036825687984904507677894611353344735741110533280540372734178963216876945066232927791369207852762146826883906093804958723203309030840804897999205074456325062789110452940484077408580876939074453733126571662068654441714639301799127584606087971553812926212292460761915985786461807649546286330834719746624387850833859250717790492671884734393055454074719585937904232516659582736211933280011591605069686791049628396762690038333975652490908544846890333889140489210242676577675968427325105786641017561929481335597681693818435892140856959673754213600282444761045909</span><br><span class="hljs-string">c2 = 3809937396638973793281111150837774607768836561256425490071061814543315217182689579329457784159377040740840790603579270672790822179042079055887400637582022659400594844425891666493759469522229692267103516295923589666151948947533002975509430505778081264268698292606209538047240829756919764958544518311993684790118122163859571923899116815269989298822142104789156965964388346807167061332155392766290531602747731916010774318400533536413925876554324550780136191458776623029231802991319498346243427246484439391940676640693616519788950250194620455331557435567742874072637005171754550020619361150150760807391307377493836703076</span><br><span class="hljs-string">n3 = 20819967432768567938753694422911303382713641435728476601586838051751312782014589687874100683447016549893853820399247909653519950995166805072380656652093579604808569443345700131756901813968185726839863492859231569896747987531341038527577030274701158504736611486411122416871876820360598851918276248520018793494992493852386399935919098185299268920688465446256283333918993392163947559470887074488117510961172278330026050882249897526926951246915378841961743261451053094912730850754242934166148766977209435597121171360066632973035097557482087715745940551760350028517912402795353929678770383484462337839762404384487582066453</span><br><span class="hljs-string">c3 = 11563829913521314742585136805475993461403465700108053759771484386843765447294825812595747844564874801821547385942939017711043792590427266240133027831461974927558652665067213878683577605892319949704019193752250409813868906421753286690558646631157080887991363101311595921894128110588310204725909211948500421818595333014728114922612870236792445180757918034580210383348205174677492784034863701447097219480133095005954043490631339361280493810083309703940614371501369647446672052159714963350601039281652141446041256158792981347520865671115091097366786582678000769990989485879756562971825181583852052194492966890258786944315</span><br><span class="hljs-string">n4 = 19517605474769458566764053169103203900538883167125789442948194023333599294853531273087386563161613748743818343948170765525802041313369094525708034240492038517491037697421019698672940028061489377078569027204940525741751607758706837789276571889269840463242449627036923444536643477208091664006240106337894541529098279162689793633659155131183323675883233214674098857553487390844015483326711766090826364639791072315148015450491509411705543419711632894282105698410629463141048089867016193055384530738113369352506445669521342292860468297676826301170714618519525841753642713267083007541894156522819536935129135488289198694889</span><br><span class="hljs-string">c4 = 12720867554077215609167247949706745145667570273372296302246080668969511222297653722462456233088262153562301044885409538816931281414687572296907970004441185871229786306419586839050961363065587925188623309437687878362349712010861419409491068481019724226070296781806932012179356550421791040143093709543578156689726256993615533679238619784087615967419616376736870824897695863732260595608905898821074250285903989668303290834003098691902990265526695777899489911426855957844561961729063644070823142386451495647995297413399808476505524581260464059786283824394788336780567702950051743361294131648282343329587709077103035316720</span><br><span class="hljs-string">n5 = 15315765971812428868126611109300419975777573811870059860288938012581131143314666287089472408729190306740351316922426244732585067377217502116440145450875665683575473308102742095244349804293311006664351646952181210686812748912418175736013835669191549110546127830831456068811493086787520032272004231879188572130659936937680177977058975692716116961651093033986073297040678707534300965722868263825444198679243070507413216087205293997006805636338567585815764233374917745809135568855524993022583535608349280044851332779641619210310837108819273508771161881712796235518243572549756276118053736270122787899173695729089911000177</span><br><span class="hljs-string">c5 = 1996576325989768324317887012680560370528949194626393664650182754791578697786369958145137743555674312911707989139883926276952465377328602829900403114611234863417183707678398047030046855450074260654432278156903388641948696716193734714839957624359533486844023111115297718398319120718217043728064595217651738180806194912581964346594873253580010279706758241793778842399330631789750327865945625117967957133863637176404309782516880511747771793712203903185512285327103080133567660391921038681393551945607152726063692641742286406772926103324078574181176632321287759066802783643421564667257668981655199672490410258387124896839</span><br><span class="hljs-string">n6 = 22501623321194869030526666823514739767749207843970334295553523279818676682652976959807729381646792676134988101065783136759904452189288813040860021497429422935571083993146794186207853146483681094375360774768406629588311381375206331368965836725531623084019451921330442379292718421616088275750226791314378297932358311378533569620671423740598033204639634035814689781736104197321348154999759210532651451336192376531975837284751978609197068573278551236896713762616106051882505752287773203197087939983952212761603430314087275042009367400077728025285967811883773835952547025411853395307325959904214255100115763377527761863243</span><br><span class="hljs-string">c6 = 16972901653690784382193404778525843883847230468707217844241233207197480301434902629018088740822889948972102445668033489181324675531537650785766582307112083721410506834279363487814759021815005839906656731069521758605293428928322712895510490968448490116732590950772037788323801838566829526879837783860631971103738986788475652187080935944428662363573097225322630574705977616143315497272754050608117449938161772409924992453640310621899223691851303921323537779068346575997621024660907750345496836548887894110692437965970524341315015139872598871247336564148953981001708145253728789799483753931039894943324458172207408514055</span><br><span class="hljs-string">n7 = 20222972180177072345801227937253710431874005900913732040381986459681923475683145372990375296354647420667483866455563976492495863306613645199351725323069254033914660444884681801701527128578914815647228265457580192591405358646605069362025887082090772778349481109768859094222573588734354390770166651349176555216207359309348018342505464249804607873118984688190648392606550835717828160317062604597079101529586592809846608153548090689114431569844519317969076852156023429809918618137153901636552629572816865533796914796916912143735510069871682428043277595493567381686086440480398579063801490541087200975224372047447666853577</span><br><span class="hljs-string">c7 = 19248329020030453774384696880312801243022181399316695013193573740699955812434234453445733160128408889312090775734047782876100145988183327884917215679382382881065419870764186721970622248713761494850863082727373673264251951250813933154161422645331713437130381414540777017708015790836797014483890216068812718266206449620134392843370036352310247384624064366465809379383305877737001168693796305842850301708205795174536047495356081533121119809621200677554802850741327026857766466801847093397207492834507197621929666294565502206253758771807936447505283097006026148803103761799795917848061959407655084012166916418019312249784</span><br><span class="hljs-string">n8 = 28799545621025859784610107508239196961299975467825740831913751504915874851330462439158635575405356818113410333683180082332165697120427112955103148744439425445183885200419323900649247390987373643732545351428341672132606990651983217136427779727640093677134233750683573339125630816150512829880758197582740742903567508671599670638441690064624970884849155079924261319378412468315205937959638074779010811695132863607314175199659821450983825173738122749043063821539706648079731459596593171608003970504410762959266052601005965264083020025264976022719772719760327913949451765549596654112776579032915566112007668167772800022899</span><br><span class="hljs-string">c8 = 1557912453709476966737076991561069916132026563623952214325899450684779611396005511525194425002377424080593548871717093344298154722414402662579348749814362372502553596876087924405512346139642130044966150910684629355033505918013408065432489689359533653824531829749196503353303426506457519870729578421517704788083837871239684468506646791031429111449024396111145925900274462731352865657439734650971847748974665555525054155117163435567228916046859498167502129739768590572170326191362542459346405142436764480239930123323175219488501180973820200030365386979265642090761227134669853119027964377516064450203673169996741108201</span><br><span class="hljs-string">n9 = 10724722645304259715795299819065674754042984013786210584506231300619560676108475536395272046569973743641251757746061197828519780315618458377103563062231183483417813026164932742828160245936263717653018746001798106670074713826425538758327538077666818411803556790303118703675214570232032363741244652199877829850941356975349610433270602500949664737614829264570720376982697613497917773407899889472415398738368753150300782201701629840263791099898799223939097237737763305744244520913831151361155926462086252389196548583215275230652627205709362921989235487237437830519479308853639024184940767904019468405024567279269194660457</span><br><span class="hljs-string">c9 = 7054636121132343583858699301095750714111235817920115459468707884725018199621185268565462099537583727231123935665880304441155106987655834264363622503952228720525242179508079016631089564472694196928292967592007090527901832440980478605545275893294775905732209796463597105116676363505607644384293210905609044898854823349412282236466031666385339991490559120640881321780940909164095426401350314009757434019464208207922992311335823038396957805698822367795673327054284423260967631762122524511318733561339982590040303505605155884427567432712042870632816967182611225212150848091424300840160529323960243459920269872536666352976</span><br><span class="hljs-string">n10 = 16304817901397483417456609341516124523232426780023397228272913044723365389571327797134591736977502692057727416394924310828824378024812777529367342707896494815960255682947685036902235997899886291633609041685897197272675911304941501067794795285949540313990226409651292120126492714998892290044111541098365692731185787360609198921681736777103794430653696698141195954719030883935151980847339939213040373252819145655067286986300641668994700390921458682571619409488233289211738521046085311253119526685912893458131534718050802684180285138809217274273877376347024021056317566312186133916744533463879779997794540361760393219489</span><br><span class="hljs-string">c10 = 6039122660803656157700054739064564338439549484695206214016006129508782362229842967602464077735874540107161459041835340990108817139672137870642935613531313583963930144871458733026396223674801557621036949312116639217447114899726858984281194116508244403985568785765273838572470898925521147022021516862658967584135454474355381073026066426450614788381002057980590442338766869104957577338546687759141228942149374485785893539335288536729328218172278370763183603422629799846611737710865681572257803448960656692506773086527389616178693152885260795303008111935277529561576915114165678564997923634906377059491989399467738069641</span><br><span class="hljs-string">n11 = 26625591570108917991847624024325819020320989255483608230644879476517915211995542896341416515605576928392317717654695767006784744751962205355107012859426134474074616134986414248054781712130892076462288761672616993287474215271046602443215449210026303978249752825306035097841429567784265656890801589418315449927543660131967365276637662563112328427813183398517944210120851841495001293543971765864382060100600179108814852829473884481867272716907064729991187798328733196676298681328399250356028155411865948758466337763025886685436650643428510593697176416735568250615673642866668416526682341721998481502482877972649018501469</span><br><span class="hljs-string">c11 = 20247005397625616228661928392695469647749434533141783786437968083066137357689767280753532605896419173332597529708801946906363780592876111104850302784033136335456683361128603662454728234349563238948801712907903185993561076754164552845510795293521029798357876214260903355702688269527465118808832941386890598851762900876512383557653940846232884627557957652638581022140825373023173482471791720148792301241581919765510220083079365311297081633979398855966991069020584462613981094888736916444009463104235004451765533162593406749138640537670707679905027165914805299755934758172748227146495107002603546338597452964759860431081</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="解">解</h2><p>这是一个公因数攻击(多组n和c)因为有多个n和c，所以可能会存在两个n之间存在大于1的公因数，以此破解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 公因数攻击(多组n和c)</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n1 = <span class="hljs-number">13266094979118433615107077438835111371457503704538616496563510289250600197984029767950953071723442381279904747724269706555801425883117040972832035397268347603612025741219452353130266755150965019441092380030226256032720651858600172996344598355816134478110939124633509594465443169697188695226358357129879780253706604232278678465680358018262084198108533077519049507811758423498512565521615931699494491595078723098101084217611204442585182103261006086144344612398896576066999950905966920722348056083426326740287336766359383868804991393096926457607860171709146742941740864780610226463852018204647096292737915760430291250813</span><br>c1 = <span class="hljs-number">10454892625278317641789872724686322205927252335791803070937784201169059579634108503308033729970364983743915474860354063759051514315619953792921367621385574749886778911471839079815820922430263016140141364094131496885155882486798302404238523986615316359385759537428069831379320707742928167131988641527992674882901567191207763547432299532710945549959580670112346830919500694014972444803904248586178887470465867991650480024904327432717911313867713120525202669101524778826445503383549733326775312427637839488477432162027468606568090607495541492335140760946449358303999218277269859230888292780234275495274787996001069959971</span><br>n2 = <span class="hljs-number">13561524319281645924409429988746244285924512610515302181526524036825687984904507677894611353344735741110533280540372734178963216876945066232927791369207852762146826883906093804958723203309030840804897999205074456325062789110452940484077408580876939074453733126571662068654441714639301799127584606087971553812926212292460761915985786461807649546286330834719746624387850833859250717790492671884734393055454074719585937904232516659582736211933280011591605069686791049628396762690038333975652490908544846890333889140489210242676577675968427325105786641017561929481335597681693818435892140856959673754213600282444761045909</span><br>c2 = <span class="hljs-number">3809937396638973793281111150837774607768836561256425490071061814543315217182689579329457784159377040740840790603579270672790822179042079055887400637582022659400594844425891666493759469522229692267103516295923589666151948947533002975509430505778081264268698292606209538047240829756919764958544518311993684790118122163859571923899116815269989298822142104789156965964388346807167061332155392766290531602747731916010774318400533536413925876554324550780136191458776623029231802991319498346243427246484439391940676640693616519788950250194620455331557435567742874072637005171754550020619361150150760807391307377493836703076</span><br>n3 = <span class="hljs-number">20819967432768567938753694422911303382713641435728476601586838051751312782014589687874100683447016549893853820399247909653519950995166805072380656652093579604808569443345700131756901813968185726839863492859231569896747987531341038527577030274701158504736611486411122416871876820360598851918276248520018793494992493852386399935919098185299268920688465446256283333918993392163947559470887074488117510961172278330026050882249897526926951246915378841961743261451053094912730850754242934166148766977209435597121171360066632973035097557482087715745940551760350028517912402795353929678770383484462337839762404384487582066453</span><br>c3 = <span class="hljs-number">11563829913521314742585136805475993461403465700108053759771484386843765447294825812595747844564874801821547385942939017711043792590427266240133027831461974927558652665067213878683577605892319949704019193752250409813868906421753286690558646631157080887991363101311595921894128110588310204725909211948500421818595333014728114922612870236792445180757918034580210383348205174677492784034863701447097219480133095005954043490631339361280493810083309703940614371501369647446672052159714963350601039281652141446041256158792981347520865671115091097366786582678000769990989485879756562971825181583852052194492966890258786944315</span><br>n4 = <span class="hljs-number">19517605474769458566764053169103203900538883167125789442948194023333599294853531273087386563161613748743818343948170765525802041313369094525708034240492038517491037697421019698672940028061489377078569027204940525741751607758706837789276571889269840463242449627036923444536643477208091664006240106337894541529098279162689793633659155131183323675883233214674098857553487390844015483326711766090826364639791072315148015450491509411705543419711632894282105698410629463141048089867016193055384530738113369352506445669521342292860468297676826301170714618519525841753642713267083007541894156522819536935129135488289198694889</span><br>c4 = <span class="hljs-number">12720867554077215609167247949706745145667570273372296302246080668969511222297653722462456233088262153562301044885409538816931281414687572296907970004441185871229786306419586839050961363065587925188623309437687878362349712010861419409491068481019724226070296781806932012179356550421791040143093709543578156689726256993615533679238619784087615967419616376736870824897695863732260595608905898821074250285903989668303290834003098691902990265526695777899489911426855957844561961729063644070823142386451495647995297413399808476505524581260464059786283824394788336780567702950051743361294131648282343329587709077103035316720</span><br>n5 = <span class="hljs-number">15315765971812428868126611109300419975777573811870059860288938012581131143314666287089472408729190306740351316922426244732585067377217502116440145450875665683575473308102742095244349804293311006664351646952181210686812748912418175736013835669191549110546127830831456068811493086787520032272004231879188572130659936937680177977058975692716116961651093033986073297040678707534300965722868263825444198679243070507413216087205293997006805636338567585815764233374917745809135568855524993022583535608349280044851332779641619210310837108819273508771161881712796235518243572549756276118053736270122787899173695729089911000177</span><br>c5 = <span class="hljs-number">1996576325989768324317887012680560370528949194626393664650182754791578697786369958145137743555674312911707989139883926276952465377328602829900403114611234863417183707678398047030046855450074260654432278156903388641948696716193734714839957624359533486844023111115297718398319120718217043728064595217651738180806194912581964346594873253580010279706758241793778842399330631789750327865945625117967957133863637176404309782516880511747771793712203903185512285327103080133567660391921038681393551945607152726063692641742286406772926103324078574181176632321287759066802783643421564667257668981655199672490410258387124896839</span><br>n6 = <span class="hljs-number">22501623321194869030526666823514739767749207843970334295553523279818676682652976959807729381646792676134988101065783136759904452189288813040860021497429422935571083993146794186207853146483681094375360774768406629588311381375206331368965836725531623084019451921330442379292718421616088275750226791314378297932358311378533569620671423740598033204639634035814689781736104197321348154999759210532651451336192376531975837284751978609197068573278551236896713762616106051882505752287773203197087939983952212761603430314087275042009367400077728025285967811883773835952547025411853395307325959904214255100115763377527761863243</span><br>c6 = <span class="hljs-number">16972901653690784382193404778525843883847230468707217844241233207197480301434902629018088740822889948972102445668033489181324675531537650785766582307112083721410506834279363487814759021815005839906656731069521758605293428928322712895510490968448490116732590950772037788323801838566829526879837783860631971103738986788475652187080935944428662363573097225322630574705977616143315497272754050608117449938161772409924992453640310621899223691851303921323537779068346575997621024660907750345496836548887894110692437965970524341315015139872598871247336564148953981001708145253728789799483753931039894943324458172207408514055</span><br>n7 = <span class="hljs-number">20222972180177072345801227937253710431874005900913732040381986459681923475683145372990375296354647420667483866455563976492495863306613645199351725323069254033914660444884681801701527128578914815647228265457580192591405358646605069362025887082090772778349481109768859094222573588734354390770166651349176555216207359309348018342505464249804607873118984688190648392606550835717828160317062604597079101529586592809846608153548090689114431569844519317969076852156023429809918618137153901636552629572816865533796914796916912143735510069871682428043277595493567381686086440480398579063801490541087200975224372047447666853577</span><br>c7 = <span class="hljs-number">19248329020030453774384696880312801243022181399316695013193573740699955812434234453445733160128408889312090775734047782876100145988183327884917215679382382881065419870764186721970622248713761494850863082727373673264251951250813933154161422645331713437130381414540777017708015790836797014483890216068812718266206449620134392843370036352310247384624064366465809379383305877737001168693796305842850301708205795174536047495356081533121119809621200677554802850741327026857766466801847093397207492834507197621929666294565502206253758771807936447505283097006026148803103761799795917848061959407655084012166916418019312249784</span><br>n8 = <span class="hljs-number">28799545621025859784610107508239196961299975467825740831913751504915874851330462439158635575405356818113410333683180082332165697120427112955103148744439425445183885200419323900649247390987373643732545351428341672132606990651983217136427779727640093677134233750683573339125630816150512829880758197582740742903567508671599670638441690064624970884849155079924261319378412468315205937959638074779010811695132863607314175199659821450983825173738122749043063821539706648079731459596593171608003970504410762959266052601005965264083020025264976022719772719760327913949451765549596654112776579032915566112007668167772800022899</span><br>c8 = <span class="hljs-number">1557912453709476966737076991561069916132026563623952214325899450684779611396005511525194425002377424080593548871717093344298154722414402662579348749814362372502553596876087924405512346139642130044966150910684629355033505918013408065432489689359533653824531829749196503353303426506457519870729578421517704788083837871239684468506646791031429111449024396111145925900274462731352865657439734650971847748974665555525054155117163435567228916046859498167502129739768590572170326191362542459346405142436764480239930123323175219488501180973820200030365386979265642090761227134669853119027964377516064450203673169996741108201</span><br>n9 = <span class="hljs-number">10724722645304259715795299819065674754042984013786210584506231300619560676108475536395272046569973743641251757746061197828519780315618458377103563062231183483417813026164932742828160245936263717653018746001798106670074713826425538758327538077666818411803556790303118703675214570232032363741244652199877829850941356975349610433270602500949664737614829264570720376982697613497917773407899889472415398738368753150300782201701629840263791099898799223939097237737763305744244520913831151361155926462086252389196548583215275230652627205709362921989235487237437830519479308853639024184940767904019468405024567279269194660457</span><br>c9 = <span class="hljs-number">7054636121132343583858699301095750714111235817920115459468707884725018199621185268565462099537583727231123935665880304441155106987655834264363622503952228720525242179508079016631089564472694196928292967592007090527901832440980478605545275893294775905732209796463597105116676363505607644384293210905609044898854823349412282236466031666385339991490559120640881321780940909164095426401350314009757434019464208207922992311335823038396957805698822367795673327054284423260967631762122524511318733561339982590040303505605155884427567432712042870632816967182611225212150848091424300840160529323960243459920269872536666352976</span><br>n10 = <span class="hljs-number">16304817901397483417456609341516124523232426780023397228272913044723365389571327797134591736977502692057727416394924310828824378024812777529367342707896494815960255682947685036902235997899886291633609041685897197272675911304941501067794795285949540313990226409651292120126492714998892290044111541098365692731185787360609198921681736777103794430653696698141195954719030883935151980847339939213040373252819145655067286986300641668994700390921458682571619409488233289211738521046085311253119526685912893458131534718050802684180285138809217274273877376347024021056317566312186133916744533463879779997794540361760393219489</span><br>c10 = <span class="hljs-number">6039122660803656157700054739064564338439549484695206214016006129508782362229842967602464077735874540107161459041835340990108817139672137870642935613531313583963930144871458733026396223674801557621036949312116639217447114899726858984281194116508244403985568785765273838572470898925521147022021516862658967584135454474355381073026066426450614788381002057980590442338766869104957577338546687759141228942149374485785893539335288536729328218172278370763183603422629799846611737710865681572257803448960656692506773086527389616178693152885260795303008111935277529561576915114165678564997923634906377059491989399467738069641</span><br>n11 = <span class="hljs-number">26625591570108917991847624024325819020320989255483608230644879476517915211995542896341416515605576928392317717654695767006784744751962205355107012859426134474074616134986414248054781712130892076462288761672616993287474215271046602443215449210026303978249752825306035097841429567784265656890801589418315449927543660131967365276637662563112328427813183398517944210120851841495001293543971765864382060100600179108814852829473884481867272716907064729991187798328733196676298681328399250356028155411865948758466337763025886685436650643428510593697176416735568250615673642866668416526682341721998481502482877972649018501469</span><br>c11 = <span class="hljs-number">20247005397625616228661928392695469647749434533141783786437968083066137357689767280753532605896419173332597529708801946906363780592876111104850302784033136335456683361128603662454728234349563238948801712907903185993561076754164552845510795293521029798357876214260903355702688269527465118808832941386890598851762900876512383557653940846232884627557957652638581022140825373023173482471791720148792301241581919765510220083079365311297081633979398855966991069020584462613981094888736916444009463104235004451765533162593406749138640537670707679905027165914805299755934758172748227146495107002603546338597452964759860431081</span><br><br>e = <span class="hljs-number">65537</span><br>n = []<br>c = []<br>p = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    n.append(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;n&#x27;</span> + <span class="hljs-built_in">str</span>(i)))<br>    c.append(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;c&#x27;</span> + <span class="hljs-built_in">str</span>(i)))<br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(n, c))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(n)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(n)):<br>        <span class="hljs-keyword">if</span> gmpy2.gcd(n[i], n[j]) != <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(i, j)    <span class="hljs-comment"># i=4,j=5</span><br>            <span class="hljs-built_in">print</span>(gmpy2.gcd(n[i], n[j]))<br>p = gmpy2.gcd(n5, n6)<br>q = n5 // p<br>d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(d)<br>m = <span class="hljs-built_in">pow</span>(c5, d, n5)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>over！</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WP_2024HSCCTF_CRYPTO_FUNNY</title>
    <link href="/2024/03/09/ctf/wp-2024hscctf-crypto-funny/"/>
    <url>/2024/03/09/ctf/wp-2024hscctf-crypto-funny/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from <span class="hljs-title class_">Crypto</span>.<span class="hljs-title class_">Util</span>.number import *<br>from gmpy2 import *<br><br><br>p = <span class="hljs-number">1627858721743596752497831640628357323459243890844363792736407789751577427319257708507686114456632938183775129585728892845205290864750578798354859933996208521450129131173352490118085939969385911306718129785035108056909135931322755908602656567223998858450130768625587559935064753603718657989533793373124922891077849376447589198239126291127263234784363556777780461489387706699053671315621968807065360907667815336609878856798387057891974730460404647229308105442629038061284060276648993434681114539955086828451085582033288860959729755856478065093327544217813990665326820156340461326538271909605715822484950196033809892232121330623027855970475888202583512234213349462680452400729903400494519431590431864717223438807093669836615356855072370571595889807712166659061190031457954071146645411277702230847389264989391715763232453605404095019402186331633202953693057641475300619482863265936513394341066776619336452923951439714749067348507</span><br>q = <span class="hljs-number">165059760196977338034268528857897083190717585647808271832795575354736221674892279730906525407442580833042731114617534865267230347093979480666213073939602212663043286794259410177026619955285626139270678815060566416554620185859901611571955490060241822054715533030464833509114500388615748465579240918292431860839</span><br>c = <span class="hljs-number">209347444484196477254668267578954904181293909211985372842733666165076889646025992007884927283300662833989678431462547742385291078285045060028956748455410812196305788814280968487973559115983082461315009316488143477261307107939530267533197821947240438534411830018967506368459544025037634267899970815198992392565948727381322854560823769432552779881938316107779842525092269591932257206582810678457433166038809740255591841951300818106018061065936083887559841543250701094558114335651396741896281230175124133873529005816838785880680073159461666783649744640398010841282229366323100807220116460976549981263966530038289223576133865992894885483308732021144420507955669760623032114718333853671281281221009397028372653797668774820725717817362383394165014402977767667433542733963298092312930702496796235196487999167666133884266829605503363510544384236303968829214389757297563873395131798724306227675722494797069994655456021649231626359765579028950908065367760981736933167557841586896807116262630848742514005606289980676609588756946993271763119859088002784499062149533167332388600036550273743940503131248513795389688869470432261503038708892320267815658450917855334244502333938120781251564676408212996623419957317150267768978807968208353379334556945</span><br><br>d = inverse(<span class="hljs-number">65537</span>, q - <span class="hljs-number">1</span>)<br>m = powmod(c, d, q)<br>print(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="解">解</h2><p>直接运行就行</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python中stylecloud包的使用</title>
    <link href="/2024/03/07/python/python-zhong-stylecloud-bao-de-shi-yong/"/>
    <url>/2024/03/07/python/python-zhong-stylecloud-bao-de-shi-yong/</url>
    
    <content type="html"><![CDATA[<h2 id="stylecloud介绍">stylecloud介绍</h2><p>stylecloud是一款比较好用的python包，常用于数据可视化操作，具体的介绍看看别人写的吧</p><p>https://mp.weixin.qq.com/s/B23uDxzLUa_45uDh2R9Vlw</p><p>https://cloud.tencent.com/developer/article/1699651</p><p>蒙版图片参考网址：https://fontawesome.com/license/free</p><p>中文版：https://fa5.dashgame.com/#/%E5%9B%BE%E6%A0%87</p><p>配色：palettable： https://jiffyclub.github.io/palettable/</p><p>特别需要注意的是蒙版图片的调用：例如：fa-grin-beam，在python中调用好像得改为fa.grin-beam才行，有时候都不行，还是得自己多试试，搞不懂。</p><p>下面是个实例： <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from stylecloud import gen_stylecloud<br>import jieba<br>import re<br><br><span class="hljs-comment"># 读取数据</span><br>with open(<span class="hljs-string">&#x27;xxxx.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as <span class="hljs-symbol">f:</span><br>    data = f.read()<br><br><span class="hljs-comment"># 文本预处理  去除一些无用的字符   只提取出中文出来</span><br>new_data = re.findall(<span class="hljs-string">&#x27;[\u4e00-\u9fa5]+&#x27;</span>, data, re.S)<br>new_data = <span class="hljs-string">&quot;/&quot;</span>.join(new_data)<br><br><span class="hljs-comment"># 文本分词</span><br>seg_list_exact = jieba.cut(new_data, cut_all=<span class="hljs-title class_">True</span>)<br><br>result_list = []<br>with open(<span class="hljs-string">&#x27;stopword.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as <span class="hljs-symbol">f:</span><br>    con = f.readlines()<br>    stop_words = set()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-symbol">con:</span><br>        i = i.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)   <span class="hljs-comment"># 去掉读取每一行数据的\n</span><br>        stop_words.add(i)<br><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> <span class="hljs-symbol">seg_list_exact:</span><br>    <span class="hljs-comment"># 设置停用词</span><br>    <span class="hljs-keyword">if</span> word <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stop_words <span class="hljs-keyword">and</span> len(word) &gt; <span class="hljs-number">1</span>:<br>        result_list.append(word)<br>print(result_list)<br><br>gen_stylecloud(<br>    text=<span class="hljs-string">&#x27; &#x27;</span>.join(result_list),                   <span class="hljs-comment"># 文本数据</span><br>    size=<span class="hljs-number">600</span>,                                     <span class="hljs-comment"># 词云图大小</span><br>    font_path=r<span class="hljs-string">&#x27;‪C:\Windows\Fonts\msyh.ttc&#x27;</span>, <span class="hljs-comment"># 中文词云  显示需要设置字体</span><br>    output_name=<span class="hljs-string">&#x27;词云12.png&#x27;</span>,                       <span class="hljs-comment"># 输出词云图名称</span><br>    icon_name=<span class="hljs-string">&#x27;fas fa.grin-beam&#x27;</span>,                   <span class="hljs-comment"># 图标   图片选择网址：https://fontawesome.com/license/free   # https://fontawesome.dashgame.com/</span><br>    <span class="hljs-comment"># palette=&quot;Dark2_7&quot;  # 可以选择不同的配色方案，网址：palettable https://jiffyclub.github.io/palettable/</span><br>)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python报错</title>
    <link href="/2024/03/07/python/python-bao-cuo-ji-he/"/>
    <url>/2024/03/07/python/python-bao-cuo-ji-he/</url>
    
    <content type="html"><![CDATA[<p>1、 <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby">word_freq = &#123;&#125;<br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> <span class="hljs-symbol">words:</span><br>    <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> <span class="hljs-symbol">word_freq:</span><br>        word_freq[word] += <span class="hljs-number">1</span><br>    <span class="hljs-symbol">else:</span><br>        word_freq[word] = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(word_freq):<br>    print(word)<br>    print(word_freq[word])<br><br><span class="hljs-title class_">TypeError</span>: <span class="hljs-string">&#x27;dict&#x27;</span> object cannot be interpreted as an integer<br>类型错误<span class="hljs-symbol">:<span class="hljs-string">&#x27;dict&#x27;</span></span>对象不能被解释为整数<br></code></pre></td></tr></table></figure>在打印字典的键值对时出现上述错误，首先是word没有参与循环，其次range(word_freq)使用错误<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby">word_freq = &#123;&#125;<br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> <span class="hljs-symbol">words:</span><br>    <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> <span class="hljs-symbol">word_freq:</span><br>        word_freq[word] += <span class="hljs-number">1</span><br>    <span class="hljs-symbol">else:</span><br>        word_freq[word] = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> word, freq <span class="hljs-keyword">in</span> word_freq.items():<br>    print(word,word_freq[word])<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>报错集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WP_2021SWPUCTF新生赛_CRYPTO_traditional</title>
    <link href="/2024/03/04/ctf/wp-2021swpuctf-xin-sheng-sai-crypto-traditional/"/>
    <url>/2024/03/04/ctf/wp-2021swpuctf-xin-sheng-sai-crypto-traditional/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目：</h2><p>西方的二进制数学的发明者莱布尼茨，从中国的八卦图当中受到启发，演绎并推论出了数学矩阵，最后创造的二进制数学。二进制数学的诞生为计算机的发明奠定了理论基础。而计算机现在改变了我们整个世界，改变了我们生活，而他的源头却是来自于八卦图。现在，给你一组由八卦图方位 组成的密文，你能破解出其中的含义吗？ 震坤艮 震艮震 坤巽坤 坤巽震震巽兑 震艮震 震离艮 震离艮 格式：NSSCTF{}</p><h2 id="解题思路">解题思路</h2><p>根据文中提到的信息，我们尝试找到了一个图解来展示二进制和中国八卦之间的关系<img src="https://pic.imgdb.cn/item/65e7f3549f345e8d03a152f9.jpg"alt="alt text" /> 结合八卦与二叉树之间的的关系，将密文转化为：</p><p>100000001 100001100 000011000 000011100 100011110 100001100 100101001100101001</p><p>再转为ASCII码 <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">m = <span class="hljs-string">&quot;001000100 001100001 000110000 000110001 001110011 001100001 001101100 001101100&quot;</span><br>m = m.split(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(m)):<br>    print(chr(int(m[i], <span class="hljs-number">2</span>)), <span class="hljs-keyword">end</span>=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure> 但是结果发现为乱码 <imgsrc="https://pic.imgdb.cn/item/65e7f38c9f345e8d03a1fbbf.jpg"alt="alt text" /></p><p>按理说不应该啊，怀疑是不是图片给错了，找了好几张类似的，发现图片没错，那就是题目的问题了，尝试了一下把最高位和最低位反着来读</p><p>001000100 001100001 000110000 000110001 001110011 001100001 001101100001101100</p><p>这样就可以了。。。 <imgsrc="https://pic.imgdb.cn/item/65e7f39a9f345e8d03a229cb.jpg"alt="alt text" />严重怀疑这题是不是出题人搞错了，因为二叉树的下面是高位，上面是低位</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>维纳攻击总结</title>
    <link href="/2024/02/11/ctf/wei-na-gong-ji-zong-jie/"/>
    <url>/2024/02/11/ctf/wei-na-gong-ji-zong-jie/</url>
    
    <content type="html"><![CDATA[<h2 id="维纳攻击">维纳攻击</h2><p>wiener attack是依靠连分数进行的攻击方式，适用于非常接近某一值（比如1）时，求一个比例关系(通常是e/ N = 1)，在不同的题目中也会产生很多变式。 ### 解题模板<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continuedFra</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算连分数</span><br><span class="hljs-string">    :param x: 分子</span><br><span class="hljs-string">    :param y: 分母</span><br><span class="hljs-string">    :return: 连分数列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cf = []<br>    <span class="hljs-keyword">while</span> y:<br>        cf.append(x // y)<br>        x, y = y, x % y<br>    <span class="hljs-keyword">return</span> cf<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gradualFra</span>(<span class="hljs-params">cf</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算传入列表最后的渐进分数</span><br><span class="hljs-string">    :param cf: 连分数列表</span><br><span class="hljs-string">    :return: 该列表最后的渐近分数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    numerator = <span class="hljs-number">0</span><br>    denominator = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cf[::-<span class="hljs-number">1</span>]:<br>        <span class="hljs-comment"># 这里的渐进分数分子分母要分开</span><br>        numerator, denominator = denominator, x * denominator + numerator<br>    <span class="hljs-keyword">return</span> numerator, denominator<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_pq</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span><br><span class="hljs-string">    :param a:x^2的系数</span><br><span class="hljs-string">    :param b:x的系数</span><br><span class="hljs-string">    :param c:pq</span><br><span class="hljs-string">    :return:p，q</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)<br>    <span class="hljs-keyword">return</span> (-b + par) // (<span class="hljs-number">2</span> * a), (-b - par) // (<span class="hljs-number">2</span> * a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getGradualFra</span>(<span class="hljs-params">cf</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算列表所有的渐近分数</span><br><span class="hljs-string">    :param cf: 连分数列表</span><br><span class="hljs-string">    :return: 该列表所有的渐近分数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    gf = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(cf) + <span class="hljs-number">1</span>):<br>        gf.append(gradualFra(cf[:i]))<br>    <span class="hljs-keyword">return</span> gf<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param e:</span><br><span class="hljs-string">    :param n:</span><br><span class="hljs-string">    :return: 私钥d</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cf = continuedFra(e, n)<br>    gf = getGradualFra(cf)<br>    <span class="hljs-keyword">for</span> d, k <span class="hljs-keyword">in</span> gf:<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi = (e * d - <span class="hljs-number">1</span>) // k<br>        p, q = solve_pq(<span class="hljs-number">1</span>, n - phi + <span class="hljs-number">1</span>, n)<br>        <span class="hljs-keyword">if</span> p * q == n:<br>            <span class="hljs-keyword">return</span> d<br><br>n = <span class="hljs-number">639662333905190724963174274393118134850652056724765488685973275138948202602626008285649108873241886836533441901790252560580886492518792249844707754890068885294414947775869189660933854702732140888525369256213185908742658834741758334492843871934294115437721034834635565406377520933839418094457376057043593848401</span><br>e = <span class="hljs-number">548564175098067125961375319851171259385596271876637657761522885808657855394647972481844447376596437557651275057610120865395646169671221375251081541213042646978655686531005856899936162320404991331623237305862913250487293880446994470841390688087392282045130633013139311548859962245908782253213294049851175315059</span><br>c = <span class="hljs-number">266367266471585923035346980467315672043839080179258966276144775106482166900911004389808367589961536843898187180012055918063504477273067284037318171833017082239907978935274619109926579983150571298634653886980563681026116724117473808890951091279814434050754571460308728024448607359710055618866766919226511213734</span><br><br>d=wienerAttack(e, n)<br>m=<span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(libnum.n2s(m).decode())<br></code></pre></td></tr></table></figure></p><h3 id="例题一-hgame-2022-week3rsa-attack-3">例题一 [HGAME 2022week3]RSA attack 3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> s2n<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = getPrime(<span class="hljs-number">2048</span>)<br>q = getPrime(<span class="hljs-number">2048</span>)<br>n = p * q<br>d = getPrime(<span class="hljs-number">64</span>)<br>e = invert(d, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>c = <span class="hljs-built_in">pow</span>(s2n(flag), e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br>n = <span class="hljs-number">507419170088344932990702256911694788408493968749527614421614568612944144764889717229444020813658893362983714454159980719026366361318789415279417172858536381938870379267670180128174798344744371725609827872339512302232610590888649555446972990419313445687852636305518801236132032618350847705234643521557851434711389664130274468354405273873218264222293858509477860634889001898462547712800153111774564939279190835857445378261920532206352364005840238252284065587291779196975457288580812526597185332036342330147250312262816994625317482869849388424397437470502449815132000588425028055964432298176942124697105509057090546600330760364385753313923003549670107599757996810939165300581847068233156887269181096893089415302163770884312255957584660964506028002922164767453287973102961910781312351686488047510932997937700597992705557881172640175117476017503918294534205898046483981707558521558992058512940087192655700351675718815723840568640509355338482631416345193176708501897458649841539192993142790402734898948352382350766125000186026261167277014748183012844440603384989647664190074853086693408529737767147592432979469020671772152652865219092597717869942730499507426269170189547020660681363276871874469322437194397171763927907099922324375991793759</span><br>e = <span class="hljs-number">77310199867448677782081572109343472783781135641712597643597122591443011229091533516758925238949755491395489408922437493670252550920826641442189683907973926843505436730014899918587477913032286153545247063493885982941194996251799882984145155733050069564485120660716110828110738784644223519725613280140006783618393995138076030616463398284819550627612102010214315235269945251741407899692274978642663650687157736417831290404871181902463904311095448368498432147292938825418930527188720696497596867575843476810225152659244529481480993843168383016583068747733118703000287423374094051895724494193455175131120243097065270804457787026492578916584536863548445813916819417857064037664101684455000184987531252344582899589746272173970083733130106407810619258077266603898529285634495710846838011858287024329514491058790557305041389614650730267774482954666726949886313386881066593946789460028399523245777171320319444673551268379126203862576627540177888290265714418064334752499940587750374552330008143708562065940245637685833371348603338834447212248648869514585047871442060412622164276894766238383894693759347590977926306581080390685360615407766600573527565016914830132066428454738135380178959590692145577418811677639050929791996313180297924833690095</span><br>c = <span class="hljs-number">165251729917394529793163344300848992394021337429474789711805041655116845722480301677817165053253655027459227404782607373107477419083333844871948673626672704233977397989843349633720167495862807995411682262559392496273163155214888276398332204954185252030616473235814999366132031184631541209554169938146205402400412307638567132128690379079483633171535375278689326189057930259534983374296873110199636558962144635514392282351103900375366360933088605794654279480277782805401749872568584335215630740265944133347038070337891035560658434763924576508969938866566235926587685108811154229747423410476421860059769485356567301897413767088823807510568561254627099309752215808220067495561412081320541540679503218232020279947159175547517811501280846596226165148013762293861131544331444165070186672186027410082671602892508739473724143698396105392623164025712124329254933353509384748403154342322725203183050328143736631333990445537119855865348221215277608372952942702104088940952142851523651639574409075484106857403651453121036577767672430612728022444370874223001778580387635197325043524719396707713385963432915855227152371800527536048555551237729690663544828830627192867570345853910196397851763591543484023134551876591248557980182981967782409054277224</span><br></code></pre></td></tr></table></figure><p>比较常规的 RSA题型，但问题是e相当的大，甚至与n相当的接近（差了一位数）</p><p>因此我们可以通过 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n = p * q<br>d = gmpy2.invert(e, （p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)）     <br></code></pre></td></tr></table></figure> 推出 d 非常的小,对此通常采取 维纳攻击的方法来求取 d (需要知道 e,n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continuedFra</span>(<span class="hljs-params">x, y</span>):<br>    cf = []<br>    <span class="hljs-keyword">while</span> y:<br>        cf.append(x // y)<br>        x, y = y, x % y<br>    <span class="hljs-keyword">return</span> cf<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gradualFra</span>(<span class="hljs-params">cf</span>):<br>    numerator = <span class="hljs-number">0</span><br>    denominator = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cf[::-<span class="hljs-number">1</span>]:<br>        numerator, denominator = denominator, x * denominator + numerator<br>    <span class="hljs-keyword">return</span> numerator, denominator<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_pq</span>(<span class="hljs-params">a, b, c</span>):<br>    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)<br>    <span class="hljs-keyword">return</span> (-b + par) // (<span class="hljs-number">2</span> * a), (-b - par) // (<span class="hljs-number">2</span> * a)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getGradualFra</span>(<span class="hljs-params">cf</span>):<br>    gf = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(cf) + <span class="hljs-number">1</span>):<br>        gf.append(gradualFra(cf[:i]))<br>    <span class="hljs-keyword">return</span> gf<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e, n</span>):<br>    cf = continuedFra(e, n)<br>    gf = getGradualFra(cf)<br>    <span class="hljs-keyword">for</span> d, k <span class="hljs-keyword">in</span> gf:<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi = (e * d - <span class="hljs-number">1</span>) // k<br>        p, q = solve_pq(<span class="hljs-number">1</span>, n - phi + <span class="hljs-number">1</span>, n)<br>        <span class="hljs-keyword">if</span> p * q == n:<br>            <span class="hljs-keyword">return</span> d<br><br>n= <span class="hljs-number">507419170088344932990702256911694788408493968749527614421614568612944144764889717229444020813658893362983714454159980719026366361318789415279417172858536381938870379267670180128174798344744371725609827872339512302232610590888649555446972990419313445687852636305518801236132032618350847705234643521557851434711389664130274468354405273873218264222293858509477860634889001898462547712800153111774564939279190835857445378261920532206352364005840238252284065587291779196975457288580812526597185332036342330147250312262816994625317482869849388424397437470502449815132000588425028055964432298176942124697105509057090546600330760364385753313923003549670107599757996810939165300581847068233156887269181096893089415302163770884312255957584660964506028002922164767453287973102961910781312351686488047510932997937700597992705557881172640175117476017503918294534205898046483981707558521558992058512940087192655700351675718815723840568640509355338482631416345193176708501897458649841539192993142790402734898948352382350766125000186026261167277014748183012844440603384989647664190074853086693408529737767147592432979469020671772152652865219092597717869942730499507426269170189547020660681363276871874469322437194397171763927907099922324375991793759</span><br>e= <span class="hljs-number">77310199867448677782081572109343472783781135641712597643597122591443011229091533516758925238949755491395489408922437493670252550920826641442189683907973926843505436730014899918587477913032286153545247063493885982941194996251799882984145155733050069564485120660716110828110738784644223519725613280140006783618393995138076030616463398284819550627612102010214315235269945251741407899692274978642663650687157736417831290404871181902463904311095448368498432147292938825418930527188720696497596867575843476810225152659244529481480993843168383016583068747733118703000287423374094051895724494193455175131120243097065270804457787026492578916584536863548445813916819417857064037664101684455000184987531252344582899589746272173970083733130106407810619258077266603898529285634495710846838011858287024329514491058790557305041389614650730267774482954666726949886313386881066593946789460028399523245777171320319444673551268379126203862576627540177888290265714418064334752499940587750374552330008143708562065940245637685833371348603338834447212248648869514585047871442060412622164276894766238383894693759347590977926306581080390685360615407766600573527565016914830132066428454738135380178959590692145577418811677639050929791996313180297924833690095</span><br>c= <span class="hljs-number">165251729917394529793163344300848992394021337429474789711805041655116845722480301677817165053253655027459227404782607373107477419083333844871948673626672704233977397989843349633720167495862807995411682262559392496273163155214888276398332204954185252030616473235814999366132031184631541209554169938146205402400412307638567132128690379079483633171535375278689326189057930259534983374296873110199636558962144635514392282351103900375366360933088605794654279480277782805401749872568584335215630740265944133347038070337891035560658434763924576508969938866566235926587685108811154229747423410476421860059769485356567301897413767088823807510568561254627099309752215808220067495561412081320541540679503218232020279947159175547517811501280846596226165148013762293861131544331444165070186672186027410082671602892508739473724143698396105392623164025712124329254933353509384748403154342322725203183050328143736631333990445537119855865348221215277608372952942702104088940952142851523651639574409075484106857403651453121036577767672430612728022444370874223001778580387635197325043524719396707713385963432915855227152371800527536048555551237729690663544828830627192867570345853910196397851763591543484023134551876591248557980182981967782409054277224</span><br><br>d=wienerAttack(e, n)<br>m=<span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(libnum.n2s(m).decode())<br><span class="hljs-comment"># hgame&#123;dO|YOU:kNOw!tHE*PRINcIplE*bEhInd%WInNEr#aTTacK&#125;</span><br></code></pre></td></tr></table></figure><h3 id="例题二-羊城杯-2020rrrrrrrsa">例题二 [羊城杯 2020]RRRRRRRSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&#x27;GWHT&#123;************&#125;&#x27;</span><br><br>flag1 = flag[:<span class="hljs-number">19</span>].encode()  <span class="hljs-comment">#两截flag</span><br>flag2 = flag[<span class="hljs-number">19</span>:].encode()<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">38</span>)<br><br>P1 = getPrime(<span class="hljs-number">1038</span>)<br>P2 = sympy.nextprime(P1)  <span class="hljs-comment">#p2&gt;p1</span><br><span class="hljs-keyword">assert</span>(P2 - P1 &lt; <span class="hljs-number">1000</span>)<br><br>Q1 = getPrime(<span class="hljs-number">512</span>)<br>Q2 = sympy.nextprime(Q1)  <span class="hljs-comment">#q2&gt;q1</span><br><br>N1 = P1 * P1 * Q1<br>N2 = P2 * P2 * Q2<br><br>E1 = getPrime(<span class="hljs-number">1024</span>)<br>E2 = sympy.nextprime(E1)<br><br>m1 = bytes_to_long(flag1)<br>m2 = bytes_to_long(flag2)<br><br>c1 = <span class="hljs-built_in">pow</span>(m1, E1, N1)<br>c2 = <span class="hljs-built_in">pow</span>(m2, E2, N2)<br><br>output = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;secret&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;N1=&#x27;</span> + <span class="hljs-built_in">str</span>(N1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;c1=&#x27;</span> + <span class="hljs-built_in">str</span>(c1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;E1=&#x27;</span> + <span class="hljs-built_in">str</span>(E1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;N2=&#x27;</span> + <span class="hljs-built_in">str</span>(N2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;c2=&#x27;</span> + <span class="hljs-built_in">str</span>(c2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;E2=&#x27;</span> + <span class="hljs-built_in">str</span>(E2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.close()<br><br>N1=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span><br>c1=<span class="hljs-number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span><br>E1=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span><br>N2=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span><br>c2=<span class="hljs-number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span><br>E2=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span><br></code></pre></td></tr></table></figure><p>首先 发现 e 的数值比较大，按照前一题的思路尝试分别对两段加密使用维纳攻击 发现报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)<br>ValueError: isqrt() of negative number<br></code></pre></td></tr></table></figure><p>产生的原因可能是 E/N 远小于 1，并不满足 E 和 N比较接近这一前提条件</p><p>但是我们发现 N1 和 N2 之间的数值比较接近，符合维纳攻击的前提条件</p><p>为什么使用 N1 和 N2 进行维纳攻击也可以实现解呢</p><p>我们可以通过下面的公式推导得出</p><figure><img src="https://pic.imgdb.cn/item/65eecd579f345e8d035b6589.png"alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>挖个坑：需要了解的内容有： 连分数、低解密指数攻击 等</p><p>有如下解码脚本 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>N1=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span><br>c1=<span class="hljs-number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span><br>E1=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span><br>N2=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span><br>c2=<span class="hljs-number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span><br>E2=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continuedFra</span>(<span class="hljs-params">x, y</span>):<br>    cF = []<br>    <span class="hljs-keyword">while</span> y:<br>        cF += [x // y]<br>        x, y = y, x % y<br>    <span class="hljs-keyword">return</span> cF<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Simplify</span>(<span class="hljs-params">ctnf</span>):<br>    numerator = <span class="hljs-number">0</span><br>    denominator = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ctnf[::-<span class="hljs-number">1</span>]:<br>        numerator, denominator = denominator, x * denominator + numerator<br>    <span class="hljs-keyword">return</span> (numerator, denominator)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getit</span>(<span class="hljs-params">c</span>):<br>    cf=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(c)):<br>        cf.append(Simplify(c[:i]))<br>    <span class="hljs-keyword">return</span> cf<br><span class="hljs-comment">#求渐进分数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e, n</span>):<br>    cf=continuedFra(e,n)<br>    <span class="hljs-keyword">for</span> (p2,p1) <span class="hljs-keyword">in</span> getit(cf):<br>        <span class="hljs-keyword">if</span> p1 == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> N1%p1==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> p1!=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> p1<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;not find!&#x27;</span>)<br>q1=wienerAttack(N1,N2)<br><span class="hljs-comment">#p1=11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644210947</span><br><span class="hljs-built_in">print</span>(q1)<br>p1=gmpy2.iroot(N1//q1,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>p2=gmpy2.next_prime(p1)<br>q2=gmpy2.next_prime(q1)<br>phi1=p1*(p1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)<br>phi2=p2*(p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)<br>d1=gmpy2.invert(E1,phi1)<br>d2=gmpy2.invert(E2,phi2)<br><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> number<br>m1=number.long_to_bytes(gmpy2.powmod(c1,d1,N1))<br>m2=number.long_to_bytes(gmpy2.powmod(c2,d2,N2))<br><span class="hljs-built_in">print</span>((m1+m2))<br><br><span class="hljs-comment">#GWHT&#123;3aadab41754799f978669d53e64a3aca&#125;</span><br></code></pre></td></tr></table></figure></p><p>【参考资料】</p><p>http://t.csdnimg.cn/HzyzT</p><p>http://t.csdnimg.cn/BRvWy</p><p>http://t.csdnimg.cn/m9L8j</p><p>后面还有羊城杯的22年、23年相关真题，有时间再分析</p><p>http://t.csdnimg.cn/OvTUm</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>维纳攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k-means聚类算法</title>
    <link href="/2023/08/24/k-jun-zhi-ju-lei-suan-fa/"/>
    <url>/2023/08/24/k-jun-zhi-ju-lei-suan-fa/</url>
    
    <content type="html"><![CDATA[<h2 id="一介绍">一、介绍</h2><p>K-means聚类算法是先随机选取K个对象作为初始的聚类中心。然后计算每个对象与各个种子聚类中心之间的距离，把每个对象分配给距离它最近的聚类中心。聚类中心以及分配给它们的对象就代表一个聚类。每分配一个样本，聚类的聚类中心会根据聚类中现有的对象被重新计算。这个过程将不断重复直到满足某个终止条件。终止条件可以是没有（或最小数目）对象被重新分配给不同的聚类，没有（或最小数目）聚类中心再发生变化，误差平方和局部最小。</p><h2 id="二简化实例">二、简化实例</h2><p>1.便于理解，首先创建一个明显分为2类20*2的例子（每一列为一个变量共2个变量，每一行为一个样本共20个样本）：<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby">import numpy as np<br>c1x=np.random.uniform(<span class="hljs-number">0.5</span>,<span class="hljs-number">1.5</span>,(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br>c1y=np.random.uniform(<span class="hljs-number">0.5</span>,<span class="hljs-number">1.5</span>,(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br>c2x=np.random.uniform(<span class="hljs-number">3.5</span>,<span class="hljs-number">4.5</span>,(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br>c2y=np.random.uniform(<span class="hljs-number">3.5</span>,<span class="hljs-number">4.5</span>,(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br>x=np.hstack((c1x,c2x))<br>y=np.hstack((c2y,c2y))<br>X=np.vstack((x,y)).T<br>print(X)<br><br></code></pre></td></tr></table></figure> 结果如下： <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[[<span class="hljs-number">1.4889993</span>  <span class="hljs-number">4.18741329</span>]<br> [<span class="hljs-number">0.73017615</span> <span class="hljs-number">4.07842216</span>]<br> [<span class="hljs-number">1.15522846</span> <span class="hljs-number">4.05744838</span>]<br> [<span class="hljs-number">1.40768457</span> <span class="hljs-number">3.76674812</span>]<br> [<span class="hljs-number">1.376212</span>   <span class="hljs-number">3.95063903</span>]<br> [<span class="hljs-number">1.20821055</span> <span class="hljs-number">4.34138767</span>]<br> [<span class="hljs-number">0.73898392</span> <span class="hljs-number">3.55026013</span>]<br> [<span class="hljs-number">0.97116627</span> <span class="hljs-number">3.65432314</span>]<br> [<span class="hljs-number">0.98267302</span> <span class="hljs-number">4.16731561</span>]<br> [<span class="hljs-number">1.06346541</span> <span class="hljs-number">4.44383585</span>]<br> [<span class="hljs-number">4.10945954</span> <span class="hljs-number">4.18741329</span>]<br> [<span class="hljs-number">3.75288064</span> <span class="hljs-number">4.07842216</span>]<br> [<span class="hljs-number">4.29638229</span> <span class="hljs-number">4.05744838</span>]<br> [<span class="hljs-number">3.95221785</span> <span class="hljs-number">3.76674812</span>]<br> [<span class="hljs-number">4.09826192</span> <span class="hljs-number">3.95063903</span>]<br> [<span class="hljs-number">4.04840874</span> <span class="hljs-number">4.34138767</span>]<br> [<span class="hljs-number">4.29594009</span> <span class="hljs-number">3.55026013</span>]<br> [<span class="hljs-number">3.56931245</span> <span class="hljs-number">3.65432314</span>]<br> [<span class="hljs-number">3.57962941</span> <span class="hljs-number">4.16731561</span>]<br> [<span class="hljs-number">3.65208848</span> <span class="hljs-number">4.44383585</span>]]<br></code></pre></td></tr></table></figure>2.引用Python库将样本分为两类（k=2），并绘制散点图： <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#只需将X修改即可进行其他聚类分析</span><br>import matplotlib.pyplot as plt<br>from sklearn.cluster import <span class="hljs-title class_">KMeans</span><br><br>kemans=<span class="hljs-title class_">KMeans</span>(n_clusters=<span class="hljs-number">2</span>)<br>result=kemans.fit_predict(X) <span class="hljs-comment">#训练及预测</span><br>print(result)   <span class="hljs-comment">#分类结果</span><br> <br>plt.rcParams[<span class="hljs-string">&#x27;font.family&#x27;</span>] = [<span class="hljs-string">&#x27;sans-serif&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>] <span class="hljs-comment">#散点图标签可以显示中文</span><br> <br>x=[i[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> X]<br>y=[i[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> X]<br>plt.scatter(x,y,c=result,marker=<span class="hljs-string">&#x27;o&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>结果如下： <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure>3.如果K值未知，可采用肘部法选择K值（假设最大分类数为9类，分别计算分类结果为1-9类的平均离差，离差的提升变化下降最抖时的值为最优聚类数K）：<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ruby">import matplotlib.pyplot as plt<br>from sklearn.cluster import <span class="hljs-title class_">KMeans</span><br>from scipy.spatial.distance import cdist<br> <br>K=range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br>meanDispersions=[]<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-symbol">K:</span><br>    kemans=<span class="hljs-title class_">KMeans</span>(n_clusters=k)<br>    kemans.fit(X)<br>    <span class="hljs-comment">#计算平均离差</span><br>    m_Disp=sum(np.min(cdist(X,kemans.cluster_centers_,<span class="hljs-string">&#x27;euclidean&#x27;</span>),axis=<span class="hljs-number">1</span>))/X.shape[<span class="hljs-number">0</span>]<br>    meanDispersions.append(m_Disp)<br> <br>plt.rcParams[<span class="hljs-string">&#x27;font.family&#x27;</span>] = [<span class="hljs-string">&#x27;sans-serif&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>] <span class="hljs-comment">#使折线图显示中文</span><br> <br>plt.plot(K,meanDispersions,<span class="hljs-string">&#x27;bx-&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;k&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;平均离差&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;用肘部方法选择K值&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure> ## 三、实例分析（对某网站500家饭店价格及评论进行聚类）<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ruby">import numpy as np<br>from sklearn.cluster import <span class="hljs-title class_">KMeans</span><br>from scipy.spatial.distance import cdist<br>import matplotlib.pyplot as plt<br>import pandas as pd<br> <br>data=pd.read_excel(<span class="hljs-string">&#x27;data.xlsx&#x27;</span>,header=<span class="hljs-number">0</span>).iloc[<span class="hljs-symbol">:</span><span class="hljs-number">501</span>,<span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">5</span>]<br>per_25=data.describe().iloc[<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]<br>per_75=data.describe().iloc[<span class="hljs-number">6</span>,<span class="hljs-number">1</span>]<br>data=data[(data.iloc[<span class="hljs-symbol">:</span>,<span class="hljs-number">1</span>]&gt;=per_25)&amp;(data.iloc[<span class="hljs-symbol">:</span>,<span class="hljs-number">1</span>]&lt;=per_75)] <span class="hljs-comment">#选择位于四分位数之内的数</span><br>X=np.array(data)<br> <br>K=range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br>meanDispersions=[]<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-symbol">K:</span><br>    kemans=<span class="hljs-title class_">KMeans</span>(n_clusters=k)<br>    kemans.fit(X)<br>    meanDispersions.append(sum(np.min(cdist(X,kemans.cluster_centers_,<span class="hljs-string">&#x27;euclidean&#x27;</span>),axis=<span class="hljs-number">1</span>))/X.shape[<span class="hljs-number">0</span>])<br> <br>plt.rcParams[<span class="hljs-string">&#x27;font.family&#x27;</span>] = [<span class="hljs-string">&#x27;sans-serif&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>plt.plot(K,meanDispersions,<span class="hljs-string">&#x27;bx-&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;k&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;平均离差&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;用肘部方法选择K值&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure> 具体聚类过程： <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from sklearn.cluster import <span class="hljs-title class_">KMeans</span><br>import matplotlib.pyplot as plt<br> <br>kemans=<span class="hljs-title class_">KMeans</span>(n_clusters=<span class="hljs-number">3</span>)<br>result=kemans.fit_predict(X)<br>print(result)<br>x=[i[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> X]<br>y=[i[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> X]<br>plt.scatter(x,y,c=result,marker=<span class="hljs-string">&#x27;o&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;avgPrice&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;llCommentNum&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;对500家饭店价格与评论数进行聚类&#x27;</span>)<br></code></pre></td></tr></table></figure> 聚类结果： <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[<span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>] <br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>数模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/30/hello-world/"/>
    <url>/2022/08/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
