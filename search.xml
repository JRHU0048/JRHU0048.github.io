<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>操作系统原理期末复习</title>
      <link href="/2024/06/22/cao-zuo-xi-tong-yuan-li-qi-mo-fu-xi/"/>
      <url>/2024/06/22/cao-zuo-xi-tong-yuan-li-qi-mo-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="第二章-进程与线程"><a href="#第二章-进程与线程" class="headerlink" title="第二章 进程与线程"></a>第二章 进程与线程</h2><p>进程之间的通信（进程之间的数据交互）：<br>1.共享存储（数据共享、存储区共享）,<br>2.消息传递（直接通信、间接通信）,<br>3.管道通信   </p><p>管道通信是单向进行的！！！管道文件pipe文件，本质是一个内存中的缓冲区（先进先出FIFO）<br>FIFO 是 管道通信 与 共享存储 不一样的地方！！！   </p><p>单向传播通信—-半双工通信<br>双向同时进行通信—–全双工通信<br>一个管道可以有多个写进程，一个读进程（有争议，但是还是以此为准）  </p><p>动态性是进程最重要的特性，以此来区分文件形式的静态程序<br>操作系统引入进程的概念，是为了从变化的角度动态分析和研究程序的执行   </p><p>系统总是通过PCB对进程进行控制，PCB是进程存在的唯一标志</p><p>各进程的存储地址空间相互独立，因此进程之间的信息传递无法直接进行</p><p>程序的封闭性是指程序的执行结果之取决于进程本身，不受外界影响，进程的执行速度不会改变其执行结果<br>失去封闭性，不同速度下的进程执行结果不同（并发进程存在共享变量！！！）   </p><p>线程的调度组织与控制、状态转化、创建、终止等等，与进程类似</p><p>引入线程后，进程仍然是资源分配的单位，内核级线程是处理机调度和分派的单位，线程本身不具有资源，但它可以共享所属进程的全部资源</p><p>一个内核程序，映射到用户级后有多个线程，这些线程之间的切换不需要内核级切换进程，不需要内核的支持   </p><p>多对一的线程模型中，由于只有一个内核，用户级的多线程对于操作系统来说是透明的，当改进程的一个线程被阻塞后，该进程就会被阻塞<br>作为对比，一对一的线程模型中，每个用户级的线程都会映射到一个内核级的线程，当某个线程被阻塞时，不会影响其他线程  </p><p>信箱实现进程之间的互相通信（消息传递中的间接通信），需要涉及两个原语：发送原语和接受原语  </p><h2 id="对进程的理解"><a href="#对进程的理解" class="headerlink" title="对进程的理解"></a>对进程的理解</h2><p>进程是一个独立的运行单位，也是操作系统进行资源分配和调度的基本单位，包括了pcb,程序和数据以及执行栈区<br>线程是一种特殊的进程  </p><p>一个进程是程序在一个数据集上的一次运行过程，运行于不同的数据集，将会形成不同的进程  </p><p>系统动态DLL库中的系统线程，被不同的进程调用，他们是（ 相同 ）的线程<br>这题理解不了，就这样记吧。。。</p><p>pcb所包含的数据结构的内容有：<br>进程标志信息、进程控制信息、进程资源信息、cpu现场信息<br>具体而言有：进程ID、cpu状态、堆栈指针  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理期末复习</title>
      <link href="/2024/06/20/ji-suan-ji-zu-cheng-yuan-li-qi-mo-fu-xi/"/>
      <url>/2024/06/20/ji-suan-ji-zu-cheng-yuan-li-qi-mo-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机组成原理十套练习-白中英（B1-B2-B3-B4-B5-B6-B7-B8-B9-B10）"><a href="#计算机组成原理十套练习-白中英（B1-B2-B3-B4-B5-B6-B7-B8-B9-B10）" class="headerlink" title="计算机组成原理十套练习-白中英（B1 B2 B3 B4 B5 B6 B7 B8 B9 B10）"></a>计算机组成原理十套练习-白中英（B1 B2 B3 B4 B5 B6 B7 B8 B9 B10）</h2><p><a href="http://t.csdnimg.cn/N4Jqs">http://t.csdnimg.cn/N4Jqs</a></p><p>这里的题目答案不全，而且有部分错误，下面的内容是<strong>逐题求证</strong>后的结果，方便期末复习使用~</p><p>鉴于多个版本的答案和题目，故选择<strong>求同存异</strong>，剔除了重复的题目，注明有争议的答案</p><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><p>1  字符信息是符号数据，属于处理（非数值 ）领域的问题，国际上采用的字符系统是七单位的（  ASCII ）码。</p><p>2  按IEEE754标准，一个32位浮点数由符号位S（1位）、阶码E（8位）、尾数M（23位）三个域组成。其中阶码E的值等于指数的真值（ e ）加上一个固定的偏移值（ 127 ）。</p><p>根据IEEE 754标准，一个32位浮点数由以下三个部分组成：</p><ol><li>**符号位 (S)**：1位</li><li>**阶码 (E)**：8位</li><li>**尾数 (M)**：23位</li></ol><p>阶码 ( E ) 的值等于指数的真值加上一个固定的偏移值。具体来说：</p><ul><li>**指数的真值 (Exponent)**：表示实际指数值，通常记作 ( e )。</li><li>**偏移值 (Bias)**：对于32位浮点数来说，偏移值是127。</li></ul><p>因此，阶码 ( E ) 的值计算公式为：<br>[ E &#x3D; e + 127 ]</p><p>其中，( e ) 是指数的真值。</p><p>3  双端口存储器和多模块交叉存储器属于并行存储器结构，其中前者采用（ 空间 ）并行技术，后者采用（  时间 ）并行技术。</p><blockquote><p>课本86页原话，之前的答案是错误的</p></blockquote><p>4  虚拟存储器分为页式、（ 段 ）式、（ 段页 ）式三种。</p><p>虚拟存储器是一种内存管理技术，它允许计算机使用比实际物理内存更多的内存空间。虚拟存储器主要分为三种类型：</p><ol><li><p><strong>页式</strong>（Paged）：在页式虚拟存储器中，虚拟地址空间被划分为固定大小的页，每个页映射到物理内存中的一个帧。操作系统负责跟踪哪些页当前在物理内存中，哪些不在，并在需要时进行页面置换。</p></li><li><p><strong>段式</strong>（Segmented）：段式虚拟存储器不使用固定大小的块，而是将程序的地址空间划分为逻辑段，每个段可以是不同的大小。段式管理提供了更大的灵活性，允许程序以逻辑上有意义的方式组织内存。</p></li><li><p><strong>段页式</strong>（Segmented Paging）：结合了页式和段式的特点，程序的地址空间首先被划分为段，然后每个段内部再使用页式管理。这种方式提供了灵活性和效率的平衡。</p></li></ol><p>所以，虚拟存储器分为页式、段式、段页式三种。</p><p>5  安腾指令格式采用5个字段：除了操作码（OP）字段和推断字段外，还有3个7位的（ 地址码 ）字段，它们用于指定（ 寄存器  ）2个源操作数和1个目标操作数的地址。</p><p>安腾（Itanium）指令格式是一种非常长的指令格式，它具有高度的并行性和灵活性。在安腾指令格式中，除了操作码（Opcode）字段和推断字段（Inference）外，还有3个7位的字段，它们是：</p><p><strong>寄存器地址字段</strong>（Register Address Fields）：这些字段用于指定操作数的地址。在安腾指令中，通常有3个这样的字段，它们分别用于指定：</p><ul><li>2个源操作数（Source Operands）的寄存器地址</li><li>1个目标操作数（Destination Operand）的寄存器地址</li></ul><p>这些字段允许指令直接引用寄存器，而不需要额外的地址计算或间接寻址。这种设计有助于提高指令的执行效率，因为它减少了指令执行过程中所需的地址解析步骤。</p><p>6  CPU从内存取出一条指令并执行该指令的时间称为（ 指令周期  ），它常用若干个（ CPU周期 ）来表示。</p><p>7  安腾CPU中的主要寄存器除了128个通用寄存器、128个浮点寄存器、128个应用寄存器、1个指令指针寄存器（即程序计数器）外，还有64个（1位推断寄存器  ）和8个（ 64位分支寄存器  ）。</p><p>安腾CPU是一种高性能的微处理器架构，它具有丰富的寄存器集合。除了128个通用寄存器、128个浮点寄存器、128个应用寄存器和1个指令指针寄存器（IP，Instruction Pointer）外，安腾CPU还包括以下寄存器：</p><ul><li><p>64个<strong>预测寄存器</strong>（Predicate Registers）：这些寄存器用于控制数据流和执行流，它们可以用于条件执行指令，从而实现复杂的控制流和数据流操作。</p></li><li><p>8个<strong>分支寄存器</strong>（Branch Registers）：这些寄存器用于保存分支目标地址，它们可以被用来实现间接跳转和循环控制。</p></li></ul><p>8  衡量总线性能的重要指标是（总线带宽  ），它定义为总线本身所能达到的最高传输速率，单位是（ MB&#x2F;s ）。</p><blockquote><p>课本190页</p></blockquote><p>衡量总线性能的重要指标是<strong>带宽</strong>（Bandwidth），它定义为总线本身所能达到的最高传输速率。带宽的单位通常是<strong>每秒传输的数据量</strong>，常见的单位有<strong>比特每秒</strong>（bits per second，bps）。</p><p>带宽可以进一步细分为：</p><ul><li><strong>数据传输速率</strong>：表示单位时间内传输的数据量。</li><li><strong>总线宽度</strong>：指的是总线上可以同时传输的位数，通常以位（bit）为单位。</li></ul><p>总线带宽的计算公式可以表示为：<br>[ \text{带宽} &#x3D; \text{总线宽度} \times \text{传输频率} ]</p><p>其中，总线宽度是总线上可以同时传输的位数，传输频率是单位时间内传输的周期数。两者的乘积即为总线的带宽，表示了总线的最大传输能力。</p><p>因此，衡量总线性能的重要指标是带宽，单位是比特每秒（bps）。</p><p>9  DMA控制器按其结构，分为（ 选择型 ）DMA控制器和（ 多路型 ）DMA控制器。前者适用于高速设备，后者适用于慢速设备。</p><p>10  64位处理机的两种典型体系结构是（Intel64体系结构  ）和（安腾体系结构  ）。前者保持了与IA-32的完全兼容，后者则是一种全新的体系结构。</p><p>11  在计算机术语中，将ALU控制器和（  内  ）存储器合在一起称为（ 主机 ）。</p><p>ALU(算数逻辑运算部件)   </p><p>CPU两大核心部件：<strong>运算器</strong>+<strong>控制器</strong></p><p>运算器的核心：ALU（算数逻辑单元），功能：对数据进行加工。基本结构：ALU、暂存寄存器、通用寄存器组、累加寄存器ACC、程序状态寄存器PSW、移位器、计数器。</p><p>控制器功能：取指令、分析指令、执行指令。基本结构：程序计数器PC、指令寄存器IR、指令译码器、时序系统、微操作信号发生器、MAR、MDR</p><p>12  数的真值变成机器码可采用原码表示法，反码表示法，（补码）表示法，（移码）表示法。</p><p>13  广泛使用的（ SRAM ）和（ DRAM ）都是半导体随机读写存储器。前者的速度比后者快，但集成度不如后者高。</p><p>SRAM静态随机存取存储器     DRAM动态随机存取存储器</p><p>14  反映<strong>主存速度</strong>指标的三个术语是<strong>存取时间</strong>、（ <strong>存储周期</strong>  ）和（ <strong>存储器带宽</strong> ）。</p><p>15  形成指令地址的方法称为<strong>指令寻址</strong>，通常是（ 顺序 ）寻址，遇到转移指令时（ 跳跃 ）寻址。</p><p>16  CPU从（ <strong>内存</strong> ）取出一条指令并执行这条指令的时间和称为（ 指令周期 ）。   指令周期由若干个CPU周期组成</p><p>17  RISC指令系统的最大特点是：只有（ 取数 ）指令和（ 存数 ）指令访问存储器，其余指令的操作均在（ 寄存器 ）之间进行。</p><p>补充：指令长度固定，指令格式和寻址方式种类少</p><p>18  微型机的标准总线，从带宽132MB&#x2F;S的32位（ 字长 ）总线发展到64位的（ 指令 ）总线。</p><p>19  IA-32表示（ Intel ）公司的（ 32 ）位处理机体系结构。</p><p>20  安腾体系机构采用<strong>显示并行指令计算技术</strong>，在指令中设计了（ 属性 ）字段，用以指明哪些指令可以（ 并行 ）执行。</p><p>21  定点32位字长的字，采用2的补码形式表示时，一个字所能表示的整数范围是（ -(2^31) 到 2^31-1 ）。   这题不确定~</p><blockquote><p>这里复习（预习）下原码表示、补码表示、移码表示法</p></blockquote><h3 id="定点表示法-所有数据的小数点位置固定不变"><a href="#定点表示法-所有数据的小数点位置固定不变" class="headerlink" title="定点表示法   所有数据的小数点位置固定不变"></a>定点表示法   所有数据的小数点位置固定不变</h3><p>理论上位置可以任意，但实际上将数据表示有两种方法（小数点位置固定-定点表示法&#x2F;定点格式）： </p><p>定点纯小数   (小数点固定于符号位之后，不需专门存放位置)</p><p><img src="https://pic.imgdb.cn/item/6673dd35d9c307b7e9983086.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6673ddb0d9c307b7e999148a.png" alt="alt text"></p><p>定点纯整数 </p><p>小数点固定于最后一位之后，不需专门存放位置</p><p><img src="https://pic.imgdb.cn/item/6673dde0d9c307b7e9996e17.png" alt="alt text"></p><h3 id="浮点表示：小数点位置随阶码不同而浮动"><a href="#浮点表示：小数点位置随阶码不同而浮动" class="headerlink" title="浮点表示：小数点位置随阶码不同而浮动"></a>浮点表示：小数点位置随阶码不同而浮动</h3><p><img src="https://pic.imgdb.cn/item/6673dfccd9c307b7e99d5026.png" alt="alt text"></p><p>浮点数的规格化表示：</p><p>(1.75)10 &#x3D; 1.11 × 2^0 (规格化表示) &#x3D; 0.111 × 2^1 &#x3D; 0.0111 × 2^2</p><p>3、IEEE754标准(规定了浮点数的表示格式,运算规则等)  </p><p>规则规定了单精度(32)和双精度(64)的基本格式.   </p><p>规则中,尾数(M)用原码,指数（E）用移码(便于对阶和比较)  </p><p><img src="https://pic.imgdb.cn/item/6673e107d9c307b7e99f9299.png" alt="alt text"></p><blockquote><p>IEEE754标准</p></blockquote><p>基数R&#x3D;2，基数固定，采用隐含方式来表示它。</p><p>32位的浮点数：</p><p>S数的符号位，1位，在最高位，“0”表示正数，“1”表示负数。</p><p>M是尾数， 23位，在低位部分，采用纯小数表示</p><p>E是阶码，8位，采用移码表示。移码比较大小方便。</p><p>尾数域最左位(最高有效位)总是1， 故这一位经常不予存储，而认为隐藏在小数点的左边。</p><p>采用这种方式时，将浮点数的指数真值e变成阶码E时，应将指数e加上一个固定的偏移值127(01111111)，即E&#x3D;e+127。</p><p>64位的浮点数:</p><p>符号位1位，阶码域11位，尾数域52位，指数偏移值是1023。因此</p><p>一个规格化的64位浮点数x的真值为：</p><pre><code> x=(-1)^S×(1.M)×2^(E-1023) e=E-1023</code></pre><p>一个规格化的32位浮点数x的真值表示为:</p><pre><code>x=(-1)^S×(1.M)×2^(E-127)e=E-127</code></pre><p>真值x为零表示：当阶码E为全0且尾数M也为全0时的值，结合符号位S为0或1，有正零和负零之分。  </p><p>真值x为无穷大表示：当阶码E为全1且尾数M为全0时，结合符号位S为0或1，也有+∞和-∞之分。</p><p>这样在32位浮点数表示中，要除去E用全0和全1（25510）表示零和无穷大的特殊情况，指数的偏移值不选128（10000000），而选127（01111111）。对于规格化浮点数，E的范围变为1到254，真正的指数值e则为-126到+127。因此32位浮点数表示的绝对值的范围是10^-38～10^38（以10的幂表示）。</p><h3 id="数的机器码表示"><a href="#数的机器码表示" class="headerlink" title="数的机器码表示"></a>数的机器码表示</h3><p>真值：一般书写的数</p><p>机器码：机器中表示的数, 要解决在计算机内部数的正、负符号和小数点运算问题。</p><p>原码<br>反码<br>补码<br>移码  </p><h4 id="原码表示法—定点小数x0-x1x2…xn"><a href="#原码表示法—定点小数x0-x1x2…xn" class="headerlink" title="原码表示法—定点小数x0.x1x2…xn"></a>原码表示法—定点小数x0.x1x2…xn</h4><p><img src="https://pic.imgdb.cn/item/6673e3e7d9c307b7e9a6047d.png" alt="alt text"></p><p>有正0和负0之分</p><p>范围-(1-2^(-n)) ～ +(1-2^(-n))</p><p>例：x&#x3D;+0.11001110 ， y&#x3D;-0.11001110   </p><p>[x]原&#x3D;0.11001110     [y]原&#x3D;1.11001110</p><h4 id="原码表示法—定点整数X0X1X2…Xn"><a href="#原码表示法—定点整数X0X1X2…Xn" class="headerlink" title="原码表示法—定点整数X0X1X2…Xn"></a>原码表示法—定点整数X0X1X2…Xn</h4><p><img src="https://pic.imgdb.cn/item/6673e55fd9c307b7e9a8cccd.png" alt="alt text"></p><p>有正0和负0之分</p><p>范围  -(2n-1) ～ +(2n-1)</p><p>例：x&#x3D;+11001110，y&#x3D;-11001110</p><p>[x]原&#x3D;011001110     [y]原&#x3D;111001110</p><p>正数前加0，负数前加1就好，这个比较简单</p><h4 id="补码表示法"><a href="#补码表示法" class="headerlink" title="补码表示法"></a>补码表示法</h4><p>定义：正数的补码就是正数的本身，负数的补码是原负数加上模。</p><blockquote><p>模</p></blockquote><p>定点小数x0.x1x2…xn，以2为模</p><p>定点整数x0.x1x2…xn，以2^(n+1)为模</p><p><img src="https://pic.imgdb.cn/item/6673e60ed9c307b7e9aa1ce4.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6673e7d4d9c307b7e9ad65da.png" alt="alt text"></p><p>补码最大的优点就是将减法运算转换成加法运算。通常不按表达式求补码，而通过反码来得到。</p><p>22  IEEE754标准规定的64位浮点数格式中，符号位为1位，阶码为11位，尾数为52位，则它能表示的最大规格化正数为（1+(1-2的-52次方）)*2的1023次方  ）。</p><p>22题也看不懂</p><p>另一个答案是：（（2—2的-52次方）*2的1023次方  ）</p><p>23  浮点加、减法运算的步骤是（ 0操作数处理 ）、（比较阶码大小并完成对阶  ）、（尾数求和运算  ）、（ 结果规格化 ）、（ 舍入处理 ）。</p><p>记住就行~</p><p>24  某计算机字长32位，其存储容量为64MB，若按字编址，它的存储系统的地址线至少需要（  24 ）条。</p><p><strong>64MB&#x3D;64×8Mb<br>64×8Mb&#x2F;32b&#x3D;16M<br>16M&#x3D;16×2^20&#x3D;2^24<br>所以需要24条地址线!</strong></p><p>这种计算题一定要会算！！！</p><p>25  一个组相联映射的Cache，有128块，每组4块，主存共有16384块，每块64个字，则主存地址共（ 20 ）位，其中主存字块标记应为（ 9 ）位，组地址应为（ 5 ）位，Cache地址共（ 13 ）位。</p><p>【解答】</p><p>先将Cache分组，组数&#x3D;128&#x2F;4&#x3D;32。故Cache组地址占5位，块内地址占6位，块地址占两位。故Cache地址共5+6+2&#x3D;13位。（这个应该是可以理解的了的）</p><p>组地址-块地址-块内地址   5-2-6    共13位</p><p>主存&#x3D;16384*64&#x3D;2^20字；故按字编制，主存地址为（20）位，  （这个也没问题，比较好理解~）</p><p>由于采用的是第一种组相连映射，即组相连映射关系为：i&#x3D;j mod Q（i为Cache组号，j为主存块号，Q为Cache组数）。故组地址为（5位）。（如果按字节编址，块内地址位数增1，Cache地址位数增1，主存位数也增1） </p><p>如果采用第二种全相连映射方法，则先将主存按照Cache大小分区，共128个区，故区号占7位，再将每个区分组，每个区内的组数和Cache的组数相等（32组）故组地址占5位，每组有4个块，故块地址为2位，块内地址同第一种全相连映射方法中块内地址长度相同，主存地址&#x3D;区号+组号+组内块号+块内地址。故按字编址，主存地址&#x3D;7+5+2+6&#x3D;20（位）（按字节编址时块内地址为6位，故主存地址为21位）。</p><p>Cache地址&#x3D;组号+组内块号+块内地址&#x3D;5+2+6&#x3D;13位（按字节编址时为14位）主存有16384*64&#x3D;2的20次方，20-6-5&#x3D;9（主存字块标记&#x3D;主存地址-块内地址-组地址）</p><p>到这就随缘吧看不懂了~~~</p><p>26  某中断系统中，每抽取一个输入数据就要中断CPU一次，中断处理程序接收取样的数据，并将其保存到主存缓冲区内。该中断处理需要X秒。另一方面，缓冲区内每存储N个数据，主程序就将其取出进行处理，这种处理需要Y秒，因此该系统可以跟踪到每秒（  N&#x2F;（NX+Y）  ）次中断请求。</p><p>中断次数 &#x2F; 处理该次数的中断所需的时间</p><p>依题意：中断N次，所需要的总处理时间&#x3D;N*X (中断处理时间) +Y（缓冲处理时间）</p><p>这里N个数据就会有N个中断</p><p>27  在计算机系统中，多个系统部件之间信息传送的公共通路称为（ 总线 ）。就其所传送信息的性质而言，在公共通路上传送的信息包括（ 数据信息 ）、（ 地址信息 ）、（ 控制信息 ）。</p><p>28  在虚存系统中，通常采用<strong>页表保护</strong>、<strong>段表保护</strong>和<strong>键保护</strong>方法实现（ <strong>存储区域</strong> ）保护。</p><p>29  安腾体系结构采用推测技术，利用（ 控制 ）推测方法和（ 数据 ）推测方法提高指令执行的并行度。</p><p>30  <strong>计算机系统的层次结构</strong>从下至上可分为五级，即微程序设计级（或逻辑电路级）、一般机器级、操作系统级、（ 汇编语言 ）级、（ 高级语言 ）级。</p><p>31  十进制数在计算机内有两种表示形式：（ 字符串形式 ）形式和（ 压缩的十进制数 ）形式。前者主要用在非数值计算的应用领域，后者用于直接完成十进制数的算术运算。</p><p>32  一个定点数由符号位和数值域两部分组成。按小数点位置不同，定点数有（ 纯小数 ）和（ 纯整数 ）两种表示方法。</p><p>33  对存储器的要求是容量大、速度快、成本低，为了解决这三方面的矛盾，计算机采用多级存储体系结构，即（ cache ）、（ 主存 ）、（ 外存 ）。</p><p>34  高级的DRAM芯片增强了基本DRAM的功能，存取周期缩短至20ns以下。举出三种高级DRAM芯片，它们是（ FPM-DRAM ）、（ CDRAM ）、（ SDRAM ）。</p><p>35  一个较完善的指令系统，应当有（ 数据处理 ）、（数据存储  ）、（ 数据传送 ）、（ 程序控制 ）四大类指令。</p><p>36  机器指令对四种类型的数据进行操作。这四种数据类型包括（ 地址 ）型数据、（ 数值 ）型数据、（ 字符 ）型数据、（ 逻辑 ）型数据。</p><p>37  CPU中保存当前正在执行的指令的寄存器是（ 指令寄存器 ），指示下一条指令地址的寄存器是（ 程序计数器 ），保存算术逻辑运算结果的寄存器是（ 数据寄存器 ）和（ 通用寄存器 ）。</p><p>数据寄存器（DR）：这些寄存器是存放操作数、运算结果和运算的中间结果的，以减少访问存储器的次数。它们既可以作为4个16位数据寄存器使用，也可以作为8个8位数据寄存器使用，在编程时可存放源操作数、目的操作数或运算结果。</p><p>通用寄存器：这些寄存器用途广泛，并可由程序员规定其用途。通用寄存器除了各自规定的专门用途之外，还可以用于传送和暂存数据，可以保存算术逻辑运算中的操作数和运算结果。</p><p>38  安腾体系结构采用分支推断技术，将传统的（ if then else ）分支结构转变为无分支的（  顺序&#x2F;并行）代码，避免了错误预测分支而付出的代价。</p><p>39  IEEE6754标准规定的64位浮点数格式中，符号位为1位，阶码为11位，尾数为52位。则它所能表示的最大规格化正数为（ （1+（1-2的-52次方））*2的1023次方 ）。</p><p>看不懂~</p><p>40  直接使用西文键盘输入汉字，进行处理，并显示打印汉字，要解决汉字的（ 输入编码 ）、（汉字内码  ）和（ 字模码 ）三种不同用途的编码。</p><p>41  数的真值变成机器码时有四种表示方法，即（ 原码 ）表示法，（反码  ）表示法，（  补码）表示法，（移码  ）表示法。</p><p>42  主存储器的技术指标有（ 存取时间 ），（ 存储周期  ），（ 存储器带宽 ），（ 存储容量  ）。</p><blockquote><p>存储容量、存取时间、存储周期、存储器带宽</p></blockquote><p>43  cache和主存构成了（ 内存储器 ），全由（ 硬件 ）来实现。</p><p>书上63页说内存储器由半导体器件构成，所以这里说<strong>硬件</strong>应该没问题吧，我看网上也有填<strong>半导体</strong>的</p><p>44  根据通道的工作方式，通道分为（ 选择 ）通道和（ 多路 ）通道两种类型。</p><p>课本269页</p><p>45  SCSI是（并行  ）I&#x2F;O标准接口，IEEE1394是（  串行 ）I&#x2F;O标准接口。</p><p>课本271-272</p><p>46  某系统总线的一个存取周期最快为3个总线时钟周期，总线在一个总线周期中可以存取32位数据。如总线的时钟频率为8.33MHz，则总线的带宽是（ 11.1MB&#x2F;s）。</p><p>时钟频率: f&#x3D;8.33MHz</p><p>时钟周期: T &#x3D;1&#x2F;f</p><p>存取周期（三个时钟周期）:  3T&#x3D;3*1&#x2F;f</p><p>存取频率(总线周期的最高频率)  &#x3D;  1&#x2F;3T  &#x3D; f&#x2F;3 </p><p>总线的带宽＝数据宽度×总线周期的最高频率</p><p>＝ （32&#x2F;8）Byte×（8.33&#x2F;3）M&#x2F;s</p><p>＝ 11.1 MB&#x2F;s</p><p>47  操作系统是计算机硬件资源管理器，其主要管理功能有（ 处理机 ）管理、（ 存储 ）管理和（ 设备 ）管理。</p><p>48  安腾处理机采用VLIW技术，编译器经过优化，将多条能并行执行的指令合并成一个具有（ 多个操作码 ）的超长指令字，控制多个独立的（ 功能部件 ）同时工作。</p><p>这题没找到支撑，就当是对的吧…</p><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><h3 id="试卷一"><a href="#试卷一" class="headerlink" title="试卷一"></a>试卷一</h3><p>1从器件角度看，计算机经历了五代变化。但从系统结构看，至今绝大多数计算机仍属于（ B ）计算机。</p><p>A  并行    B  冯·诺依曼    C  智能    D  串行</p><p>【考查】</p><p>冯·诺依曼计算机有什么特点呢？</p><p>最重要的特点是存储程序，也就是说<strong>指令和数据</strong>都存储在存储器中，CPU运行程序时从存储器中读到每一条指令 然后运行它，这就是存储程序的基本原理(定义)。</p><p>指令与数据分开存储的是哈佛结构！</p><p>2某机字长32位，其中1位表示符号位。若用定点整数表示，则最小负整数为（ A  ）。</p><p>A  -(2^31-1)    B  -(2^30-1)    C  -(^231+1)    D  -(2^30+1)</p><p>【考查】<br>32位定点整数表示范围</p><p>最小负整数：32位全是1时，第一位的1表示负数，后面31个1表示 2^31-1 (真值)</p><p>3  以下有关运算器的描述，（  C  ）是正确的。</p><p>A  只做加法运算<br>B  只做算术运算<br>C  算术运算与逻辑运算<br>D  只做逻辑运算  </p><p>考查：运算器的功能  </p><p>运算器是计算机硬件的核心部分之一，主要负责执行各种<strong>算术运算</strong>和<strong>逻辑运算</strong></p><p>算术运算：执行基本的数学运算，如加法、减法、乘法和除法。</p><p>逻辑运算：执行逻辑运算，如AND、OR、NOT和XOR。</p><p>运算器的设计和实现是计算机体系结构中的一个重要方面，它直接影响到计算机的性能和效率。在现代计算机中，运算器通常与控制单元紧密结合，以实现复杂的指令集和高效的数据处理。</p><p>4  EEPROM是指（ D  ）。</p><p>A  读写存储器    B  只读存储器</p><p>C  闪速存储器    D  电擦除可编程只读存储器</p><p>考查：EEPROM</p><p>EEPROM（Electrically Erasable Programmable Read-Only Memory），<strong>电可擦写只读存储器</strong>，是一种非易失性存储技术，允许用户在没有外部电源的情况下，通过电信号擦除和重新编程存储器内容。</p><p>EEPROM具有以下特点：（可以不用看，太浪费时间了）</p><p>非易失性：即使断电，EEPROM也能保持其存储的数据。<br>电擦写：用户可以通过电子方式擦除和编程EEPROM，而不需要移除或更换芯片。<br>随机访问：EEPROM允许用户随机访问存储器中的任何位置，这与硬盘等顺序访问存储设备不同。<br>低功耗：EEPROM的功耗相对较低，适合电池供电的设备。<br>耐用性：EEPROM可以承受数十万次的擦写周期，这使得它非常适合需要频繁更新数据的应用。<br>小容量：与闪存相比，EEPROM的存储容量通常较小，适合存储少量关键数据。<br>高成本：由于其耐用性和灵活性，EEPROM的成本通常高于其他类型的存储器。<br>串行接口：EEPROM通常使用串行接口进行通信，如I2C或SPI。<br>应用广泛：EEPROM广泛应用于需要存储小量非易失性数据的场合，如BIOS、微控制器、传感器和智能卡等。<br>易于使用：由于其串行接口和简单的编程接口，EEPROM很容易集成到各种电子系统中。<br>EEPROM的这些特性使其成为一种非常有用的存储技术，尤其是在需要频繁更新数据而不需要大量存储空间的应用中。然而，随着闪存技术的发展，一些新型的闪存（如NOR Flash）已经能够提供与EEPROM相似的功能，并且具有更高的存储密度和更低的成本，这使得EEPROM在某些应用中逐渐被新型闪存所取代。  </p><p>5  常用的虚拟存储系统由（ B ）两级存储器组成，其中辅存是大容量的<strong>磁表面存储器</strong>。</p><p>A  cache-主存 B 主存-辅存  C cache-辅存  D  通用寄存器-cache</p><p>考查：<strong>虚拟存储系统两级结构</strong></p><p>虚拟存储系统通常由两级存储器组成，分别是：</p><p><strong>主存储器（主存）</strong>：主存储器是计算机中直接与中央处理器（CPU）交互的存储器，它通常由<strong>动态随机存取存储器（DRAM）</strong>组成，具有<strong>较高的速度</strong>，但<strong>容量相对较小</strong>。</p><p><strong>辅助存储器（辅存）</strong>：辅助存储器通常是指硬盘驱动器、固态硬盘（SSD）或网络存储等，它们提供<strong>更大的存储容量</strong>，但访问速度相对较慢。在虚拟存储系统中，辅助存储器通常是指<strong>大容量</strong>的磁表面存储器，即硬盘驱动器。</p><p>虚拟存储系统通过将主存中不常用的数据暂时转移到辅助存储器中，从而为当前活跃的程序提供更多的空间，使得计算机能够处理超出物理内存容量的数据和程序。这种机制允许计算机同时运行多个程序，并且可以加载比物理内存更大的程序或数据集。</p><p>在虚拟存储系统中，操作系统负责管理内存的分配和调度，确保CPU能够高效地访问数据。当需要访问在辅助存储器中的数据时，操作系统会将这些数据加载到主存中，以便CPU可以快速地进行处理。这个过程对用户和应用程序是透明的，因此被称为“虚拟”存储。</p><p>6  RISC访内指令中，操作数的物理位置一般安排在（ D  ）。</p><p>A  栈顶和次栈顶<br>B  两个主存单元<br>C  一个主存单元和一个通用寄存器<br>D  <strong>两个通用寄存器</strong><br>考查：RISC指令和CISC指令</p><p>在RISC（Reduced Instruction Set Computing，精简指令集计算）架构中，为了提高指令执行的效率，通常会将操作数的物理位置安排在通用寄存器中。这是因为<strong>访问寄存器的速度远远快于访问主存储器</strong>，这样可以减少CPU执行指令时的等待时间，提高整体的计算速度。</p><p>两个通用寄存器 - 这是RISC架构中常见的操作数安排方式，因为它允许快速的执行和简化的指令集设计。</p><p>7  当前的CPU由（ B  ）组成。<br>A  控制器<br>B  控制器、运算器、cache<br>C  运算器、主存<br>D  控制器、ALU、主存  </p><p>考查：CPU组成</p><p>高速缓存（Cache）：一种小容量、高速度的存储器，用于存储CPU频繁访问的数据和指令，以减少对主内存的访问次数。</p><p>ALU是运算器概念的一个子集，特指CPU内部用于执行基本算术和逻辑运算的硬件单元。而运算器则是一个更通用的术语，它可以包括ALU以及其他相关的硬件或软件组件。在现代计算机体系结构中，ALU是运算器的核心部分，但运算器的概念可能更加广泛。</p><p>8  流水CPU是由一系列叫做“段”的处理部件组成。和具备m个并行部件的CPU相比，一个m段流水CPU的吞吐能力是（ A ）。<br>A  具备同等水平<br>B  不具备同等水平<br>C  小于前者<br>D  大于前者<br>考查：流水CPU  </p><p>当m段流水稳定后,每个时钟周期流出一条指令,平均每个指令周期流出m条指令,与具备m个<strong>并行</strong>部件的CPIJ的吞吐能力相等。</p><p>9  在集中式总线仲裁中，（ A  ）方式响应时间最快。</p><p>A  <strong>独立请求</strong>    B  计数器定时查询    C  菊花链</p><p>考查：集中式总线仲裁</p><p>集中式总线仲裁是一种总线控制策略，用于在多个请求者（如CPU、内存、I&#x2F;O设备等）请求访问共享总线时，决定哪个请求者可以获得总线访问权的方法。在集中式总线仲裁中，有一个中心仲裁器（或称为总线仲裁器）负责接收所有请求者的请求信号，并根据<strong>预定的优先级或算法</strong>来决定哪个请求者可以控制总线。</p><p>10  CPU中跟踪指令后继地址的寄存器是（ C  ）。</p><p>A  地址寄存器    B  指令计数器</p><p>C  程序计数器    D  指令寄存器</p><p>考查：程序计数器</p><p>在CPU中，跟踪指令后继地址的寄存器通常是程序计数器（Program Counter，PC）。程序计数器是一个特殊的寄存器，用于存储下一条要执行的指令的地址。每当CPU执行完一条指令后，程序计数器就会更新为下一条指令的地址，这样CPU就可以顺序地执行程序中的指令。</p><p>11  从信息流的传输速度来看，（ A  ）系统工作效率最低。</p><p>A  单总线    B  双总线</p><p>C  三总线    D  多总线</p><p>考查：总线结构</p><p>单总线结构：<br>在这种结构中，所有的组件都连接到同一条总线上，任何两个组件之间的数据传输都需要经过这条总线。</p><p>双总线结构：<br>双总线结构通常包括一条内存总线和一条I&#x2F;O总线。内存总线连接CPU和内存，而I&#x2F;O总线连接CPU和输入&#x2F;输出设备。</p><p>三总线结构：<br>三总线结构在双总线的基础上增加了一条控制总线，用于传输控制信号。</p><p>多总线结构：<br>在多总线结构中，系统可能包含多条不同类型的总线，每条总线负责特定的通信任务，如数据传输、控制信号传输、地址传输等。</p><p>12  单级中断系统中，CPU一旦响应中断，立即关闭（ C ）标志，以防止本次中断服务结束前同级的其他中断源产生另一次中断进行干扰。</p><p>A  中断允许    B  中断请求</p><p>C  中断屏蔽    D  DMA请求</p><p>考查:中断过程</p><p>中断屏蔽，也称为中断禁用或中断封锁，是一种在计算机系统中用于控制中断请求（IRQ）响应的机制。操作系统或程序可以通过设置特定的标志或寄存器来屏蔽中断，从而暂时禁止CPU响应外部或内部的中断请求。</p><p>【解析】</p><p>CPU接收并响应一个中断后便自动关闭中断屏蔽，其目的是在中断响应周期<strong>不允许其他同级的中断来打扰</strong>，以便能正确地转入相应的服务程序。</p><p>13  安腾处理机的典型指令格式为（ C  ）位。</p><p>A  32位    B  64位    C  41位    D  48位</p><p>考查：<strong>安腾处理机</strong></p><p>安腾（Itanium）处理机是英特尔（Intel）与惠普（HP）合作开发的一系列64位处理器。安腾架构以其EPIC（Explicitly Parallel Instruction Computing，明确并行指令计算）设计而闻名，旨在实现高度的并行性和优化编译器的性能。</p><p>安腾处理机的典型指令格式为：41位：安腾指令的基本格式是41位宽，这包括了操作码、寄存器地址和其他指令字段。</p><p>这题记住就行！！！</p><p>14  下面操作中应该由<strong>特权指令</strong>完成的是（ B  ）。</p><p>A  设置定时器的初值<br>B  从用户模式切换到管理员模式<br>C  开定时器中断<br>D  关中断  </p><p>考查：特权指令</p><p>15  下列各项中，不属于安腾体系结构基本特征的是（ D  ）。<br>A  超长指令字<br>B  显式并行指令计算<br>C  推断执行<br>D  超线程  </p><p>考查：安腾体系结构  （这玩意真就硬记呗）</p><p>欸……记不住啊……</p><h3 id="试卷二"><a href="#试卷二" class="headerlink" title="试卷二"></a>试卷二</h3><p>1  冯·诺依曼机工作的基本方式的特点是（  B  ）<br>A  多指令流单数据流<br>B  <strong>按地址访问并顺序执行指令</strong><br>C  堆栈操作<br>D  存贮器按内容选择地址 </p><p>2  在机器数（ BC ）中，零的表示形式是唯一的。<br>A  原码    B  补码    C  移码    D  反码  </p><blockquote><p>【注意】 补码和移码的0是唯一的！</p></blockquote><p>3  在定点二进制运算器中，减法运算一般通过（ D  ）来实现。<br>A  原码运算的二进制减法器<br>B  补码运算的二进制减法器<br>C  原码运算的十进制加法器<br>D  补码运算的二进制加法器  </p><p>减法通过补码形式来表示</p><blockquote><p>下面这题一定要会做啊啊啊啊啊啊啊！！！！！</p></blockquote><p>4  某计算机字长32位，其存储容量为256MB，若按<strong>单字编址</strong>，它的寻址范围是（ D  ）。<br>A  0—64MB    B  0—32MB   C  0—32M    D  0—64M</p><p>256MB  &#x3D;  2^8MB</p><p>32b&#x2F;8&#x3D;4B</p><p>2^8 MB &#x2F; 2^2 B &#x3D; 2^6M &#x3D; 64M</p><p>5  主存贮器和CPU之间增加cache的目的是（ A  ）。<br>A  解决CPU和主存之间的速度匹配问题<br>B  扩大主存贮器容量<br>C  扩大CPU中通用寄存器的数量<br>D  既扩大主存贮器容量，又扩大CPU中通用寄存器的数量  </p><p>6  单地址指令中为了完成两个数的算术运算，除地址码指明的一个操作数外，另一个常需采用（ C ）。<br>A  堆栈寻址方式    B  立即寻址方式<br>C  <strong>隐含寻址方式</strong>    D  间接寻址方式  </p><p>[解析]单地址指令固定使用某个寄存器存放第二操作数和操作结果,在指令中隐含其地址,需要用隐含寻址方式</p><p>7  同步控制是（  C ）。<br>A  只适用于CPU控制的方式<br>B  只适用于外围设备控制的方式<br>C  由统一时序信号控制的方式<br>D  所有指令执行时间都相同的方式  </p><p>同步控制是指任何一条指令或指令中任何一个微操作的执行都是<strong>事先确定</strong>的,并且都受统一基准时标的时序信号控制的方式。 </p><p>8  描述PCI总线中基本概念不正确的句子是（ CD  ）。<br>A  PCI总线是一个与处理器无关的高速外围设备<br>B  PCI总线的基本传输机制是猝发式传送<br>C  PCI设备一定是主设备<br>D  系统中只允许有一条PCI总线  </p><p>PCI的概念需要了解</p><p>9  CRT的分辨率为1024×1024像素，像素的颜色数为256，则刷新存储器的容量为（ B  ）。<br>A  512KB    B  1MB    C  256KB    D  2MB<br>256&#x3D;2的8次方，8位&#x3D;1B，1024<em>1024</em>1B&#x3D;1MB  </p><p>10  为了便于实现多级中断，保存现场信息最有效的办法是采用（   B   ）。<br>A  通用寄存器    B  堆栈    C  存储器    D  外存  </p><p><strong>堆栈的特性：后进先出</strong></p><p>解析:CPU响应中断时,需要保存当前的一些寄存器中的现场信息,以便在中断结束后进行恢复从而继续执行完毕。在多级中断时,每一层的中断都需要保护中断时的现场信息,例如一个三级中断,依次需要保护第一、第二、第三级的现场信息,当产生第三级的中断处理程序结束后,首先恢复第三级的现场进行处理,结束后返回第二级……以此类推,这样正好<strong>符合堆栈的特性</strong>,即后进入堆栈的先出来。因此,采用堆栈存储较为有效。补充:子程序调用指令执行时,也是要把当前程序计数器(PC)的内容送到堆栈保存。</p><p>11  特权指令是由（  C ）执行的机器指令。<br>A 中断程序 B 用户程序 C 操作系统核心序  D  I&#x2F;O程序  </p><p>12  虚拟存储技术主要解决存储器的（ B  ）问题。<br>A  速度    B  扩大存储容量   C  成本 D  前三者兼顾   </p><p>13  引入多道程序的目的在于（ A  ）。<br>A  充分利用CPU，减少等待CPU时间<br>B  提高实时响应速度<br>C  有利于代码共享，减少主辅存信息交换量<br>D  充分利用存储器  </p><p>14  64位双核安腾处理机采用了（ A  ）技术。<br>A  流水  B  时间并行  C  资源重复  D  流水+资源重复  </p><p>15  在安腾处理机中，<strong>控制推测技术</strong>主要用于解决（ B  ）问题。<br>A  中断服务<br>B  与<strong>取数</strong>指令有关的控制相关<br>C  与转移指令有关的控制相关<br>D  与存数指令有关的控制相关  </p><h3 id="试卷三"><a href="#试卷三" class="headerlink" title="试卷三"></a>试卷三</h3><p>1  下列数中最小的数是（  C ）。</p><p>A  （101001）2  B  （52）8  C （101001）BCD D  （233）16</p><p>A选项换成10进制数为：1+8+32&#x3D;41<br>B选项换成10进制数为：2+5*8&#x3D;42<br>C选项换成10进制数为：  </p><p>二进制编码的十进制（Binary-Coded Decimal，BCD）是一种用四位二进制数表示一个十进制数字的编码方式。每个十进制数字（0-9）都对应一个四位的二进制数。例如，十进制数字“5”在BCD编码中表示为“0101”。</p><p>给定的二进制数“101001”BCD，我们可以将其分为两个部分，每部分四位：<br>第一部分：1010（BCD表示的十进制数字是10）<br>第二部分：01（BCD表示的十进制数字是1）<br>因此，二进制数“101001”BCD表示的十进制数是10 + 1 &#x3D; 11。</p><p>D选项换成10进制数为：3<em>16^0+3</em>16^1+2*16^2&#x3D;563</p><p>A.（101001）2&#x3D;(41)十进制<br>B.（52）8&#x3D;(42) 十进制<br>C.（101001）bcd &#x3D;(29)十进制    不够前面补0: 0010 1001  &#x3D; 29<br>D.（233）16&#x3D;563（十进制）  </p><p>2  某DRAM芯片，其存储容量为512k×8位，该芯片的地址线和数据线的数目是（ D  ）。</p><p>A  8，512    B  512，8    C  18，8     D  19，8</p><p>512&#x3D;2的9次方，K&#x3D;2的10次方，题目中有错误，应该是512K*8位</p><p>3  在下面描述的汇编语言基本概念中，不正确的表述是（  CD  ）。</p><p>A  对程序员的训练要求来说，需要硬件知识<br>B  汇编语言对机器的依赖性高<br>C  用汇编语言编写程序的难度比高级语言小<br>D  汇编语言编写的程序执行速度比高级语言慢  </p><p>汇编语言是一种面向实际机器的低级语言,是机器语言的符号表示,与机器语言一一对应。所以,汇编语言程序员必须对机器的结构和指令系统等细节非常清楚。由于汇编语言的特点,通常用汇编语言编写程序的难度比高级语言大,但执行速度快。</p><p>4  交叉存储器实质上是一种多模块存储器，它用（ A ）方式执行多个独立的读写操作。<br>A  流水    B  资源重复    C  顺序    D  资源共享</p><p>5  寄存器间接寻址方式中，操作数在（ B  ）。<br>A  通用寄存器 B  主存单元 C  程序计数器  D  堆栈 </p><p>间接寻址是相对于直接寻址而言的,指令地址字段的形式地址不是操作数的真正地址,而是操作数有效地址所在存储单元的地址。对于寄存器间接寻址来说,放在寄存器中的不是操作数,而是操作数的地址,操作数放在主存里面。</p><p>6  机器指令与微指令之间的关系是（ A  ）。<br>A  用若干条微指令实现一条机器指令<br>B  用若干条机器指令实现一条微指令<br>C  用一条微指令实现一条机器指令<br>D  用一条机器指令实现一条微指令  </p><p>7  描述多媒体CPU基本概念中，不正确的是（  CD  ）。<br>A  多媒体CPU是带有MMX技术的处理器<br>B  MMX是一种多媒体扩展结构<br>C  MMX指令集是一种多指令流多数据流的并行处理指令<br>D  多媒体CPU是以超标量结构为基础的CISC机器   </p><p>8  在集中式总线仲裁中，（ A ）方式对电路故障最敏感。<br> A  <strong>菊花链</strong>    B  独立请求    C  计数器定时查询</p><p>9  流水线中造成控制相关的原因是执行（  A  ）指令而引起。<br>A  条件转移   B  访内   C  算逻    D  无条件转移  </p><p>这题原答案应该是给错了，这里应该选择：A 条件转移</p><p>10  PCI总线是一个高带宽且与处理器无关的标准总线。下面描述中不正确的是（  B  ）。<br>A  采用同步定时协议    B  采用分布式仲裁策略<br>C  具有自动配置能力    D  适合于低成本的小系统  </p><p>PCI采用同步时序协议、<strong>集中式仲裁策略</strong>、具有自动配置能力、适合于低成本的小系统</p><p>PCI总线的升级版PCIe总线在许多方面进行了改进，性能得到了大幅提升</p><p>课本P213</p><p>11  下面陈述中，不属于外围设备三个基本组成部分的是（  D  ）。<br>A  存储介质  B  驱动装置  C  控制电路    D  计数器  </p><p>计数器很显然不是外围设备好吧…</p><p>12  中断处理过程中，（  A  ）项是由硬件完成。<br>A  关中断 B  开中断  C  保存CPU现场  D  恢复CPU现场  </p><p>这题给的答案是错误的，应该是 A 关中断</p><blockquote><p>关中断：进入不可响应中断请求的中断，由<strong>硬件</strong>自动完成</p></blockquote><p>中断处理过程</p><p><img src="https://pic.imgdb.cn/item/6676186cd9c307b7e99370e2.png" alt="alt text"></p><p>中断请求-&gt;中断响应-&gt;执行中断服务函数-&gt;中断返回</p><p>中断的整个处理过程，由硬件和软件共同完成</p><p><img src="https://pic.imgdb.cn/item/6676197bd9c307b7e99510e7.png" alt="alt text"></p><p>根据此图，再来分析下各个过程： </p><p>关中断：进入不可响应中断请求的中断，由硬件自动完成<br>保存断点：把当前的程序计数器PC中的内容保存起来，用于中断处理结束后能继续执行主程序<br>识别中断源：有多个中断源同时请求时，只能响应最高优先级的，因此需进一步判断中断源<br>保存现场和屏蔽字：进入中断服务程序后，要先保存现场<br>设置新的屏蔽字：用于改变中断优先级和控制中断的产生<br>开中断：执行中断程序时，打开中断可实现更高优先级的中断响应，实现中断嵌套<br>执行中断服务程序：执行中断服务程序中的内容<br>再次关中断：使得恢复现场和屏蔽字时不会被中断打断<br>恢复现场和屏蔽字：使现场和屏蔽字恢复到中断之前的状态<br>再次开中断：中断执行完，现场恢复完后，可以打开中断<br>中断返回：返回原程序继续执行  </p><p>【参考链接】</p><p><a href="http://t.csdnimg.cn/xQUYE">http://t.csdnimg.cn/xQUYE</a></p><p>13  IEEE1394是一种高速串行I&#x2F;O标准接口。以下选项中，（ D  ）项不属于IEEE1394的协议集。<br>A  业务层  B  链路层  C  物理层  D  串行总线管理  </p><p>这题记忆吧，没找到资料</p><p>14  下面陈述中，（ C ）项属于存储管理部件MMU的职能。<br>A  分区式存储管理   B  交换技术   C  分页技术</p><p>给的答案是A</p><blockquote><p>这题说是C选项分页技术，待考证…</p></blockquote><p><a href="https://blog.csdn.net/ao_mike/article/details/103448433">https://blog.csdn.net/ao_mike/article/details/103448433</a></p><p>选项C“分页技术”直接属于存储管理部件MMU的职能。MMU负责将程序的虚拟地址转换为物理地址，这一过程通常涉及到分页技术，即将内存分割成固定大小的页面，从而实现虚拟内存管理和地址转换。</p><p>15  64位的安腾处理机设置了四类执行单元。下面陈述中，（  D  ）项不属于安腾的执行单元。<br>A  浮点执行单元    B  存储器执行单元<br>C  转移执行单元    D  定点执行单元  </p><p>这题没找到资料求证，就背书吧欸…</p><h2 id="课本面的本章小结"><a href="#课本面的本章小结" class="headerlink" title="课本面的本章小结"></a>课本面的本章小结</h2><p>考虑到本章小结的内容比较重要，很精简，故建议全文背诵~</p><h3 id="第6章"><a href="#第6章" class="headerlink" title="第6章"></a>第6章</h3><p>总线是构成计算机系统的互联机构，是多个系统功能部件之间进行数据传送的公共通<br>道，并在争用资源的基础上进行工作。</p><p>总线有物理特性、功能特性、电气特性、机械特性，因此必须标准化。</p><p>微型计算机系统的标准总线从ISA总线（16位，带宽8MB&#x2F;s）发展到EISA总线（32位，带宽33.3MB&#x2F;s）和VESA总线（32位，带宽132MB&#x2F;s），又进一步发展到PCI总线（64位，带宽264MB&#x2F;s）。</p><p>衡量总线性能的重要指标是<strong>总线带宽</strong>，它定义为总线本身所能达到的最高传输速率。</p><p>当代流行的标准总线追求与结构、CPU、技术无关的开发标准。其总线内部结构包含<br>①数据传送总线（由地址线、数据线、控制线组成）；②仲裁总线；③中断和同步总线；<br>④公用线（电源、地线、时钟、复位等信号线）。</p><p>计算机系统中，根据应用条件和硬件资源不同，信息的传输方式可采用：<br>①并行传送<br>②串行传送；③复用传送。</p><p>各种外围设备必须通过I&#x2F;O接口与总线相连，I&#x2F;O接口是指CPU、主存、外围设备之间通过总线进行连接的逻辑部件。接口部件在它动态联结的两个功能部件间起着缓冲器和转换器的作用，以便实现彼此之间的信息传送。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络期末复习</title>
      <link href="/2024/06/19/ji-suan-ji-wang-luo-qi-mo-fu-xi/"/>
      <url>/2024/06/19/ji-suan-ji-wang-luo-qi-mo-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="复习时可以针对相关知识点做一做如下题目。"><a href="#复习时可以针对相关知识点做一做如下题目。" class="headerlink" title="复习时可以针对相关知识点做一做如下题目。"></a>复习时可以针对相关知识点做一做如下题目。</h2><p>1-02、1-14、1-17、1-21、1-22、1-24、1-29、1-30</p><p>2-01、2-10、2-13</p><p>3-01、3-03、3-04、3-06、3-07、3-10、3-20、3-29</p><p>4-04、4-05、-06、-07 ， 4-15、-20，4-17、4-19、-25、-26、-31、-33、-47，4-24、-48</p><p>5-23、传输层PPT最后一页的思考题</p><p>6-02、6-03、6-14、6-20、6-22、6-24、6-25</p><h2 id="第三章课后习题"><a href="#第三章课后习题" class="headerlink" title="第三章课后习题"></a><strong>第三章课后习题</strong></h2><h3 id="3-01"><a href="#3-01" class="headerlink" title="3-01"></a>3-01</h3><p>数据链路（即逻辑链路）与链路（即物理链路）有何区别？“链路接通了”与“数<br>据链路接通了＂的区别何在？</p><p>数据链路则是另一个概念。这是因为当需要在一条线路上传送数据时，除了必须有一条物<br>理线路，还必须有一些必要的通信协议来控制这些数据的传输。若把实现这些协议的硬件和软<br>件加到链路上，就构成了数据链路</p><h3 id="3-03"><a href="#3-03" class="headerlink" title="3-03"></a>3-03</h3><p>网络适配器的作用是什么？网络适配器工作在哪一层？</p><p>解答：适配器又称为网络接口卡或简称为“网卡气在适配器上面装有处理器和存储器（包<br>括 RAM 和 ROM）。</p><p>适配器和局域网之间的通信是通过电缆或双绞线以<strong>串行传输</strong>方式进行的，</p><p>而适配器和计算机之间的通信则是通过计算机主板上的 I&#x2F;O 总线以<strong>并行传输</strong>方式进行的。</p><p>因此，</p><blockquote><p>适配器的一个重要功能就是要进行数据串行传输和并行传输的转换。</p></blockquote><p>由于网络上的数据率和计算机总线上的数据率并不相同，因此在</p><blockquote><p>适配器中必须装有对数据进行缓存的存储器。</p></blockquote><p>若在主板上插入适配器时，还必须把管理该适配器的设备驱动程序安装在计算机的操作系统中。这个驱<br>动程序以后就会告诉适配器，应当从存储器的什么位置把多长的数据块发送到局域网，或者应<br>当在存储器的什么位置把局域网传送过来的数据块存储下来。</p><blockquote><p>适配器还要能够实现以太网协议。</p></blockquote><p>适配器接收和发送各种帧时不使用计算机的 CPU 。这时 CPU 可以处理其他任务。当适配<br>器收到有差错的帧时，就把这个帧丢弃而不必通知计算机。当适配器收到正确的帧时，它就使<br>用中断来通知该计算机并交付协议栈中的网络层。当计算机要发送 IP 数据报时，就由协议栈<br>把 IP 数据报向下交给适配器，组装成帧后发送到局域网。</p><h3 id="3-06"><a href="#3-06" class="headerlink" title="3-06"></a>3-06</h3><p>PPP 协议的主要特点是什么？为什么 PPP 不使用帧的编号？ PPP 适用于什么情况？为什么 PPP 协议不能使数据链路层实现可靠传输？</p><p>解答： PPP 协议具有以下特点。（不可靠协议）</p><p>(1) <strong>简单</strong>： PPP 协议很简单。接收方每收到一个帧，就进行 CRC 检验。如 CRC 检验正确，<br>就收下这个帧；反之，就丢弃这个帧，其他什么也不做。</p><p>(2) <strong>封装成帧</strong>： PPP 协议规定了特殊的字符作为帧定界符，以便使接收端能从收到的比特<br>流中准确地找出帧的开始和结束位置。</p><p>(3) <strong>透明性</strong>： PPP 协议能够保证数据传输的透明性。如果数据中碰巧出现了和帧定界符一<br>样的比特组合， PPP 规定了一些措施来解决这个问题</p><p>(4) <strong>支持多种网络层协议</strong>： PPP 协议支持多种网络层协议（如 IP 和 IPX 等）在同一条物<br>理链路上的运行。当点对点链路所连接的是局域网或路由器时， PPP 协议必须同时支待在链路<br>所连接的局域网或路由器上运行的各种网络层协议。</p><p>(5) <strong>支持多种类型链路</strong>： PPP 能够在多种类型的链路上运行。例如，串行的（一次只发送<br>一个比特）或并行的（一次并行地发送多个比特），同步的或异步的，低速的或高速的，电的<br>或光的，交换的（动态的）或非交换的（静态的）点对点链路。<br>PPP 不使用帧的编号，因为帧的编号是为了出错时可以有效地重传，</p><blockquote><p>而 PPP 并不需要实现可靠传输。</p></blockquote><p>PPP 适用于线路质量不太差的情况。如果通信线路质量太差，传输就会频频出错。但 PPP<br>又没有编号和确认机制，这样就必须靠上层的协议（有编号和重传机制）才能保证数据传输正<br>确无误。这样就会使数据的传输效率降低。</p><blockquote><p>在TCP&#x2F;IP协议族中，可靠传输由运输层的TCP协议负责，PPP不需要纠错，不需要设置序号，不需要流量控制</p></blockquote><blockquote><p>ppp协议只支持点对点的链路通信，不支持多点线路</p></blockquote><blockquote><p>ppp协议只支持全双工链路</p></blockquote><h2 id="补充知识点：CRC检验"><a href="#补充知识点：CRC检验" class="headerlink" title="补充知识点：CRC检验"></a>补充知识点：CRC检验</h2><p>循环冗余检验CRC </p><p>是一种检错方法，以帧为单位，对接收到的每一个帧都除以相同的模数p（模2运算），然后检查得到的余数R</p><p>R为0表示正确，R不等于0就丢弃</p><p>先在数据位后面补充p-1位的0，计算得到的R作为帧检验序列FCS，是添加在数据后面的冗余码</p><p>详见课本P77页</p><h3 id="3-07"><a href="#3-07" class="headerlink" title="3-07"></a>3-07</h3><p>（1）要发送的数据为 1101011011 。采用 CRC 的生成多项式是 P(X) &#x3D; x^4 + X + 1 。试求应添加在数据后面的余数。</p><p>（2）若要发送的数据在传输过程中最后一个 1 变成了 0, 即变成了 1101011010, 问接收端能否发现？</p><p>（3）若要发送的数据在传输过程中最后两个 1 都变成了 0, 即变成了 1101011000, 问接收端能否发现？</p><p>（4）采用 CRC 检验后，数据链路层的传输是否就变成了可靠的传输？</p><p>【解答】</p><p>（1）x^4到x^0的系数分别就是CRC的高位到低位，所以除数P为：10011（共5位）</p><p>1101011011后面加四个0得： 11010110110000  （5位p应该添加4个0）</p><p>用 11010110110000 除以 10011 得商：1100001010  余数：1110</p><p>所以应该添加在后面的余数是：1110  （即把一开始添加的4个0换成现在算出来的余数1110）</p><blockquote><p>余数R总是比除数P少一位,所以在计算余数R时，我们先假设为4个0，计算得到的余数替换成4个0就好</p></blockquote><p><img src="https://pic.imgdb.cn/item/66763447d9c307b7e9c46d48.png" alt="alt text"></p><p>（2）原本的被除数序列为：11010110111110  因为数据位的最后一位的1换成了0，所以替换后的数据序列为： 11010110101110  （注意是数据序列！）</p><p>用  11010110101110 除以 10011 得到商：1100001011  余数：  0011</p><p>余数不为0，接收端是可以发现的</p><p><img src="https://pic.imgdb.cn/item/66763732d9c307b7e9c9d5eb.png" alt="alt text"></p><p>（3）当数据最后两位1都变成了0时，即 1101011011 -&gt; 1101011000</p><p>再添加FCS检验序列   1110</p><p>得到被除数：  11010110001110</p><p>除数 p&#x3D;10011 </p><p>11010110001110&#x2F;10011  得到商：1100001001  余数 R &#x3D; 0101</p><p><img src="https://pic.imgdb.cn/item/66763a00d9c307b7e9cf65a6.png" alt="alt text"></p><p>（4）采用 CRC 检验后，数据链路层的传输并非变成了可靠的传输。当接收方进行 CRC 检验时，如果发现有差错，就简单地丢弃这个帧。数据链路层并不能保证接收方接收到的和发送方发送的完全一样。</p><h3 id="3-8（补充练习）"><a href="#3-8（补充练习）" class="headerlink" title="3-8（补充练习）"></a>3-8（补充练习）</h3><p><img src="https://pic.imgdb.cn/item/66763bf9d9c307b7e9d3557d.png" alt="alt text"></p><h3 id="3-10"><a href="#3-10" class="headerlink" title="3-10"></a>3-10</h3><blockquote><p>ppp协议使用零比特填充的方式来实现透明传输，这是一种同步传输技术！！！</p></blockquote><p>PPP 协议使用同步传输技术传送比特串 0110111111111100 。试问经过零比特填充后变成怎样的比特串？</p><p>若接收端收到的 PPP 帧的数据部分是 0001110111110111110110,试问删除发送端加入的零比特后会变成怎样的比特串？</p><p>【解答】</p><p>第一个比特串 0110111111111100:</p><blockquote><p>零比特填充就是<strong>在一连 5 个 1 之后必须插入一个 0</strong> 。</p></blockquote><p>经过零比特填充后变成 011011111<strong>0</strong>11111<strong>0</strong>00 （加粗的 0 是填充的）</p><p>另一个比特串 0001110111110111110110:</p><p>删除发送端加入的零比特，就是<strong>把一连 5 个 1 后面的 0 删除</strong>。因此，删除发送端加入的零比特后就得出： 000111011111-11111-110 （连字符表示删除了 0）。</p><h3 id="3-20"><a href="#3-20" class="headerlink" title="3-20"></a>3-20</h3><p>假定 1 km 长的 CSMA&#x2F;CD 网络的数据率为 1 Gbit&#x2F;s 。设信号在网络上的传播速率为 200000 km&#x2F;s 。 求能够使用此协议的最短帧长。</p><p>【解答】：</p><p>数据率1 Gbit&#x2F;s表示啥意思？</p><p>“1 Gbit&#x2F;s”具体表示的是每秒钟可以传输10亿个比特的信息。  1千米长的限定条件下</p><p>1km&#x2F;200000km&#x2F;s &#x3D; 多少秒钟传播时间—-0.5*10^(-5)s</p><p>如果帧太短不会回传播不到另一端呢，这题感觉看懂，基本功不牢！！！</p><p>【官方解答】</p><p>l km 长的 CSMA&#x2F;CD 网络的端到端传播时延 t &#x3D; (1 km)&#x2F; (200000 km&#x2F;s) &#x3D; 5 µs 。</p><p>2t &#x3D; 10 µs, (一来一回2倍)</p><p>在此时间内要发送(1 Gbit&#x2F;s)x（lO µs） &#x3D; 10000 bit 。</p><p>只有经过这样一段时间后，发送端才能收到碰撞的信息（如果发生碰撞的话），也才能检测到碰撞的发生。</p><p>因此，最短帧长为 10000 bit, 或 1250 字节 。</p><p>我的理解是：如果帧的长度太短了，那么会导致一个问题就是传播过去的帧数据再传播过来所需要的时间就短于传播时延，发送端是无法检测到碰撞信号的，所以无法保证信息的准确传播</p><h3 id="3-29"><a href="#3-29" class="headerlink" title="3-29"></a>3-29</h3><p>以太网交换机有何特点？用它怎样组成虚拟局域网？</p><p><img src="https://pic.imgdb.cn/item/6676529fd9c307b7e9032631.png" alt="alt text"></p><p>【一些笔记】</p><p>局域网的概念大于以太网，但是现在讲局域网默认是以太网</p><p>只考虑媒体接入控制MAC子层，简化了概念</p><p>以太网提供的服务是尽最大努力的交付，是一种不可靠的交付，对有差错帧是否需要重传需要由高层来决定</p><h2 id="第四章课后习题"><a href="#第四章课后习题" class="headerlink" title="第四章课后习题"></a><strong>第四章课后习题</strong></h2><h3 id="4-04"><a href="#4-04" class="headerlink" title="4-04"></a>4-04</h3><p>试简单说明下列协议的作用：IP, ARP 和 ICMP。</p><p>【解答】：</p><p>网际协议 IP ：使用协议 IP 可以把互连以后的计算机网络看成是一个虚拟互连网络。 所谓虚拟互连网络，就是逻辑互连网络，称为互联网。我们知道，各种物理网络的异构性本来是客观存在的，但是我们利用协议 IP 就可以使这些性能各异的网络在网络层上看起来好像是一个统一的网络。这种使用协议 IP 的虚拟互连网络可简称为 IP 网。使用 IP 网的好处是：当 IP 网上的主机进行通信时，就好像在单个网络上通信一样，它们看不见互连的各网络的具体异构细节（如具体的编址方案、路由选择协议，等等）。 </p><p>地址解析协议 ARP: 用来把一个机器（主机或路由器）的 IP 地址转换为相应的 MAC 地址（或硬件地址）。 </p><p>网际控制报文协议 ICMP: 用来使主机或路由器报告差错情况和提供有关异常情况的报告，这样就可以更有效地转发 IP 数据报和提高交付成功的概率。</p><h3 id="4-05"><a href="#4-05" class="headerlink" title="4-05"></a>4-05</h3><p>IP 地址如何表示？</p><p>【解答】： </p><p>IP 地址 (32 位）可记为： </p><p>IP 地址：：＝ ｛＜网络号＞，＜主机号＞｝</p><p>分类的 IP 地址共分为五类。 </p><p>A 类地址：网络号字段为 1 字节，最前面的 1 位是 0 。 </p><p>B 类地址：网络号字段为 2 字节，最前面的 2 位是 10 。 </p><p>C 类地址：网络号字段为 3 字节，最前面的 3 位是 110 。 </p><p>D 类地址：用于多播，最前面的 4 位是 1110 。 </p><p>E 类地址：保留今后使用，最前面的 4 位是 1111 。 </p><p>无分类地址又称为 CIDR 。由“网络前缀 “(network-prefix) （简称为“前缀＂）和主机号组 成 。 主机号字段称为后缀(suffix) 。 CIDR 的记法是： IP 地址：：＝｛＜网络前缀＞，＜主机号＞｝ 但网络前缀的位数不固定，并且没有 A 类、 B 类或 C 类的划分。</p><p><img src="https://pic.imgdb.cn/item/66737be2d9c307b7e9d80a5f.png" alt="![](Aspose.Words.52609da6-82ff-4708-ac03-bc1781cb7297.001.png)"></p><h3 id="4-06"><a href="#4-06" class="headerlink" title="4-06"></a>4-06</h3><p> IP 地址的主要特点是什么？</p><p>【解答】</p><p>IP 地址具有以下一些重要特点： </p><ol><li>每一个 IP 地址都由网络前缀和主机号两部分组成。从这个意义上说， IP 地址是一种分等级的地址结构。 </li><li>实际上 IP 地址是标志一个主机 （ 或路由器）和一条链路的接口 。换言之， IP 地址并不仅仅指明一个主机，同时还指明了主机所连接到的网络。 </li><li>按照互联网的观点，一个网络是指具有相同网络前缀的主机的集合，因此，用转发器或网桥连接起来的若干个局域网仍为一个网络，因为这些局域网都具有同样的网络前缀。具有不同网络前缀的局域网必须使用路由器进行互连。 </li><li>在 IP 地址中，所有分配到网络前缀的网络（不管是范围很小的局域网，还是可能覆盖很大地理范围的广域网）都是平等的。</li></ol><h3 id="4-07"><a href="#4-07" class="headerlink" title="4-07"></a>4-07</h3><p>试说明 IP 地址与 MAC 地址的区别。为什么要使用这两种不同的地址？</p><p>【解答】</p><p>从层次的角度看， MAC 地址是数据链路层和物理层使用的地址，而 IP 地址是网络层和以上各层使用的地址，是一种逻辑地址（称 IP 地址是逻辑地址是因为 IP 地址是用软件实现的）。 </p><p>由于全世界存在着各式各样的网络，它们使用不同的 MAC 地址。要使这些异构网络能够互相通信就必须进行非常复杂的 MAC 地址转换工作，因此由用户或用户主机来完成这项工作几乎是不可能的事。但统一的 IP 地址把这个复杂问题解决了 。 </p><p>连接到互联网的主机只需拥有统一的 IP 地址，它们之间的通信就像连接在同一个网络上那样简单方便。当需要把 IP 地址转换为 MAC 地址时，调用 ARP 的复杂过程都由计算机软件自动进行，而用户是看不见这种调用过程的。因此，在虚拟的 IP 网络上用 IP 地址进行通信给广大的计算机用户带来很大的方便。</p><h3 id="4-15"><a href="#4-15" class="headerlink" title="4-15"></a>4-15</h3><p> 一个 3200 bit 长的 TCP 报文传到 IP 层，加上 160bit 的首部后成为数据报。下面的互连网由两个局域网通过路由器连接起来，但第二个局域网所能传送的最长数据帧中的数据部分只有 1200 bit, 因此数据报在路由器中必须进行分片。试问第二个局域网向其上层要传送多少 bit 的数据（这里的“数据”当然指的是局域网看见的数据）?</p><p>【解答】</p><p>第二个局域网所能传送的最长数据帧中的数据部分只有 1200 bit, 可见每一个 IP 数 据报的最大长度是 1200 bit, 故其数据部分（即从 TCP 传下来的数据）最多为： </p><p>IP 数据报的总长度- IP 数据报的首部＝ 1200 - 160 &#x3D; 1040 bit </p><p>由于片偏移是以8字节即64bit为单位的，所以IP数据片的<strong>数据部分</strong>最大不超过1024bit</p><blockquote><p>书上原话</p></blockquote><p>片偏移是以8字节为偏移单位的，这就是说，除最后一个数据报外，其他每个分片的长度一定为8字节的整数倍，这里最大只能是1024！！！</p><p>可以这样划分：TCP 交给 IP 的数据共 3200 bit&#x3D; 1024 + 1024 + 1024 + 128, 因此 3200 bit 的数据必须划分为 4 个数据报，如图 T-4-15 所示。</p><p><img src="https://pic.imgdb.cn/item/66737c80d9c307b7e9d8c235.png" alt=" ![](Aspose.Words.52609da6-82ff-4708-ac03-bc1781cb7297.002.png)"></p><p>图中的 Hl, H2, H3, H4 分别是这 4 个数据报的首部，其长度都是 160 bit （但里面的内 容并不相同），而 TCP_l, TCP_2, TCP_3, TCP_4 分别是这四个数据报片的数据部分，其长度分别为 1024 bit, 1024 bit, 1024 bit 和 128 bit。这 4 个数据报的总长度（首部加上数据部分） 分别为 1184bit, 1184bit, 1184bit 和 288 bit。上面这些就是第二个局域网向其上层要传送的数据。因此，第二个局域网向上传送 1184 + 1184 + 1184 + 288 &#x3D; 3840 bit。</p><p>IP数据报首部的<strong>固定部分</strong>是20字节（160bit）</p><h3 id="4-16"><a href="#4-16" class="headerlink" title="4-16"></a>4-16</h3><p>(1) 试解释为什么 ARP 高速缓存每存入一个项目就要设置 10~20 分钟的超时计时器。这个时间设置得太长或太短会出现什么问题？  </p><p>(2) 至少举出两种不需要发送 ARP 请求分组的情况（即不需要请求将某个目的 IP 地址解析为相应的 MAC 地址）。 </p><p>【解答】：</p><ol><li><p>当网络中某个 IP 地址和 MAC 地址的映射发生变化时， ARP 高速缓存中相应的项目就要改变。例如，更换以太网网卡就会发生这样的事件。10-20 分钟更换一块网卡是合理的。超时时间设置得太短会使 ARP 请求和响应分组的通信太频繁，而超时时间设置得太长会使更换网卡后的主机迟迟无法和网络上的其他主机通信。</p></li><li><p>源主机的 ARP 高速缓存中已经有了该目的 IP 地址的项目；源主机发送的是广播分组；源主机和目的主机使用点对点链路。</p></li></ol><p>4-17 主机 A 发送 IP 数据报给主机 B, 途中经过了 5 个路由器。试问在 IP 数据报的发 送过程中总共使用了几次 ARP? </p><p>【解答】： 6 次。主机发送 IP 数据报时用一次 ARP, 每一个路由器在转发 IP 数据报时各使用一次。</p><h3 id="4-17"><a href="#4-17" class="headerlink" title="4-17"></a>4-17</h3><p>IP 协议有分片的功能，但广域网中的分组则不必分片。这是为什么？ </p><p>【解答】： </p><p>IP 数据报可能要经过许多个网络，而源主机事先并不知道数据报后面要经过的这 些网络所能通过的分组的最大长度是多少。等到 IP 数据报转发到某个网络时，可能才发现数 据报太长了，因此在这时就必须进行分片 。 </p><p>但广域网能够通过的分组的最大长度是该广域网中所有主机都事先知道的，源主机不可能发送网络不支持的过长分组，因此广域网就没有必要将已经发送出的分组再进行分片。</p><h3 id="4-19"><a href="#4-19" class="headerlink" title="4-19"></a>4-19</h3><p>链路层广播和 IP 广播有何区别？ </p><p>【解答】：</p><p>链路层广播是用数据链路层协议（在第二层）在一个以太网上实现的对该局域网上所有主机的 MAC 帧广播 。 </p><p>IP 广播则是用 IP 协议（在第三层）通过互联网实现的对一个网络（即目的网络）上所有主机的 IP 数据报广播。</p><h3 id="4-19-1"><a href="#4-19-1" class="headerlink" title="4-19"></a>4-19</h3><p>某单位分配到一个地址块 129.250&#x2F; 16 。该单位有 4000 台计算机， 平均分布在 16 个不同的地点 。 试给每一个地点分配一个地址块，并算出每个地址块中 IP 地址 的最小值和最大值。 </p><p>【解答】： </p><p> 4000 台计算机平均分布在 16 个不同的地点，每个地点有 250 台计算机。因此，主机号有 8 位就够了。这样，网络前缀可以选用 24 位 。 16 个不同地点需要有 16 个地址块 。 每个地点分到一个／24 地址块就够用了。</p><p>结果如下： </p><p>129.250.1&#x2F;24, IP 地址范围： 129.250.1.0 ~ 129.250.1.255 </p><p>129.250.2&#x2F;24, IP 地址范围： 129.250.2.0 ~ 129.250.2.255 </p><p>……</p><p>129.250.16&#x2F;24, IP 地址范围： 129.250.16.0 ~ 129.250.16.255</p><h3 id="4-24"><a href="#4-24" class="headerlink" title="4-24"></a>4-24</h3><p><img src="https://pic.imgdb.cn/item/66739e7ed9c307b7e90d895f.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6673a070d9c307b7e910d4a4.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6673a08ed9c307b7e9110c5e.png" alt="alt text"></p><h3 id="4-25"><a href="#4-25" class="headerlink" title="4-25"></a>4-25</h3><p>一个主机要向另一个主机发送 IP 数据报，是否使用 ARP 就可以得到该目的主机的 MAC 地址，然后直接用这个 MAC 地址将 IP 数据报发送给目的主机？ </p><p>【解答】：</p><p>有时是这样，但有时也不是这样。ARP 只能对连接在同一个网络上的主机或路由器进行地址解析。我们看图 Q-4-25 的例子。</p><p><img src="https://pic.imgdb.cn/item/667380c5d9c307b7e9dea2ae.png" alt="![](Aspose.Words.52609da6-82ff-4708-ac03-bc1781cb7297.003.png)"></p><p>由于 A 和 B 连接在同一个网络上，因此主机 A 使用 ARP 协议就可得到 B 的 MAC 地址， 然后用 B 的 MAC 地址，将 IP 数据报组装成帧，发送给 B 。 </p><p>但当目的主机是 F 时，情况就不同了。 A 无法得到 F 的 MAC 地址，只能先将 IP 数据报 发送给本网络上的一个路由器（在本例中就是路由器 R1) 。因此，当 A 发送 IP 数据报给 F 时， 在地址解析方面要经过以下三个步骤：</p><p>（1）A 先通过 ARP 解析出路由器凡的 MAC 地址，将 IP 数据报发送到 R1</p><p>（2）R1 再通过 ARP 解析出 R2 的 MAC 地址，将 IP 数据报转发到 R2</p><p>（3）R2 再通过 ARP 解析出 F 的 MAC 地址，将 IP 数据报交付 F 。 </p><p>因此， A 发送 IP 数据报给 F 要经过三次 ARP 地址解析。 A 只知道 F 的 IP 地址，但并不知道F的MAC地址。</p><p>从A到F，中间经过了两个路由器，需要使用三次（2+1）ARP地址解析协议</p><h3 id="4-26"><a href="#4-26" class="headerlink" title="4-26"></a>4-26</h3><p> 一个大公司有一个总部和三个下属部门 。 公司分配到的网络前缀是 192.77.33&#x2F;24 。<br>公司的网络布局如图 T-4-26 所示。总部共有 5 个局域网，其中的 LAN1 ~ LAN4<br>都连接到路由器 R1 上， R1 再通过 LAN5 与路由器 R2 相连。 R2 和远地的三个部门<br>的局域网 LAN6 ~ LAN8 通过广域网相连。每一个局域网旁边标明的数字是局域<br>网上的主机数。试给每一个局域网分配一个合适的网络前缀。</p><p><img src="https://pic.imgdb.cn/item/667388e6d9c307b7e9e94207.png" alt="alt text"></p><p>1100 0000.0100 1101.0010 0001.0000 0000</p><p>50+10+28+10+20+20+25&#x3D;163&lt;256  8位</p><p>lan1:<br>192.77.33. + 1100.0000   64-2个</p><p>lan2:<br>192.77.33. + 1111.0000    16-2个</p><p>lan3:<br>192.77.33. + 1110.0000    32-2个</p><p>解答： </p><p>50 个主机的 LAN1 需要前缀／26 （主机号 6 位， 62 个主机号，凡的接口占用一个号<br>码）， </p><p>28 个主机的 LAN3 需要前缀／27 （主机号 5 位， 30 个主机号，民的接口占用一个号码），</p><p>10 个主机的 LA2和 LAN4 各需要一个前缀／28 （主机号 4 位， 14 个主机号，凡的接口占用一个号码）。</p><p>LAN6~ LAN8 （加上路由器）各需要一个前缀／27 （主机号 5 位， 30 个主机号， R1-R5的接口各占用一个号码）。 </p><p>3 个 WAN 各有两个端点，各需要一个前缀／30 （主机号 2 位， 2 个主<br>机号）。</p><p>LAN5 需要前缀／30 （主机号 2 位，用 2 个号码分配给路由器R1和R2的一个接口）</p><p>考虑到以太网上可能还要再接几个主机，故留有余地，可分配一个前缀／29 （主机号 3 位， 6 个主机号）。</p><p>下面给出其中的一种答案：<br>LAN1: 192.77.33.0&#x2F;26<br>LAN3: 192.77.33.64&#x2F;27<br>LAN6: 192.77.33.96&#x2F;27<br>LAN7: 192.77.33.128&#x2F;27<br>LAN8: 192.77.33.160&#x2F;27<br>LAN2: 192.77.33.192&#x2F;28<br>LAN4: 192.77.33.208&#x2F;28<br>LAN5: 192.77.33.224&#x2F;29 （考虑到以太网上可能还要再接几个主机，故留有余地。）<br>WAN1: 192.77.33.232&#x2F;30<br>WAN2: 192.77.33.236&#x2F;30<br>WAN3: 192.77.33.240&#x2F;30   </p><p>遇到这种题从需要的主机数入手开始计算，然后排网络号，从小到大排，主机号多的先排大的网络号</p><h3 id="4-31"><a href="#4-31" class="headerlink" title="4-31"></a>4-31</h3><p>已知地址块中的一个地址是 140.120.84.24&#x2F;20 。试求这个地址块中的最小地址和最大地址。地址掩码是什么？地址块中共有多少个地址？相当于多少个 C 类地址？</p><p>0101 0100</p><p>最小地址直接用IPand&#x2F;20</p><p>得<br>最小地址：140.120.80.0&#x2F;20</p><p>最大地址  140.120.95.255&#x2F;20   </p><p>地址掩码： 11111111 11111111 11110000 00000000</p><p>主机号有12位</p><p>2^12-2个地址!!!(这里应该不要-2)    </p><p>因为问的是地址数不是可分配的地址数!</p><p>2^4&#x3D;（16）个c类地址</p><p>解答：</p><p>最小地址是 140.120.80.0&#x2F;20<br>最大地址是 140.120.95.255&#x2F;20<br>地址掩码是 11111111 11111111 11110000 00000000<br>地址数是 2^12 &#x3D;4096, 相当千 16 个 C 类地址  </p><h3 id="4-33"><a href="#4-33" class="headerlink" title="4-33"></a>4-33</h3><p>某单位分配到一个地址块 136.23.12.64&#x2F;26 。现在需要进一步划分为 4 个一样大的子网。试问：</p><p>(1) 每个子网的网络前缀有多长？</p><p>(2) 每一个子网中有多少个地址？</p><p>(3) 每一个子网的地址块是什么？</p><p>(4) 每一个子网可分配给主机使用的最小地址和最大地址是什么？</p><p>26位网络号，有6个主机号（64个可分配）</p><p>64&#x2F;4&#x3D;16  均分</p><p>16&#x3D;4个主机号，所以前缀有  28 位</p><p>每个子网中有 16 个地址  （14可用）</p><p>0100 0000  所有网络的起点！！</p><p>子网地址块： </p><p>136.23.12.64&#x2F;28</p><p>136.23.12.80&#x2F;28</p><p>136.23.12.96&#x2F;28</p><p>136.23.12.112&#x2F;28</p><p>最小地址：136.23.12.65&#x2F;28<br>最大地址  136.23.12.78&#x2F;28</p><p>0100 1110   64+8+4+2&#x3D;78</p><p>解答：<br>(1) 原来网络前缀是 26 位，需要再增加 2 位，才能划分为 4 个一样大的子网。因此，每个子网前缀是 28 位。</p><p>(2) 每个子网的地址中有 4 位留给主机用，因此共有 16 个地址（可用的 14 个）。</p><p>(3)4 个子网的地址块分别是：<br>136.23.12.64&#x2F;28, 136.23.12.80&#x2F;28, 136.23.12.96&#x2F;28, 136.23.12.112&#x2F;28 。</p><p>(4) 地址中的前三个字节分别记为 Bl, B2 和 B3 。</p><p>第一个地址块 136.23.12.64&#x2F;28 可分配给主机使用的最小地址是 136.23.12.65, 最大地址是<br>136.23.12.78 。</p><p>第二个地址块 136.23.12.80&#x2F;28 可分配给主机使用的最小地址是 136.23.12.81, 最大地址是<br>136.23.12.94 。</p><p>第三个地址块 136.23.12.96&#x2F;28 可分配给主机使用的最小地址是 136.23.12.97, 最大地址是<br>136.23.12.110 。</p><p>第四个地址块 136.23.12.112&#x2F;28 可分配给主机使用的最小地址是 136.23.12.113, 最大地址<br>是 136.23.12.126 。</p><h3 id="4-47"><a href="#4-47" class="headerlink" title="4-47"></a>4-47</h3><p>某单位分配到一个地址块 14.24.74.0&#x2F;24 。该单位需要用到三个子网，它们对三个子地址块的具体要求是：子网 N1 需要 120 个地址，子网 N2 需要 60 个地址，子网 N3 需要 10 个地址。请给出地址块的分配方案。</p><p>笔记：</p><p>N1  120 个  128  7位  主机号 </p><p>N2  60  个  64   6位 主机号</p><p>N3  10  个  16   4位主机号</p><p>先分主机号多的</p><p>N1 14.24.74.0&#x2F;25  -  14.24.74.127&#x2F;25 </p><p>0000 0000  - 0111 1111 </p><p>N2 14.24.74.128&#x2F;26  - 14.24.74.191&#x2F;26</p><p>1000 0000  -  1011 1111 </p><p>N3 14.24.74.192&#x2F;28  - 14.24.74.207&#x2F;28</p><p>1100 0000 - 1100 1111</p><p>解答：这个单位的地址块的网络前缀是 24 位，因此主机号有 8 位，即一共有 256 个地址。</p><p>可以拿总地址的一半 (128 个）分配给子网 N1 （实际上可以使用的地址数是 126 个 ） 。这个地址块的网络前缀是 25 位 。</p><p>再将剩下地址的一半 (64 个）分配给子网 N2 （ 实际上可以使用的地址数是 62 个）。这个地址块的网络前缀是 26 位 。</p><p>还剩下 64 个地址，可以拿出 1&#x2F;4 （即 16 个地址）分配给子网 N3 （实际上可以使用的地址数是 14 个）。这个地址块的网络前缀是 28 位 。</p><p>最后剩下 48 个地址留给以后再用 。</p><p>这样，分配给子网 N1 C&#x2F;25) 的首地址是 14.24 . 74 . 0, 末地址是 14.24 . 74.127 。</p><p>分配给子网 N2 ( &#x2F;26 ) 的首地址是 14 . 24.74.128, 末地址是 14.24.74.191 。</p><p>分配给子网 N3 C&#x2F;28) 的首地址是 14 . 24.74.192, 末地址是 14. 24 . 74.207 。</p><p>图 T-4-47 显示了上述分配方案。</p><p><img src="https://pic.imgdb.cn/item/6673945fd9c307b7e9fb1f6d.png" alt="alt text"></p><h3 id="4-48"><a href="#4-48" class="headerlink" title="4-48"></a>4-48</h3><p>如图 T-4-48(a)所示，网络 145.13.0.0&#x2F;16 划分为四个子网 N1,N2, N3 和 N4 。这四个子网与路由器 R 连接的接口分别是 m0, m1, m2 和 m3 。路由器 R 的第五个接口m4 连接到互联网 。</p><p>(I) 试给出路由器 R 的路由表 。</p><p>(2) 路由器 R 收到一个分组，其目的地址是 145.13.160.78。试解释这个分组是怎样被转发的。</p><p><img src="https://pic.imgdb.cn/item/6673967dd9c307b7e9ff0af7.png" alt="alt text"></p><p>笔记：</p><blockquote><p>路由表长啥样要知道！！！</p></blockquote><p>网络前缀            下一跳 </p><p>145.13.0.0&#x2F;18     直接交付 接口m0</p><p>145.13.64.0&#x2F;18    直接交付，接口m1</p><p>145.13.128.0&#x2F;18   直接交付 接口m2</p><p>145.13.192.0&#x2F;18    直接交付，接口m3</p><p><img src="https://pic.imgdb.cn/item/6673984fd9c307b7e9020866.png" alt="https://pic.imgdb.cn/item/6673984fd9c307b7e9020866.png"></p><p>请注意，最后一行的网络前缀是 0.0.0.0&#x2F;0 。这样的网络前缀和任何一个 IP<br>地址进行按位 AND 运算，其结果都必定是 0, 即一定是匹配的。这时就通过接口 m4 交给默认路由器来处理</p><p>默认路由是当路由器在路由表中找不到目标网络的路由条目时，路由器把请求转发到默认路由接口的一种特殊路由。它是对IP数据包中的目的地址找不到存在的其他路由时，路由器所选择的路由。默认路由一般应用于网络出口，指向互联网，实现内网主机能够跟外网通信。默认路由在路由表中的处理方式是，当常规的路由列表没有匹配时，才会查看或调用默认路由，因此也被称作“最后一根稻草”。</p><p>默认路由的特点包括：</p><p>它只能存在于末梢网络中，即那些不直接连接到互联网，而是通过其他路由器才能访问互联网的网络。<br>默认路由是一种特殊的静态路由，其目的地和掩码通常设置为全零，即0.0.0.0&#x2F;0，表示它可以匹配任何目的地址。<br>在路由表中，默认路由通常位于最底部，作为一种“不负责任”的表现，类似于“甩锅”，当转发的数据找不到对应的路由时，就会找默认路由。</p><p>—–引自百度百科</p><blockquote><p>为什么：0.0.0.0&#x2F;0，表示它可以匹配任何目的地址。</p></blockquote><p>在计算机网络中，IP地址的子网掩码用于确定IP地址中的哪一部分表示网络地址，哪一部分表示主机地址。子网掩码由一系列连续的1组成，后面跟着0。当子网掩码为0.0.0.0时，表示<strong>没有网络地址部分，即所有的IP地址位都用于主机地址</strong></p><p>&#x2F;0表示子网掩码的位数，当子网掩码为&#x2F;0时，意味着子网掩码的所有位都是0，即0.0.0.0。这表示没有任何网络地址的限制，可以匹配任何目的地址。</p><p><img src="https://pic.imgdb.cn/item/66739e29d9c307b7e90cfc54.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/66739e41d9c307b7e90d22b1.png" alt="alt text"></p><h2 id="计算机网络作业"><a href="#计算机网络作业" class="headerlink" title="计算机网络作业"></a><strong>计算机网络作业</strong></h2><p>4-09 关于IP地址与子网掩码。</p><p>（1）子网掩码255.255.255.0代表什么意思？</p><p>（2）一网络的子网掩码是255.255.255.248，问该网络能连接多少台主机？（要求说明理由）</p><p>(1)答：子网掩码是一个32位的数字，用于在IP地址中区分网络地址和主机地址。子网掩码255.255.255.0表示所有IP地址的前24位是网络地址，而最后8位是主机地址。</p><p>具体来说：</p><p>255.255.255.0的二进制形式是11111111.11111111.11111111.00000000。</p><p>网络部分（前24位）：11111111.11111111.11111111，表示网络地址的固定部分。</p><p>主机部分（最后8位）：00000000，表示主机地址的可变部分。</p><p>这意味着，使用这个子网掩码的网络可以有256个可能的主机地址（从00000001到11111111），但由于网络地址和广播地址通常不分配给主机，实际可用的主机地址会少一些。</p><p>例如，如果一个网络的IP地址范围是192.168.1.0到192.168.1.255，使用255.255.255.0作为子网掩码，那么192.168.1.0是网络地址，192.168.1.255是广播地址，而192.168.1.1到192.168.1.254可以分配给主机。</p><p>(2)答：子网掩码255.255.255.248的二进制形式是：</p><p>11111111.11111111.11111111.11111000</p><p>在这个子网掩码中，有29位是网络位（前24位加上最后5位），3位是主机位。这意味着每个子网可以有 23 个可能的主机地址。</p><p>2^3&#x3D;8</p><p>然而，在这8个地址中，有两个地址是特殊的：</p><p><strong>子网的第一个地址是网络地址，它代表整个子网</strong>，通常不分配给任何具体的主机。</p><p>子网的最后一个地址是广播地址，用于发送到子网内所有主机的消息。</p><p>所以，实际可用的主机地址是8减去2，即6个。</p><p>例如，如果一个子网的起始IP地址是192.168.1.0，使用255.255.255.248作为子网掩码，那么：</p><p><strong>网络地址是192.168.1.0</strong></p><p>可用的主机地址范围是192.168.1.1到192.168.1.6</p><p><strong>广播地址是192.168.1.7</strong></p><p>因此，使用255.255.255.248子网掩码的每个子网可以连接6台主机。</p><p>4-27  由两个地址块208.128&#x2F;11和208.130.28&#x2F;22。是否由哪个地址包含了另外一个地址？如果有，请指出，并说明理由。</p><p>【解答】</p><p>首先，我们需要将IP地址和子网掩码转换成二进制形式来理解它们的网络部分和主机部分。</p><p>地址块1: 208.128&#x2F;11</p><p>子网掩码为&#x2F;11，意味着前11位是网络部分，剩下的21位是主机部分。</p><p>208的二进制是：1101 0000 </p><p>128的二进制是：1000 0000</p><p>子网掩码的二进制是：11111111111100000000000</p><p>1101 0000. 1000 0000. 0000 0000. 0000 0000  （IP）<br>1111 1111. 1110 0000. 0000 0000. 0000 0000   (掩码)  </p><p>计算网络号：   </p><p>1101 0000 1000 0000 0000 0000 0000 0000  &#x3D;  208.128.0.0</p><p>地址块2: 208.130.28&#x2F;22</p><p>子网掩码为&#x2F;22，意味着前22位是网络部分，剩下的10位是主机部分。</p><p>208的二进制是：1101 0000 </p><p>130的二进制是：1000 0010 </p><p>28的二进制是：0001 1100</p><p>子网掩码的二进制是：11111111 11111111 111100000000</p><p>1101 0000.1000 0010.0001 1100.0000 0000  （IP）</p><p>1111 1111.1111 1111.1111 1100.0000 0000  （掩码）</p><p>计算网络号：</p><p>1101 0000.1000 0010.0001 1100.0000 0000  &#x3D;  208.130.28.0</p><p>208.128&#x2F;11的前缀为:11010000 100;208.130.28&#x2F;22的前缀为:11010000 10000010 000101,它的前11位与208.128&#x2F;11的前缀是一致的,所以208.128&#x2F;11地址块包含了208.130.28&#x2F;22这一地址块。</p><p><strong>计算机网络期末复习题及答案</strong></p><p>一、选择题</p><p>1、传输延迟时间最小的交换方法是( A )</p><p>A线路交换     B.报文交换     C.分组交换     D.信元交换</p><p>2、在OSI七层结构模型中，处于数据链路层与运输层之间的是（ b ）</p><p>A、物理层    B、网络层    C、会话层     D、表示层</p><p>3、服务与协议是完全不同的两个概念，下列关于它们的说法错误的是( d )。</p><p>A、协议是水平的，即协议是控制对等实体间通信的规则。服务是垂直的，即服务是下层向上层通过层间接口提供的。</p><p>B、在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下面一层所提供的服务。</p><p>C、协议的实现保证了能够向上一层提供服务。</p><p>D、OSI将层与层之间交换的数据单位称为协议数据单元PDU。</p><p>OSI将层与层之间交换的数据单位称为服务数据单元SDU。</p><p>OSI将对等层次之间传送的数据单位称为该层的协议数据单元PDU。</p><p>4、在OSI参考模型中，数据链路层和物理层传输的数据单元分别是（ c ）</p><p>A、报文（Message）、比特（Bit）B、分组（Packet）、报文（Message）</p><p>C、帧（Frame）、比特（Bit）D、数据报（Datagram）、比特（Bit）</p><p>5、以下选项中，不属于OSI参考模型分层的是（ b ）</p><p>A．物理层  B．网络接口层  C．数据链路层  D．网络层 </p><p>6、在同一个信道上的同一时刻，能够进行双向数据传送的通信方式是 （ c ）</p><p>A.单工  B.半双工 C.全双工  D.上述三种均不是</p><p>7、若信道的复用是以信息在一帧中的时间位置(时隙)来区分，不需要另外的信息头来标志信息的身分(需要即为异步时分复用)，则这种复用方式为(  c )</p><p>8、（ c ）是下列传输介质中性能最好的。</p><p>A．双绞线          B．同轴电缆C．光纤            D．以上都好。</p><p>9、有几栋建筑物,周围还有其他电力电缆,若需将该几栋建筑物连接起来构成骨干型园区网,则采用( a )比较合适。</p><p>（A）光缆          （B）同轴电缆（C）非屏蔽双绞线  （D）屏蔽双绞线</p><p>10、局域网体系结构中（ b ）被划分成MAC和LLC两个子层。</p><p>A、物理层    B、数据链路层   C、网络层    D、运输层</p><p>11、以下各项中，不是数据报操作特点的是( c )</p><p>A、每个分组自身携带有足够的信息，它的传送是被单独处理的</p><p>B、在整个传送过程中，不需建立虚电路</p><p>C、使所有分组按顺序到达目的端系统 &#x2F;&#x2F;不按序,</p><p>D、网络节点要为每个分组做出路由选择</p><p>12、Hub是( c )。</p><p>A、网卡 B、交换机  C、集线器   D、路由器</p><p>13、下列协议不属于TCP&#x2F;IP协议簇中的协议是（ d ）</p><p>A、ICMP    B、TCP    C、DNS    D、HDLC</p><p>14、TCP&#x2F;IP模型的传输层有两个协议，第一个协议TCP是一种可靠的面向连接的协议，第二个协议UDP是( d )。&#x2F;&#x2F;tcp是可靠面向链接协议</p><p>A、一种可靠的面向连接的协议       B、一种不可靠的面向连接的协议</p><p>C、一种可靠的无连接协议          D、一种不可靠的无连接协议</p><p>15、报文的内容不按顺序到达目的结点的是（ d ）方式。 </p><p>A.电路交换B.报文交换C.虚电路交换D.数据报交换</p><p>16、以下不属于防火墙技术的是( D )。</p><p>A IP过滤      B 线路过滤     C 应用层代理   D 计算机病毒监测</p><p>17、某台计算机的IP地址为132.121.100.1,哪么它属于（ b ）网。</p><p>A. A类     B. B类      C. C类    Ｄ．Ｄ类</p><p>【解释】</p><p>A类、B类、C类和D类IP地址是根据IP地址的第一位数字来分类的，具体如下：</p><ul><li><p><strong>A类地址</strong>：范围从1.0.0.0到126.255.255.255。A类地址的第一位数字是1到126。A类地址通常分配给大型网络，如跨国公司或大型组织。</p></li><li><p><strong>B类地址</strong>：范围从128.0.0.0到191.255.255.255。B类地址的第一位数字是128到191。B类地址用于中等规模的网络。</p></li><li><p><strong>C类地址</strong>：范围从192.0.0.0到223.255.255.255。C类地址的第一位数字是192到223。C类地址用于小型网络，如小型公司或家庭网络。</p></li><li><p><strong>D类地址</strong>：范围从224.0.0.0到239.255.255.255。D类地址不用于网络地址，而是用于多播地址。</p></li><li><p><strong>E类地址</strong>：范围从240.0.0.0到255.255.255.255。E类地址也不用于网络地址，而是保留用于实验和未来使用。</p></li></ul><p>IP地址的分类是根据IPv4的分类方法。IPv6采用了不同的地址表示和分配方法。</p><p>18、Internet上各种网络和各种不同类型的计算机互相通信的基础是（ d ）协议</p><p>(A) HTTP (B) IPX (C) X.25 (D) TCP&#x2F;IP </p><p>19、Internet的核心协议是（  b）。</p><p>A、X.25       B、TCP&#x2F;IP  C、ICMP       D、UDP</p><p>20、计算机内的传输是(a)传输，而通信线路上的传输是传输。</p><p>A、并行，串行  B、串行，并行  C、并行，并行   D、串行，串行</p><p>21、属于集中控制方式的网络拓扑结构是（a  ）</p><p>(A) 星型结构 (B) 环型结构 (C) 总线结构 (D) 树型结构</p><p>22、下面关于网络互连设备叙述错误的是(c  ) 。</p><p>A、在物理层扩展局域网可使用转发器和集线器。</p><p>B、在数据链路层扩展局域网可使用网桥。</p><p>C、以太网交换机实质上是一个多端口网桥，工作在网络层。</p><p>D、路由器用来互连不同的网络，是网络层设备。</p><p>23、下面关于虚拟局域网VLAN的叙述错误的是(  d) </p><p>A、VLAN是由一些局域网网段构成的与物理位置无关的逻辑组。</p><p>B、利用以太网交换机可以很方便地实现VLAN。</p><p>C、每一个VLAN的工作站可处在不同的局域网中。</p><p>D、虚拟局域网是一种新型局域网。</p><p>24、帧中继网是一种(a   ) 。</p><p>A、广域网  B、局域网 C、ATM网    D、 以太网</p><p>25、下面关于IP地址与硬件地址的叙述错误的是( d)</p><p>A、在局域网中，硬件地址又称为物理地址或MAC地址。</p><p>B、硬件地址是数据链路层和物理层使用的地址，IP地址是网络层和以上各层使用的</p><p>C、IP地址不能直接用来进行通信，在实际网络的链路上传送数据帧必须使用硬件地址。</p><p>D、RARP是解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题。</p><p>ARP是解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题。</p><p>26、关于互联网中IP地址，下列叙述错误的是( d</p><p>A、在同一个局域网上的主机或路由器的IP地址中的网络号必须是一样的。</p><p>B、用网桥互连的网段仍然是一个局域网，只能有一个网络号。</p><p>C、路由器总是具有两个或两个以上的IP地址。</p><p>D、当两个路由器直接相连时，在连线两端的接口处，必须指明IP地址。</p><p>27、关于无分类编址CIDR，下列说法错误的是(c )</p><p>A、CIDR使用各种长度的“网络前缀”来代替分类地址中的网络号和子网号。</p><p>B、CIDR将网络前缀都相同的连续的IP地址组成“CIDR”地址块。</p><p>C、网络前缀越短，其地址块所包含的地址数就越少。</p><p>D、使用CIDR，查找路由表时可能会得到多个匹配结果，应当从匹配结果中选择具有最长网络前缀的路由。因为网络前缀越长，路由就越具体。</p><p>28、完成路径选择功能是在OSI模型的( c )。</p><p>A、物理层   B、数据链路层C、网络层  D、运输层</p><p>29、在TCP&#x2F;IP协议族的层次中，解决计算机之间通信问题是在 ( b ) 。</p><p>A、网络接口层   B、网际层   C、传输层      D、应用层</p><p>30、IP 协议提供的是服务类型是(  b) 。 </p><p>A 、面向连接的数据报服务B 、无连接的数据报服务</p><p>C 、面向连接的虚电路服务D 、无连接的虚电路服务</p><p>31、双绞线传输介质是把两根导线绞在一起，这样可以减少( d ) 。 </p><p>A 、信号传输时的衰减 B 、外界信号的干扰   </p><p>C 、信号向外泄露    D 、信号之间的相互串扰</p><p>32、ICMP协议位于( a )</p><p>A、网络层  B、传输层  C、应用层  D、数据链路层</p><p>33、在 OSI模型中，第 N层和其上的 N＋ l层的关系是 (a  )  。 </p><p>A、N层为N十1层提供服务</p><p>B、N十1层将从N层接收的信息增加了一个头</p><p>C、N层利用N十1层提供的服务</p><p>D、N层对N＋1层没有任何作用  </p><p>34、地址“128.10.0.0”是(   b) 地址。</p><p>A、A类   B、B类   C、C类   D、D类</p><p>35、将IP地址转换为物理地址的协议是( c )</p><p>A、IP   B、ICMP   C、ARP   D、RARP</p><p>36、TCP&#x2F;IP为实现高效率的数据传输，在传输层采用了UDP协议，其传输的可靠性则由(  a) 提供。</p><p>A、应用进程  B、TCP  C、DNS   D、IP</p><p>37、目前实际存在与使用的广域网基本都采用( c )</p><p>A、总线拓扑    B、环型拓扑 C、网状拓扑   D、星形拓扑</p><p>38 、在 OSI 层次体系中，实际的通信是在( a )实体之间进行的。 </p><p>A 、物理层      B 、数据链路层 C 、网络层      D 、传输层 </p><p>39 、IP 地址 192.1.1.2 属于(  )其默认的子网掩码为 d</p><p>A、B 类，255.255.0.0 B、A 类， 255.0.0.0 </p><p>C、C 类， 255.255.0.0 D、C 类，255.255.255.0</p><p>40、在TCP中，连接的建立采用( c  ) 握手的方法。 </p><p>A、一次 B、二次 C、三次 D、四次</p><p>二、填空题</p><p>1、计算机网络按作用范围可分为_____ 网、_____ 网、_____ 网。</p><p>2、广域网由 _____和 _____组成。</p><p>3、X.25协议的分组级相当于OSI参考模型中的_____层，其主要功能是向主机提供多信道的___服务。</p><p>4、OSI的会话层处于______层提供的服务之上，为_______层提供服务。</p><p>5、现在我们常提到的网络体系结构有两种：一是____________，是理论上的标准；另一是____________，它是事实上的工业标准。</p><p>6、将数字信号调制为模拟信号有三种方法即_____、_____、_____。</p><p>7、在局域网中，硬件地址又称为_____或_____地址。 </p><p>8、数据链路层的三个基本问题是_____、_____ 和  _____ 。 </p><p>9、在TCP&#x2F;IP网络中，TCP协议工作在 _____ 层，FTP协议工作在 _____层。</p><p>10、TCP&#x2F;IP 运输层有两个不同的协议，即 _____ 和_____ 。</p><p>11、TCP&#x2F;IP 网络中，物理地址与_____层有关，逻辑地址与 _____层有关，端口地址和 _____层有关。        </p><p>12、在虚电路服务中，任何传输开始前，要先 _____。</p><p>13、在分类IP地址中，_____类地址属多播地址。</p><p>14、专用IP地址只能用做_____地址而不能用做全球地址。 </p><p>15、TCP&#x2F;IP协议族中，位于网络层且能够传输差错和控制报文的协议       。</p><p>16、在TCP&#x2F;IP层次模型的第三层(网络层)中包括的协议主要有IP、ICMP、_______及_______。</p><p>17、当数据报在物理网络中进行传输时，IP地址被转换成____________地址。</p><p>18、一个TCP连接过程分三个阶段，即   _____   、   _____   、   _____  。</p><p>19、WWW上的每一个网页(Home Page)都有一个独立的地址，这些地址称为    _____   。</p><p>20、电子邮件涉及的主要协议有两个:SMTP、   _____  。</p><p>四、简答题</p><p>1、试简述分组交换的要点。</p><p>2、论述计算机网络按照不同的分类标准的结果。 </p><p>3、简述OSI七层模型每层简单功能。</p><p>4、简述数据链路层的三个问题为什么都必须加以解决？</p><p>5、简述以太网的介质访问控制方式的工作原理。</p><p>6、IP地址是怎样定义的？一共分为几类？怎样辨别？</p><p>7、什么是子网掩码？255.255.255.0代表什么意思？</p><p>参考答案：</p><p>一、选择题</p><p>1、A 2、B 3、D 4、C 5、B 6、C 7、C 8、C 9、A 10、B 11、C 12、C 13、D 14、D 15、D 16、D 17、B 18、D </p><p>19、B 20、A 21、A 22、C 23、D 24、A 25、D 26、D 27、C 28、C 29、B 30、B 31、D 32、A 33、A 34、B 35、C 36、A 37、C 38、A 39、D 40、C</p><p>二、填空题</p><p>1、广域网、局域网、城域网。</p><p>2、一些接点交换机、连接这些交换机的链路。</p><p>3、网络虚电路</p><p>4、运输  表示</p><p>5、OSI、TCP&#x2F;IP</p><p>6、即调频、调幅、调相。 </p><p>7、物理地址、MAC地址。 </p><p>8、封装成帧、透明传输、差错监测</p><p>9、传输层，应用。</p><p>10、用户数据报协议UDP、传输控制协议TCP。 </p><p>11、数据链路、网络、传输</p><p>12、建立连接 。</p><p>13、D </p><p>14、本地 </p><p>15、ICMP</p><p>16、ARP RARP。 </p><p>17、物理</p><p>18、连接建立 、数据传输、连接释放 。</p><p>19、统一资源定位器(URL) </p><p>20、POP3。</p><p>四、简答题</p><p>1、（1）报文分组，加首部</p><p>（2）经路由器存储转发</p><p>（3）在目的地合并</p><p>（分组交换的优点有：</p><p>1）节点暂时存储的是一个个分组，而不是整个数据文件。</p><p>2）分组暂时保存在节点的内存中，保证了较高的交换速率。</p><p>3）动态分配信道，极大的提高了通信线路的利用率。</p><p>分组交换的缺点有：</p><p>1）分组在节点转发时因排队而造成一定的延时</p><p>2）分组必须携带一些控制信息而产生额外开销，管理控制比较困难。）</p><p>2、 按网络节点分布：局域网、城域网、广域网。</p><p>按网络拓扑结构：总线型、星型、环型以及混合型拓扑结构。</p><p>按传输介质：有线网、光纤网、无线网。</p><p>3、1)物理层：传递比特数据流（硬件接口等）        </p><p>2)数据链路层：数据帧的传输（节点到节点）</p><p>3)网络层：数据分组的传输（路由选择，寻址，检验等） </p><p>4)传输层：数据报文的传输（端到端）</p><p>5)会话层：负责数据单元的管理（连接，通信控制等）  </p><p>6)表示层：数据表示的处理（编码，加密，解压缩等）</p><p>7)应用层：面向应用的管理（网络和应用程序得交互等）</p><p>4、帧定界是分组交换的必然要求；</p><p>透明传输避免消息符号与帧定界符号相混淆</p><p>差错检测防止差错的无效数据帧浪费后续路由上的传输和处理资源。</p><p>5、以太网的介质访问控制方式是CSMA&#x2F;CD，其工作原理是：</p><p>1）发送数据：</p><p>先听后发、边听边发、冲突停止、延长再发</p><p>2）接收数据：</p><p>所有以太网上的网络节点一直持续在监听网络上的数据，一旦有载波出现，就开始从网路上截获数据，从截获的数据中取出目的MAC地址，如果目的MAC地址是自己，就删除MAC地址，并把数据向上层协议传递。</p><p>6、IP地址::&#x3D;{&lt;网络号&gt;,&lt;主机号&gt;}</p><p>IP地址由网络号和主机号组成，总共32位，共分为A、B、C、D和E五类。</p><p>A类：网络号占8位，且最前面一位为0，主机号占24位。</p><p>B类：网络号占16位，且最前面两位为10，主机号占16位。</p><p>C类：网络号占24位，且最前面三位为110，主机号占8位。</p><p>D类：最前面四位为1110，用于多播。</p><p>E类：最前面四位为1111，保留为以后用</p><p>7、子网掩码能够表示IP地址中的主机地址段怎样划分子网地址和主机号。子网掩码规定了全1的为网络号，全0的为主机号。</p><p>子网掩码255.255.255.0代表C类IP地址默认子网掩码。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能原理复习4</title>
      <link href="/2024/06/19/ren-gong-zhi-neng-yuan-li-fu-xi-4/"/>
      <url>/2024/06/19/ren-gong-zhi-neng-yuan-li-fu-xi-4/</url>
      
        <content type="html"><![CDATA[<h2 id="Constraint-Satisfaction-Problems"><a href="#Constraint-Satisfaction-Problems" class="headerlink" title="Constraint Satisfaction Problems"></a>Constraint Satisfaction Problems</h2><p>What is a csp? guess<br>coloring problem; why does this make sense as problem? silly but good representation for real world problems, e.g. scheduling tasks that need resources – can’t run 2 tasks at the same time if they need the same resource<br>CSPs as a search problem?</p><h3 id="What-is-Search-For"><a href="#What-is-Search-For" class="headerlink" title="What is Search For?"></a>What is Search For?</h3><p>Assumptions about the world: a single agent, deterministic actions, fully observed state, discrete state space</p><p>Planning: sequences of actions<br>The path to the goal is the important thing<br>Paths have various costs, depths<br>Heuristics give problem-specific guidance</p><p>Identification: assignments to variables<br>The goal itself is important, not the path<br>All paths at the same depth (for some formulations)<br>CSPs are specialized for identification problems</p><p>Step back – these are search problems, so we can now take a look at different problems we can use search for<br>Before we had planning;<br>Ninja robot knows where the gem is, but not how to get there<br>Identification; detective robot wants to know where the gem is – the goal is important, not the path; what is the depth?</p><p><img src="https://pic.imgdb.cn/item/6671b857d9c307b7e927ea35.png" alt="![!\[\](https://pic.imgdb.cn/item/6671b857d9c307b7e927ea35.png)](https://pic.imgdb.cn/item/6671b857d9c307b7e927ea35.png)"></p><h3 id="Constraint-Satisfaction-Problems-1"><a href="#Constraint-Satisfaction-Problems-1" class="headerlink" title="Constraint Satisfaction Problems"></a>Constraint Satisfaction Problems</h3><p>Standard search problems:<br>State is a “black box”: arbitrary data structure<br>Goal test can be any function over states<br>Successor function can also be anything</p><p>Constraint satisfaction problems (CSPs):<br>A special subset of search problems<br>State is defined by variables Xi  with values from a domain D (sometimes D depends on i)<br>Goal test is a set of constraints specifying allowable combinations of values for subsets of variables</p><p>Allows useful general-purpose algorithms with more power than standard search algorithms</p><p>Before: states were nodes, no structure, just a set, they could be anything<br>Goal test – like a judge; just makes decisions; you don’t know how;<br>Now: Goal test has structure, it ‘s more like a manual describing a set of constraints that have to hold true</p><p><img src="https://pic.imgdb.cn/item/6671b8b5d9c307b7e928b9ab.png" alt="alt text"></p><h3 id="CSP-Examples"><a href="#CSP-Examples" class="headerlink" title="CSP Examples"></a>CSP Examples</h3><p>I want you to practice formalizing real problems as search&#x2F;csp problems</p><p><img src="https://pic.imgdb.cn/item/6671b8fad9c307b7e9295764.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6671b915d9c307b7e9299415.png" alt="alt text"></p><p>How do you specify constraints in code&#x2F;math? Implicit vs explicit. What might be explicit?</p><p><img src="https://pic.imgdb.cn/item/6671b948d9c307b7e92a0c64.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6671b962d9c307b7e92a4aa5.png" alt="alt text"></p><p>Binary CSP: each constraint relates (at most) two variables</p><p>Binary constraint graph: nodes are variables, arcs show constraints</p><p>General-purpose CSP algorithms use the graph structure to speed up search. E.g., Tasmania is an independent subproblem!</p><p>Demo:</p><p>Run constraint.jar or constraint.exe, load the 5 queens problem.<br>Demo is just showing the n-queens applet as illustration of constraint graph, but later in lecture we’ll interact with the applet.<br>aispace.org will have the latest version</p><p><img src="https://pic.imgdb.cn/item/6671b980d9c307b7e92a9c0c.png" alt="alt text"></p><p>Are these constraints enough? No, there should be N queens there.</p><p><img src="https://pic.imgdb.cn/item/6671b99dd9c307b7e92ae97e.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6671b9afd9c307b7e92b2171.png" alt="alt text"></p><p>0&#x3D;7, R&#x3D;4, W&#x3D;6, U&#x3D;2, T&#x3D;8, F&#x3D;1; 867 + 867 &#x3D; 1734</p><p><img src="https://pic.imgdb.cn/item/6671b9d0d9c307b7e92b84f6.png" alt="alt text"></p><h3 id="Varieties-of-CSPs-and-Constraints"><a href="#Varieties-of-CSPs-and-Constraints" class="headerlink" title="Varieties of CSPs and Constraints"></a>Varieties of CSPs and Constraints</h3><p>Varieties of CSPs</p><p>Discrete Variables (today)<br>Finite domains<br>Size d means O(dn) complete assignments<br>E.g., Boolean CSPs, including Boolean satisfiability (NP-complete)<br>Infinite domains (integers, strings, etc.)<br>E.g., job scheduling, variables are start&#x2F;end times for each job<br>Linear constraints solvable, nonlinear undecidable  </p><p>Continuous variables<br>E.g., start&#x2F;end times for Hubble Telescope observations<br>Linear constraints solvable in polynomial time by LP methods</p><p><img src="https://pic.imgdb.cn/item/6671ba4dd9c307b7e92cb492.png" alt="alt text"></p><p>Varieties of Constraints<br>Unary constraints involve a single variable (equivalent to reducing domains), e.g.:  </p><p>Binary constraints involve pairs of variables, e.g.:  </p><p>Higher-order constraints involve 3 or more variables:<br>       e.g., cryptarithmetic column constraints  </p><p>Preferences (soft constraints):<br>E.g., red is better than green<br>Often representable by a cost for each variable assignment<br>Gives constrained optimization problems<br>(We’ll ignore these until we get to Bayes’ nets)  </p><h3 id="Real-World-CSPs"><a href="#Real-World-CSPs" class="headerlink" title="Real-World CSPs"></a>Real-World CSPs</h3><p>Assignment problems: e.g., who teaches what class<br>Timetabling problems: e.g., which class is offered when and where?<br>Hardware configuration<br>Transportation scheduling<br>Factory scheduling<br>Circuit layout<br>Fault diagnosis<br>… lots more!  </p><p>Many real-world problems involve real-valued variables…</p><h3 id="Origin-The-Waltz-Algorithm"><a href="#Origin-The-Waltz-Algorithm" class="headerlink" title="Origin: The Waltz Algorithm"></a>Origin: The Waltz Algorithm</h3><p>The Waltz algorithm is for interpreting line drawings of solid polyhedra as 3D objects</p><p>An early example of an AI computation posed as a CSP </p><p>Approach:</p><p>Each intersection is a variable<br>Adjacent intersections impose constraints on each other<br>Solutions are physically realizable 3D interpretations  </p><h3 id="Guzman-Find-the-Problem"><a href="#Guzman-Find-the-Problem" class="headerlink" title="Guzman: Find the Problem"></a>Guzman: Find the Problem</h3><p>Question: how to detect the number of objects by machine？</p><p><img src="https://pic.imgdb.cn/item/6671bd14d9c307b7e932a47d.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6671bd28d9c307b7e932e088.png" alt="alt text"></p><h3 id="回溯搜索"><a href="#回溯搜索" class="headerlink" title="回溯搜索"></a>回溯搜索</h3><p>在深度优先搜索的基础上增加如下改进：</p><p>1、每次只考虑一个变量</p><p>2、可以随时检查约束（增加测试函数）</p><p><img src="https://pic.imgdb.cn/item/66754b03d9c307b7e9f974b4.png" alt="alt text"></p><p>Backtracking &#x3D; DFS + variable-ordering + fail-on-violation</p><h3 id="Improving-Backtracking"><a href="#Improving-Backtracking" class="headerlink" title="Improving Backtracking"></a>Improving Backtracking</h3><p>Ordering: </p><p>o Which variable should be assigned next?</p><p>o In what order should its values be tried?</p><h3 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h3><p>Keep track of domains for unassigned variables and cross off bad options</p><h4 id="Filtering-Forward-Checking"><a href="#Filtering-Forward-Checking" class="headerlink" title="Filtering: Forward Checking"></a>Filtering: Forward Checking</h4><p>o Filtering: Keep track of domains for unassigned variables and cross off bad options</p><p>o Forward checking: Cross off values that violate a constraint when added to the existing assignment</p><h3 id="Constraint-Propagation"><a href="#Constraint-Propagation" class="headerlink" title="Constraint Propagation"></a>Constraint Propagation</h3><p>约束传播</p><p>核心思想：局部相容性</p><p>一元约束：只限制单个变量的取值 </p><p>二元约束：与两个变量有关</p><p>变量个数任意的约束称为全局约束</p><h4 id="节点相容"><a href="#节点相容" class="headerlink" title="节点相容"></a>节点相容</h4><p>单个变量（对应一个节点）值域中的所有取值满足它的一元约束，就是节点相容的。</p><h4 id="弧相容"><a href="#弧相容" class="headerlink" title="弧相容"></a>弧相容</h4><p>如果CSP中某变量值域中所有取值满足该变量所有二元约束，则此变量弧相容</p><p>弧相容算法AC-3</p><p>弧相容可能缩小变量的值域，有时甚至还能找到解（每个变量值域大小都为1时），或者有时发现CSP无解（一些变量的值域大小&#x3D;0）</p><p>路径相容（路径一致性，也就是下面k&#x3D;3的情况）：观察变量得到隐式约束，并以此来加强二元约束</p><p><img src="https://pic.imgdb.cn/item/66755064d9c307b7e9060e40.png" alt="alt text"></p><p>k-相容：如果对于任何k-1个变量的相容赋值，第k个变量总能被赋予一个和前k-1个变量相容的值，那么这个CSP就是k相容的。</p><p>k越高，计算成本越高</p><p>k一致性</p><p>k&#x3D;2的情况：弧一致性（弧相容）</p><p>部分赋值的回溯搜索算法： </p><p>可以用标准的<strong>深度优先搜索</strong>，状态可能是部分赋值，行动是将var&#x3D;value加入到赋值中。<br>回溯搜索用于深度优先搜索中，每次为一个变量选一个赋值，没有合法的值的时候就回溯。</p><h3 id="有效解决CSP"><a href="#有效解决CSP" class="headerlink" title="有效解决CSP"></a>有效解决CSP</h3><h4 id="变量和取值顺序"><a href="#变量和取值顺序" class="headerlink" title="变量和取值顺序"></a>变量和取值顺序</h4><h2 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h2><p>1）选择“合法”取值最少的变量——称为最少剩余值（MRV）启发式。（做一个强有力的引导，方便提早遇到失败，从而剪枝）</p><p>2）度启发式：通过选择与其他未赋值变量约束最多的变量来试图降低未来的分支因子。（用来打破僵局，如选择第一个着色区域）</p><p>“Fail-fast” ordering</p><blockquote><p>总结一下，对于变量的选择原则是：可选变量最少、约束冲突最多的变量先安排！</p></blockquote><h2 id="值："><a href="#值：" class="headerlink" title="值："></a>值：</h2><p>最少约束值：优先选择的赋值是给邻居变量留下更多的选择</p><h2 id="搜索与推理交错进行"><a href="#搜索与推理交错进行" class="headerlink" title="搜索与推理交错进行"></a>搜索与推理交错进行</h2><p>前向检验：只要变量X被赋值，就对它进行弧相容检查，对每个通过约束与X相关的未赋值变量Y，从Y值域中删去与X不相容的值。</p><p>智能回溯：向后看<br>主要概念：前向检验；冲突集；回跳</p><p>【参考资料】</p><p><a href="http://t.csdnimg.cn/ck8s2">http://t.csdnimg.cn/ck8s2</a></p><p><a href="http://t.csdnimg.cn/keaAl">http://t.csdnimg.cn/keaAl</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法分析与设计期末复习</title>
      <link href="/2024/06/18/suan-fa-fen-xi-yu-she-ji-qi-mo-fu-xi/"/>
      <url>/2024/06/18/suan-fa-fen-xi-yu-she-ji-qi-mo-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="第1章-概论"><a href="#第1章-概论" class="headerlink" title="第1章 概论"></a>第1章 概论</h2><h3 id="1-1-算法的概念"><a href="#1-1-算法的概念" class="headerlink" title="1.1 算法的概念"></a>1.1 算法的概念</h3><h4 id="1-1-1-什么是算法"><a href="#1-1-1-什么是算法" class="headerlink" title="1.1.1 什么是算法"></a>1.1.1 什么是算法</h4><p>P3 页有算法的 5 个重要特性，通过它们判断一段程序是否为算法。</p><p>算法的5个重要特性：</p><p>（1）有限性：一个算法在执行有限步之后结束，每一步在有限时间内完成<br>（2）确定性：算法中的每一条指令有明确的含义，不会产生歧义<br>（3）可行性：算法中的每一条运算都是足够基本的，他们在原则上都能精确的执行<br>（4）输入性：一个算法有零个或多个输入<br>（5）输出性：一个算法有一个或多个输出  </p><p>P2 页则有 5 个算法设计的目标，衡量一个算法的优劣。结合例子代码去理解。</p><p>算法设计应满足的目标：</p><p>（1）正确性：要求算法能够正确的执行预先规定的功能和性能要求，这是最重要也是最基本的标准<br>（2）可使用性：要求算法能够很方便的使用，（用户友好性）<br>（3）可读性：算法应该易于人的理解，可读性好，算法的逻辑应该清晰、简单、结构化<br>（4）健壮性：要求算法有很好的容错性，即提供异常处理，能够对不合理的数据进行检查，不经常出现异常中断或死机等情况<br>（5）高效率和低存储量需求：效率—算法的执行时间   存储量—-算法执行过程中需要的最大存储空间     效率和低存储量都和问题的规模有关  </p><p>例子代码看书</p><h4 id="1-1-2-算法描述"><a href="#1-1-2-算法描述" class="headerlink" title="1.1.2 算法描述"></a>1.1.2 算法描述</h4><p>除了用<strong>代码</strong>描述算法，还可以用<strong>伪代码</strong>、<strong>自然语言</strong>等。其它内容基本没用。</p><p>总结：算法描述的方式有：</p><blockquote><p>代码、伪代码、自然语言</p></blockquote><h4 id="1-1-3-算法和数据结构"><a href="#1-1-3-算法和数据结构" class="headerlink" title="1.1.3 算法和数据结构"></a>1.1.3 算法和数据结构</h4><p>掌握联系与区别</p><p>算法的操作对象是数据结构</p><p>联系:一种数据结构包括逻辑结构、存储结构、算法(运算)三要素。</p><p>区别:没有本质区别。本课程介绍的算法主要面向具体的、实际的问题</p><h4 id="1-1-4-算法设计的基本步骤"><a href="#1-1-4-算法设计的基本步骤" class="headerlink" title="1.1.4 算法设计的基本步骤"></a>1.1.4 算法设计的基本步骤</h4><p>基本没用。</p><p>不过，能看到 P6 页，图 1.5 中，算法设计的最后一步是“算法分析”，可以有一点启示，这里的“分析”是分析算法复杂度，来评估其效率。而不是有人认为的分析问题，以找到解决问题的途径。</p><h3 id="1-2-算法分析"><a href="#1-2-算法分析" class="headerlink" title="1.2 算法分析"></a>1.2 算法分析</h3><p>目的是分析某算法的时间或空间效率处于什么级别。</p><p>设该算法处理的数据规模为 n,则用函数 f(n)表示算法中<strong>基本语句</strong>的执行次数(或占用的空间大小)，则算法分析就是分析随 n值增大时，f(n)的增长率级别，比如是处于log2(n),n,n^2等哪个级别。</p><p>下面举例说明为什么“级别”这么重要:</p><p>设有一个 n元素的数组，有2个功能一样的查找算法 A、B，A的级别是n,B的级别是n^2, 则数组长度由 10 增长到 20，A算法的基本语句执行次数增长 1倍，若要达到以前一样的速度，可以用双核 CPU;B算法的基本语句执行次数增长 10 倍，若要达到以前一样的速度，必须用 10 核 CPU。数据量增长一倍，硬件资源投入需增加 10 倍，若数据量很大，则很困难。</p><p>B 为什么增长10倍而不是4倍？</p><h4 id="1-2-1-算法时间复杂度分析"><a href="#1-2-1-算法时间复杂度分析" class="headerlink" title="1.2.1 算法时间复杂度分析"></a>1.2.1 算法时间复杂度分析</h4><p>基本语句的定义:</p><p>某算法中执行频度最高的语句（这是老师复习资料中的定义）</p><p>课本上关于基本语句的定义是：</p><p>执行次数与整个算法的执行次数成正比的语句，通常基本语句是算法中最深层循环内的语句</p><p>下面的代码将矩阵对角线元素相加，第5行为基本语句，f(n)&#x3D;n.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Sum</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    t=t+a[i]*i;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若将循环改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> k=a[i]*i;</span><br><span class="line">  t=t+k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则这两句都是基本语句</p><p>这时f（n）&#x3D;2n，或f（n）&#x3D;n都可以，采用后面这种形式，</p><p>“基本语句“代表频度最高语句的集合。无论采取哪种，后续在分析复杂度时，结果是一样的。</p><p>求出f（n）后，若它是一个和式，则只保留<strong>最高级别的项</strong>，并去掉常数系数就是复杂度。比如:</p><p>某算法的f（n）&#x3D;10n^2+1000n+10000，则它的复杂度为O（n^2），这句话也记作</p><p>f（n）&#x3D;O（n^2）（注：这里等号的含义表示某算法复杂度，不是通常数学含义）</p><p>若f（n）&#x3D;10000，则算法复杂度为f（n）&#x3D;0（1）</p><p>P12页递归算法的时间复杂度分析比较常用，应掌握。结合例子，看看怎么根据代码写出T（n）的递推关系式，然后展开，观察特点，化简。</p><h4 id="1-2-2算法空间复杂度分析"><a href="#1-2-2算法空间复杂度分析" class="headerlink" title="1.2.2算法空间复杂度分析"></a>1.2.2算法空间复杂度分析</h4><p>算法占用的空间只计算临时空间。</p><p>比如上面这两个算法比较，由于它们都一定包括输入的数组a，因此比较时就不需要计入数组a的空间了。</p><p>对下面的函数而言，由于任何的函数调用，都需要系统的压栈操作，以保存返回地址等信息。因此它的空间复杂度时O（1），不是零。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fac</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3算法设计工具——STL"><a href="#1-3算法设计工具——STL" class="headerlink" title="1.3算法设计工具——STL&#x2F;"></a>1.3算法设计工具——STL&#x2F;</h3><p>知道C++模板概念或Java泛型的同学可以不看。</p><p>本课程只用到vector,queen,priority_quene 这三个，见P16页的表，P18开始有一些示例代码。</p><p>教材后面代码涉及的STL相关知识比较浅显。</p><h2 id="第2章递归算法设计技术"><a href="#第2章递归算法设计技术" class="headerlink" title="第2章递归算法设计技术"></a>第2章递归算法设计技术</h2><h3 id="2-1什么是递归"><a href="#2-1什么是递归" class="headerlink" title="2.1什么是递归"></a>2.1什么是递归</h3><h4 id="2-1-1递归的定义"><a href="#2-1-1递归的定义" class="headerlink" title="2.1.1递归的定义&#x2F;"></a>2.1.1递归的定义&#x2F;</h4><p>有三个术语：递归，间接递归，尾递归。</p><p>【术语理解】</p><p>如果一个递归过程或者递归函数中的递归调用语句是<strong>最后一条执行语句</strong>，称这种递归调用为<strong>尾递归</strong></p><p>若p函数定义中调用了p函数，称为<strong>直接递归</strong></p><p>若p函数定义调用了q函数，而q函数定义调用了p函数，称之为<strong>间接递归</strong></p><p>任何间接递归都可以等价的转化为直接递归，本章主要讨论直接递归</p><h4 id="2-1-2何时使用递归"><a href="#2-1-2何时使用递归" class="headerlink" title="2.1.2何时使用递归"></a>2.1.2何时使用递归</h4><p>（1）定义是递归的</p><p>斐波那契数列，求n!等问题，许多数学公式、数列、概念的定义是递归的</p><p>（2）数据结构是递归的  </p><p>单链表就是一种递归的数据结构、二叉树的二叉链存储结构</p><p>（3）问题的求解方式是递归的</p><p>如汉诺塔问题</p><p>要解决的问题能够分解成更小规模的子问题，子问题与原问题间有<strong>相似性</strong>时，可使用递归。</p><p>这种相似性，按照实际问题的特点，又分成 定义递归、结构递归、步骤递归。结合阶乘、单链表、汉诺塔去理解。</p><h4 id="2-1-3递归模型"><a href="#2-1-3递归模型" class="headerlink" title="2.1.3递归模型"></a>2.1.3递归模型</h4><p>模型包括2部分：递归出口（终止条件），递归体。教材上按照“问题“定义的方式来举例,不看也行，我们知道一个递归程序中，递归出口与递归体分别是哪一段就可以。</p><h4 id="2-1-4递归算法的执行过程"><a href="#2-1-4递归算法的执行过程" class="headerlink" title="2.1.4递归算法的执行过程"></a>2.1.4递归算法的执行过程</h4><p>函数f（x）函数调用g（y）时，需要将g（y）返回后将要用到的信息压栈（自动进行）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: <span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">2:&#123;</span><br><span class="line"><span class="number">3</span>:  <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="number">4</span>:  t=x+g(x+<span class="number">1</span>);</span><br><span class="line"><span class="number">5</span>:  <span class="keyword">return</span> t;</span><br><span class="line"><span class="number">6</span>:&#125;</span><br></pre></td></tr></table></figure><p>需要压栈的信息有形参x，局部变量t，返回时，需要将g的返回值压栈。这样f恢复后从第4行接着执行时，需要的信息都从栈顶取得。</p><p>递归调用时，要一层层地压栈。结合教材上的例子，看看究竟栈是如何变化的</p><h3 id="2-2递归算法设计"><a href="#2-2递归算法设计" class="headerlink" title="2.2递归算法设计"></a>2.2递归算法设计</h3><h4 id="2-2-1递归与数学归纳法"><a href="#2-2-1递归与数学归纳法" class="headerlink" title="2.2.1递归与数学归纳法"></a>2.2.1递归与数学归纳法</h4><p>数学归纳法与递归算法的联系很弱，不看。</p><h4 id="2-2-2递归算法设计的一般步骤"><a href="#2-2-2递归算法设计的一般步骤" class="headerlink" title="2.2.2递归算法设计的一般步骤"></a>2.2.2递归算法设计的一般步骤</h4><p>递归算法的设计能力依赖于经验，多看多练，记忆步骤并没什么用。只看例2.5增加经验值。</p><p>例2.5 用递归法求一个整数数组a中的最大元素</p><p>设f(a,i)求解数组a中前i个元素（a[0]…a[i-1]）中的最大元素，这是一个大问题;</p><p>则f(a,i-1)为求解数组a中前i-1个元素（a[0]…a[i-2]）中的最大元素，这是一个小问题;</p><p>只考虑第一个元素时的情况  f(a,1)&#x3D;a[0]  </p><p>当i&gt;1时，f(a,i)&#x3D;MAX{f(a,i-1),a[i-1]}</p><p>对应的递归算法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fmax</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> t)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> max(fmax(a,i<span class="number">-1</span>),a[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3递归数据结构及其递归算法设计"><a href="#2-2-3递归数据结构及其递归算法设计" class="headerlink" title="2.2.3递归数据结构及其递归算法设计"></a>2.2.3递归数据结构及其递归算法设计</h4><p>看每个例题增加经验值，文字一概不看。</p><p>递归数据结构：采用递归方式定义的数据结构称为递归数据结构</p><p>例如正整数的定义：n是正整数，则n+1也为正整数   n+1是一种基本的递归运算</p><p>递归运算具有封闭性</p><p>基于递归数据结构的递归算法设计</p><p>例题一：一个不带头节点的单链表L，设计一个算法释放其中的所有节点</p><p>递归模型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(L)=不做任何事   当L==<span class="literal">NULL</span>时</span><br><span class="line">f(L)=f(L-&gt;next); 释放*L节点  其他情况</span><br></pre></td></tr></table></figure><p>递归算法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DestroyList</span><span class="params">(LinkNode *&amp;L)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(L!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    DestroyList(L-&gt;next);</span><br><span class="line">    <span class="built_in">free</span>(L);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码逻辑上先挖到最底层，然后从最底层的一个节点开始释放，然后再退回起始节点，其实这里可以换一种思路来实现，如下所示(与下面的例题二统一了形式，更好理解)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DestroyList</span><span class="params">(LinkNode *&amp;L)</span></span><br><span class="line">&#123;</span><br><span class="line">  LinkNode *p;</span><br><span class="line">  <span class="keyword">if</span>(L!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    p=L;</span><br><span class="line">    L=L-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    DestroyList(L);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个算法相对更好一些，因为它在每次递归调用后立即释放当前节点，能更及时地回收内存。</p><p>例题二：设计一个算法删除其中所有节点值为x的节点</p><p>递归模型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(L,x)=不做任何事                 当L=<span class="literal">NULL</span>时</span><br><span class="line">f(L,x)=删除L节点，L指向后继节点    当L-&gt;data=x时</span><br><span class="line">f(L,x)=f(L-&gt;next,x)              当L-&gt;data!=x时</span><br></pre></td></tr></table></figure><p>递归算法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delallx</span><span class="params">(LinkNode *&amp;L,ElemType x)</span></span><br><span class="line">&#123;</span><br><span class="line">  LinkNode *p;</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;data==x)</span><br><span class="line">  &#123;</span><br><span class="line">    p=L;</span><br><span class="line">    L=L-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    Delallx(L,x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> Delallx(L-&gt;next,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题三：对于含有n个节点的二叉树，所有节点值为int类型，设计一个算法由其先序序列a和中序序列b创建对应的二叉链存储结构。</p><p>例题四：假设二叉树采用二叉链存储结构，设计一个递归算法释放二叉树bt中的所有节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DestroyBTree</span><span class="params">(BTNode *&amp;bt)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(bt!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    DestroyBTree(bt-&gt;lchild);</span><br><span class="line">    DestroyBTree(bt-&gt;rchild);</span><br><span class="line">    <span class="built_in">free</span>(bt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题五：由二叉树bt复制产生另一个二叉树bt1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CopyBTree</span><span class="params">(BTNode *bt,BTNode *&amp;bt1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">    bt1=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    bt1=(BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    bt1-&gt;data=bt-&gt;data;</span><br><span class="line">    CopyBTree(bt-&gt;lchild,bt1-&gt;lchild);</span><br><span class="line">    CopyBTree(bt-&gt;rchild,bt1-&gt;rchild);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4基于归纳思想的递归算法设计"><a href="#2-2-4基于归纳思想的递归算法设计" class="headerlink" title="2.2.4基于归纳思想的递归算法设计"></a>2.2.4基于归纳思想的递归算法设计</h4><p>例题不典型，不看。</p><h3 id="2-3递归算法设计示例"><a href="#2-3递归算法设计示例" class="headerlink" title="2.3递归算法设计示例"></a>2.3递归算法设计示例</h3><h4 id="2-3-1简单选择排序和冒泡排序"><a href="#2-3-1简单选择排序和冒泡排序" class="headerlink" title="2.3.1简单选择排序和冒泡排序"></a>2.3.1简单选择排序和冒泡排序</h4><p>增加经验值。体会大数组的排序，转变成小数组的排序。</p><p>例题一：简单选择排序:在无序区选择最小元素放在开头处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单选择排序递归算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SelectSort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> j,k;</span><br><span class="line">  <span class="keyword">if</span>(i==n<span class="number">-1</span>) <span class="keyword">return</span>;   <span class="comment">//数组范围是a[i]到a[n-1]共n-i个元素</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    k=i;</span><br><span class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)   <span class="comment">//从i后面找到最小的元素的下标，记为k</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[j]&lt;a[k])</span><br><span class="line">        k=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k!=i)    <span class="comment">//最小元素不是a[i]</span></span><br><span class="line">      swap(a[i],a[k]);  <span class="comment">//交换两个元素，这里不展示</span></span><br><span class="line">    SelectSort(a,n,i+<span class="number">1</span>);</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题二：冒泡排序：采用交换的方式将无序区中最小的元素放到开头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序递归算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> j;</span><br><span class="line">  bllo exchang;</span><br><span class="line">  <span class="keyword">if</span>(i==n<span class="number">-1</span>) <span class="keyword">return</span>;   <span class="comment">//满足递归出口条件</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    exchang=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[j]&lt;a[j<span class="number">-1</span>])   <span class="comment">//当相邻元素反序时</span></span><br><span class="line">      &#123;</span><br><span class="line">        swap(a[j],a[j<span class="number">-1</span>]);</span><br><span class="line">        exchang=<span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(exchang==<span class="literal">false</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      BubbleSort(a,n,i+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉递归的冒泡排序更复杂一点呢，怎么说呢，不是很喜欢……</p><h4 id="2-3-2求解n皇后问题"><a href="#2-3-2求解n皇后问题" class="headerlink" title="2.3.2求解n皇后问题"></a>2.3.2求解n皇后问题</h4><p>增加经验值。体会大棋盘，转变成小棋盘。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求解n皇后问题的递归模型</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">queen</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&gt;n)</span><br><span class="line">    dispasolution(n);    <span class="comment">//皇后放置结束，输出结果，不展示</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)   <span class="comment">//在第i行试探每一列j</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(place(i,j))   <span class="comment">//找到合适的位置（i，j）</span></span><br><span class="line">      &#123;</span><br><span class="line">        q[i]=j;  </span><br><span class="line">        queen(i+<span class="number">1</span>,n);  <span class="comment">//递归，这里没啥说的，简单</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-递归算法转化为非递归算法"><a href="#2-4-递归算法转化为非递归算法" class="headerlink" title="2.4*递归算法转化为非递归算法"></a>2.4*递归算法转化为非递归算法</h3><h4 id="2-4-1用循环结构替代递归过程"><a href="#2-4-1用循环结构替代递归过程" class="headerlink" title="2.4.1用循环结构替代递归过程"></a>2.4.1用循环结构替代递归过程</h4><p>直接转换法适合尾递归。想想为什么？</p><p>尾递归只有一个递归调用语句，而且是处于算法的最后，当递归调用返回时返回到上一层再递归调用下一句语句，而这个返回的位置正好是算法的末尾</p><p>采用循环结构求解n!的非递归算法如下：(属于尾递归)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun1</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> f=<span class="number">1</span>,i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    f=f*i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用循环结构求解斐波那契数列的非递归算法如下：（属于单向递归）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">F</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i,f1,f2,f3;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  f1=<span class="number">1</span>,f2=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    f3=f1+f2;</span><br><span class="line">    f1=f2;</span><br><span class="line">    f2=f3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2用栈消除递归过程"><a href="#2-4-2用栈消除递归过程" class="headerlink" title="2.4.2用栈消除递归过程"></a>2.4.2用栈消除递归过程</h4><p>代替函数调用使用的系统栈，是对函数调用过程的模拟，通过教材上的例子体会。</p><h3 id="2-5递推式的计算"><a href="#2-5递推式的计算" class="headerlink" title="2.5递推式的计算"></a>2.5递推式的计算</h3><p>递归算法的复杂度分析时，其<strong>基本语句的执行次数写成递推式</strong>，要化简后才能得到复杂度。第一章通过将递推式展开，来寻找数列的规律，然后求和的方法来做到这一点。这里提供了更一般化的方法。</p><h4 id="2-5-1用特征方程求解递归方程"><a href="#2-5-1用特征方程求解递归方程" class="headerlink" title="2.5.1用特征方程求解递归方程"></a>2.5.1用特征方程求解递归方程</h4><p>不常用，不看。</p><h4 id="2-5-2用递归树求解递归方程"><a href="#2-5-2用递归树求解递归方程" class="headerlink" title="2.5.2用递归树求解递归方程"></a>2.5.2用递归树求解递归方程</h4><p>常用。</p><p>例题：分析以下递归方程的时间复杂度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T(n)=<span class="number">1</span>             当n=<span class="number">1</span>时</span><br><span class="line">T(n)=<span class="number">2</span>T(n/<span class="number">2</span>)+n^<span class="number">2</span>   当n&gt;<span class="number">1</span>时</span><br></pre></td></tr></table></figure><p>时间复杂度为：O（n^2）,详见课本P77</p><p>课本还有一个例题也值得关注下！</p><h4 id="2-5-3用主方法求解递归方程"><a href="#2-5-3用主方法求解递归方程" class="headerlink" title="2.5.3用主方法求解递归方程"></a>2.5.3用主方法求解递归方程</h4><p>常用。 </p><p>一般方法</p><p>看书P78</p><h2 id="第3章分治法"><a href="#第3章分治法" class="headerlink" title="第3章分治法"></a>第3章分治法</h2><h3 id="3-1分治法概述"><a href="#3-1分治法概述" class="headerlink" title="3.1分治法概述"></a>3.1分治法概述</h3><h4 id="3-1-1分治法的设计思想"><a href="#3-1-1分治法的设计思想" class="headerlink" title="3.1.1分治法的设计思想"></a>3.1.1分治法的设计思想</h4><p>P84页本小节第1段，是分治法的定义。后面看到具体实例的时候，要回顾该定义是怎么体现在其中的。别的文字没什么用。</p><h4 id="3-1-2分治法的求解过程"><a href="#3-1-2分治法的求解过程" class="headerlink" title="3.1.2分治法的求解过程"></a>3.1.2分治法的求解过程</h4><p>P85页最上方绿色字体，是三个步骤。其实也是对分治法定义的解析。别的文字没什么<br>用。</p><h3 id="3-2求解排序问题"><a href="#3-2求解排序问题" class="headerlink" title="3.2求解排序问题"></a>3.2求解排序问题</h3><h4 id="3-2-1快速排序"><a href="#3-2-1快速排序" class="headerlink" title="3.2.1快速排序"></a>3.2.1快速排序</h4><p>从数据结构、算法这两门课的角度看，都是经典。其中快排中“划分”这一步骤，应用特别广泛。</p><h4 id="3-2-2归并排序"><a href="#3-2-2归并排序" class="headerlink" title="3.2.2归并排序"></a>3.2.2归并排序</h4><p>归并排序，结合微助教上的“求逆序数”来看。</p><h3 id="3-3求解查找问题"><a href="#3-3求解查找问题" class="headerlink" title="3.3求解查找问题"></a>3.3求解查找问题</h3><h4 id="3-3-1查找和次大元素"><a href="#3-3-1查找和次大元素" class="headerlink" title="3.3.1查找和次大元素"></a>3.3.1查找和次大元素</h4><p>较简单，浏览一下，对理解分治法不错，帮助提高写递归程序的能力</p><h4 id="3-3-2折半查找"><a href="#3-3-2折半查找" class="headerlink" title="3.3.2折半查找"></a>3.3.2折半查找</h4><p>体会分治法可以使用递归与非递归2种形式</p><h4 id="3-3-3寻找一个序列中第k小的元素"><a href="#3-3-3寻找一个序列中第k小的元素" class="headerlink" title="3.3.3寻找一个序列中第k小的元素"></a>3.3.3寻找一个序列中第k小的元素</h4><p>特别重要。以它为基础，可解算法里很多题</p><h4 id="3-3-4寻找两个等长有序序列的中位数"><a href="#3-3-4寻找两个等长有序序列的中位数" class="headerlink" title="3.3.4寻找两个等长有序序列的中位数"></a>3.3.4寻找两个等长有序序列的中位数</h4><p>重要，同时又一定难度。在搞清算法原理的基础上，会觉得比较精妙，看似繁杂的步骤，也不用记忆，很自然就知道怎么解，参考微助教。思考的起点是：一个序列，从它的两端各去掉相同数量的元素，中位数不变</p><p>例3.2不看。</p><h3 id="3-4求解组合问题"><a href="#3-4求解组合问题" class="headerlink" title="3.4求解组合问题"></a>3.4求解组合问题</h3><h4 id="3-4-1求解连续子序列和问题"><a href="#3-4-1求解连续子序列和问题" class="headerlink" title="3.4.1求解连续子序列和问题"></a>3.4.1求解连续子序列和问题</h4><p>比起3.3.1，3.3.2的例子更有启发性的例子。在大致阅读文字，粗浅地了解原理后，阅读代码能更清楚地反映细节。</p><h4 id="3-4-2求解棋盘覆盖问题"><a href="#3-4-2求解棋盘覆盖问题" class="headerlink" title="3.4.2求解棋盘覆盖问题"></a>3.4.2求解棋盘覆盖问题</h4><p>了解原理。体会分治法从一维走向二维</p><h4 id="3-4-3求解循环日程安排问题"><a href="#3-4-3求解循环日程安排问题" class="headerlink" title="3.4.3求解循环日程安排问题"></a>3.4.3求解循环日程安排问题</h4><p>日常有用，对分治法的理解帮助不大，不用看。</p><h3 id="3-5求解大整数乘法和矩阵乘法问题"><a href="#3-5求解大整数乘法和矩阵乘法问题" class="headerlink" title="3.5求解大整数乘法和矩阵乘法问题"></a>3.5求解大整数乘法和矩阵乘法问题</h3><p>不典型，不看。</p><h3 id="3-6并行计算简介"><a href="#3-6并行计算简介" class="headerlink" title="3.6并行计算简介"></a>3.6并行计算简介</h3><p>具体的硬件相关，不看。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能原理复习3</title>
      <link href="/2024/06/18/ren-gong-zhi-neng-yuan-li-fu-xi-3/"/>
      <url>/2024/06/18/ren-gong-zhi-neng-yuan-li-fu-xi-3/</url>
      
        <content type="html"><![CDATA[<h2 id="Informed-Search"><a href="#Informed-Search" class="headerlink" title="Informed Search"></a>Informed Search</h2><p><img src="https://pic.imgdb.cn/item/6670e7cfd9c307b7e97e7f48.png" alt="alt text"></p><p>Blind search vs. “warmer” “colder”<br>Info about where goal is.<br>Optimal solution, explore less of the tree.  </p><h2 id="Search-Heuristics"><a href="#Search-Heuristics" class="headerlink" title="Search Heuristics"></a>Search Heuristics</h2><p>A heuristic is:<br>A function that estimates how close a state is to a goal<br>Designed for a particular search problem<br>Pathing?<br>Examples: Manhattan distance, Euclidean distance for pathing  </p><p>Function takes a state, returns a number.<br>Not everyday term. Not “Look both ways before you cross the street”<br>How far I am? Could run search, but that defeats the purpose!<br>Not perfect, but something!  </p><p><img src="https://pic.imgdb.cn/item/66713192d9c307b7e9fe74bd.png" alt="alt text"></p><p>A* expanded 8100 ; Path cost &#x3D; 33<br>UCS expanded 25263 . Path cost &#x3D; 33<br>Greedy expanded 10 . Path cost &#x3D; 41<br>[0, 7, 5, 3, 2, 1, 4, 6]<br>(7, 0, 5, 3, 2, 1, 4, 6)<br>(6, 4, 1, 2, 3, 5, 0, 7)<br>(3, 2, 1, 4, 6, 5, 0, 7)<br>(1, 2, 3, 4, 6, 5, 0, 7)<br>(5, 6, 4, 3, 2, 1, 0, 7)<br>(6, 5, 4, 3, 2, 1, 0, 7)<br>(0, 1, 2, 3, 4, 5, 6, 7)  </p><p><img src="https://pic.imgdb.cn/item/667131dfd9c307b7e9fef781.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/66713250d9c307b7e9ffbd92.png" alt="alt text"></p><p>Expand the node that seems closest…</p><p>Is it optimal?<br>No. Resulting path to Bucharest is not the shortest!</p><p>Numbers of heuristic, since that’s what greedy cares about.<br>Got to Bucharest, but not by shortest path.<br>End up with some kind of goal, but not what you want. You get a smelly shoe instead of to the airport on time.</p><p><img src="https://pic.imgdb.cn/item/667132d1d9c307b7e90095cd.png" alt="alt text"></p><p>Strategy: expand a node that you think is closest to a goal state  </p><p>Heuristic: estimate of distance to nearest goal for each state</p><p>A common case:<br>Best-first takes you straight to the (wrong) goal</p><p>Worst-case: like a badly-guided DFS</p><h2 id="A-Search"><a href="#A-Search" class="headerlink" title="A* Search"></a>A* Search</h2><p><img src="https://pic.imgdb.cn/item/6671341ad9c307b7e902e385.png" alt="alt text"></p><p>What we’ve been building to. Cornerstone. Goes to the goal like greedy, but backtracks as needed.<br>When it works, it’s magic!</p><p><img src="https://pic.imgdb.cn/item/66713463d9c307b7e9036089.png" alt="alt text"></p><blockquote><p>Uniform-cost orders by path cost, or backward cost  g(n)   </p></blockquote><blockquote><p>Greedy orders by goal proximity, or forward cost  h(n)</p></blockquote><p>A* Search orders by the sum: </p><blockquote><p>f(n) &#x3D; g(n) + h(n)</p></blockquote><p>UCS. Cumulative cost of arcs back to root. backward cost g(n).   Computed as you go as part of the fringe.   </p><p>Greedy. Heuristic forward cost h(n). NOT cumulative. Just a function of the state.  </p><p>What is A*. Sum of the two! Doesn’t go to c early cuz h is high (far from goal).  </p><p>Doesn’t do a-&gt;e branch g is high (expensive). </p><h2 id="When-should-A-terminate"><a href="#When-should-A-terminate" class="headerlink" title="When should A* terminate?"></a>When should A* terminate?</h2><p><img src="https://pic.imgdb.cn/item/6671359fd9c307b7e905950a.png" alt="alt text"></p><blockquote><p>No: only stop when we dequeue a goal</p></blockquote><p><img src="https://pic.imgdb.cn/item/667135ced9c307b7e905e8a7.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/667136c2d9c307b7e907a605.png" alt="alt text"></p><p>Inadmissible (pessimistic) heuristics break optimality by trapping good plans on the fringe</p><p>Admissible (optimistic) heuristics slow down bad plans but never outweigh true costs</p><p>If heuristic lies, and overestimates. Mistake.<br>Underestimate might reduce to UCS.</p><p><img src="https://pic.imgdb.cn/item/66713722d9c307b7e90883f0.png" alt="alt text"></p><p>Coming up with admissible heuristics is most of what’s involved in using A* in practice.</p><h2 id="Optimality-of-A-Tree-Search"><a href="#Optimality-of-A-Tree-Search" class="headerlink" title="Optimality of A* Tree Search"></a>Optimality of A* Tree Search</h2><p><img src="https://pic.imgdb.cn/item/66713781d9c307b7e90973dd.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/667137bad9c307b7e909dbe8.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/667138a1d9c307b7e90bb958.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/667139d0d9c307b7e90e39c0.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/667139efd9c307b7e90e77af.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/66713a14d9c307b7e90ebf80.png" alt="alt text"></p><p>UCS ragged based on cost.<br>A* narrows when near goal, heuristic  </p><p><img src="https://pic.imgdb.cn/item/66713a36d9c307b7e90efa63.png" alt="alt text"></p><p>Uniform-cost expands equally in all “directions”</p><p>A* expands mainly toward the goal, but does hedge its bets to ensure optimality</p><p><img src="https://pic.imgdb.cn/item/66713a99d9c307b7e90fb03a.png" alt="alt text"></p><p>Change problem – same or easier. And cheaper.<br>Imagine a new direct road.<br>Walk through walls spell.<br>Inadmissible – a little bit suboptimal is okay.  </p><p><img src="https://pic.imgdb.cn/item/66713c79d9c307b7e913d378.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/66713c9dd9c307b7e9141a33.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/66713fded9c307b7e91b91ac.png" alt="alt text"></p><p>Another relaxation, but “harder” than previous.<br>Lower bound.<br>Show it’s relaxed or prove.<br>At LEAST 18 away.<br>As heuristic gets close to the true cost, you do less search.</p><p><img src="https://pic.imgdb.cn/item/66714004d9c307b7e91bd71a.png" alt="alt text"></p><p>Looks great. Each node launches search as hard as the original problem.<br>You’ll might see this in P1. Come up with great heuristic, makes solution slower.</p><h2 id="Graph-Search"><a href="#Graph-Search" class="headerlink" title="Graph Search"></a>Graph Search</h2><p><img src="https://pic.imgdb.cn/item/66714071d9c307b7e91cb9ba.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/667140bbd9c307b7e91d612c.png" alt="alt text"></p><p>Failure to detect repeated states can cause exponentially more work.    </p><p>Exponential unrolling. Generally what happens.<br>May need to consider both paths to B, but what’s underneath B is the same.<br>Should be able to save the work.  </p><p><img src="https://pic.imgdb.cn/item/6671415fd9c307b7e91ebe25.png" alt="alt text"></p><p>Idea: never expand a state twice  </p><p>How to implement:<br>Tree search + set of expanded states (“closed set”)<br>Expand the search tree node-by-node, but…<br>Before expanding a node, check to make sure its state has never been expanded before<br>If not new, skip it, if new add to closed set  </p><p>Important: store the closed set as a set, not a list  </p><p>Can graph search wreck completeness?  Why&#x2F;why not?  </p><p>How about optimality?  </p><p><img src="https://pic.imgdb.cn/item/667142d5d9c307b7e9219839.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/667142f3d9c307b7e921d40f.png" alt="alt text"></p><h2 id="A-Summary"><a href="#A-Summary" class="headerlink" title="A*: Summary"></a>A*: Summary</h2><p>A* uses both backward costs and (estimates of) forward costs</p><p>A* is optimal with admissible &#x2F; consistent heuristics</p><p>Heuristic design is key: often use relaxed problems</p><p><img src="https://pic.imgdb.cn/item/667143a9d9c307b7e922fa3e.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/667143f7d9c307b7e9238299.png" alt="alt text"></p><h2 id="Optimality-of-A-Graph-Search"><a href="#Optimality-of-A-Graph-Search" class="headerlink" title="Optimality of A* Graph Search"></a>Optimality of A* Graph Search</h2><p>Consider what A* does:  </p><p>Expands nodes in increasing total f value (f-contours) Reminder: f(n) &#x3D; g(n) + h(n) &#x3D; cost to n + heuristic  </p><p>Proof idea: the optimal goal(s) have the lowest f value, so it must get expanded first</p><p>There’s a problem with this argument.  What are we assuming is true?</p><p><img src="https://pic.imgdb.cn/item/66714499d9c307b7e924f49b.png" alt="alt text"></p><p>Proof:<br>New possible problem: some n on path to G* isn’t in queue when we need it, because some worse n’ for the same state dequeued and expanded first (disaster!)<br>Take the highest such n in tree<br>Let p be the ancestor of n that was on the queue when n’ was popped<br>f(p) &lt; f(n) because of consistency<br>f(n) &lt; f(n’) because n’ is suboptimal<br>p would have been expanded before n’<br>Contradiction!  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能原理复习2</title>
      <link href="/2024/06/17/ren-gong-zhi-neng-yuan-li-fu-xi-2/"/>
      <url>/2024/06/17/ren-gong-zhi-neng-yuan-li-fu-xi-2/</url>
      
        <content type="html"><![CDATA[<h2 id="ai-berkeley-edu（课件资料来源）"><a href="#ai-berkeley-edu（课件资料来源）" class="headerlink" title="ai.berkeley.edu（课件资料来源）"></a>ai.berkeley.edu（课件资料来源）</h2><h2 id="Search-Problems"><a href="#Search-Problems" class="headerlink" title="Search Problems"></a>Search Problems</h2><p><strong>Uninformed Search Methods</strong></p><blockquote><p>Depth-First Search<br>Breadth-First Search<br>Uniform-Cost Search<br>Unified formalism leading to A* search (search guided by heuristic)</p></blockquote><p>Uninformed Search Methods（无信息搜索方法）是一组在没有关于目标位置的额外信息的情况下，用于在图或树结构中搜索目标的方法。这些搜索算法不依赖于任何关于目标位置的启发式信息，它们通常用于解决一些简单的搜索问题，如迷宫探索或路径查找。以下是一些常见的无信息搜索方法：</p><ol><li><p><strong>广度优先搜索（Breadth-First Search, BFS）</strong>：</p><ul><li>BFS是一种从根节点开始，逐层扩展节点的搜索方法。</li><li>它使用队列作为其主要的数据结构，以确保按照层次顺序访问节点。</li><li>BFS保证找到的是从起点到目标的最短路径。</li></ul></li><li><p><strong>深度优先搜索（Depth-First Search, DFS）</strong>：</p><ul><li>DFS通过递归或显式栈的方式尽可能深地搜索树的分支。</li><li>它使用栈（可以是递归调用堆栈或显式的栈数据结构）来存储待访问的节点。</li><li>DFS不保证找到最短路径，但通常用于探索所有可能的路径。</li></ul></li><li><p><strong>迭代加深深度优先搜索（Iterative Deepening Depth-First Search, IDDFS）</strong>：</p><ul><li>IDDFS是DFS的改进版本，它通过逐层增加搜索深度来避免DFS的递归深度限制问题。</li><li>它结合了BFS和DFS的优点，可以在不使用大量内存的情况下找到最短路径。</li></ul></li><li><p><strong>Uniform-Cost Search（均匀成本搜索）（代价优先）</strong>：</p><ul><li>这种搜索方法总是扩展具有最低路径成本的节点。</li><li>它适用于所有边的权重都是非负的情况，并保证找到最短路径。</li></ul></li><li><p><strong>双向搜索（Bidirectional Search）</strong>：</p><ul><li>双向搜索从起点和终点同时进行，向中间点扩展。</li><li>这种方法可以加快搜索速度，尤其是在起点和终点之间的距离较短时。</li></ul></li></ol><p>无信息搜索方法的优点是它们简单易实现，不需要关于问题领域的额外信息。然而，它们的缺点是在某些情况下效率不高，特别是当搜索空间很大或目标很远时。这些方法通常作为更复杂搜索算法的基础，或者在问题规模较小或结构简单时使用。</p><p>1、2、4需要理解掌握</p><p>Unified formalism leading to A* search (search guided by heuristic)</p><h2 id="Reflex-Agents"><a href="#Reflex-Agents" class="headerlink" title="Reflex Agents"></a>Reflex Agents</h2><p><strong>在人工智能领域，反射式智能体是一种基于简单条件反射规则做出决策的智能体。它们通常对环境的感知非常直接，并且立即做出反应，而不需要复杂的内部状态或长期规划。反射式智能体的决策过程类似于人类的本能反应，例如，当手碰到热的物体时立即缩回。</strong></p><p>Reflex agents:</p><p><strong>Choose action based on current percept (and maybe memory)<br>May have memory or a model of the world’s current state<br>Do not consider the future consequences of their actions<br>Consider how the world IS<br>反射代理:根据当前感知(也可能是记忆)选择行动<br>,可能对世界当前状态有记忆或模型不考虑其行动的未来后果考虑世界是怎样的</strong></p><p>Can a reflex agent be rational?</p><p><img src="https://pic.imgdb.cn/item/66703dd5d9c307b7e9ab57aa.png" alt="alt text"></p><p>Reflex Optimal</p><p>Optimality is not defined by algorithm, but by rational behavior.</p><h2 id="Planning-Agents"><a href="#Planning-Agents" class="headerlink" title="Planning Agents"></a>Planning Agents</h2><p>Planning agents:</p><blockquote><p>Ask “what if”<br>Decisions based on (hypothesized) consequences of actions<br>Must have a model of how the world evolves in response to actions<br>Must formulate a goal (test)<br>Consider how the world WOULD BE</p></blockquote><p>Optimal vs. complete planning<br>最优规划vs.完全规划</p><p>Planning vs. replanning<br>规划vs.重新规划</p><p>You could figure out the consequences by doing it. But instead, planning considers what the world would be without actually doing it.<br>Simulate many games, execute one. Doesn’t do it in the world, does it in the model.<br>Consequences of action.</p><blockquote><p>Complete – a solution; optimal – best</p></blockquote><h2 id="Search-Problems-1"><a href="#Search-Problems-1" class="headerlink" title="Search Problems*****"></a>Search Problems*****</h2><p>How do we formalize a search problem?</p><p><img src="https://pic.imgdb.cn/item/66704092d9c307b7e9b14407.png" alt="alt text"></p><p>(1) State Space（状态空间）状态空间是所有可能状态的集合，其中每个状态代表了问题的一个特定配置或位置。</p><p>(2) Successor function（后继函数）定义了从给定状态出发，通过执行某个动作所能到达的所有可能的后继状态。换句话说，后继函数是从一个状态到其可能的下一个状态的映射。</p><p>(3) start state（初始状态） 初始状态是搜索过程开始时的状态。在很多搜索问题中，它通常是已知的，并且只有一个。初始状态定义了搜索的起点，所有搜索算法都从这个状态开始进行探索。</p><p>(4) goal test （目标测试）是搜索算法中用来确定一个状态是否为目标状态的检查过程。在搜索问题中，目标测试是至关重要的，因为它决定了搜索何时结束。</p><blockquote><p>解决方案是将开始状态转换为目标状态的一系列行动(计划)</p></blockquote><p><strong>Goal test – sometimes more than one state that satisfies having achieved the goal, for example, “eat all the dots”<br>目标测试——有时不止一种状态满足实现目标，例如，“吃掉所有的圆豆”</strong></p><p><img src="https://pic.imgdb.cn/item/66704d80d9c307b7e9cb84d9.png" alt="alt text"></p><p>Models aren’t perfect.<br>Too detailed, you can’t solve.<br>Not detailed enough, doesn’t solve.        </p><p><img src="https://pic.imgdb.cn/item/66704dd7d9c307b7e9cc30e2.png" alt="alt text"></p><p>State space:</p><blockquote><p>Cities</p></blockquote><p>Successor function:</p><blockquote><p>Roads: Go to adjacent city with cost &#x3D; distance</p></blockquote><p>Start state:</p><blockquote><p>Arad</p></blockquote><p>Goal test:</p><blockquote><p>Is state &#x3D;&#x3D; Bucharest?</p></blockquote><p>Solution?</p><h2 id="What’s-in-a-State-Space"><a href="#What’s-in-a-State-Space" class="headerlink" title="What’s in a State Space?"></a>What’s in a State Space?</h2><p>The world state includes every last detail of the environment</p><p>A search state keeps only the details needed for planning (abstraction)</p><p>Problem: Pathing<br>States: (x,y) location<br>Actions: NSEW<br>Successor: update location only<br>Goal test: is (x,y)&#x3D;END         </p><p>Problem: Eat-All-Dots<br>States: {(x,y), dot booleans}   (点布尔值)<br>Actions: NSEW<br>Successor: update location and possibly a dot boolean<br>Goal test: dots all false</p><h2 id="State-Space-Sizes"><a href="#State-Space-Sizes" class="headerlink" title="State Space Sizes?"></a>State Space Sizes?</h2><p><img src="https://pic.imgdb.cn/item/66705004d9c307b7e9d0d767.png" alt="alt text"></p><h2 id="State-Space-Graphs-and-Search-Trees"><a href="#State-Space-Graphs-and-Search-Trees" class="headerlink" title="State Space Graphs and Search Trees"></a>State Space Graphs and Search Trees</h2><p><img src="https://pic.imgdb.cn/item/66705264d9c307b7e9d5c6b8.png" alt="alt text"></p><p><strong>State Space Graphs</strong></p><p><img src="https://pic.imgdb.cn/item/667052a8d9c307b7e9d68cf5.png" alt="alt text"></p><p>State space graph: A mathematical representation of a search problem</p><p>Nodes are (abstracted) world configurations<br>Arcs represent successors (action results)<br>The goal test is a set of goal nodes (maybe only one)</p><p>In a state space graph, each state occurs only once!</p><p>We can rarely build this full graph in memory (it’s too big), but it’s a useful idea</p><p><strong>Search Trees</strong></p><p>A search tree:<br>A “what if” tree of plans and their outcomes<br>The start state is the root node<br>Children correspond to successors<br>Nodes show states, but correspond to PLANS that achieve those states<br>For most problems, we can never actually build the whole tree  </p><p>Different plans that achieve the same state, will be different nodes in the tree.<br>Every plan in the tree.<br>Search ignores most of the tree.  </p><h2 id="Tree-Search"><a href="#Tree-Search" class="headerlink" title="Tree Search"></a>Tree Search</h2><p>Important ideas:</p><p>Fringe<br>Expansion<br>Exploration strategy  </p><p>Main question: which fringe nodes to explore?</p><h2 id="Depth-First-Search"><a href="#Depth-First-Search" class="headerlink" title="Depth-First Search"></a>Depth-First Search</h2><p>Strategy: expand a deepest node first<br>Implementation: Fringe is a LIFO stack</p><p><img src="https://pic.imgdb.cn/item/66705ebbd9c307b7e9ef8ec1.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6670611ed9c307b7e9f41774.png" alt="alt text"></p><p>DFS扩展了哪些节点?<br>树的一些左前缀。<br>可以处理整棵树!<br>如果m是有限的，耗时O(b^m)</p><p>How much space does the fringe take?<br>Only has siblings on path to root, so O(bm)</p><p>Is it complete?<br>m could be infinite, so only if we prevent cycles (more later)</p><p>Is it optimal?<br>No, it finds the “leftmost” solution, regardless of depth or cost</p><p>Process whole tree if goal is lower right.<br>Space: At each level, children of one node at most on fringe, so b. Times number of layers m. (Small!)</p><h2 id="Breadth-First-Search"><a href="#Breadth-First-Search" class="headerlink" title="Breadth-First Search"></a>Breadth-First Search</h2><p><img src="https://pic.imgdb.cn/item/667067c7d9c307b7e9fff91f.png" alt="alt text"></p><p>Strategy: expand a shallowest node first<br>Implementation: Fringe is a FIFO queue</p><p><img src="https://pic.imgdb.cn/item/6670685dd9c307b7e900efb4.png" alt="alt text"></p><p><strong>What nodes does BFS expand?</strong><br>Processes all nodes above shallowest solution<br>Let depth of shallowest solution be s<br>Search takes time O(b^s)  </p><p>How much space does the fringe take?<br>Has roughly the last tier, so O(b^s)  </p><p>Is it complete?<br>s must be finite if a solution exists  </p><p>Is it optimal?<br>Only if costs are all 1 (more on costs later)  </p><p>Tier of best solution. If on right, b^s. Exponential Big.<br>最佳解决方案层。如果在右边，b^s。指数大。</p><h2 id="DFS-vs-BFS"><a href="#DFS-vs-BFS" class="headerlink" title="DFS vs BFS"></a>DFS vs BFS</h2><p>When will BFS outperform DFS?</p><p>When will DFS outperform BFS?</p><p>BFS:解决方案不太靠下。DFS:需要查到底。内存限制。</p><h2 id="Iterative-Deepening-迭代加深"><a href="#Iterative-Deepening-迭代加深" class="headerlink" title="Iterative Deepening(迭代加深)"></a>Iterative Deepening(迭代加深)</h2><p><img src="https://pic.imgdb.cn/item/66706d21d9c307b7e90908b4.png" alt="alt text"></p><p>Idea: get DFS’s space advantage with BFS’s time &#x2F; shallow-solution advantages<br>Run a DFS with depth limit 1.  If no solution…<br>运行深度限制为1的DFS。如果没有解决方案……<br>Run a DFS with depth limit 2.  If no solution…<br>Run a DFS with depth limit 3.  …..  </p><p>Isn’t that wastefully redundant?<br>Generally most work happens in the lowest level searched, so not so bad!</p><p>Another strategy. Combine best of both.<br>DFS – successor says if deeper than one, stop.<br>Really common.  </p><p><img src="https://pic.imgdb.cn/item/66706e24d9c307b7e90aad39.png" alt="alt text"></p><p>BFS finds the shortest path in terms of number of actions.<br>It does not find the least-cost path.  We will now cover<br>a similar algorithm which does find the least-cost path.    </p><h2 id="Uniform-Cost-Search（代价优先）"><a href="#Uniform-Cost-Search（代价优先）" class="headerlink" title="Uniform Cost Search（代价优先）"></a>Uniform Cost Search（代价优先）</h2><p>Strategy: expand a cheapest node first<br>Fringe is a priority queue (priority: cumulative cost)<br>首先扩展最便宜的节点<br>边缘是一个优先级队列(优先级:累积开销)</p><p>Like breadth first，but with costs<br>Contours show equal cost.</p><p><img src="https://pic.imgdb.cn/item/6670de39d9c307b7e97247bf.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/6670de82d9c307b7e972a314.png" alt="https://pic.imgdb.cn/item/6670de82d9c307b7e972a314.pn"></p><p>What nodes does UCS expand?<br>Processes all nodes with cost less than cheapest solution!<br>If that solution costs C* and arcs cost at least e , then the   “effective depth” is roughly C*&#x2F;e<br>Takes time O(b^(C*&#x2F;e)) (exponential in effective depth)  </p><p>How much space does the fringe take?<br>Has roughly the last tier, so O(b^(C*&#x2F;e))</p><p>Is it complete?<br>Assuming best solution has a finite cost and minimum arc cost is positive, yes!</p><p>Is it optimal?<br>Yes!  (Proof next lecture via A*)</p><p>Let’s say C* is 10 and minimum step size is 2. How deep in the tree? C*&#x2F;e &#x3D; 5. How many nodes is that?</p><p><img src="https://pic.imgdb.cn/item/6670e2c7d9c307b7e977e177.png" alt="alt text"></p><p>The good:<br>UCS is complete and optimal!</p><p>The bad:<br>Explores options in every “direction”<br>No information about goal location  </p><p><img src="https://pic.imgdb.cn/item/6670e33ed9c307b7e9788062.png" alt="alt text"></p><blockquote><p>All these search algorithms are the same except for fringe strategies</p></blockquote><h2 id="Search-Gone-Wrong"><a href="#Search-Gone-Wrong" class="headerlink" title="Search Gone Wrong?"></a>Search Gone Wrong?</h2><p>Next time – guided search where you know something about direction of solution.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能原理复习1</title>
      <link href="/2024/06/17/ren-gong-zhi-neng-yuan-li-fu-xi-1/"/>
      <url>/2024/06/17/ren-gong-zhi-neng-yuan-li-fu-xi-1/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-artificial-intelligence"><a href="#What-is-artificial-intelligence" class="headerlink" title="What is artificial intelligence?"></a>What is artificial intelligence?</h2><p><strong>A (Short) History of AI</strong></p><p>1940-1950: Early days<br>1943: McCulloch &amp; Pitts: Boolean circuit model of brain<br>1950: Turing’s “Computing Machinery and Intelligence”</p><p>1950—70: The golden years!<br>1950s: Early AI programs, including Samuel’s checkers program, Newell &amp; Simon’s Logic Theorist, Gelernter’s Geometry Engine<br>1956: Dartmouth meeting: “Artificial Intelligence” adopted<br>1965: Robinson’s complete algorithm for logical reasoning</p><p>1970—90: Knowledge-based approaches<br>1969—79: Early development of knowledge-based systems<br>1980—88: Expert systems industry booms<br>1988—93: Expert systems industry busts: “AI Winter”</p><p>1990—: Statistical approaches<br>Resurgence of probability, focus on uncertainty<br>General increase in technical depth<br>Agents and learning systems… “AI Spring”?</p><p>2000—: Where are we now?     </p><p>上面需要注意的点是：</p><p>1950: Turing’s “Computing Machinery and Intelligence”</p><p>1956: Dartmouth meeting: “Artificial Intelligence” adopted</p><p><strong>Game Agents（一个智能体是一个具有感知及行动的实体）</strong></p><p>Classic Moment: May, ‘97: Deep Blue vs. Kasparov<br>First match won against world champion<br>“Intelligent creative” play 200 million board positions per second<br>Humans understood 99.9 of Deep Blue’s moves<br>Can do about the same now with a PC cluster</p><p>1996: Kasparov Beats Deep Blue<br>    “I could feel — I could smell — a new kind of intelligence across the table.”</p><p>1997: Deep Blue Beats Kasparov<br>    “Deep Blue hasn’t proven anything.”</p><p><strong>Reinforcement learning</strong></p><p>注：DeepMind 是一个专注于人工智能研究的公司，而 OpenSpiel 是 DeepMind 开发的一个开源库，用于研究和实现各种游戏和强化学习算法。</p><p><strong>What is Artifical Intelligence?—Definition of textbook</strong></p><blockquote><p>Think like people</p></blockquote><blockquote><p>Act like people</p></blockquote><blockquote><p>Think rationally</p></blockquote><blockquote><p>Act rationally</p></blockquote><p><strong>Human Intelligence</strong></p><p>Brains (human minds) are very good at making rational decisions, but not perfect</p><p>Language -&gt; Concept -&gt; Rule</p><p><img src="https://pic.imgdb.cn/item/66702fefd9c307b7e98cfea1.png" alt="alt text"></p><p>Stopped making wings that flap (蝴蝶效应嘛这句话啥意思哈哈哈哈哈看不懂)</p><ol><li>人类大约20万年前就形成了现在的解刨结构；</li><li>在接下来的15万年中，人类并没有发生较大的变化；</li><li>在大约5万年前，一小撮人类发明出人类区别于其他物种的能力，（虽然只有极少数的个体，就像是跑程序，只有极少数个体能够寻找到更优的位置，他们就能带领整个群体走向更好的区域），也就是使用语言（举例，袋鼠摇，管晨辰）（语言-&gt;概念-&gt;规则）</li></ol><p><img src="https://pic.imgdb.cn/item/66703073d9c307b7e98de996.png" alt="alt text"></p><blockquote><p>思考，感知，行动</p></blockquote><blockquote><p>智能是关于什么的智能？thinking , perception,  action （什么是thinking，伽利略比萨斜塔，大球、小球、大球+小球，得到矛盾）</p></blockquote><blockquote><p>The model of that （1000瓶水，10只小白鼠，一次实验）（概率论模型，均匀分布，星座，1&#x2F;12）</p></blockquote><blockquote><p>The representation<br>表示</p></blockquote><blockquote><p>The constraints<br>约束</p></blockquote><blockquote><p>The algorithm<br>算法</p></blockquote><p><img src="https://pic.imgdb.cn/item/667032fad9c307b7e99320cd.png" alt="alt text"></p><p>Desiging a rational agent that selects actions that maximize its (expected) utility.  </p><p><strong>This course is about:</strong></p><p>Learning to recognize when and how a new problem can be solved with an existing technique</p><p>Learning the mechanism of numerious algorithms</p><p><img src="https://pic.imgdb.cn/item/66703439d9c307b7e9969095.png" alt="alt text"></p><p><strong>Rational Decisions</strong></p><p>We’ll use the term rational in a very specific, technical way:</p><blockquote><p>Rational: maximally achieving pre-defined goals<br> Rationality only concerns what decisions are made<br>   (not the thought process behind them)<br> Goals are expressed in terms of the utility of outcomes<br> Being rational means maximizing your expected utility</p></blockquote><blockquote><p>我们将以一种非常特定、技术性的方式使用“理性”这个词：<br>理性：最大限度地实现预定义的目标，理性只关注所做出的决策（而不是决策背后的思考过程），目标以结果效用的形式表达，理性意味着最大化你的预期效用</p></blockquote><p>Computational Rationality ！！！</p><p><strong>Maximize Your Expected Utility</strong></p><p>What is a utility</p><p><img src="https://pic.imgdb.cn/item/667035d2d9c307b7e999dcd4.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/66703698d9c307b7e99b967f.png" alt="alt text"></p><p><img src="https://pic.imgdb.cn/item/667036ffd9c307b7e99c675b.png" alt="alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用深度神经网络建模长期和短期时间模式</title>
      <link href="/2024/05/02/lun-wen-fu-xian-0/"/>
      <url>/2024/05/02/lun-wen-fu-xian-0/</url>
      
        <content type="html"><![CDATA[<h2 id="参考论文"><a href="#参考论文" class="headerlink" title="参考论文"></a>参考论文</h2><p><a href="https://arxiv.org/abs/1703.07015">https://arxiv.org/abs/1703.07015</a></p><p><a href="https://paperswithcode.com/paper/modeling-long-and-short-term-temporal">https://paperswithcode.com/paper/modeling-long-and-short-term-temporal</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>多变量时间序列预测是许多领域中重要的机器学习问题，包括太阳能发电量预测、电力消耗预测和交通拥堵情况预测。 这些实际应用中的时间数据通常涉及长期和短期模式的混合，传统方法如自回归模型和高斯过程可能会失败。 在本文中，我们提出了一种新颖的深度学习框架，即长期和短期时间序列网络（LSTNet），以解决这个开放性挑战。 LSTNet使用卷积神经网络（CNN）和循环神经网络（RNN）提取变量之间的短期局部依赖模式，并发现时间序列趋势的长期模式。 此外，我们利用传统的自回归模型来解决神经网络模型的尺度不敏感问题。 在对具有复杂重复模式的实际数据进行评估时，LSTNet相对于几种最先进的基准方法取得了显著的性能改进。</p><h2 id="部分内容"><a href="#部分内容" class="headerlink" title="部分内容"></a>部分内容</h2><p><strong>1</strong> 多变量时间序列预测通常面临一个重大的研究挑战，即如何捕获和利用多个变量之间的动态依赖关系。具体而言，实际应用通常需要短期和长期重复模式的混合</p><p><strong>2</strong> 深度神经网络在相关领域得到了深入研究，并对各种问题的解决方案产生了非凡的影响。例如，递归神经网络（RNN）模型在最近的自然语言处理（NLP）研究中变得最受欢迎。特别是RNN的两种变体，即长短期记忆（LSTM）和门控循环单元（GRU），显著提高了机器翻译、语音识别和其他NLP任务中的最新性能，因为它们可以根据输入文档中单词之间的长期和短期依赖关系有效地捕获单词的含义。在计算机视觉领域，卷积神经网络（CNN）模型成功地从输入图像中提取了不同粒度级别的局部和移位不变特征（有时称为“shapelets”），显示出了出色的性能。</p><p><strong>3</strong> 深度神经网络也被研究用于时间序列预测，即使用过去观测到的时间序列来预测前瞻性视界中的未知时间序列的任务——视界越大，问题越难。这方面的工作范围很广，如朴素RNN模型和混合模型到使用ARIMA模型和多层感知器（MLP），以及将普通RNN和动态玻尔兹曼机组合的方法。</p><p><strong>4</strong> 本文中，我们提出了一个为多变量时间序列预测而设计的深度学习框架，即长期和短期时间序列网络（LSTNet），如下图所示。它利用卷积层的优势来发现多维输入变量之间的局部依赖模式，并利用循环层来捕获复杂的长期依赖关系。这是一种新的循环结构，即循环跳跃，旨在捕获非常长期的依赖模式，并使优化更容易，因为它利用了输入时间序列信号的周期性。最后，LSTNet将传统的自回归线性模型与非线性神经网络部分并行，使得非线性深度学习模型在违反尺度变化的时间序列中更具鲁棒性。</p><p><img src="https://pic.imgdb.cn/item/66332d720ea9cb14033fce79.png" alt="alt text"><br><img src="https://pic.imgdb.cn/item/66332f680ea9cb140344cd4c.png" alt="alt text"></p><p><strong>5</strong> 最突出的单变量时间序列模型之一是自回归综合移动平均线模型（ARIMA）。ARIMA模型的流行是由于其统计特性以及模型选择过程中著名的Box-Jenkins方法。ARIMA模型不仅适应各种指数平滑技术，而且足够灵活，可以包含其他类型的时间序列模型，包括自回归（AR）、移动平均线（MA）和自回归移动平均线（ARMA）。然而，由于计算成本高，ARIMA模型（包括其用于模拟长期时间依赖关系的变体），很少用于高维多变量时间序列预测。</p><p><strong>6</strong> 在多变量时间序列中，向量自回归（VAR）可以说是使用最广泛的模型，因为它很简单。VAR 模型自然地将 AR 模型扩展到多变量设置，这忽略了输出变量之间的依赖关系。近年来，各种VAR模型都取得了重大进展，包括用于重尾时间序列的椭圆VAR模型和用于更好地解释高维变量之间依赖关系的结构化VAR模型等。然而，VAR的模型容量在时间窗口大小上呈线性增长，在变量数量上呈二次增长。这意味着，在处理长期时间模式时，继承的大模型容易出现过拟合。为了缓解这个问题，有学者提出将原来的高维信号简化为低维的隐式表示，然后应用VAR进行预测，并有多种正则化选择。</p><p><strong>7</strong> 时间序列预测问题也可以被视为具有时变参数的标准回归问题。因此，将具有不同损失函数和正则化项的各种回归模型应用于时间序列预测任务也就不足为奇了。例如，线性支持向量回归 （SVR）使用控制预测误差阈值的超参数ε基于回归损失学习最大边际超平面。岭回归是另一个例子，可以通过将 ε 设置为零来从 SVR 模型中恢复。</p><p><strong>8</strong> 高斯过程 （GP） 是一种非参数方法，用于对连续函数域上的分布进行建模。这与由参数化函数类定义的模型形成鲜明对比。GP可以应用于多变量时间序列预测任务，并且可以用作贝叶斯推理中函数空间的先验。（看不懂就先放一下…会懂的…）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回归———小波神经网络</title>
      <link href="/2024/05/01/hui-gui-xiao-bo-shen-jing-wang-luo/"/>
      <url>/2024/05/01/hui-gui-xiao-bo-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="小波神经网络回归"><a href="#小波神经网络回归" class="headerlink" title="小波神经网络回归"></a>小波神经网络回归</h2><p>小波神经网络（Wavelet Neural Network, WNN）是一种利用小波变换作为激活函数的前馈神经网络。小波变换是一种数学方法，用于将信号分解为构成其的小波，这些小波可以捕捉信号的局部特征。在神经网络中，小波变换可以作为一种强有力的工具来处理和分析数据，尤其是在时间序列分析和信号处理领域。</p><p>小波神经网络回归是指使用小波神经网络对数据进行回归分析，以预测连续的输出值。这种回归分析可以应用于多种领域，比如金融市场预测、气象预测、交通流量预测等。</p><p>小波神经网络的关键特点包括：</p><ol><li><p><strong>小波变换</strong>：用作隐含层的激活函数，能够捕捉数据的局部特征。</p></li><li><p><strong>自适应学习</strong>：网络通过学习数据集来自动调整其权值和阈值。</p></li><li><p><strong>非线性映射</strong>：小波变换提供了一种从输入空间到高维特征空间的非线性映射，有助于网络捕捉复杂的非线性关系。</p></li><li><p><strong>泛化能力</strong>：通过训练，小波神经网络能够学习到数据的内在规律，从而对未知数据进行有效的预测。</p></li><li><p><strong>优化算法</strong>：通常使用梯度下降或其变种（如动量法、AdaGrad等）来优化网络的权值，以最小化预测误差。</p></li></ol><p>在小波神经网络回归中，通常的步骤包括：</p><ul><li><p><strong>数据预处理</strong>：包括归一化处理，使数据处于一个合适的范围内，提高网络训练的稳定性和收敛速度。</p></li><li><p><strong>网络初始化</strong>：随机初始化网络的权值和阈值。</p></li><li><p><strong>前向传播</strong>：计算隐含层的小波变换，并将结果传递到输出层。</p></li><li><p><strong>计算误差</strong>：使用某种误差度量（如均方误差）计算网络预测值和实际值之间的差异。</p></li><li><p><strong>反向传播</strong>：根据误差计算每个参数的梯度，并更新权值以减少误差。</p></li><li><p><strong>迭代优化</strong>：重复前向传播和反向传播步骤，直到网络达到预定的迭代次数或误差降低到可接受的程度。</p></li><li><p><strong>模型评估</strong>：使用测试数据集评估网络的预测性能。</p></li><li><p><strong>结果分析</strong>：对模型的预测结果进行分析，以了解其准确性和可靠性。</p></li></ul><p>小波神经网络因其在处理具有局部特征的信号方面的优势而被广泛应用于回归分析中。然而，选择合适的小波基和网络结构对于获得良好的预测性能至关重要。</p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">clc; <span class="comment">% 清除命令窗口</span></span><br><span class="line">clear; <span class="comment">% 清除所有变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 网络参数配置</span></span><br><span class="line">load traffic_flux input output input_test output_test; <span class="comment">% 加载训练数据和测试数据</span></span><br><span class="line"></span><br><span class="line">M<span class="built_in">=</span>size(input,<span class="number">2</span>); <span class="comment">% 输入节点个数</span></span><br><span class="line">N<span class="built_in">=</span>size(output,<span class="number">2</span>); <span class="comment">% 输出节点个数</span></span><br><span class="line"></span><br><span class="line">n<span class="built_in">=</span><span class="number">6</span>; <span class="comment">% 隐含层节点个数</span></span><br><span class="line">lr1<span class="built_in">=</span><span class="number">0.01</span>; <span class="comment">% 学习率1</span></span><br><span class="line">lr2<span class="built_in">=</span><span class="number">0.001</span>; <span class="comment">% 学习率2</span></span><br><span class="line">maxgen<span class="built_in">=</span><span class="number">100</span>; <span class="comment">% 迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 权值初始化</span></span><br><span class="line">Wjk<span class="built_in">=</span>randn(n,M); Wjk_1<span class="built_in">=</span>Wjk; Wjk_2<span class="built_in">=</span>Wjk_1; <span class="comment">% 隐含层到输入层的权值</span></span><br><span class="line">Wij<span class="built_in">=</span>randn(N,n); Wij_1<span class="built_in">=</span>Wij; Wij_2<span class="built_in">=</span>Wij_1; <span class="comment">% 输出层到隐含层的权值</span></span><br><span class="line">a<span class="built_in">=</span>randn(<span class="number">1</span>,n); a_1<span class="built_in">=</span>a; a_2<span class="built_in">=</span>a_1; <span class="comment">% 激活函数的参数a</span></span><br><span class="line">b<span class="built_in">=</span>randn(<span class="number">1</span>,n); b_1<span class="built_in">=</span>b; b_2<span class="built_in">=</span>b_1; <span class="comment">% 激活函数的参数b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 节点初始化</span></span><br><span class="line">y<span class="built_in">=</span>zeros(<span class="number">1</span>,N); <span class="comment">% 输出层的初始化</span></span><br><span class="line">net<span class="built_in">=</span>zeros(<span class="number">1</span>,n); <span class="comment">% 隐含层的初始化</span></span><br><span class="line">net_ab<span class="built_in">=</span>zeros(<span class="number">1</span>,n); <span class="comment">% 隐含层激活函数的输入初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 权值学习增量初始化</span></span><br><span class="line">d_Wjk<span class="built_in">=</span>zeros(n,M); <span class="comment">% Wjk的梯度</span></span><br><span class="line">d_Wij<span class="built_in">=</span>zeros(N,n); <span class="comment">% Wij的梯度</span></span><br><span class="line">d_a<span class="built_in">=</span>zeros(<span class="number">1</span>,n); <span class="comment">% a的梯度</span></span><br><span class="line">d_b<span class="built_in">=</span>zeros(<span class="number">1</span>,n); <span class="comment">% b的梯度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 输入输出数据归一化</span></span><br><span class="line">[inputn,inputps]<span class="built_in">=</span>mapminmax(input<span class="string">&#x27;); % 输入数据归一化并保存参数</span></span><br><span class="line"><span class="string">[outputn,outputps]=mapminmax(output&#x27;</span>); <span class="comment">% 输出数据归一化并保存参数</span></span><br><span class="line">inputn<span class="built_in">=</span>inputn<span class="string">&#x27;; % 转置</span></span><br><span class="line"><span class="string">outputn=outputn&#x27;</span>; <span class="comment">% 转置</span></span><br><span class="line"></span><br><span class="line">error<span class="built_in">=</span>zeros(<span class="number">1</span>,maxgen); <span class="comment">% 初始化误差数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 网络训练</span></span><br><span class="line">for i<span class="built_in">=</span><span class="number">1</span>:maxgen <span class="comment">% 迭代次数循环</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 误差累计</span></span><br><span class="line">    error(i)<span class="built_in">=</span><span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 循环训练</span></span><br><span class="line">    for kk<span class="built_in">=</span><span class="number">1</span>:size(input,<span class="number">1</span>) <span class="comment">% 对每个输入样本进行训练</span></span><br><span class="line">        x<span class="built_in">=</span>inputn(kk,:); <span class="comment">% 当前输入样本</span></span><br><span class="line">        yqw<span class="built_in">=</span>outputn(kk,:); <span class="comment">% 当前输出样本</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 计算隐含层的输出</span></span><br><span class="line">        for j<span class="built_in">=</span><span class="number">1</span>:n</span><br><span class="line">            for k<span class="built_in">=</span><span class="number">1</span>:M</span><br><span class="line">                net(j)<span class="built_in">=</span>net(j)+Wjk(j,k)*x(k); <span class="comment">% 计算隐含层的输入加权和</span></span><br><span class="line">            end</span><br><span class="line">            net_ab(j)<span class="built_in">=</span>(net(j)-b(j))/a(j); <span class="comment">% 应用小波变换</span></span><br><span class="line">            temp<span class="built_in">=</span>mymorlet(net_ab(j)); <span class="comment">% 计算小波函数的值</span></span><br><span class="line">            for k<span class="built_in">=</span><span class="number">1</span>:N</span><br><span class="line">                y<span class="built_in">=</span>y+Wij(k,j)*temp; <span class="comment">% 计算输出层的输出</span></span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 计算误差和</span></span><br><span class="line">        error(i)<span class="built_in">=</span>error(i)+sum(abs(yqw-y)); <span class="comment">% 计算当前样本的误差</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 权值调整</span></span><br><span class="line">        for j<span class="built_in">=</span><span class="number">1</span>:n</span><br><span class="line">            <span class="comment">% 计算d_Wij</span></span><br><span class="line">            temp<span class="built_in">=</span>mymorlet(net_ab(j));</span><br><span class="line">            for k<span class="built_in">=</span><span class="number">1</span>:N</span><br><span class="line">                d_Wij(k,j)<span class="built_in">=</span>d_Wij(k,j)-(yqw(k)-y(k))*temp; <span class="comment">% 计算Wij的梯度</span></span><br><span class="line">            end</span><br><span class="line">            <span class="comment">% 计算d_Wjk</span></span><br><span class="line">            temp<span class="built_in">=</span>d_mymorlet(net_ab(j)); <span class="comment">% 计算小波函数的导数</span></span><br><span class="line">            for k<span class="built_in">=</span><span class="number">1</span>:M</span><br><span class="line">                for l<span class="built_in">=</span><span class="number">1</span>:N</span><br><span class="line">                    d_Wjk(j,k)<span class="built_in">=</span>d_Wjk(j,k)+(yqw(l)-y(l))*Wij(l,j); <span class="comment">% 计算Wjk的梯度</span></span><br><span class="line">                end</span><br><span class="line">                d_Wjk(j,k)<span class="built_in">=</span>-d_Wjk(j,k)*temp*x(k)/a(j); <span class="comment">% 更新Wjk的梯度</span></span><br><span class="line">            end</span><br><span class="line">            <span class="comment">% 计算d_b</span></span><br><span class="line">            for k<span class="built_in">=</span><span class="number">1</span>:N</span><br><span class="line">                d_b(j)<span class="built_in">=</span>d_b(j)+(yqw(k)-y(k))*Wij(k,j); <span class="comment">% 计算b的梯度</span></span><br><span class="line">            end</span><br><span class="line">            d_b(j)<span class="built_in">=</span>d_b(j)*temp/a(j); <span class="comment">% 更新b的梯度</span></span><br><span class="line">            <span class="comment">% 计算d_a</span></span><br><span class="line">            for k<span class="built_in">=</span><span class="number">1</span>:N</span><br><span class="line">                d_a(j)<span class="built_in">=</span>d_a(j)+(yqw(k)-y(k))*Wij(k,j); <span class="comment">% 计算a的梯度</span></span><br><span class="line">            end</span><br><span class="line">            d_a(j)<span class="built_in">=</span>d_a(j)*temp*((net(j)-b(j))/b(j))/a(j); <span class="comment">% 更新a的梯度</span></span><br><span class="line">        end</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 权值参数更新      </span></span><br><span class="line">        Wij<span class="built_in">=</span>Wij-lr1*d_Wij; <span class="comment">% 更新Wij</span></span><br><span class="line">        Wjk<span class="built_in">=</span>Wjk-lr1*d_Wjk; <span class="comment">% 更新Wjk</span></span><br><span class="line">        b<span class="built_in">=</span>b-lr2*d_b; <span class="comment">% 更新b</span></span><br><span class="line">        a<span class="built_in">=</span>a-lr2*d_a; <span class="comment">% 更新a</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">% 重置梯度和节点状态</span></span><br><span class="line">        d_Wjk<span class="built_in">=</span>zeros(n,M);</span><br><span class="line">        d_Wij<span class="built_in">=</span>zeros(N,n);</span><br><span class="line">        d_a<span class="built_in">=</span>zeros(<span class="number">1</span>,n);</span><br><span class="line">        d_b<span class="built_in">=</span>zeros(<span class="number">1</span>,n);</span><br><span class="line">        </span><br><span class="line">        y<span class="built_in">=</span>zeros(<span class="number">1</span>,N);</span><br><span class="line">        net<span class="built_in">=</span>zeros(<span class="number">1</span>,n);</span><br><span class="line">        net_ab<span class="built_in">=</span>zeros(<span class="number">1</span>,n);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 存储旧的权值和参数用于后续更新</span></span><br><span class="line">        Wjk_1<span class="built_in">=</span>Wjk; Wjk_2<span class="built_in">=</span>Wjk_1;</span><br><span class="line">        Wij_1<span class="built_in">=</span>Wij; Wij_2<span class="built_in">=</span>Wij_1;</span><br><span class="line">        a_1<span class="built_in">=</span>a; a_2<span class="built_in">=</span>a_1;</span><br><span class="line">        b_1<span class="built_in">=</span>b; b_2<span class="built_in">=</span>b_1;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 网络预测</span></span><br><span class="line"><span class="comment">% 预测输入归一化</span></span><br><span class="line">x<span class="built_in">=</span>mapminmax(<span class="string">&#x27;apply&#x27;</span>,input_test<span class="string">&#x27;,inputps); % 应用归一化参数</span></span><br><span class="line"><span class="string">x=x&#x27;</span>; <span class="comment">% 转置</span></span><br><span class="line">yuce<span class="built_in">=</span>zeros(<span class="number">92</span>,<span class="number">1</span>); <span class="comment">% 初始化预测输出数组</span></span><br><span class="line"><span class="comment">% 网络预测</span></span><br><span class="line">for i<span class="built_in">=</span><span class="number">1</span>:<span class="number">92</span> <span class="comment">% 对每个测试样本进行预测</span></span><br><span class="line">    x_test<span class="built_in">=</span>x(i,:); <span class="comment">% 当前测试输入样本</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 计算隐含层的输出</span></span><br><span class="line">    for j<span class="built_in">=</span><span class="number">1</span>:<span class="number">1</span>:n</span><br><span class="line">        for k<span class="built_in">=</span><span class="number">1</span>:<span class="number">1</span>:M</span><br><span class="line">            net(j)<span class="built_in">=</span>net(j)+Wjk(j,k)*x_test(k); <span class="comment">% 计算隐含层的输入加权和</span></span><br><span class="line">            net_ab(j)<span class="built_in">=</span>(net(j)-b(j))/a(j); <span class="comment">% 应用小波变换</span></span><br><span class="line">        end</span><br><span class="line">        temp<span class="built_in">=</span>mymorlet(net_ab(j)); <span class="comment">% 计算小波函数的值</span></span><br><span class="line">        for k<span class="built_in">=</span><span class="number">1</span>:N</span><br><span class="line">            y(k)<span class="built_in">=</span>y(k)+Wij(k,j)*temp; <span class="comment">% 计算输出层的输出</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    yuce(i)<span class="built_in">=</span>y(k); <span class="comment">% 存储预测结果</span></span><br><span class="line">    <span class="comment">% 重置节点状态为下一个样本做准备</span></span><br><span class="line">    y<span class="built_in">=</span>zeros(<span class="number">1</span>,N);</span><br><span class="line">    net<span class="built_in">=</span>zeros(<span class="number">1</span>,n);</span><br><span class="line">    net_ab<span class="built_in">=</span>zeros(<span class="number">1</span>,n);</span><br><span class="line">end</span><br><span class="line"><span class="comment">% 预测输出反归一化</span></span><br><span class="line">ynn<span class="built_in">=</span>mapminmax(<span class="string">&#x27;reverse&#x27;</span>,yuce,outputps); <span class="comment">% 应用反归一化参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 结果分析</span></span><br><span class="line">figure(<span class="number">1</span>); <span class="comment">% 创建图形窗口</span></span><br><span class="line">plot(ynn,<span class="string">&#x27;r*:&#x27;</span>); <span class="comment">% 绘制预测的交通流量</span></span><br><span class="line">hold on; <span class="comment">% 保持当前图形</span></span><br><span class="line">plot(output_test,<span class="string">&#x27;bo--&#x27;</span>); <span class="comment">% 绘制实际的交通流量</span></span><br><span class="line">title(<span class="string">&#x27;预测交通流量&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); <span class="comment">% 设置图形标题</span></span><br><span class="line">legend(<span class="string">&#x27;预测交通流量&#x27;</span>,<span class="string">&#x27;实际交通流量&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); <span class="comment">% 添加图例</span></span><br><span class="line">xlabel(<span class="string">&#x27;时间点&#x27;</span>); <span class="comment">% 设置x轴标签</span></span><br><span class="line">ylabel(<span class="string">&#x27;交通流量&#x27;</span>); <span class="comment">% 设置y轴标签</span></span><br></pre></td></tr></table></figure><p>这里用到的两个子程序分别是：</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function y<span class="built_in">=</span>mymorlet(t)</span><br><span class="line"></span><br><span class="line">y <span class="built_in">=</span> exp(-(t.^<span class="number">2</span>)/<span class="number">2</span>) * cos(<span class="number">1.75</span>*t);</span><br></pre></td></tr></table></figure><p>函数 <code>mymorlet</code> 是一个自定义的函数，它定义了一个莫勒特小波（Morlet wavelet），也称为Gabor小波。莫勒特小波是一种复数小波，常用于信号处理和小波变换中，尤其是在连续小波变换（Continuous Wavelet Transform, CWT）中。</p><p>函数的功能是计算输入参数 <code>t</code> 对应的莫勒特小波的值。莫勒特小波是一个复数函数，由高斯函数的指数部分和一个余弦函数相乘组成。具体来说，莫勒特小波可以表示为：</p><p>$\psi(t) &#x3D; e^{-\frac{t^2}{2}} \cdot \cos(1.75 \cdot t)$</p><p>其中：</p><ul><li>$e^{-\frac{t^2}{2}}$  是高斯包络，它控制着小波在时间域的宽度。</li><li>$\cos(1.75 \cdot t)$  是小波的振荡部分，它控制着小波的频率。</li></ul><p>莫勒特小波由于其良好的局部化特性，常用于分析具有振荡性质的非平稳信号，例如在脑电波（EEG）分析、地震信号分析等领域。在小波神经网络中，莫勒特小波可以作为激活函数，帮助网络捕捉输入数据的局部特征。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function y<span class="built_in">=</span>d_mymorlet(t)</span><br><span class="line"></span><br><span class="line">y <span class="built_in">=</span> -<span class="number">1.75</span>*sin(<span class="number">1.75</span>*t).*exp(-(t.^<span class="number">2</span>)/<span class="number">2</span>)-t* cos(<span class="number">1.75</span>*t).*exp(-(t.^<span class="number">2</span>)/<span class="number">2</span>) ;</span><br></pre></td></tr></table></figure><p> <code>d_mymorlet</code> 定义了莫勒特小波（Morlet wavelet）的导数。这个函数计算这个小波在时间 <code>t</code> 处的导数，即小波变换中的时间导数。</p><p>函数的功能是计算输入参数 <code>t</code> 对应的莫勒特小波导数的值。这个导数由两部分组成：</p><ol><li><p>$-1.75 \sin(1.75 \cdot t) \cdot e^{-\frac{t^2}{2}}$ ：这是莫勒特小波中余弦项的导数，由链式法则和余弦函数的导数（负的正弦函数）得到。</p></li><li><p>$-t \cdot \cos(1.75 \cdot t) \cdot e^{-\frac{t^2}{2}}$：这是莫勒特小波中高斯项与余弦项乘积的导数，由高斯项 <code>t</code> 的导数（1）和乘积的导数构成。</p></li></ol><p>莫勒特小波的导数在小波变换中非常重要，因为它提供了信号局部变化率的信息。在小波神经网络中，这个导数可能用于捕捉输入数据的局部变化特征，从而提高网络对信号变化的敏感性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>元胞自动机</title>
      <link href="/2024/05/01/yuan-bao-zi-dong-ji/"/>
      <url>/2024/05/01/yuan-bao-zi-dong-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="元胞自动机的一些基本特性："><a href="#元胞自动机的一些基本特性：" class="headerlink" title="元胞自动机的一些基本特性："></a>元胞自动机的一些基本特性：</h2><ol><li><p><strong>离散空间</strong>：元胞自动机通常定义在一个规则的网格上，如一维、二维或三维的格子。</p></li><li><p><strong>有限状态</strong>：每个元胞在任何给定时间都处于有限个状态中的一个，状态可以是二进制的（例如0和1）或具有更多可能值。</p></li><li><p><strong>局部规则</strong>：元胞的状态更新基于局部规则，这些规则只依赖于元胞自身和其邻居的状态。</p></li><li><p><strong>同步更新</strong>：在每个时间步，所有元胞的状态都是同时更新的。</p></li><li><p><strong>初始条件</strong>：元胞自动机的初始状态对系统的长期行为有很大影响。</p></li><li><p><strong>时间演化</strong>：元胞自动机的状态随时间演化，形成一系列状态。</p></li><li><p><strong>Wolfram分类</strong>：斯蒂芬·沃尔夫勒姆（Stephen Wolfram）提出了一种著名的元胞自动机分类方法，将一维元胞自动机分为四类，从简单的规则到复杂的混沌行为。</p></li><li><p><strong>图灵完备性</strong>：某些元胞自动机被证明具有图灵完备性，这意味着它们能够模拟任何图灵机的计算。</p></li><li><p><strong>应用</strong>：元胞自动机被用于模拟各种自然现象，如流体动力学、细胞生长、疾病传播、交通流等。</p></li><li><p><strong>可视化</strong>：元胞自动机的演化常常通过图形方式展示，以直观地理解其动态行为。</p></li></ol><h2 id="康威的生命游戏（Conway’s-Game-of-Life）"><a href="#康威的生命游戏（Conway’s-Game-of-Life）" class="headerlink" title="康威的生命游戏（Conway’s Game of Life）"></a>康威的生命游戏（Conway’s Game of Life）</h2><p>生命游戏是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。它包括一个二维矩形世界，这个世界中的每个方格居住着一个活着的或死了的细胞。一个细胞在下一个时刻生死取决于相邻八个方格中活着的或死了的细胞的数量。通常情况，游戏的规则就是：当一个方格周围有2或3个活细胞时，方格中的活细胞在下一个时刻继续存活；即使这个时刻方格中没有活细胞，在下一个时刻也会“诞生”活细胞。<br>规则是：</p><p><strong>1.</strong> 对周围的 8 个近邻的元胞状态求和</p><p><strong>2.</strong> 如果总和为 2 的话，则下一时刻的状态不改变</p><p><strong>3.</strong> 如果总和为 3 ，则下一时刻的状态为 1，否则状态为 0</p><h2 id="二维元胞自动机模拟："><a href="#二维元胞自动机模拟：" class="headerlink" title="二维元胞自动机模拟："></a>二维元胞自动机模拟：</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 设置GUI按键</span></span><br><span class="line">plotbutton<span class="built_in">=</span>uicontrol(<span class="string">&#x27;style&#x27;</span>,<span class="string">&#x27;pushbutton&#x27;</span>,<span class="string">&#x27;string&#x27;</span>,<span class="string">&#x27;运行&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>, <span class="string">&#x27;position&#x27;</span>,[<span class="number">150</span>,<span class="number">400</span>,<span class="number">50</span>,<span class="number">20</span>], <span class="string">&#x27;callback&#x27;</span>, <span class="string">&#x27;run=1;&#x27;</span>);</span><br><span class="line">erasebutton<span class="built_in">=</span>uicontrol(<span class="string">&#x27;style&#x27;</span>,<span class="string">&#x27;pushbutton&#x27;</span>,<span class="string">&#x27;string&#x27;</span>,<span class="string">&#x27;停止&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;position&#x27;</span>,[<span class="number">250</span>,<span class="number">400</span>,<span class="number">50</span>,<span class="number">20</span>],<span class="string">&#x27;callback&#x27;</span>,<span class="string">&#x27;freeze=1;&#x27;</span>);</span><br><span class="line">quitbutton<span class="built_in">=</span>uicontrol(<span class="string">&#x27;style&#x27;</span>,<span class="string">&#x27;pushbutton&#x27;</span>,<span class="string">&#x27;string&#x27;</span>,<span class="string">&#x27;退出&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;position&#x27;</span>,[<span class="number">350</span>,<span class="number">400</span>,<span class="number">50</span>,<span class="number">20</span>],<span class="string">&#x27;callback&#x27;</span>,<span class="string">&#x27;stop=1;close;&#x27;</span>);</span><br><span class="line">number <span class="built_in">=</span> uicontrol(<span class="string">&#x27;style&#x27;</span>,<span class="string">&#x27;text&#x27;</span>,<span class="string">&#x27;string&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>, <span class="string">&#x27;position&#x27;</span>,[<span class="number">20</span>,<span class="number">400</span>,<span class="number">50</span>,<span class="number">20</span>]);</span><br><span class="line"><span class="comment">%% 元胞自动机设置</span></span><br><span class="line">n<span class="built_in">=</span><span class="number">200</span>;</span><br><span class="line"><span class="comment">%初始化各元胞状态</span></span><br><span class="line">z <span class="built_in">=</span> zeros(n,n);</span><br><span class="line">sum <span class="built_in">=</span> z;</span><br><span class="line">cells <span class="built_in">=</span> (rand(n,n))&lt;.<span class="number">6</span>;</span><br><span class="line"><span class="comment">% 建立图像句柄</span></span><br><span class="line">imh <span class="built_in">=</span> image(cat(<span class="number">3</span>,cells,z,z));</span><br><span class="line">set(imh, <span class="string">&#x27;erasemode&#x27;</span>, <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment">% 元胞更新的行列数设置</span></span><br><span class="line">x <span class="built_in">=</span> <span class="number">2</span>:n-<span class="number">1</span>;</span><br><span class="line">y <span class="built_in">=</span> <span class="number">2</span>:n-<span class="number">1</span>;</span><br><span class="line"><span class="comment">% 主事件循环</span></span><br><span class="line">stop<span class="built_in">=</span> <span class="number">0</span>; run <span class="built_in">=</span> <span class="number">0</span>;freeze <span class="built_in">=</span> <span class="number">0</span>; </span><br><span class="line">while stop<span class="built_in">=</span><span class="built_in">=</span><span class="number">0</span></span><br><span class="line">    <span class="built_in">if</span> run<span class="built_in">=</span><span class="built_in">=</span><span class="number">1</span></span><br><span class="line">        <span class="comment">% 计算邻居存活的总数</span></span><br><span class="line">        sum(x,y) <span class="built_in">=</span> cells(x,y-<span class="number">1</span>) + cells(x,y+<span class="number">1</span>) + cells(x-<span class="number">1</span>, y) + cells(x+<span class="number">1</span>,y)...</span><br><span class="line">            + cells(x-<span class="number">1</span>,y-<span class="number">1</span>) + cells(x-<span class="number">1</span>,y+<span class="number">1</span>) + cells(x+<span class="number">1</span>,y-<span class="number">1</span>) + cells(x+<span class="number">1</span>,y+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">% 按照规则更新</span></span><br><span class="line">        cells <span class="built_in">=</span> (sum<span class="built_in">=</span><span class="built_in">=</span><span class="number">3</span>) | (sum<span class="built_in">=</span><span class="built_in">=</span><span class="number">2</span> &amp; cells);</span><br><span class="line">        set(imh, <span class="string">&#x27;cdata&#x27;</span>, cat(<span class="number">3</span>,cells,z,z) )</span><br><span class="line">        stepnumber <span class="built_in">=</span> <span class="number">1</span> + str2double(get(number,<span class="string">&#x27;string&#x27;</span>));</span><br><span class="line">        set(number,<span class="string">&#x27;string&#x27;</span>,num2str(stepnumber))</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">if</span> freeze<span class="built_in">=</span><span class="built_in">=</span><span class="number">1</span></span><br><span class="line">        run <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">        freeze <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">    end</span><br><span class="line">    drawnow</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="元胞自动机模拟案例二"><a href="#元胞自动机模拟案例二" class="headerlink" title="元胞自动机模拟案例二"></a>元胞自动机模拟案例二</h2><p><strong>规则制定：</strong><br>首先定义平面中心点的数值为1，接着在每一时间步对每一点，如果周围八个点的和为偶数，则变为0，为奇数则变为 1</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 颜色控制</span></span><br><span class="line">Map <span class="built_in">=</span> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>; <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">colormap(Map);    <span class="comment">%定义所有值为1的元胞将显示为白色，值为0的元胞将显示为黑色</span></span><br><span class="line"><span class="comment">% 设置网格大小</span></span><br><span class="line">S <span class="built_in">=</span> <span class="number">121</span>;</span><br><span class="line">L <span class="built_in">=</span> zeros(S);</span><br><span class="line"><span class="comment">% 把中间一个数设置为 1 作为元胞种子</span></span><br><span class="line">M <span class="built_in">=</span> (S+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">L(M, M) <span class="built_in">=</span> <span class="number">1</span>;</span><br><span class="line">Temp <span class="built_in">=</span> L;</span><br><span class="line">imagesc(L);</span><br><span class="line"><span class="comment">% 计算层数</span></span><br><span class="line">Layer <span class="built_in">=</span> (S-<span class="number">1</span>)/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">for t<span class="built_in">=</span><span class="number">2</span>:Layer</span><br><span class="line">    for x<span class="built_in">=</span>M-t+<span class="number">1</span>:M+t-<span class="number">1</span></span><br><span class="line">       <span class="built_in">if</span> x<span class="built_in">=</span><span class="built_in">=</span>M-t+<span class="number">1</span> || x<span class="built_in">=</span><span class="built_in">=</span>M+t-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">          for y<span class="built_in">=</span>M-t+<span class="number">1</span>:M+t-<span class="number">1</span></span><br><span class="line">            SUM <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">            for m<span class="built_in">=</span>-<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">               for n<span class="built_in">=</span>-<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">                  <span class="built_in">if</span> x+m&gt;<span class="number">0</span> &amp;&amp; x+m<span class="built_in">&lt;=</span>S &amp;&amp; y+n&gt;<span class="number">0</span> &amp;&amp; y+n<span class="built_in">&lt;=</span>S</span><br><span class="line">                     SUM <span class="built_in">=</span> SUM + L(x+m, y+n); </span><br><span class="line">                  end</span><br><span class="line">               end</span><br><span class="line">            end</span><br><span class="line">            SUM <span class="built_in">=</span> SUM - L(x, y);</span><br><span class="line">            Temp(x, y) <span class="built_in">=</span> mod(SUM, <span class="number">2</span>);</span><br><span class="line">          end</span><br><span class="line">          </span><br><span class="line">       <span class="built_in">else</span></span><br><span class="line">            y <span class="built_in">=</span> M-t+<span class="number">1</span>;</span><br><span class="line">            SUM <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">            for m<span class="built_in">=</span>-<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">               for n<span class="built_in">=</span>-<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">                  <span class="built_in">if</span> x+m&gt;<span class="number">0</span> &amp;&amp; x+m<span class="built_in">&lt;=</span>S &amp;&amp; y+n&gt;<span class="number">0</span> &amp;&amp; y+n<span class="built_in">&lt;=</span>S</span><br><span class="line">                     SUM <span class="built_in">=</span> SUM + L(x+m, y+n); </span><br><span class="line">                  end</span><br><span class="line">               end</span><br><span class="line">            end</span><br><span class="line">            SUM <span class="built_in">=</span> SUM - L(x, y);</span><br><span class="line">            Temp(x, y) <span class="built_in">=</span> mod(SUM, <span class="number">2</span>);</span><br><span class="line">            </span><br><span class="line">            y <span class="built_in">=</span> M+t-<span class="number">1</span>;</span><br><span class="line">            SUM <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">            for m<span class="built_in">=</span>-<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">               for n<span class="built_in">=</span>-<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">                  <span class="built_in">if</span> x+m&gt;<span class="number">0</span> &amp;&amp; x+m<span class="built_in">&lt;=</span>S &amp;&amp; y+n&gt;<span class="number">0</span> &amp;&amp; y+n<span class="built_in">&lt;=</span>S</span><br><span class="line">                     SUM <span class="built_in">=</span> SUM + L(x+m, y+n); </span><br><span class="line">                  end</span><br><span class="line">               end</span><br><span class="line">            end</span><br><span class="line">            SUM <span class="built_in">=</span> SUM - L(x, y);</span><br><span class="line">            Temp(x, y) <span class="built_in">=</span> mod(SUM, <span class="number">2</span>);</span><br><span class="line">       end</span><br><span class="line">    end</span><br><span class="line">    L <span class="built_in">=</span> Temp;</span><br><span class="line">    imagesc(L);</span><br><span class="line">    <span class="comment">% 速度控制</span></span><br><span class="line">    pause(<span class="number">0.2</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="元胞自动机的应用实例—Nagel-Schreckenberg-模型模拟"><a href="#元胞自动机的应用实例—Nagel-Schreckenberg-模型模拟" class="headerlink" title="元胞自动机的应用实例—Nagel Schreckenberg 模型模拟"></a>元胞自动机的应用实例—Nagel Schreckenberg 模型模拟</h2><h3 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h3><p>Nagel-Schreckenberg模型是一种用于模拟交通流的简单而有效的元胞自动机模型，由德国物理学家Reinhard Nagel和Michael Schreckenberg在1992年提出。该模型主要用于描述单向道路上车辆流动的行为，能够展示出交通堵塞的形成、消散以及密度波的传播等现象。它通过规则定义车辆的加速、减速、保持速度以及换道行为，每个时间步长内，模型中的每一辆车根据以下规则更新其速度和位置：</p><ol><li><p><strong>加速规则</strong>：如果一辆车的速度v小于最大速度v_max，并且前方距离为d空白格（无车占据），则该车的速度增加1，直到达到v_max或者前方空位不足。</p></li><li><p><strong>减速规则</strong>：考虑安全距离，如果前方只有一辆车且两车距离小于安全距离d_0（通常是车速v的一倍，即d_0&#x3D;v），则必须减速直到两车距离满足安全要求，但最多减到0（即停车）。</p></li><li><p><strong>随机刹车</strong>：即使前车距离足够，也有一定概率p降低速度，模拟驾驶员的不可预测行为或道路状况的变化，通常取p较小，如0.15。</p></li><li><p><strong>速度限制</strong>：确保更新后的速度不会超过最大速度v_max，也不会低于0（即不会出现负速度）。</p></li></ol><p>模型中的每辆车占据一格空间，每一步更新时，车辆按照其当前速度前移相应的格数，然后根据上述规则调整速度，以此循环模拟交通流随时间的动态变化。Nagel-Schreckenberg模型因其简明性和能够捕捉交通流宏观特性而广泛应用于交通工程、复杂系统科学和物理学的研究中。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>python简单模拟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考链接：http://t.csdnimg.cn/2QgNz</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line">path = <span class="number">5000</span>  <span class="comment"># 道路长度</span></span><br><span class="line">n = <span class="number">100</span>  <span class="comment"># 车辆数目</span></span><br><span class="line">v0 = <span class="number">90</span>  <span class="comment"># 初始速度</span></span><br><span class="line">p = <span class="number">0.3</span>  <span class="comment"># 车辆减速概率</span></span><br><span class="line">Times = <span class="number">6000</span>  <span class="comment"># 模拟的时刻数目,时刻越长所耗时间越长</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = np.random.rand(n) * path  <span class="comment"># 保存每辆车在道路上的位置,随机进行初始化</span></span><br><span class="line">x.sort()</span><br><span class="line">v = np.tile([v0], n).astype(np.float64)  <span class="comment"># 保存每辆车的速度,并且初速度相同</span></span><br><span class="line"> </span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>), facecolor=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 模拟每个时刻</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(Times):</span><br><span class="line">    plt.scatter(x, [t] * n, s=<span class="number">1</span>, c=<span class="string">&#x27;k&#x27;</span>, alpha=<span class="number">0.05</span>)</span><br><span class="line">    <span class="comment"># 模拟每辆车</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 计算当前车与前车的距离（是环形车道）</span></span><br><span class="line">        <span class="keyword">if</span> x[(i + <span class="number">1</span>) % n] &gt; x[i]:</span><br><span class="line">            d = x[(i + <span class="number">1</span>) % n] - x[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            d = path - x[i] + x[(i + <span class="number">1</span>) % n]</span><br><span class="line">        <span class="comment"># 根据距离计算下一秒的速度</span></span><br><span class="line">        <span class="keyword">if</span> v[i] &lt; d:</span><br><span class="line">            <span class="keyword">if</span> np.random.rand() &gt; p:</span><br><span class="line">                v[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                v[i] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v[i] = d - <span class="number">1</span></span><br><span class="line">    <span class="comment"># 对速度进行限制(最高速度不得超过120)</span></span><br><span class="line">    v = v.clip(<span class="number">0</span>, <span class="number">120</span>)</span><br><span class="line">    <span class="comment"># 一秒后,车辆的位置发生变化</span></span><br><span class="line">    x += v</span><br><span class="line">    x %= path</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.xlim(<span class="number">0</span>, path)</span><br><span class="line">plt.ylim(<span class="number">0</span>, Times)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;车辆位置&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;模拟时间&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">f&#x27;Nagel-Schreckenberg模型模拟(车道长度:<span class="subst">&#123;path&#125;</span>,车辆数:<span class="subst">&#123;n&#125;</span>,初速度:<span class="subst">&#123;v0&#125;</span>,减速概率:<span class="subst">&#123;p&#125;</span>)&#x27;</span>)</span><br><span class="line">end = time.time()</span><br><span class="line">plt.text(<span class="number">1800</span>, <span class="number">6400</span>, s=<span class="string">f&#x27;Running time: <span class="subst">&#123;(end - start)&#125;</span> seconds&#x27;</span>, fontsize=<span class="number">15</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>基于MATLAB编写交通流模拟程序，通过计算机仿真来探索和分析交通流量与道路密度之间的关系，这通常被称为“流量-密度曲线”（Fundamental Diagram of Traffic Flow）。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 初始化参数</span></span><br><span class="line">clear; </span><br><span class="line">clc;   </span><br><span class="line">vmax <span class="built_in">=</span> <span class="number">10</span>; <span class="comment">% 最大速度</span></span><br><span class="line">p <span class="built_in">=</span> <span class="number">0.6</span>;       <span class="comment">% 随机制动的概率（原始数据为0.8）</span></span><br><span class="line">road_length <span class="built_in">=</span> <span class="number">1000</span>; <span class="comment">% 道路长度</span></span><br><span class="line">simulation_steps <span class="built_in">=</span> <span class="number">1000</span>; <span class="comment">% 模拟步数</span></span><br><span class="line">render_on <span class="built_in">=</span> <span class="number">0</span>; <span class="comment">% 是否渲染图形界面</span></span><br><span class="line">pause_on <span class="built_in">=</span> <span class="number">0</span>; <span class="comment">% 是否在模拟中暂停</span></span><br><span class="line">delay_on <span class="built_in">=</span> <span class="number">0</span>; <span class="comment">% 是否在模拟中延迟</span></span><br><span class="line">delay_length <span class="built_in">=</span> <span class="number">0.02</span>;    <span class="comment">% 延迟时间，用于控制帧率（10 FPS）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 初始化道路和速度状态</span></span><br><span class="line">road <span class="built_in">=</span> zeros(<span class="number">1</span>,road_length); <span class="comment">% 道路占用状态数组</span></span><br><span class="line">road_next <span class="built_in">=</span> road; <span class="comment">% 下一状态的数组</span></span><br><span class="line">velocities <span class="built_in">=</span> zeros(<span class="number">1</span>,road_length); <span class="comment">% 车辆速度状态数组</span></span><br><span class="line">velocities_next <span class="built_in">=</span> velocities; <span class="comment">% 下一速度状态的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 采样设置</span></span><br><span class="line">num_samples <span class="built_in">=</span> <span class="number">2000</span>; <span class="comment">% 采样数量</span></span><br><span class="line">samples <span class="built_in">=</span> zeros(<span class="number">2</span>,num_samples); <span class="comment">% 存储密度和流量的数组</span></span><br><span class="line">density_step <span class="built_in">=</span> <span class="number">1</span>/num_samples; <span class="comment">% 密度步长</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 初始化历史记录数组</span></span><br><span class="line">history <span class="built_in">=</span> zeros(simulation_steps, road_length); <span class="comment">% 记录道路状态历史</span></span><br><span class="line">velocity_history <span class="built_in">=</span> zeros(simulation_steps, road_length); <span class="comment">% 记录速度状态历史</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 打开图形界面</span></span><br><span class="line">figure;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 采样循环</span></span><br><span class="line">for g<span class="built_in">=</span><span class="number">1</span>:num_samples</span><br><span class="line">    <span class="comment">% 生成不同密度的交通流</span></span><br><span class="line">    road <span class="built_in">=</span> zeros(<span class="number">1</span>,road_length); <span class="comment">% 重置道路状态</span></span><br><span class="line">    road_next <span class="built_in">=</span> road; <span class="comment">% 重置下一状态</span></span><br><span class="line">    density <span class="built_in">=</span> g/num_samples; <span class="comment">% 当前密度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% 根据密度在道路上随机放置车辆</span></span><br><span class="line">    for i<span class="built_in">=</span><span class="number">1</span>:road_length</span><br><span class="line">        <span class="built_in">if</span> rand &lt; density</span><br><span class="line">            road(i) <span class="built_in">=</span> <span class="number">1</span>;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 如果开启渲染，显示当前道路状态</span></span><br><span class="line">    <span class="built_in">if</span> render_on</span><br><span class="line">        imshow(road);</span><br><span class="line">        drawnow;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 模拟循环</span></span><br><span class="line">    for i<span class="built_in">=</span><span class="number">1</span>:simulation_steps</span><br><span class="line">        <span class="comment">% 记录当前状态</span></span><br><span class="line">        history(i, :) <span class="built_in">=</span> road;</span><br><span class="line">        velocity_history(i,:) <span class="built_in">=</span> velocities;</span><br><span class="line"></span><br><span class="line">        <span class="comment">% 速度更新</span></span><br><span class="line">        for j<span class="built_in">=</span><span class="number">1</span>:road_length</span><br><span class="line">            <span class="built_in">if</span> road(j) <span class="built_in">=</span><span class="built_in">=</span> <span class="number">1</span></span><br><span class="line">                <span class="comment">% 寻找前方 vmax 个单元格内没有车辆的最远距离</span></span><br><span class="line">                distance <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">                bf <span class="built_in">=</span> <span class="number">0</span>; <span class="comment">% 标志变量，表示是否找到车辆</span></span><br><span class="line">                for k<span class="built_in">=</span><span class="number">1</span>:vmax</span><br><span class="line">                    distance <span class="built_in">=</span> k;</span><br><span class="line">                    <span class="built_in">if</span> j+k <span class="built_in">&lt;=</span> road_length</span><br><span class="line">                        index <span class="built_in">=</span> j+k;</span><br><span class="line">                    <span class="built_in">else</span></span><br><span class="line">                        index <span class="built_in">=</span> j+k-road_length; <span class="comment">% 处理循环道路的边界情况</span></span><br><span class="line">                    end</span><br><span class="line">                    <span class="built_in">if</span> road(index) <span class="built_in">=</span><span class="built_in">=</span> <span class="number">1</span></span><br><span class="line">                        bf <span class="built_in">=</span> <span class="number">1</span>;</span><br><span class="line">                    end</span><br><span class="line">                    <span class="built_in">if</span> bf <span class="built_in">=</span><span class="built_in">=</span> <span class="number">1</span>, break, end</span><br><span class="line">                end</span><br><span class="line"></span><br><span class="line">                <span class="comment">% 根据规则更新车辆速度</span></span><br><span class="line">                <span class="built_in">if</span> velocities(j) &lt; vmax</span><br><span class="line">                    velocities(j) <span class="built_in">=</span> velocities(j) + <span class="number">1</span>; <span class="comment">% 加速</span></span><br><span class="line">                end</span><br><span class="line">                <span class="built_in">if</span> (velocities(j) &gt; distance - <span class="number">1</span>) &amp;&amp; bf <span class="built_in">=</span><span class="built_in">=</span> <span class="number">1</span></span><br><span class="line">                    velocities(j) <span class="built_in">=</span> distance - <span class="number">1</span>; <span class="comment">% 避免碰撞</span></span><br><span class="line">                end</span><br><span class="line">                <span class="built_in">if</span> rand &lt; p &amp;&amp; velocities(j) &gt; <span class="number">0</span></span><br><span class="line">                    velocities(j) <span class="built_in">=</span> velocities(j) - <span class="number">1</span>; <span class="comment">% 随机减速</span></span><br><span class="line">                end</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        <span class="comment">% 移动更新</span></span><br><span class="line">        for j<span class="built_in">=</span><span class="number">1</span>:road_length</span><br><span class="line">            <span class="built_in">if</span> road(j) <span class="built_in">=</span><span class="built_in">=</span> <span class="number">1</span></span><br><span class="line">                <span class="built_in">if</span> j+velocities(j) <span class="built_in">&lt;=</span> road_length</span><br><span class="line">                    index <span class="built_in">=</span> j+velocities(j);</span><br><span class="line">                <span class="built_in">else</span></span><br><span class="line">                    index <span class="built_in">=</span> j+velocities(j) - road_length; <span class="comment">% 处理循环道路的边界情况</span></span><br><span class="line">                end</span><br><span class="line">                <span class="comment">% 检测碰撞</span></span><br><span class="line">                <span class="built_in">if</span> road_next(index) <span class="built_in">=</span><span class="built_in">=</span> <span class="number">1</span></span><br><span class="line">                    disp(<span class="string">&#x27;Collision detected&#x27;</span>);</span><br><span class="line">                end</span><br><span class="line">                road_next(index) <span class="built_in">=</span> <span class="number">1</span>;</span><br><span class="line">                velocities_next(index) <span class="built_in">=</span> velocities(j);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        <span class="comment">% 更新道路和速度状态</span></span><br><span class="line">        velocities <span class="built_in">=</span> velocities_next;</span><br><span class="line">        road <span class="built_in">=</span> road_next;</span><br><span class="line">        road_next <span class="built_in">=</span> zeros(<span class="number">1</span>,road_length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">% 如果开启渲染，显示当前道路状态</span></span><br><span class="line">        <span class="built_in">if</span> render_on</span><br><span class="line">            imshow(road);</span><br><span class="line">            drawnow;</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        <span class="comment">% 如果开启暂停，等待用户操作</span></span><br><span class="line">        <span class="built_in">if</span> pause_on</span><br><span class="line">            pause;</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        <span class="comment">% 如果开启延迟，暂停一段时间</span></span><br><span class="line">        <span class="built_in">if</span> delay_on</span><br><span class="line">            pause(delay_length);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 记录当前密度下的流量和密度</span></span><br><span class="line">    velocity_history <span class="built_in">=</span> velocity_history.*history; <span class="comment">% 计算流量</span></span><br><span class="line">    samples(:,g) <span class="built_in">=</span> [mean2(history) (sum(velocity_history(:))/sum(history(:)))*mean2(history)]; <span class="comment">% 计算平均密度和流量</span></span><br><span class="line">    disp(<span class="string">&#x27;Sample step:&#x27;</span>)</span><br><span class="line">    g <span class="comment">% 显示当前采样步骤</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘制流量-密度曲线</span></span><br><span class="line">scatter(samples(<span class="number">1</span>,:), samples(<span class="number">2</span>,:));</span><br><span class="line">axis([<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span>]); <span class="comment">% 设置坐标轴范围</span></span><br><span class="line">xlabel(<span class="string">&#x27;Density&#x27;</span>); <span class="comment">% X轴标签</span></span><br><span class="line">ylabel(<span class="string">&#x27;Flow (normalized)&#x27;</span>); <span class="comment">% Y轴标签</span></span><br><span class="line">title(<span class="string">&#x27;Flow-density Curve&#x27;</span>); <span class="comment">% 图形标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 可以选择显示整个模拟过程中的道路状态或流量状态</span></span><br><span class="line"><span class="comment">%imshow(history);</span></span><br><span class="line"><span class="comment">%ts(simulation_steps,history);</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>初始化变量</strong>:</p><ul><li><code>vmax = 10;</code>：设置车辆的最大速度。</li><li><code>p = 0.6;</code>：随机制动的概率。</li><li><code>road_length = 1000;</code>：道路长度，单位为车道单元。</li><li><code>simulation_steps = 1000;</code>：仿真步数。</li><li><code>render_on</code>, <code>pause_on</code>, <code>delay_on</code>: 控制是否渲染图形、暂停和延迟的布尔变量。</li><li><code>delay_length = 0.02;</code>：控制每帧渲染间隔时间，这里对应大约10帧每秒的刷新率。</li></ul></li><li><p><strong>定义数组</strong>:</p><ul><li>初始化道路状态数组<code>road</code>和<code>road_next</code>，以及速度状态数组<code>velocities</code>和<code>velocities_next</code>，用于存储车道上车辆的分布和速度。</li></ul></li><li><p><strong>采样循环</strong> (<code>for g=1:num_samples</code>):</p><ul><li>这个循环用于在不同的车辆密度下进行多次模拟。</li><li>计算当前的密度并随机生成初始交通分布。</li><li>如果<code>render_on</code>为真，则显示当前的道路状态。</li></ul></li><li><p><strong>仿真循环</strong> (<code>for i=1:simulation_steps</code>):</p><ul><li><strong>速度更新</strong>: 根据前方空闲空间调整车辆速度，考虑加速、碰撞避免和随机制动。</li><li><strong>移动更新</strong>: 根据当前速度移动车辆，并处理道路两端的环绕逻辑。</li><li>检查碰撞，更新<code>road_next</code>和<code>velocities_next</code>，然后将它们应用于当前状态。</li><li>再次检查是否需要渲染、暂停或延迟。</li></ul></li><li><p><strong>后处理</strong>:</p><ul><li>在每次采样结束后，计算并记录平均密度和流量（流率），存储于<code>samples</code>矩阵中。</li><li>最后，使用散点图展示所有样本点，横坐标为密度，纵坐标为归一化后的流量，得到流量-密度曲线。</li></ul></li><li><p><strong>可视化</strong>:</p><ul><li>使用MATLAB的图形功能绘制流量-密度曲线，帮助直观理解不同密度下的平均流量变化。</li></ul></li></ol><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a><strong>注意点：</strong></h3><p>这里的”密度”（density）是指在模拟的道路长度单位内单位时间内存在的车辆数，或者说是单位长度车道上的车辆数。具体到代码实现中，它是通过变量<code>density = g/num_samples;</code>来定义的，其中<code>g</code>是当前的采样序号，<code>num_samples</code>是总的采样数量，因此<code>density</code>实质上代表了一个从0到1范围内的比例值，用来模拟从完全没有车辆（密度为0）到道路完全被车辆占据（密度接近1）的各种情况。这个密度值决定了初始时在模拟道路上放置车辆的随机概率，即<code>if rand &lt; density</code>这一条件控制下的车辆分布。</p><p> <code>ts</code> 的函数，用于绘制交通模拟的时间-空间图。时间-空间图是一种展示随时间变化的空间分布情况的图表，常用于交通流模拟中，以观察车辆在道路上随时间的移动情况。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function ts(simulation_steps,history)</span><br><span class="line">figTS<span class="built_in">=</span>figure;</span><br><span class="line">axes1 <span class="built_in">=</span> axes(<span class="string">&#x27;Parent&#x27;</span>,figTS,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Arial&#x27;</span>);</span><br><span class="line">for i<span class="built_in">=</span><span class="number">1</span>:<span class="number">1</span>:simulation_steps</span><br><span class="line">    [~,col]<span class="built_in">=</span>find(history(i,:)<span class="built_in">=</span><span class="built_in">=</span><span class="number">1</span>);</span><br><span class="line">    plot(i*ones(<span class="number">1</span>,length(col)),col,<span class="string">&#x27;k.&#x27;</span>);</span><br><span class="line">    hold on</span><br><span class="line">end</span><br><span class="line">xlabel(<span class="string">&#x27;Time&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Arial&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;Space&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Arial&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li><p><code>function ts(simulation_steps,history)</code>：定义了一个名为 <code>ts</code> 的函数，它接受两个参数：<code>simulation_steps</code>（模拟步数）和 <code>history</code>（记录每一步道路状态的矩阵）。</p></li><li><p><code>figTS=figure;</code>：创建一个新的图形窗口。</p></li><li><p><code>axes1 = axes(&#39;Parent&#39;,figTS,&#39;FontSize&#39;,12,&#39;FontName&#39;,&#39;Arial&#39;);</code>：在图形窗口中创建一个坐标轴，设置字体大小为12，字体类型为 Arial。</p></li><li><p><code>for i=1:1:simulation_steps</code>：开始一个循环，从1到 <code>simulation_steps</code>（模拟步数）。</p></li><li><p><code> [~,col]=find(history(i,:)==1);</code>：在每次模拟步 <code>i</code> 的历史记录中，找到所有值为1（表示有车辆）的位置，并将其存储在 <code>col</code> 变量中。<code>find</code> 函数返回的首个输出（在这里被忽略，用 <code>~</code> 表示）是行索引，第二个输出是列索引。</p></li><li><p><code>plot(i*ones(1,length(col)),col,&#39;k.&#39;);</code>：在坐标轴上绘制点。<code>i*ones(1,length(col))</code> 创建一个与 <code>col</code> 长度相同的数组，所有元素都是当前的模拟步数 <code>i</code>，代表时间。<code>col</code> 代表空间位置。<code>&#39;k.&#39;</code> 指定了点的颜色和样式，这里是黑色圆点。</p></li><li><p><code>hold on</code>：保持当前的坐标轴和图形，以便在同一个图上绘制更多的数据。</p></li><li><p><code>xlabel(&#39;Time&#39;,&#39;FontSize&#39;,12,&#39;FontName&#39;,&#39;Arial&#39;)</code>：设置 X 轴的标签为 “Time”，并设置字体大小和类型。</p></li><li><p><code>ylabel(&#39;Space&#39;,&#39;FontSize&#39;,12,&#39;FontName&#39;,&#39;Arial&#39;)</code>：设置 Y 轴的标签为 “Space”，并设置字体大小和类型。</p></li></ol><p>上述函数的功能是绘制出每个时间步长上车辆的位置，从而形成时间-空间图。图中的每个点代表在特定时间步长下道路上的一个车辆位置。通过观察这个图，可以直观地看到车辆随时间在道路上的分布和移动情况。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>吸引-排斥优化算法</title>
      <link href="/2024/04/26/xi-yin-pai-chi-you-hua-suan-fa/"/>
      <url>/2024/04/26/xi-yin-pai-chi-you-hua-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="论文参考"><a href="#论文参考" class="headerlink" title="论文参考"></a>论文参考</h2><p>Karol Cymerys, Mariusz Oszust,Attraction–Repulsion Optimization Algorithm for Global Optimization Problems,Swarm and Evolutionary Computation,Volume 84, 2024, 101459, <a href="https://doi.org/10.1016/j.swevo.2023.101459">https://doi.org/10.1016/j.swevo.2023.101459</a>.</p><h2 id="demoGlobalOptimization-m"><a href="#demoGlobalOptimization-m" class="headerlink" title="demoGlobalOptimization.m"></a>demoGlobalOptimization.m</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Attraction - Repulsion Optimization Algorithm (AROA) for Global Optimization Problems</span></span><br><span class="line"><span class="comment">% K. Cymerys, M. Oszust </span></span><br><span class="line"></span><br><span class="line">clear <span class="built_in">all</span></span><br><span class="line">clc</span><br><span class="line"></span><br><span class="line">SearchAgents_no <span class="built_in">=</span> <span class="number">40</span>;    <span class="comment">%   Number of search agents  </span></span><br><span class="line">Max_FES <span class="built_in">=</span> <span class="number">3000</span>;          <span class="comment">% Maximum number of fitness function evaluations</span></span><br><span class="line">NoRepeats <span class="built_in">=</span> <span class="number">3</span>;           <span class="comment">% </span></span><br><span class="line">  </span><br><span class="line">fobj <span class="built_in">=</span> @(x)F22(x);       <span class="comment">%just a function</span></span><br><span class="line"></span><br><span class="line">dim <span class="built_in">=</span> <span class="number">100</span>;</span><br><span class="line">lb <span class="built_in">=</span> -<span class="number">5.12</span> * ones(<span class="number">1</span>,dim);</span><br><span class="line">ub <span class="built_in">=</span> <span class="number">5.12</span> * ones(<span class="number">1</span>,dim);</span><br><span class="line"><span class="comment">%%fmin = 0; </span></span><br><span class="line"></span><br><span class="line">outputF<span class="built_in">=</span>[];</span><br><span class="line">outputX<span class="built_in">=</span>[];</span><br><span class="line">    for k <span class="built_in">=</span> <span class="number">1</span>:NoRepeats</span><br><span class="line"></span><br><span class="line">        tic;</span><br><span class="line"></span><br><span class="line">            [Best_score, Best_pos, cg_curve] <span class="built_in">=</span> AROA(SearchAgents_no,dim,lb,ub, fobj,Max_FES);</span><br><span class="line"></span><br><span class="line">        toc </span><br><span class="line"></span><br><span class="line">       Best_score            </span><br><span class="line">       outputF <span class="built_in">=</span> [outputF;Best_score];</span><br><span class="line">       outputX <span class="built_in">=</span> [outputX;Best_pos];</span><br><span class="line"></span><br><span class="line">    end</span><br><span class="line">[Y,I] <span class="built_in">=</span> min(outputF) ;</span><br><span class="line">Y</span><br><span class="line">meanV <span class="built_in">=</span> mean(outputF)</span><br><span class="line">stdV <span class="built_in">=</span> std(outputF)</span><br></pre></td></tr></table></figure><p>定义参数与设置：</p><p><code>SearchAgents_no = 40</code>：设定搜索代理（即种群个体）的数量为40。</p><p><code>Max_FES = 3000</code>：设置最大适应度函数评估次数为3000，作为算法的迭代终止条件。</p><p><code>NoRepeats = 3</code>：设置算法重复运行次数为3次，以获取多次运行结果的统计信息。</p><p>定义目标函数与问题维度：</p><p><code>fobj = @(x)F22(x)</code>：将目标函数F22封装为匿名函数fobj，用于计算给定解x的目标函数值。</p><p><code>dim = 100</code>：设定问题的维度为100，即目标函数的自变量为100维向量。</p><p><code>lb = -5.12 * ones(1,dim)</code>：设定搜索空间下界为-5.12的100维全1向量，即每个自变量的最小值均为-5.12。</p><p><code>ub = 5.12 * ones(1,dim)</code>：设定搜索空间上界为5.12的100维全1向量，即每个自变量的最大值均为5.12。</p><p><code>%%fmin = 0;</code>：注释行，未启用（可能原本打算设置目标函数最小值为0，但被注释掉了）。</p><p>初始化结果存储数组：</p><p><code>outputF=[]</code>：创建空矩阵outputF，用于存储每次运行得到的最佳目标函数值。</p><p><code>outputX=[]</code>：创建空矩阵outputX，用于存储每次运行得到的最佳解（即最优自变量值）。</p><p>主循环：重复运行AROA算法并记录结果</p><p><code>for k = 1:NoRepeats</code>：对于设定的重复次数（3次），执行以下操作。</p><ol><li><code>tic</code>：开始计时，记录本次AROA算法运行时间。</li><li><code>[Best_score, Best_pos, cg_curve] = AROA(SearchAgents_no,dim,lb,ub, fobj,Max_FES);</code>：调用AROA函数，输入参数包括搜索代理数量、问题维度、搜索空间上下界、目标函数以及最大适应度函数评估次数。函数返回本次运行的最佳目标函数值（Best_score）、最佳解（Best_pos）以及收敛曲线数据（cg_curve）。</li><li><code>toc</code>：结束计时，输出本次AROA算法运行时间。</li><li><code>Best_score</code>：显示本次运行的最佳目标函数值。</li><li><code>outputF = [outputF;Best_score];</code>：将本次最佳目标函数值添加到outputF矩阵中。</li><li><code>outputX = [outputX;Best_pos];</code>：将本次最佳解添加到outputX矩阵中。</li></ol><p>统计分析多次运行结果：</p><p><code>[Y,I] = min(outputF)</code>：从outputF矩阵中找出最小目标函数值（Y）及其对应的索引（I）。</p><p><code>Y</code>：显示最小目标函数值。</p><p><code>meanV = mean(outputF)</code>：计算outputF矩阵中所有最佳目标函数值的平均值（meanV）。</p><p><code>stdV = std(outputF)</code>：计算outputF矩阵中所有最佳目标函数值的标准差（stdV）。</p><p>综上所述，该代码使用AROA算法对具有100维搜索空间的问题进行全局优化，重复运行3次，并记录每次运行的最佳解和目标函数值。最后，对多次运行结果进行统计分析，输出最小目标函数值、平均值及标准差。</p><h2 id="F22-m"><a href="#F22-m" class="headerlink" title="F22.m"></a>F22.m</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function  y  <span class="built_in">=</span> F22(x)</span><br><span class="line"> </span><br><span class="line">sum <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">for ii <span class="built_in">=</span> <span class="number">1</span>:length(x) </span><br><span class="line">sum <span class="built_in">=</span> sum + x(ii)^<span class="number">2</span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">y <span class="built_in">=</span> sum;</span><br></pre></td></tr></table></figure><h2 id="AROA-m"><a href="#AROA-m" class="headerlink" title="AROA.m"></a>AROA.m</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">function [fbest, xbest, Convergence_curve] <span class="built_in">=</span> AROA(N, dim, lb, ub, fobj, maxEvals)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Algorithm parameters definition</span></span><br><span class="line">    c <span class="built_in">=</span> <span class="number">0.95</span>;</span><br><span class="line">    fr1 <span class="built_in">=</span> <span class="number">0.15</span>;</span><br><span class="line">    fr2 <span class="built_in">=</span> <span class="number">0.6</span>;</span><br><span class="line">    p1 <span class="built_in">=</span> <span class="number">0.2</span>;  </span><br><span class="line">    p2 <span class="built_in">=</span> <span class="number">0.8</span>; </span><br><span class="line">    Ef <span class="built_in">=</span> <span class="number">0.4</span>;</span><br><span class="line">    tr1 <span class="built_in">=</span> <span class="number">0.9</span>;</span><br><span class="line">    tr2 <span class="built_in">=</span> <span class="number">0.85</span>; </span><br><span class="line">    tr3 <span class="built_in">=</span> <span class="number">0.9</span>;</span><br><span class="line">    <span class="comment">% Algorithm parameters definition</span></span><br><span class="line">    </span><br><span class="line">    tmax <span class="built_in">=</span> ceil((maxEvals - N)/(<span class="number">2</span>*N));</span><br><span class="line">    evalCounter <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Convergence_curve <span class="built_in">=</span> zeros(<span class="number">1</span>,tmax);</span><br><span class="line">    Xmin <span class="built_in">=</span> repmat(ones(<span class="number">1</span>,dim).*lb,N,<span class="number">1</span>);</span><br><span class="line">    Xmax <span class="built_in">=</span> repmat(ones(<span class="number">1</span>,dim).*ub,N,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">% random initialization - Eq (3)</span></span><br><span class="line">    X <span class="built_in">=</span> rand(N,dim).*(ub-lb) + lb;</span><br><span class="line">    [X, F, evalCounter] <span class="built_in">=</span> evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals);</span><br><span class="line">    [fbest, ibest] <span class="built_in">=</span> min(F);</span><br><span class="line">    xbest <span class="built_in">=</span> X(ibest,:);</span><br><span class="line">    <span class="comment">% random initialization - Eq (3)</span></span><br><span class="line"></span><br><span class="line">    X_memory <span class="built_in">=</span> X;</span><br><span class="line">    F_memory <span class="built_in">=</span> F;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Main loop</span></span><br><span class="line">    for t<span class="built_in">=</span><span class="number">1</span>:tmax</span><br><span class="line">        D <span class="built_in">=</span> squareform(pdist(X, <span class="string">&#x27;squaredeuclidean&#x27;</span>));  <span class="comment">% Eq (4) </span></span><br><span class="line">        m <span class="built_in">=</span> tanh(t, tmax, [-<span class="number">2</span>, <span class="number">7</span>]);   <span class="comment">% Eq (11)    </span></span><br><span class="line"></span><br><span class="line">        for i<span class="built_in">=</span><span class="number">1</span>:N</span><br><span class="line">           Dimax <span class="built_in">=</span> max(D(i,:));</span><br><span class="line">           k <span class="built_in">=</span> floor((<span class="number">1</span>-t/tmax)*N)+<span class="number">1</span>;  <span class="comment">% Eq (9)</span></span><br><span class="line">           [~, neighbors] <span class="built_in">=</span> sort(D(i,:));</span><br><span class="line">           </span><br><span class="line">           <span class="comment">% Attraction-Repulsion operator % Eq (6)</span></span><br><span class="line">           delta_ni <span class="built_in">=</span> zeros(<span class="number">1</span>,dim);</span><br><span class="line">           for j<span class="built_in">=</span>neighbors(<span class="number">1</span>:k)</span><br><span class="line">                I <span class="built_in">=</span> <span class="number">1</span> - (D(i,j)/Dimax);  <span class="comment">% Eq (7)</span></span><br><span class="line">                s <span class="built_in">=</span> sign(F(j)-F(i));  <span class="comment">% Eq (8)</span></span><br><span class="line">                delta_ni <span class="built_in">=</span> delta_ni + c*(X_memory(i,:)-X_memory(j,:))*I*s;</span><br><span class="line">           end</span><br><span class="line">           ni <span class="built_in">=</span> delta_ni/N;</span><br><span class="line">           <span class="comment">% Attraction-Repulsion operator % Eq (6)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">% Attraction to best solusion Eq (10)</span></span><br><span class="line">           <span class="built_in">if</span> rand &lt; p1</span><br><span class="line">               bi <span class="built_in">=</span> m*c.*(rand(<span class="number">1</span>,dim).*xbest - X_memory(i,:));</span><br><span class="line">           <span class="built_in">else</span></span><br><span class="line">               bi <span class="built_in">=</span> m*c.*(xbest - X_memory(i,:));</span><br><span class="line">           end</span><br><span class="line">           <span class="comment">% Attraction to best solusion Eq (10)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">% Local search operators Eq (15)</span></span><br><span class="line">           <span class="built_in">if</span> rand &lt; p2</span><br><span class="line">               <span class="built_in">if</span> rand &gt; <span class="number">0.5</span>*t/tmax + <span class="number">0.25</span></span><br><span class="line">                   u1 <span class="built_in">=</span> rand(<span class="number">1</span>, dim) &gt; tr1;</span><br><span class="line">                   ri <span class="built_in">=</span> u1.*random(<span class="string">&#x27;Normal&#x27;</span>, zeros(<span class="number">1</span>,dim), fr1*(<span class="number">1</span>-t/tmax)*(ub-lb));  <span class="comment">% Eq (12)</span></span><br><span class="line">               <span class="built_in">else</span></span><br><span class="line">                   <span class="comment">% Eq (13)</span></span><br><span class="line">                   u2 <span class="built_in">=</span> rand(<span class="number">1</span>,dim) &gt; tr2;</span><br><span class="line">                   w <span class="built_in">=</span> index_roulette_wheel_selection(F, k);</span><br><span class="line">                   Xw <span class="built_in">=</span> X_memory(w,:);</span><br><span class="line">                   <span class="built_in">if</span> rand &lt; <span class="number">0.5</span></span><br><span class="line">                       ri <span class="built_in">=</span> fr2*u2.*(<span class="number">1</span>-t/tmax).*sin(<span class="number">2</span>*pi*rand(<span class="number">1</span>,dim)).*abs(rand(<span class="number">1</span>,dim).*Xw-X_memory(i,:));</span><br><span class="line">                   <span class="built_in">else</span></span><br><span class="line">                       ri <span class="built_in">=</span> fr2*u2.*(<span class="number">1</span>-t/tmax).*cos(<span class="number">2</span>*pi*rand(<span class="number">1</span>,dim)).*abs(rand(<span class="number">1</span>,dim).*Xw-X_memory(i,:));</span><br><span class="line">                   end</span><br><span class="line">                   <span class="comment">% Eq (13)</span></span><br><span class="line">               end</span><br><span class="line">           <span class="built_in">else</span></span><br><span class="line">               u3 <span class="built_in">=</span> rand(<span class="number">1</span>,dim) &gt; tr3;</span><br><span class="line">               ri <span class="built_in">=</span> u3.*(<span class="number">2</span>*rand(<span class="number">1</span>,dim)-ones(<span class="number">1</span>,dim)) .* (ub-lb);  <span class="comment">% Eq (14)</span></span><br><span class="line">           end</span><br><span class="line">           <span class="comment">% Local search operators Eq (15)</span></span><br><span class="line"></span><br><span class="line">           X(i,:) <span class="built_in">=</span> X(i,:) + ni + bi + ri;  <span class="comment">% Eq(16)</span></span><br><span class="line">        end</span><br><span class="line">        </span><br><span class="line">        [X, F, evalCounter] <span class="built_in">=</span> evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals);</span><br><span class="line">        [fbest_candidate, ibest_candidate] <span class="built_in">=</span> min(F);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">if</span> fbest_candidate &lt; fbest</span><br><span class="line">            fbest <span class="built_in">=</span> fbest_candidate;</span><br><span class="line">            xbest <span class="built_in">=</span> X(ibest_candidate, :);</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">    [X, F] <span class="built_in">=</span> memory_operator(X, F, X_memory, F_memory);  <span class="comment">% Eq (18)</span></span><br><span class="line">        X_memory <span class="built_in">=</span> X;</span><br><span class="line">        F_memory <span class="built_in">=</span> F; </span><br><span class="line"></span><br><span class="line">        <span class="comment">% Eq (17) </span></span><br><span class="line">        CF<span class="built_in">=</span>(<span class="number">1</span>-t/tmax)^<span class="number">3</span> ; </span><br><span class="line">        <span class="built_in">if</span> rand &lt; Ef</span><br><span class="line">            u4 <span class="built_in">=</span> rand(N,dim) &lt; Ef;                                                                                              </span><br><span class="line">            X <span class="built_in">=</span> X + CF*(u4.*(rand(N,dim).*(Xmax-Xmin) + Xmin));</span><br><span class="line">        <span class="built_in">else</span></span><br><span class="line">            r7 <span class="built_in">=</span> rand();</span><br><span class="line">            X <span class="built_in">=</span> X + (CF*(<span class="number">1</span>-r7) + r7)*(X(randperm(N),:) - X(randperm(N),:));</span><br><span class="line">        end</span><br><span class="line"><span class="comment">% Eq (17)</span></span><br><span class="line"></span><br><span class="line">        [X, F, evalCounter] <span class="built_in">=</span> evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals);</span><br><span class="line">        [fbest_candidate, ibest_candidate] <span class="built_in">=</span> min(F);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">if</span> fbest_candidate &lt; fbest</span><br><span class="line">            fbest <span class="built_in">=</span> fbest_candidate;</span><br><span class="line">            xbest <span class="built_in">=</span> X(ibest_candidate, :);</span><br><span class="line">        end</span><br><span class="line"> </span><br><span class="line">        [X, F] <span class="built_in">=</span> memory_operator(X, F, X_memory, F_memory);  <span class="comment">% Eq (18)</span></span><br><span class="line">        X_memory <span class="built_in">=</span> X;</span><br><span class="line">        F_memory <span class="built_in">=</span> F; </span><br><span class="line"></span><br><span class="line">      Convergence_curve(t) <span class="built_in">=</span> fbest;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function [X, F, evalCounter] <span class="built_in">=</span> evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals)</span><br><span class="line">    N <span class="built_in">=</span> size(X,<span class="number">1</span>);</span><br><span class="line">    F <span class="built_in">=</span> Inf(N,<span class="number">1</span>);</span><br><span class="line">    X <span class="built_in">=</span> max(lb, min(ub, X)); <span class="comment">% Check space bounds</span></span><br><span class="line">    </span><br><span class="line">    for i<span class="built_in">=</span><span class="number">1</span>:N</span><br><span class="line">        <span class="built_in">if</span> evalCounter &gt;<span class="built_in">=</span> maxEvals</span><br><span class="line">            break</span><br><span class="line">        end</span><br><span class="line">        F(i) <span class="built_in">=</span> fobj(X(i,:));</span><br><span class="line">        evalCounter <span class="built_in">=</span> evalCounter + <span class="number">1</span>;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function [X, F] <span class="built_in">=</span> memory_operator(X, F, X_memory, F_memory)</span><br><span class="line">    dim <span class="built_in">=</span> size(X, <span class="number">2</span>);</span><br><span class="line">    Inx <span class="built_in">=</span> F_memory &lt; F;</span><br><span class="line">    Indx <span class="built_in">=</span> repmat(Inx,<span class="number">1</span>,dim);</span><br><span class="line">    X <span class="built_in">=</span> Indx.*X_memory + ~Indx.*X;</span><br><span class="line">    F <span class="built_in">=</span> Inx.*F_memory + ~Inx.*F;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function [y] <span class="built_in">=</span> tanh(t, tmax, range)</span><br><span class="line">    z <span class="built_in">=</span> <span class="number">2</span>*(t/tmax*(range(<span class="number">2</span>)-range(<span class="number">1</span>)) + range(<span class="number">1</span>));</span><br><span class="line">    y <span class="built_in">=</span> <span class="number">0.5</span>*((exp(z)-<span class="number">1</span>)/(exp(z)+<span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function [selected_index] <span class="built_in">=</span> index_roulette_wheel_selection(F, k)</span><br><span class="line">    fitness <span class="built_in">=</span> F(<span class="number">1</span>:k);</span><br><span class="line">    weights <span class="built_in">=</span> max(fitness) - fitness;</span><br><span class="line">    weights <span class="built_in">=</span> cumsum(weights/sum(weights));</span><br><span class="line">    </span><br><span class="line">    selected_index <span class="built_in">=</span> roulette_wheel_selection(weights);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function [selected_index] <span class="built_in">=</span> roulette_wheel_selection(weights)</span><br><span class="line">    r <span class="built_in">=</span> rand();</span><br><span class="line">    selected_index <span class="built_in">=</span> <span class="number">1</span>;</span><br><span class="line">    for index<span class="built_in">=</span>size(weights,<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">if</span> r <span class="built_in">&lt;=</span> weights(index)</span><br><span class="line">            selected_index <span class="built_in">=</span> index;</span><br><span class="line">            break;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>N</code>: 搜索代理（种群个体）数量</li><li><code>dim</code>: 问题维度</li><li><code>lb</code>: 搜索空间下界向量</li><li><code>ub</code>: 搜索空间上界向量</li><li><code>fobj</code>: 目标函数（匿名函数）</li><li><code>maxEvals</code>: 最大适应度函数评估次数</li></ul><p><strong>函数返回以下输出结果：</strong></p><ul><li><code>fbest</code>: 找到的最小目标函数值</li><li><code>xbest</code>: 对应最小目标函数值的最优解</li><li><code>Convergence_curve</code>: 收敛曲线数据</li></ul><p><strong>算法参数定义</strong></p><ul><li>定义了AROA算法中涉及的多个常数参数，如c、fr1、fr2等，这些参数用于控制算法中不同操作的比例、强度等。</li></ul><p><strong>初始化</strong></p><ul><li>计算最大迭代次数<code>tmax</code>，初始化评价计数器<code>evalCounter</code>。</li><li>初始化用于记录全局最优解的<code>fbest</code>、<code>xbest</code>，以及用于记录收敛曲线的<code>Convergence_curve</code>。</li><li>初始化搜索空间边界向量<code>Xmin</code>、<code>Xmax</code>。</li><li>随机生成初始种群<code>X</code>，并对其进行适应度评估（通过<code>evaluate_population</code>函数），得到目标函数值<code>F</code>。根据<code>F</code>找到当前全局最优解<code>fbest</code>、<code>xbest</code>，以及保存当前种群状态的<code>X_memory</code>和<code>F_memory</code>。</li></ul><p><strong>主循环（tmax次迭代）</strong></p><ul><li>计算种群间距离矩阵<code>D</code>（欧氏距离）。</li><li>根据当前迭代次数<code>t</code>计算参数<code>m</code>。</li><li>对每个搜索代理（<code>i</code>）执行以下操作：<ul><li>计算吸引力-排斥力操作：<ul><li>计算当前搜索代理与其他邻居间的吸引力-排斥力向量<code>delta_ni</code>。</li><li>合并所有邻居的贡献得到<code>ni</code>。</li></ul></li><li>吸引至全局最优解操作：<ul><li>根据概率<code>p1</code>决定是否使用随机缩放的全局最优解。</li><li>计算吸引至全局最优解的向量<code>bi</code>。</li></ul></li><li>局部搜索操作：<ul><li>根据概率<code>p2</code>决定采用哪种局部搜索策略（高斯扰动、邻域扰动或均匀扰动）。</li><li>根据所选策略计算局部搜索向量<code>ri</code>。</li></ul></li><li>更新搜索代理位置：<code>X(i,:) = X(i,:) + ni + bi + ri</code>。</li></ul></li><li>对更新后的种群<code>X</code>进行适应度评估（通过<code>evaluate_population</code>函数），并检查是否找到新的全局最优解。</li><li>执行记忆操作（通过<code>memory_operator</code>函数），更新种群<code>X</code>和目标函数值<code>F</code>，同时更新记忆中的种群状态<code>X_memory</code>和<code>F_memory</code>。</li><li>执行混沌扰动操作，对种群进行混沌移动，再次进行适应度评估并检查全局最优解。</li><li>再次执行记忆操作，更新相关变量。</li><li>记录当前迭代的全局最优解<code>fbest</code>至收敛曲线<code>Convergence_curve</code>。</li></ul><p><strong>辅助函数</strong></p><ul><li><code>evaluate_population(X, fobj, ub, lb, evalCounter, maxEvals)</code>: 评估种群<code>X</code>在目标函数<code>fobj</code>下的适应度，确保解位于搜索空间内，并更新评价计数器。</li><li><code>memory_operator(X, F, X_memory, F_memory)</code>: 根据记忆中的最优解和当前种群的最优解，选择保留更好的解。</li><li><code>tanh(t, tmax, range)</code>: 计算双曲正切函数（tanh）的值，用于调整算法参数。</li><li><code>index_roulette_wheel_selection(F, k)</code>: 使用轮盘赌选择法在前<code>k</code>个个体中按适应度比例选取一个个体的索引。</li><li><code>roulette_wheel_selection(weights)</code>: 实现基本的轮盘赌选择算法，根据权重向量<code>weights</code>随机选择一个索引。</li></ul><p>选一个函数做测试（2维0-10范围的最小值为:-18.5547）</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function z <span class="built_in">=</span> F22(x)</span><br><span class="line">    X <span class="built_in">=</span> x(:, <span class="number">1</span>);</span><br><span class="line">    Y <span class="built_in">=</span> x(:, <span class="number">2</span>);    </span><br><span class="line">    <span class="comment">%z = X.^2 + Y.^2 + (25 * (sin(X).^2 + sin(Y).^2));</span></span><br><span class="line">    z<span class="built_in">=</span>X.*sin(<span class="number">4</span>.*X)+ <span class="number">1.1</span>.*Y.*sin(<span class="number">2</span>.*Y);</span><br><span class="line">    y <span class="built_in">=</span> z;</span><br><span class="line">end </span><br></pre></td></tr></table></figure><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Y <span class="built_in">=</span></span><br><span class="line"></span><br><span class="line">  -<span class="number">18.5547</span></span><br><span class="line"></span><br><span class="line">meanV <span class="built_in">=</span></span><br><span class="line"></span><br><span class="line">  -<span class="number">18.5547</span></span><br><span class="line"></span><br><span class="line">stdV <span class="built_in">=</span></span><br><span class="line"></span><br><span class="line">   <span class="number">1.4862</span>e-<span class="number">14</span></span><br><span class="line">&gt;&gt; </span><br></pre></td></tr></table></figure><p>测试函数：</p><h2 id="Rastrigin"><a href="#Rastrigin" class="headerlink" title="Rastrigin"></a>Rastrigin</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function z <span class="built_in">=</span> F22(x)</span><br><span class="line"><span class="comment">% F22- Rastrigin  lower=[-5.12], upper=[5.12] gminimum=[0], dim=30</span></span><br><span class="line">n <span class="built_in">=</span> size(x, <span class="number">2</span>);</span><br><span class="line">A <span class="built_in">=</span> <span class="number">10</span>;</span><br><span class="line">z <span class="built_in">=</span> (A * n) + (sum(x .^<span class="number">2</span> - A * cos(<span class="number">2</span> * pi .* x), <span class="number">2</span>));</span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Y <span class="built_in">=</span></span><br><span class="line"></span><br><span class="line">   <span class="number">1.0630</span>e-<span class="number">11</span></span><br><span class="line"></span><br><span class="line">meanV <span class="built_in">=</span></span><br><span class="line"></span><br><span class="line">   <span class="number">24.0180</span></span><br><span class="line"></span><br><span class="line">stdV <span class="built_in">=</span></span><br><span class="line"></span><br><span class="line">   <span class="number">23.2159</span></span><br></pre></td></tr></table></figure><p>Rastrigin函数是一个典型的非线性多峰函数，在搜索区域内存在许多极大值和极小值，导致寻找全局最小值比较困难，常用来测试寻优算法的性能。Rastrigin函数表达式和函数图像如下：<br><img src="https://pic.imgdb.cn/item/662bded90ea9cb1403fa9b7c.png" alt="alt text"><br><img src="/" alt="alt text"></p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">clc</span><br><span class="line">clear</span><br><span class="line">close <span class="built_in">all</span></span><br><span class="line">[x,y]<span class="built_in">=</span> meshgrid(-<span class="number">5</span>:<span class="number">0.1</span>:<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">z <span class="built_in">=</span> x.^<span class="number">2</span>+y.^<span class="number">2</span>+(<span class="number">0.5</span>.*i.*x).^<span class="number">2</span>+(<span class="number">0.5</span>.*i*y).^<span class="number">2</span>+(<span class="number">0.5</span>.*i.*x).^<span class="number">4</span>+(<span class="number">0.5</span>.*i.*y).^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">xx<span class="built_in">=</span><span class="number">15</span>*rand(<span class="number">30</span>,<span class="number">1</span>)-<span class="number">5</span>;</span><br><span class="line">yy<span class="built_in">=</span><span class="number">15</span>*rand(<span class="number">30</span>,<span class="number">1</span>)-<span class="number">5</span>;</span><br><span class="line">zz <span class="built_in">=</span> xx.^<span class="number">2</span>+yy.^<span class="number">2</span>+(<span class="number">0.5</span>.*i.*xx).^<span class="number">2</span>+(<span class="number">0.5</span>.*i*yy).^<span class="number">2</span>+(<span class="number">0.5</span>.*i.*xx).^<span class="number">4</span>+(<span class="number">0.5</span>.*i.*yy).^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">[nx,ny] <span class="built_in">=</span> min(z);</span><br><span class="line">[mx,my] <span class="built_in">=</span> min(nx);</span><br><span class="line">figure</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">surf(x,y,z)</span><br><span class="line">hold on</span><br><span class="line">plot3(xx,yy,zz,<span class="string">&#x27;k*&#x27;</span>)<span class="comment">%,&#x27;MarkerFaceColor&#x27;,&#x27;r&#x27;</span></span><br><span class="line">shading interp</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">zlabel(<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">colormap(jet)</span><br><span class="line">view([-<span class="number">107</span> <span class="number">49</span>])</span><br><span class="line">set(gca,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">surf(x,y,z)</span><br><span class="line">hold on</span><br><span class="line">plot3(x(ny(<span class="number">1</span>),my),y(ny(<span class="number">1</span>),my),mx,<span class="string">&#x27;ro&#x27;</span>,<span class="string">&#x27;MarkerFaceColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;MarkerSize&#x27;</span>,<span class="number">10</span>)<span class="comment">%,&#x27;MarkerFaceColor&#x27;,&#x27;r&#x27;</span></span><br><span class="line">shading interp</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">zlabel(<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">view([-<span class="number">107</span> <span class="number">49</span>])</span><br><span class="line">colormap(jet)</span><br><span class="line">set(gca,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="Schwefel’s-Problem-1-2"><a href="#Schwefel’s-Problem-1-2" class="headerlink" title="Schwefel’s Problem 1.2"></a>Schwefel’s Problem 1.2</h2><p>Schwefel’s Problem 1.2</p><p><a href="https://al-roomi.org/component/content/article?id=188:schwefel-s-function-no-1-2-double-sum-or-rotated-hyper-ellipsoid-function">https://al-roomi.org/component/content/article?id=188:schwefel-s-function-no-1-2-double-sum-or-rotated-hyper-ellipsoid-function</a></p><p><a href="https://www.oreilly.com/library/view/evolutionary-computation-with/9781848218079/16_appendix01.xhtml">https://www.oreilly.com/library/view/evolutionary-computation-with/9781848218079/16_appendix01.xhtml</a></p><p><a href="https://blog.csdn.net/abc991835105/article/details/127936204">https://blog.csdn.net/abc991835105/article/details/127936204</a></p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function z <span class="built_in">=</span> F2(x)</span><br><span class="line"><span class="comment">% F22- Schwefel 1.2 lower=[-100], upper=[100], gminimum=[0], dim=30</span></span><br><span class="line">z <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">v1 <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">dim<span class="built_in">=</span>size(x,<span class="number">2</span>);</span><br><span class="line">for i <span class="built_in">=</span> <span class="number">1</span>:dim</span><br><span class="line">    v1<span class="built_in">=</span><span class="number">0</span>;</span><br><span class="line">    for j <span class="built_in">=</span> <span class="number">1</span>: i</span><br><span class="line">        v1 <span class="built_in">=</span> v1 + x(:,j);</span><br><span class="line">    end</span><br><span class="line">    z <span class="built_in">=</span> z + v1.^<span class="number">2</span>;</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109c81.jpg" alt="alt text"><br><img src="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109d04.jpg" alt="alt text"><br><img src="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109d2b.jpg" alt="alt text"><br><img src="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109c57.jpg" alt="alt text"><br><img src="https://pic.imgdb.cn/item/662be6fc0ea9cb1403109c0b.jpg" alt="alt text"></p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Schwefel&#x27;s Problem # 1.2 (Double-Sum or Rotated Hyper-Ellipsoid Function)</span></span><br><span class="line"><span class="comment">% Range of initial points: -100 &lt;= xj &lt;= 100 , j=1,2,...,n</span></span><br><span class="line"><span class="comment">% Global maxima: (x1,x2,...,xn)=0</span></span><br><span class="line"><span class="comment">% f(X)=0</span></span><br><span class="line"><span class="comment">% Coded by: Ali R. Alroomi | Last Update: 07 June 2015 | www.al-roomi.org</span></span><br><span class="line">    </span><br><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">warning off</span><br><span class="line">    </span><br><span class="line">x1min<span class="built_in">=</span>-<span class="number">100</span>;</span><br><span class="line">x1max<span class="built_in">=</span><span class="number">100</span>;</span><br><span class="line">x2min<span class="built_in">=</span>-<span class="number">100</span>;</span><br><span class="line">x2max<span class="built_in">=</span><span class="number">100</span>;</span><br><span class="line">R<span class="built_in">=</span><span class="number">1500</span>; <span class="comment">% steps resolution</span></span><br><span class="line">x1<span class="built_in">=</span>x1min:(x1max-x1min)/R:x1max;</span><br><span class="line">x2<span class="built_in">=</span>x2min:(x2max-x2min)/R:x2max;</span><br><span class="line"> </span><br><span class="line">for j<span class="built_in">=</span><span class="number">1</span>:length(x1)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% For 1-dimensional plotting</span></span><br><span class="line">    f1(j)<span class="built_in">=</span>x1(j)^<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% For 2-dimensional plotting</span></span><br><span class="line">    for i<span class="built_in">=</span><span class="number">1</span>:length(x2)</span><br><span class="line">        fn(i)<span class="built_in">=</span>x1(j)^<span class="number">2</span>+(x1(j)+x2(i))^<span class="number">2</span>;</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    fn_tot(j,:)<span class="built_in">=</span>fn;</span><br><span class="line"> </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">figure(<span class="number">1</span>)</span><br><span class="line">plot(x1,f1);set(gca,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;f(x)&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;2D View&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">24</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">figure(<span class="number">2</span>)</span><br><span class="line">meshc(x1,x2,fn_tot);colorbar;set(gca,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;x_2&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">set(get(gca,<span class="string">&#x27;xlabel&#x27;</span>),<span class="string">&#x27;rotation&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;VerticalAlignment&#x27;</span>,<span class="string">&#x27;bottom&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;x_1&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">set(get(gca,<span class="string">&#x27;ylabel&#x27;</span>),<span class="string">&#x27;rotation&#x27;</span>,-<span class="number">25</span>,<span class="string">&#x27;VerticalAlignment&#x27;</span>,<span class="string">&#x27;bottom&#x27;</span>);</span><br><span class="line">zlabel(<span class="string">&#x27;f(X)&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;3D View&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">24</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">figure(<span class="number">3</span>)</span><br><span class="line">mesh(x1,x2,fn_tot);view(<span class="number">0</span>,<span class="number">90</span>);colorbar;set(gca,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;x_2&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;x_1&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">zlabel(<span class="string">&#x27;f(X)&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;X-Y Plane View&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">24</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">figure(<span class="number">4</span>)</span><br><span class="line">mesh(x1,x2,fn_tot);view(<span class="number">90</span>,<span class="number">0</span>);colorbar;set(gca,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;x_2&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;x_1&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">zlabel(<span class="string">&#x27;f(X)&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;X-Z Plane View&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">24</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">figure(<span class="number">5</span>)</span><br><span class="line">mesh(x1,x2,fn_tot);view(<span class="number">0</span>,<span class="number">0</span>);colorbar;set(gca,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;x_2&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;x_1&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">zlabel(<span class="string">&#x27;f(X)&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Y-Z Plane View&#x27;</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">24</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法优化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>季节优化算法</title>
      <link href="/2024/04/26/ji-jie-you-hua-suan-fa/"/>
      <url>/2024/04/26/ji-jie-you-hua-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="参考论文"><a href="#参考论文" class="headerlink" title="参考论文"></a>参考论文</h2><p>Emami, Hojjat. “Seasons Optimization Algorithm.” Engineering with Computers, vol. 38, no. 2, Springer Science and Business Media LLC, Aug. 2020, pp. 1845–65, doi:10.1007&#x2F;s00366-020-01133-5.</p><h2 id="脚本解读"><a href="#脚本解读" class="headerlink" title="脚本解读"></a>脚本解读</h2><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">clear <span class="built_in">all</span>;</span><br><span class="line">clc;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% Problem Statement</span></span><br><span class="line">ProblemParams.CostFuncName <span class="built_in">=</span> <span class="string">&#x27;F8&#x27;</span>;</span><br><span class="line">[fobj, lowerbound, upperbound, globalCost, dimension]<span class="built_in">=</span>GetBenchmarkFunction(ProblemParams.CostFuncName);</span><br><span class="line">ProblemParams.CostFuncName<span class="built_in">=</span>fobj;</span><br><span class="line">ProblemParams.lb<span class="built_in">=</span>lowerbound;</span><br><span class="line">ProblemParams.ub<span class="built_in">=</span>upperbound;</span><br><span class="line">ProblemParams.NPar <span class="built_in">=</span> dimension;</span><br><span class="line">ProblemParams.gcost<span class="built_in">=</span>globalCost;</span><br><span class="line"></span><br><span class="line">ProblemParams.VarMin <span class="built_in">=</span>ProblemParams.lb;</span><br><span class="line">ProblemParams.VarMax <span class="built_in">=</span> ProblemParams.ub;</span><br><span class="line"></span><br><span class="line"><span class="built_in">if</span> numel(ProblemParams.VarMin)<span class="built_in">=</span><span class="built_in">=</span><span class="number">1</span></span><br><span class="line">    ProblemParams.VarMin<span class="built_in">=</span>repmat(ProblemParams.VarMin,<span class="number">1</span>,ProblemParams.NPar);</span><br><span class="line">    ProblemParams.VarMax<span class="built_in">=</span>repmat(ProblemParams.VarMax,<span class="number">1</span>,ProblemParams.NPar);</span><br><span class="line">end</span><br><span class="line">ProblemParams.SearchSpaceSize <span class="built_in">=</span> ProblemParams.VarMax - ProblemParams.VarMin;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AlgorithmParams.NumOfTrees <span class="built_in">=</span> <span class="number">8</span>;</span><br><span class="line">AlgorithmParams.NumOfYears <span class="built_in">=</span> <span class="number">50</span>;</span><br><span class="line">AlgorithmParams.Pmin <span class="built_in">=</span> <span class="number">0.4</span>;</span><br><span class="line">AlgorithmParams.Pmax <span class="built_in">=</span> <span class="number">0.6</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% Main Loop</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for year<span class="built_in">=</span> <span class="number">1</span>:AlgorithmParams.NumOfYears</span><br><span class="line">    </span><br><span class="line">    p<span class="built_in">=</span>AlgorithmParams.Pmax-(year/AlgorithmParams.NumOfYears)*(AlgorithmParams.Pmax-AlgorithmParams.Pmin);            <span class="comment">%pr, ps and pw are in the range [0.4, 0.6]</span></span><br><span class="line">    AlgorithmParams.RenewRate<span class="built_in">=</span>p;</span><br><span class="line">    AlgorithmParams.SeedingRate<span class="built_in">=</span>p;</span><br><span class="line">    AlgorithmParams.ColdThreshold<span class="built_in">=</span>p;</span><br><span class="line">    AlgorithmParams.CompetitionRate <span class="built_in">=</span> p;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">%% Spring Season</span></span><br><span class="line">    <span class="built_in">if</span> (year<span class="built_in">=</span><span class="built_in">=</span><span class="number">1</span>)</span><br><span class="line">        InitialTrees <span class="built_in">=</span> CreateForest(AlgorithmParams, ProblemParams);</span><br><span class="line">        Forest<span class="built_in">=</span>InitialTrees;</span><br><span class="line">        InitialCost <span class="built_in">=</span> feval(ProblemParams.CostFuncName,InitialTrees);</span><br><span class="line">        Forest(:,end+<span class="number">1</span>) <span class="built_in">=</span> InitialCost;</span><br><span class="line">    <span class="built_in">else</span></span><br><span class="line">        Forest <span class="built_in">=</span> Renew(Forest, Seeds, AlgorithmParams, ProblemParams);</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">%% Summer Season  (Growth &amp; Competition)</span></span><br><span class="line">    [Forest] <span class="built_in">=</span> Competition (Forest, AlgorithmParams, ProblemParams, year);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">%% Autumn Season</span></span><br><span class="line">    Seeds <span class="built_in">=</span> Seeding(Forest,AlgorithmParams, ProblemParams);</span><br><span class="line">    s<span class="built_in">=</span>size(Seeds,<span class="number">1</span>);</span><br><span class="line">    AlgorithmParams.s<span class="built_in">=</span>s;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">%% Winter Season</span></span><br><span class="line">    Forest <span class="built_in">=</span> Resistance(Forest,AlgorithmParams, ProblemParams);</span><br><span class="line">    </span><br><span class="line">    Costs <span class="built_in">=</span> Forest(:,end);</span><br><span class="line">    MinimumCost(year) <span class="built_in">=</span> min(Costs);</span><br><span class="line">    </span><br><span class="line">    fprintf(<span class="string">&#x27;Minimum Cost in Iteration %d is %3.16f \n&#x27;</span>, year,MinimumCost(year));</span><br><span class="line">    </span><br><span class="line">end  </span><br></pre></td></tr></table></figure><p>这是一个MATLAB脚本，用于模拟森林生态系统演化过程，并寻找最优树种分布以最小化特定成本函数。</p><p><strong>初始化部分</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clear all;  <span class="comment">% 清除工作空间中的所有变量</span></span><br><span class="line">clc;        <span class="comment">% 清除命令窗口中的输出信息</span></span><br></pre></td></tr></table></figure><p><strong>问题参数设定</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 定义问题参数</span></span><br><span class="line">ProblemParams.CostFuncName = <span class="string">&#x27;F8&#x27;</span>;   <span class="comment">% 设置成本函数为F8</span></span><br><span class="line">[fobj, lowerbound, upperbound, globalCost, dimension] = GetBenchmarkFunction(ProblemParams.CostFuncName);</span><br><span class="line">ProblemParams.CostFuncName = fobj;    <span class="comment">% 将成本函数句柄赋值给ProblemParams.CostFuncName</span></span><br><span class="line">ProblemParams.lb = lowerbound;       <span class="comment">% 设置变量下界</span></span><br><span class="line">ProblemParams.ub = upperbound;       <span class="comment">% 设置变量上界</span></span><br><span class="line">ProblemParams.NPar = dimension;      <span class="comment">% 设置问题维度（即决策变量个数）</span></span><br><span class="line">ProblemParams.gcost = globalCost;     <span class="comment">% 设置全局最小成本</span></span><br><span class="line"></span><br><span class="line">ProblemParams.VarMin = ProblemParams.lb;   <span class="comment">% 变量最小值</span></span><br><span class="line">ProblemParams.VarMax = ProblemParams.ub;   <span class="comment">% 变量最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 如果变量上下界只给出一个值（即所有变量有相同的上下界），则扩展为与维度相匹配的向量</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">numel</span>(ProblemParams.VarMin) == <span class="number">1</span></span><br><span class="line">    ProblemParams.VarMin = <span class="built_in">repmat</span>(ProblemParams.VarMin, <span class="number">1</span>, ProblemParams.NPar);</span><br><span class="line">    ProblemParams.VarMax = <span class="built_in">repmat</span>(ProblemParams.VarMax, <span class="number">1</span>, ProblemParams.NPar);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 计算搜索空间大小（即变量取值范围）</span></span><br><span class="line">ProblemParams.SearchSpaceSize = ProblemParams.VarMax - ProblemParams.VarMin;</span><br></pre></td></tr></table></figure><p>这部分代码定义了问题参数结构体<code>ProblemParams</code>，包括成本函数名、变量上下界、问题维度、全局最小成本、变量最小值、变量最大值和搜索空间大小。其中，<code>GetBenchmarkFunction</code>函数用于获取成本函数相关信息。</p><p><strong>算法参数设定</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 定义算法参数</span></span><br><span class="line">AlgorithmParams.NumOfTrees = <span class="number">8</span>;         <span class="comment">% 设置每棵树种的数量</span></span><br><span class="line">AlgorithmParams.NumOfYears = <span class="number">50</span>;        <span class="comment">% 设置模拟年数</span></span><br><span class="line">AlgorithmParams.Pmin = <span class="number">0.4</span>;            <span class="comment">% 设置参数P的最小值</span></span><br><span class="line">AlgorithmParams.Pmax = <span class="number">0.6</span>;            <span class="comment">% 设置参数P的最大值</span></span><br></pre></td></tr></table></figure><p>这部分代码定义了算法参数结构体<code>AlgorithmParams</code>，包括每棵树种数量、模拟年数和参数P的范围（P在森林生态模型中可能代表更新率、播种率、冷阈值、竞争率等）。</p><p><strong>主循环</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> year = <span class="number">1</span>:AlgorithmParams.NumOfYears</span><br><span class="line">    <span class="comment">% 根据模拟年份计算参数P的值</span></span><br><span class="line">    p = AlgorithmParams.Pmax - (year / AlgorithmParams.NumOfYears) * (AlgorithmParams.Pmax - AlgorithmParams.Pmin);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 更新参数P对应的森林生态模型参数</span></span><br><span class="line">    AlgorithmParams.RenewRate = p;          <span class="comment">% 更新率</span></span><br><span class="line">    AlgorithmParams.SeedingRate = p;        <span class="comment">% 播种率</span></span><br><span class="line">    AlgorithmParams.ColdThreshold = p;      <span class="comment">% 冷阈值</span></span><br><span class="line">    AlgorithmParams.CompetitionRate = p;    <span class="comment">% 竞争率</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%% 春季：创建或更新森林</span></span><br><span class="line">    <span class="keyword">if</span> year == <span class="number">1</span></span><br><span class="line">        InitialTrees = CreateForest(AlgorithmParams, ProblemParams);  <span class="comment">% 第一年创建初始森林</span></span><br><span class="line">        Forest = InitialTrees;</span><br><span class="line">        InitialCost = feval(ProblemParams.CostFuncName, InitialTrees);  <span class="comment">% 计算初始森林的成本</span></span><br><span class="line">        Forest(:, <span class="keyword">end</span> + <span class="number">1</span>) = InitialCost;                             <span class="comment">% 在森林矩阵末尾添加成本列</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Forest = Renew(Forest, Seeds, AlgorithmParams, ProblemParams);  <span class="comment">% 后续年份更新森林</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%% 夏季：生长与竞争</span></span><br><span class="line">    [Forest] = Competition(Forest, AlgorithmParams, ProblemParams, year);</span><br><span class="line"></span><br><span class="line">    <span class="comment">%% 秋季：播种</span></span><br><span class="line">    Seeds = Seeding(Forest, AlgorithmParams, ProblemParams);</span><br><span class="line">    s = <span class="built_in">size</span>(Seeds, <span class="number">1</span>);</span><br><span class="line">    AlgorithmParams.s = s;  <span class="comment">% 更新种子数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%% 冬季：抵抗寒冷</span></span><br><span class="line">    Forest = Resistance(Forest, AlgorithmParams, ProblemParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">%% 记录当前年份最小成本</span></span><br><span class="line">    Costs = Forest(:, <span class="keyword">end</span>);</span><br><span class="line">    MinimumCost(year) = <span class="built_in">min</span>(Costs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 输出当前年份最小成本</span></span><br><span class="line">    fprintf(<span class="string">&#x27;Minimum Cost in Iteration %d is %3.16f \n&#x27;</span>, year, MinimumCost(year));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这部分代码是主循环，模拟森林生态系统演化过程。每年按照春季、夏季、秋季、冬季四个季节进行操作，包括创建或更新森林、生长与竞争、播种、抵抗寒冷等步骤，并在每个年份结束时记录最小成本。最后，输出当前年份的最小成本。整个循环共模拟<code>AlgorithmParams.NumOfYears</code>年。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% GetBenchmarkFunction.m</span></span><br><span class="line">function [fobj, l, u, g, d]<span class="built_in">=</span>GetBenchmarkFunction(number)</span><br><span class="line">dim<span class="built_in">=</span><span class="number">2</span>;</span><br><span class="line">switch number</span><br><span class="line">    </span><br><span class="line">    case <span class="string">&#x27;F1&#x27;</span></span><br><span class="line">        <span class="comment">% F1- SumSquares lower=[-10], upper=[10], gminimum=[0], dim=30</span></span><br><span class="line">        fobj <span class="built_in">=</span> @F4;</span><br><span class="line">        l<span class="built_in">=</span>[-<span class="number">10</span>];</span><br><span class="line">        u<span class="built_in">=</span>[<span class="number">10</span>];</span><br><span class="line">        g<span class="built_in">=</span><span class="number">0</span>;</span><br><span class="line">        d<span class="built_in">=</span>dim;</span><br><span class="line">        </span><br><span class="line">    case <span class="string">&#x27;F2&#x27;</span></span><br><span class="line">        <span class="comment">% F2- Schwefel 1.2 lower=[-100], upper=[100], gminimum=[0], dim=30</span></span><br><span class="line">        fobj <span class="built_in">=</span> @F2;</span><br><span class="line">        l<span class="built_in">=</span>[-<span class="number">100</span>];</span><br><span class="line">        u<span class="built_in">=</span>[<span class="number">100</span>];</span><br><span class="line">        g<span class="built_in">=</span><span class="number">0</span>;</span><br><span class="line">        d<span class="built_in">=</span>dim;</span><br><span class="line">    case <span class="string">&#x27;F3&#x27;</span></span><br><span class="line">        <span class="comment">% F3- Rosenbrock  lower=[-30], upper=[30], gminimum=[0], dim=30</span></span><br><span class="line">        fobj <span class="built_in">=</span> @F1;</span><br><span class="line">        l<span class="built_in">=</span>[-<span class="number">30</span>];</span><br><span class="line">        u<span class="built_in">=</span>[<span class="number">30</span>];</span><br><span class="line">        g<span class="built_in">=</span><span class="number">0</span>;</span><br><span class="line">        d<span class="built_in">=</span>dim;</span><br><span class="line">        </span><br><span class="line">    case <span class="string">&#x27;F4&#x27;</span></span><br><span class="line">        <span class="comment">% F4- Sphere lower=[-100], upper=[100], gminimum=[0], dim=30</span></span><br><span class="line">        fobj <span class="built_in">=</span> @F3;</span><br><span class="line">        l<span class="built_in">=</span>[-<span class="number">100</span>];</span><br><span class="line">        u<span class="built_in">=</span>[<span class="number">100</span>];</span><br><span class="line">        g<span class="built_in">=</span><span class="number">0</span>;</span><br><span class="line">        d<span class="built_in">=</span>dim;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    case <span class="string">&#x27;F5&#x27;</span></span><br><span class="line">        <span class="comment">% F5- Zakharov lower=[-5], upper=[10], gminimum=[0], dim=10</span></span><br><span class="line">        fobj <span class="built_in">=</span> @F5;</span><br><span class="line">        l<span class="built_in">=</span>[-<span class="number">5</span>];</span><br><span class="line">        u<span class="built_in">=</span>[<span class="number">10</span>];</span><br><span class="line">        g<span class="built_in">=</span><span class="number">0</span>;</span><br><span class="line">        d<span class="built_in">=</span>dim;</span><br><span class="line">        </span><br><span class="line">    case <span class="string">&#x27;F6&#x27;</span></span><br><span class="line">        <span class="comment">% F7- Griewank  lower=[-600], upper=[600] gminimum=[0], dim=30</span></span><br><span class="line">        fobj <span class="built_in">=</span> @F6;</span><br><span class="line">        l<span class="built_in">=</span>[-<span class="number">600</span>];</span><br><span class="line">        u<span class="built_in">=</span>[<span class="number">600</span>];</span><br><span class="line">        g<span class="built_in">=</span>[<span class="number">0</span>];</span><br><span class="line">        d<span class="built_in">=</span>dim;</span><br><span class="line">        </span><br><span class="line">    case <span class="string">&#x27;F7&#x27;</span></span><br><span class="line">        <span class="comment">% F7- Rastrigin  lower=[-5.12], upper=[5.12] gminimum=[0], dim=30</span></span><br><span class="line">        fobj <span class="built_in">=</span> @F7;</span><br><span class="line">        l<span class="built_in">=</span>[-<span class="number">5.12</span>];</span><br><span class="line">        u<span class="built_in">=</span>[<span class="number">5.12</span>];</span><br><span class="line">        g<span class="built_in">=</span><span class="number">0</span>;</span><br><span class="line">        d<span class="built_in">=</span>dim;</span><br><span class="line">                </span><br><span class="line">    case <span class="string">&#x27;F8&#x27;</span></span><br><span class="line">        <span class="comment">% F8- Egg Crate Function  lower=[0], upper=[10] gminimum=[0], dim=2</span></span><br><span class="line">        fobj <span class="built_in">=</span> @F8;</span><br><span class="line">        l<span class="built_in">=</span>[<span class="number">0</span>];</span><br><span class="line">        u<span class="built_in">=</span>[<span class="number">10</span>];</span><br><span class="line">        g<span class="built_in">=</span>-<span class="number">18.5547</span>;</span><br><span class="line">        d<span class="built_in">=</span>dim;</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function z <span class="built_in">=</span> F1(x)</span><br><span class="line"><span class="comment">% F1- SumSquares lower=[-10], upper=[10], gminimum=[0], dim=30</span></span><br><span class="line">[m, n] <span class="built_in">=</span> size(x);</span><br><span class="line">x2 <span class="built_in">=</span> x .^<span class="number">2</span>;</span><br><span class="line">I <span class="built_in">=</span> repmat(<span class="number">1</span>:n, m, <span class="number">1</span>);</span><br><span class="line">z <span class="built_in">=</span> sum( I .* x2, <span class="number">2</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function z <span class="built_in">=</span> F2(x)</span><br><span class="line"><span class="comment">% F2- Schwefel 1.2 lower=[-100], upper=[100], gminimum=[0], dim=30</span></span><br><span class="line">z <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">v1 <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">dim<span class="built_in">=</span>size(x,<span class="number">2</span>);</span><br><span class="line">for i <span class="built_in">=</span> <span class="number">1</span>:dim</span><br><span class="line">    v1<span class="built_in">=</span><span class="number">0</span>;</span><br><span class="line">    for j <span class="built_in">=</span> <span class="number">1</span>: i</span><br><span class="line">        v1 <span class="built_in">=</span> v1 + x(:,j);</span><br><span class="line">    end</span><br><span class="line">    z <span class="built_in">=</span> z + v1.^<span class="number">2</span>;</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function z <span class="built_in">=</span> F3(x)</span><br><span class="line"><span class="comment">% F3- Rosenbrock  lower=[-30], upper=[30], gminimum=[0], dim=30</span></span><br><span class="line">z <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">n <span class="built_in">=</span> size(x, <span class="number">2</span>);</span><br><span class="line">assert(n &gt;<span class="built_in">=</span> <span class="number">1</span>, <span class="string">&#x27;Given input X cannot be empty&#x27;</span>);</span><br><span class="line">a <span class="built_in">=</span> <span class="number">1</span>;</span><br><span class="line">b <span class="built_in">=</span> <span class="number">100</span>;</span><br><span class="line">for i <span class="built_in">=</span> <span class="number">1</span> : (n-<span class="number">1</span>)</span><br><span class="line">    z <span class="built_in">=</span> z + (b * ((x(:, i+<span class="number">1</span>) - (x(:, i).^<span class="number">2</span>)) .^ <span class="number">2</span>)) + ((a - x(:, i)) .^ <span class="number">2</span>);</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function z <span class="built_in">=</span> F4(x)</span><br><span class="line"><span class="comment">% F4- Sphere lower=[-100], upper=[100], gminimum=[0], dim=30</span></span><br><span class="line">z<span class="built_in">=</span>sum(x<span class="string">&#x27;.^2)&#x27;</span>;</span><br><span class="line">end</span><br><span class="line">function z <span class="built_in">=</span> F5(x)</span><br><span class="line"><span class="comment">% F5- Zakharov lower=[-5], upper=[10], gminimum=[0], dim=10</span></span><br><span class="line">n <span class="built_in">=</span> size(x, <span class="number">2</span>);</span><br><span class="line">comp1 <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">comp2 <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">for i <span class="built_in">=</span> <span class="number">1</span>:n</span><br><span class="line">    comp1 <span class="built_in">=</span> comp1 + (x(:, i) .^ <span class="number">2</span>);</span><br><span class="line">    comp2 <span class="built_in">=</span> comp2 + (<span class="number">0.5</span> * i * x(:, i));</span><br><span class="line">end</span><br><span class="line">z <span class="built_in">=</span> comp1 + (comp2 .^ <span class="number">2</span>) + (comp2 .^ <span class="number">4</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function z <span class="built_in">=</span> F6(x)</span><br><span class="line"><span class="comment">% F6- Griewank  lower=[-600], upper=[600] gminimum=[0], dim=30</span></span><br><span class="line">n <span class="built_in">=</span> size(x, <span class="number">2</span>);</span><br><span class="line">sumcomp <span class="built_in">=</span> <span class="number">0</span>;</span><br><span class="line">prodcomp <span class="built_in">=</span> <span class="number">1</span>;</span><br><span class="line">for i <span class="built_in">=</span> <span class="number">1</span>:n</span><br><span class="line">    sumcomp <span class="built_in">=</span> sumcomp + (x(:, i) .^ <span class="number">2</span>);</span><br><span class="line">    prodcomp <span class="built_in">=</span> prodcomp .* (cos(x(:, i) / sqrt(i)));</span><br><span class="line">end</span><br><span class="line">z <span class="built_in">=</span> (sumcomp / <span class="number">4000</span>) - prodcomp + <span class="number">1</span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function z <span class="built_in">=</span> F7(x)</span><br><span class="line"><span class="comment">% F7- Rastrigin  lower=[-5.12], upper=[5.12] gminimum=[0], dim=30</span></span><br><span class="line">n <span class="built_in">=</span> size(x, <span class="number">2</span>);</span><br><span class="line">A <span class="built_in">=</span> <span class="number">10</span>;</span><br><span class="line">z <span class="built_in">=</span> (A * n) + (sum(x .^<span class="number">2</span> - A * cos(<span class="number">2</span> * pi .* x), <span class="number">2</span>));</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function z <span class="built_in">=</span> F8(x)</span><br><span class="line">    X <span class="built_in">=</span> x(:, <span class="number">1</span>);</span><br><span class="line">    Y <span class="built_in">=</span> x(:, <span class="number">2</span>);    </span><br><span class="line">    <span class="comment">%z = X.^2 + Y.^2 + (25 * (sin(X).^2 + sin(Y).^2));</span></span><br><span class="line">    z<span class="built_in">=</span>X.*sin(<span class="number">4</span>.*X)+ <span class="number">1.1</span>.*Y.*sin(<span class="number">2</span>.*Y);</span><br><span class="line">end </span><br></pre></td></tr></table></figure><h2 id="两个变量"><a href="#两个变量" class="headerlink" title="两个变量"></a>两个变量</h2><p>输入参数：</p><p>number：字符串，表示要选择的基准测试函数编号（如”F1”、”F2”等）。</p><p>输出参数：</p><p>fobj：函数句柄，指向对应的基准测试函数。</p><p>l：变量下界向量，表示优化问题中每个变量的最小允许值。</p><p>u：变量上界向量，表示优化问题中每个变量的最大允许值。</p><p>g：全局最小值，表示所选基准测试函数的已知全局最小解对应的函数值。</p><p>d：问题维度，表示优化问题中变量的个数。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Minimum Cost in Iteration <span class="number">1</span> <span class="keyword">is</span> -<span class="number">4.6682556618584661</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">2</span> <span class="keyword">is</span> -<span class="number">8.1975662567254535</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">3</span> <span class="keyword">is</span> -<span class="number">8.1975662567254535</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">4</span> <span class="keyword">is</span> -<span class="number">14.6935300252384948</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">5</span> <span class="keyword">is</span> -<span class="number">14.6935300252384948</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">6</span> <span class="keyword">is</span> -<span class="number">14.6935300252384948</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">7</span> <span class="keyword">is</span> -<span class="number">14.6935300252384948</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">8</span> <span class="keyword">is</span> -<span class="number">14.6935300252384948</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">9</span> <span class="keyword">is</span> -<span class="number">14.6935300252384948</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">10</span> <span class="keyword">is</span> -<span class="number">14.6935300252384948</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">11</span> <span class="keyword">is</span> -<span class="number">17.6789369064143571</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">12</span> <span class="keyword">is</span> -<span class="number">17.6789369064143571</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">13</span> <span class="keyword">is</span> -<span class="number">17.6789369064143571</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">14</span> <span class="keyword">is</span> -<span class="number">17.6789369064143571</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">15</span> <span class="keyword">is</span> -<span class="number">17.8433233416086168</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">16</span> <span class="keyword">is</span> -<span class="number">17.8433233416086168</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">17</span> <span class="keyword">is</span> -<span class="number">17.8433233416086168</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">18</span> <span class="keyword">is</span> -<span class="number">17.8433233416086168</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">19</span> <span class="keyword">is</span> -<span class="number">17.8433233416086168</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">20</span> <span class="keyword">is</span> -<span class="number">17.8433233416086168</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">21</span> <span class="keyword">is</span> -<span class="number">17.8433233416086168</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">22</span> <span class="keyword">is</span> -<span class="number">17.8433233416086168</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">23</span> <span class="keyword">is</span> -<span class="number">17.8433233416086168</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">24</span> <span class="keyword">is</span> -<span class="number">18.4564913551477119</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">25</span> <span class="keyword">is</span> -<span class="number">18.4564913551477119</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">26</span> <span class="keyword">is</span> -<span class="number">18.5092203075349104</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">27</span> <span class="keyword">is</span> -<span class="number">18.5092203075349104</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">28</span> <span class="keyword">is</span> -<span class="number">18.5092203075349104</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">29</span> <span class="keyword">is</span> -<span class="number">18.5092203075349104</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">30</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">31</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">32</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">33</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">34</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">35</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">36</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">37</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">38</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">39</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">40</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">41</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">42</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">43</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">44</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">45</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">46</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">47</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">48</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">49</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br><span class="line">Minimum Cost in Iteration <span class="number">50</span> <span class="keyword">is</span> -<span class="number">18.5365046804113760</span> </span><br></pre></td></tr></table></figure><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xx<span class="built_in">=</span><span class="number">0</span>:<span class="number">0.1</span>:<span class="number">10</span>;</span><br><span class="line">yy<span class="built_in">=</span><span class="number">0</span>:<span class="number">0.1</span>:<span class="number">10</span>;</span><br><span class="line">[x,y]<span class="built_in">=</span>meshgrid(xx,yy);</span><br><span class="line">z<span class="built_in">=</span>x.*sin(<span class="number">4</span>.*x)+ <span class="number">1.1</span>.*y.*sin(<span class="number">2</span>.*y);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">mesh(x,y,z)</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">contour(x,y,z)</span><br><span class="line">colorbar</span><br></pre></td></tr></table></figure><p>F8 : z&#x3D;x.*sin(4.*x)+ 1.1.*y.*sin(2.*y)</p><p><img src="https://pic.imgdb.cn/item/662b6cb70ea9cb1403eaff37.jpg" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> 算法优化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB制图</title>
      <link href="/2024/04/25/matlab-zhi-tu/"/>
      <url>/2024/04/25/matlab-zhi-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="常见的MATLAB制图代码集合"><a href="#常见的MATLAB制图代码集合" class="headerlink" title="常见的MATLAB制图代码集合"></a>常见的MATLAB制图代码集合</h2><p>area函数是Y轴数值对 x 坐标轴围成的面积图，该函数根据Y的形状填充曲线之间的区域。</p><p>fill函数是创建二维填充补片（patch），即填充多边形区域绘制为补片，其顶点位于由X和Y指定的(x,y)坐标位置，主要用于平面中多个区域的颜色填充。</p><p>patch函数是创建彩色多边形的补片，即按X和Y指定为每个顶点的坐标创建一个或多个彩色多边形补片，主要用于平面中多边形的颜色填充。</p><p>patch与fill函数功能和用法类似。area函数主要针对与坐标轴围成的区域的填充，如果需要对图形窗口内任意闭合区域或多边形区域及进行填充，则需要用到fill和patch函数。</p><p><img src="https://pic.imgdb.cn/item/662a276d0ea9cb1403757781.jpg" alt="alt text"></p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">clc; clear; close <span class="built_in">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 数据</span></span><br><span class="line">x <span class="built_in">=</span> linspace(-<span class="number">8</span>,<span class="number">12</span>,<span class="number">100</span>);</span><br><span class="line">y1 <span class="built_in">=</span> normpdf(x,<span class="number">4</span>,<span class="number">6</span>);<span class="comment">% Normal probability density function</span></span><br><span class="line">y2 <span class="built_in">=</span> normpdf(x,<span class="number">0</span>,<span class="number">1</span>).*<span class="number">0.5</span>+normpdf(x,<span class="number">4</span>,<span class="number">2</span>).*<span class="number">0.5</span>;</span><br><span class="line">y3 <span class="built_in">=</span> normpdf(x,-<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">y <span class="built_in">=</span> [y1;y2;y3];</span><br><span class="line"></span><br><span class="line"><span class="comment">% 颜色</span></span><br><span class="line">c <span class="built_in">=</span> [<span class="number">184</span> <span class="number">194</span> <span class="number">140</span>; <span class="number">201</span> <span class="number">226</span> <span class="number">240</span>; <span class="number">250</span> <span class="number">181</span> <span class="number">157</span>]./<span class="number">255</span>; <span class="comment">% Three colors</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘图</span></span><br><span class="line">for i <span class="built_in">=</span> <span class="number">1</span>:size(y,<span class="number">1</span>)</span><br><span class="line">area(x,y(i,:),<span class="string">&#x27;FaceColor&#x27;</span>,c(i,:),<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>,<span class="string">&#x27;FaceAlpha&#x27;</span>,<span class="number">0.5</span>); hold on</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">% 坐标轴</span></span><br><span class="line">xlabel(<span class="string">&#x27;x/Samples&#x27;</span>),ylabel(<span class="string">&#x27;y/Value&#x27;</span>)</span><br><span class="line">legend(&#123;<span class="string">&#x27;- Area No.1&#x27;</span>,<span class="string">&#x27;- Area No.2&#x27;</span>,<span class="string">&#x27;- Area No.3&#x27;</span>&#125;)</span><br><span class="line">set(gca,<span class="string">&#x27;XLim&#x27;</span>,[-<span class="number">8</span> <span class="number">12</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 修饰</span></span><br><span class="line">defaultAxes</span><br></pre></td></tr></table></figure><p><strong>数据生成</strong></p><ol><li><code>x = linspace(-8,12,100);</code><ul><li>生成向量 <code>x</code>，包含从-8到12之间均匀分布的100个点，这些点将用于绘制函数曲线。</li></ul></li></ol><p><strong>计算概率密度函数</strong></p><ol start="2"><li><code>y1 = normpdf(x,4,6);</code><ul><li>计算正态分布PDF，其中均值为4，标准差为6。结果存储在 <code>y1</code> 中。</li></ul></li><li><code>y2 = normpdf(x,0,1).*0.5+normpdf(x,4,2).*0.5;</code><ul><li>计算两个正态分布PDF的线性组合，其中一个均值为0，标准差为1，权重为0.5；另一个均值为4，标准差为2，权重也为0.5。结果合并后存入 <code>y2</code>。</li></ul></li><li><code>y3 = normpdf(x,-3,2);</code><ul><li>计算均值为-3，标准差为2的正态分布PDF，并将其结果保存在 <code>y3</code> 中。</li></ul></li></ol><p><strong>定义颜色</strong></p><ol start="5"><li><code>c = [184 194 140; 201 226 240; 250 181 157]./255;</code><ul><li>定义一个3×3矩阵，包含三组RGB颜色值，分别对应三个分布的填充颜色。这些数值经过除以255的操作，将它们归一化到0到1之间，以便MATLAB能够正确理解。</li></ul></li></ol><p><strong>绘制图形</strong></p><ol start="6"><li><code>for i = 1:size(y,1)</code><ul><li>使用循环结构，遍历 <code>y</code> 的每一行（即每一个分布）。</li></ul></li><li><code>area(x,y(i,:), ...)</code> <ul><li>对于每个分布，调用 <code>area</code> 函数绘制面积图。输入参数为 <code>x</code> 轴坐标向量和对应的 <code>y</code> 值向量。</li></ul></li><li><code>&#39;FaceColor&#39;, c(i,:), &#39;EdgeColor&#39;, &#39;none&#39;, &#39;FaceAlpha&#39;, 0.5</code><ul><li>设置面积图的填充颜色为当前循环索引对应的色彩，边缘颜色为无（即不显示边缘线），并设置填充透明度为0.5，使得底层分布能部分透过上层分布显现。</li></ul></li><li><code>hold on</code><ul><li>在同一张图上保持绘制状态，允许后续循环中的面积图叠加在同一坐标系中。</li></ul></li><li><code>end</code><ul><li>结束循环。</li></ul></li></ol><p><strong>坐标轴与图例</strong></p><ol start="11"><li><code>xlabel(&#39;x/Samples&#39;), ylabel(&#39;y/Value&#39;)</code><ul><li>设置横纵坐标的标签，分别为“x&#x2F;Samples”和“y&#x2F;Value”。</li></ul></li><li><code>legend(&#123;&#39;- Area No.1&#39;, &#39;- Area No.2&#39;, &#39;- Area No.3&#39;&#125;)</code><ul><li>添加图例，标识三个面积区域分别为“Area No.1”、“Area No.2”和“Area No.3”。</li></ul></li></ol><p><strong>坐标轴范围设定</strong></p><ol start="13"><li><code>set(gca, &#39;XLim&#39;, [-8 12])</code><ul><li>设置当前坐标轴（gca）的x轴范围为-8到12，确保图形覆盖指定的x轴区间。</li></ul></li></ol><p><img src="https://pic.imgdb.cn/item/662a2c000ea9cb140382bfbc.jpg" alt="alt text"></p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 设置参数</span></span><br><span class="line">num_values <span class="built_in">=</span> <span class="number">100</span>;     <span class="comment">% 随机数数量</span></span><br><span class="line">min_value <span class="built_in">=</span> -<span class="number">100</span>;    <span class="comment">% 最小值（包括）</span></span><br><span class="line">max_value <span class="built_in">=</span> <span class="number">100</span>;     <span class="comment">% 最大值（包括）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成随机数列表</span></span><br><span class="line">y <span class="built_in">=</span> min_value + (max_value - min_value) * rand(num_values, <span class="number">1</span>);</span><br><span class="line">x <span class="built_in">=</span> linspace(<span class="number">0</span>,<span class="number">100</span>,length(y));</span><br><span class="line">y1 <span class="built_in">=</span> y; y1(y1&lt;<span class="number">0</span>)<span class="built_in">=</span><span class="number">0</span>;      <span class="comment">% 负数</span></span><br><span class="line">y2 <span class="built_in">=</span> y; y2(y2&gt;<span class="number">0</span>)<span class="built_in">=</span><span class="number">0</span>;      <span class="comment">% 正数</span></span><br><span class="line">figure,</span><br><span class="line">area(x,y1,<span class="string">&#x27;FaceColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;FaceAlpha&#x27;</span>,<span class="number">0.6</span>); hold on</span><br><span class="line">area(x,y2,<span class="string">&#x27;FaceColor&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;FaceAlpha&#x27;</span>,<span class="number">0.6</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;x-axis/Samples&#x27;</span>),ylabel(<span class="string">&#x27;y-axis/Intensity value&#x27;</span>)</span><br><span class="line">set(gca,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times New Roman&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">legend(&#123;<span class="string">&#x27;- Positive value area&#x27;</span>,<span class="string">&#x27;- Negative value area&#x27;</span>&#125;)</span><br><span class="line">set(gcf,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;White&#x27;</span>);  <span class="comment">%设置背景颜色</span></span><br><span class="line"><span class="comment">% 修饰</span></span><br><span class="line">defaultAxes</span><br></pre></td></tr></table></figure><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 生成随机数列表</span></span><br><span class="line">y <span class="built_in">=</span> min_value + (max_value - min_value) * rand(num_values, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这一行利用Matlab内置函数<code>rand()</code>生成一个<code>num_values</code>行、1列的矩阵，其中元素值为在[0,1]之间均匀分布的随机数。然后将这些随机数乘以<code>(max_value - min_value)</code>得到一个缩放后的范围，并加上<code>min_value</code>，确保最终生成的随机数在<code>[-100, 100]</code>范围内。结果存储在变量<code>y</code>中。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x <span class="built_in">=</span> linspace(<span class="number">0</span>,<span class="number">100</span>,length(y));</span><br></pre></td></tr></table></figure><p>这里使用<code>linspace()</code>函数创建一个等差数列<code>x</code>，起点为0，终点为100，包含的点数与<code>y</code>的长度相同。这意味着<code>x</code>将作为面积图的x轴坐标，与<code>y</code>中的随机数值一一对应。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y1 <span class="built_in">=</span> y; y1(y1&lt;<span class="number">0</span>)<span class="built_in">=</span><span class="number">0</span>;      <span class="comment">% 负数</span></span><br><span class="line">y2 <span class="built_in">=</span> y; y2(y2&gt;<span class="number">0</span>)<span class="built_in">=</span><span class="number">0</span>;      <span class="comment">% 正数</span></span><br></pre></td></tr></table></figure><p>为了分别绘制正负值部分的面积图，创建两个新变量<code>y1</code>和<code>y2</code>。它们最初都复制自<code>y</code>，然后通过逻辑索引将：</p><ul><li><code>y1</code>中所有小于0的值置为0，保留所有负数部分；</li><li><code>y2</code>中所有大于0的值置为0，保留所有正数部分。</li></ul><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">figure,</span><br><span class="line">area(x,y1,<span class="string">&#x27;FaceColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;FaceAlpha&#x27;</span>,<span class="number">0.6</span>); hold on</span><br><span class="line">area(x,y2,<span class="string">&#x27;FaceColor&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;FaceAlpha&#x27;</span>,<span class="number">0.6</span>);</span><br></pre></td></tr></table></figure><p>首先打开一个新的图形窗口(<code>figure</code>)，然后使用<code>area()</code>函数绘制面积图：</p><ul><li>第一个面积图基于<code>x</code>和<code>y1</code>，表示负值部分，其填充颜色(<code>FaceColor</code>)和边缘颜色(<code>EdgeColor</code>)均为红色(<code>&#39;r&#39;</code>)，透明度(<code>FaceAlpha</code>)设为0.6；</li><li>第二个面积图基于<code>x</code>和<code>y2</code>，表示正值部分，颜色属性与第一个面积图相同，只是颜色为蓝色(<code>&#39;b&#39;</code>)。</li></ul><p><code>hold on</code>命令确保在同一张图上绘制这两个面积图，不会被自动清空。</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xlabel(<span class="string">&#x27;x-axis/Samples&#x27;</span>),ylabel(<span class="string">&#x27;y-axis/Intensity value&#x27;</span>)</span><br><span class="line">set(gca,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times New Roman&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">legend(&#123;<span class="string">&#x27;- Positive value area&#x27;</span>,<span class="string">&#x27;- Negative value area&#x27;</span>&#125;)</span><br><span class="line">set(gcf,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;White&#x27;</span>);  <span class="comment">%设置背景颜色</span></span><br></pre></td></tr></table></figure><p>接下来对图形进行标注和样式调整：</p><ul><li>设置x轴标签为“x-axis&#x2F;Samples”，y轴标签为“y-axis&#x2F;Intensity value”；</li><li>使用<code>set(gca,...)</code>修改当前坐标轴属性，将字体设为“Times New Roman”，字号设为12；</li><li>添加图例，说明两个面积图分别代表“- Positive value area”（正值区域）和“- Negative value area”（负值区域）；</li><li>使用<code>set(gcf,...)</code>设置当前图形窗口的背景颜色为白色。</li></ul><p>fill和patch函数，这两个函数功能和用法类似，它们的基本用法MATLAB帮助文件均有详细说明。以下以fill函数为例，用一个稍复杂的应用为例进行说明。</p><p>首先，我们产生一条含随机噪声的Bessel分布数据。然后，对其进行多项式拟合，绘制拟合误差范围的置信度区间。<br><img src="https://pic.imgdb.cn/item/662a37920ea9cb140399520b.jpg" alt="alt text"></p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">x <span class="built_in">=</span> <span class="number">0</span> : <span class="number">0.2</span> : <span class="number">10</span>;</span><br><span class="line">y <span class="built_in">=</span> besselj(<span class="number">0</span>, x);   <span class="comment">% Bessel 函数</span></span><br><span class="line">y <span class="built_in">=</span> y+<span class="number">0.8</span>*rand([<span class="number">1</span>,length(x)]);</span><br><span class="line"><span class="comment">% 多项式拟合</span></span><br><span class="line">[p,S] <span class="built_in">=</span> polyfit(x,y,<span class="number">3</span>);</span><br><span class="line">[y_fit, delta] <span class="built_in">=</span> polyval(p,x,S);   <span class="comment">% delta 标准误差估计值</span></span><br><span class="line"><span class="comment">%绘制原始数据、线性拟合及95%预测区间 y±2Δ</span></span><br><span class="line">uy <span class="built_in">=</span> y_fit+<span class="number">2</span>*delta;</span><br><span class="line">dy <span class="built_in">=</span> y_fit-<span class="number">2</span>*delta;</span><br><span class="line">figure,</span><br><span class="line"><span class="comment">% 绘制原始数据</span></span><br><span class="line">plot(x,y,<span class="string">&#x27;rx&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.5</span>)</span><br><span class="line">hold on</span><br><span class="line"><span class="comment">%绘制拟合曲线 </span></span><br><span class="line">plot(x,y_fit,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0</span> <span class="number">1</span> <span class="number">1</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.5</span>)</span><br><span class="line">hold on</span><br><span class="line"><span class="comment">%绘制置信区间</span></span><br><span class="line">xconf <span class="built_in">=</span> [x x(end:-<span class="number">1</span>:<span class="number">1</span>)] ;<span class="comment">% x坐标回转形成闭合区域</span></span><br><span class="line">yconf <span class="built_in">=</span> [uy dy(end:-<span class="number">1</span>:<span class="number">1</span>)]; <span class="comment">% 扩大数据区间</span></span><br><span class="line">c2 <span class="built_in">=</span> [<span class="number">182</span>,<span class="number">100</span>,<span class="number">199</span>]./<span class="number">255</span>;</span><br><span class="line">plot([x<span class="string">&#x27;,x&#x27;</span>],[uy<span class="string">&#x27;,dy&#x27;</span>],<span class="string">&#x27;Color&#x27;</span>,c2,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">fill(xconf, yconf,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;FaceColor&#x27;</span>,c2,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>,<span class="string">&#x27;FaceAlpha&#x27;</span>,<span class="number">0.1</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;x-axis/Samples&#x27;</span>),ylabel(<span class="string">&#x27;y-axis/Intensity value&#x27;</span>)</span><br><span class="line">set(gca,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times New Roman&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">legend(&#123;<span class="string">&#x27;- Data&#x27;</span>,<span class="string">&#x27;- Linear fit&#x27;</span>,<span class="string">&#x27;- 95% Prediction Interval&#x27;</span>&#125;)</span><br><span class="line">set(gcf,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;White&#x27;</span>);  <span class="comment">% Background is white</span></span><br></pre></td></tr></table></figure><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="built_in">=</span> <span class="number">0</span> : <span class="number">0.2</span> : <span class="number">10</span>;</span><br><span class="line">y <span class="built_in">=</span> besselj(<span class="number">0</span>, x);   <span class="comment">% Bessel 函数</span></span><br><span class="line">y <span class="built_in">=</span> y+<span class="number">0.8</span>*rand([<span class="number">1</span>,length(x)]);</span><br></pre></td></tr></table></figure><p>这部分定义了x轴的取值范围，并计算相应的Bessel函数值。具体步骤如下：</p><ul><li><code>x = 0 : 0.2 : 10;</code>：创建一个从0开始，以0.2为步长递增到10的向量，作为x轴坐标值。</li><li><code>y = besselj(0, x);</code>：利用Matlab内置函数<code>besselj</code>计算阶数为0的Bessel函数在给定x值上的值，结果存储在向量<code>y</code>中。</li><li><code>y = y+0.8*rand([1,length(x)]);</code>：为Bessel函数值添加随机噪声。生成一个与<code>y</code>同长度的随机向量（均值为0，标准差为1），乘以常数0.8后加到<code>y</code>上，使得数据点带有一定随机扰动。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% 多项式拟合</span><br><span class="line">[p,S] = polyfit(x,y,3);</span><br><span class="line">[y<span class="emphasis">_fit, delta] = polyval(p,x,S);   % delta 标准误差估计值</span></span><br></pre></td></tr></table></figure><p>这部分进行数据的三次多项式拟合：</p><ul><li><code>polyfit(x,y,3)</code>：使用<code>polyfit</code>函数对<code>x</code>和<code>y</code>数据进行三次多项式拟合，返回拟合多项式的系数向量<code>p</code>和结构体<code>S</code>，其中包含了拟合的标准误差等信息。</li><li><code>polyval(p,x,S)</code>：使用<code>polyval</code>函数基于拟合的系数<code>p</code>和x坐标<code>x</code>计算拟合值，并利用结构体<code>S</code>中的信息计算标准误差估计值<code>delta</code>。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% 绘制原始数据、线性拟合及95%预测区间 y±2Δ</span><br><span class="line">uy = y<span class="emphasis">_fit+2*delta;</span></span><br><span class="line"><span class="emphasis">dy = y_</span>fit-2<span class="emphasis">*delta;</span></span><br></pre></td></tr></table></figure><p>计算95%预测区间的上下界：</p><ul><li><code>uy = y_fit+2*delta;</code>：计算拟合值<code>y_fit</code>上方两倍标准误差的位置，即预测区间的上界。</li><li><code>dy = y_fit-2*delta;</code>：计算拟合值<code>y_fit</code>下方两倍标准误差的位置，即预测区间的下界。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">figure,</span><br><span class="line">% 绘制原始数据</span><br><span class="line">plot(x,y,&#x27;rx&#x27;,&#x27;LineWidth&#x27;,1.5)</span><br><span class="line">hold on</span><br><span class="line">% 绘制拟合曲线</span><br><span class="line">plot(x,y<span class="emphasis">_fit,&#x27;Color&#x27;,[0 1 1],&#x27;LineWidth&#x27;,1.5)</span></span><br><span class="line"><span class="emphasis">hold on</span></span><br><span class="line"><span class="emphasis">% 绘制置信区间</span></span><br><span class="line"><span class="emphasis">xconf = [x x(end:-1:1)] ;% x坐标回转形成闭合区域</span></span><br><span class="line"><span class="emphasis">yconf = [uy dy(end:-1:1)]; % 扩大数据区间</span></span><br><span class="line"><span class="emphasis">c2 = [182,100,199]./255;</span></span><br><span class="line"><span class="emphasis">plot([x&#x27;,x&#x27;],[uy&#x27;,dy&#x27;],&#x27;Color&#x27;,c2,&#x27;LineWidth&#x27;,1.2,&#x27;LineStyle&#x27;,&#x27;--&#x27;)</span></span><br><span class="line"><span class="emphasis">fill(xconf, yconf,&#x27;k&#x27;,&#x27;FaceColor&#x27;,c2,&#x27;EdgeColor&#x27;,&#x27;none&#x27;,&#x27;FaceAlpha&#x27;,0.1);</span></span><br></pre></td></tr></table></figure><p>这部分绘制图形并设置相关样式：</p><ul><li><code>figure</code>：创建一个新的图形窗口。</li><li><code>plot(x,y,&#39;rx&#39;,&#39;LineWidth&#39;,1.5)</code>：绘制原始数据点，使用红色菱形标记(‘rx’)，线宽为1.5。</li><li><code>hold on</code>：保持当前图形，后续绘制将在同一窗口中进行。</li><li><code>plot(x,y_fit,&#39;Color&#39;,[0 1 1],&#39;LineWidth&#39;,1.5)</code>：绘制拟合曲线，颜色为亮青色，线宽为1.5。</li><li><code>xconf = [x x(end:-1:1)]</code>：构造一个包含x轴坐标原序列及其逆序的向量，用于闭合预测区间图形。</li><li><code>yconf = [uy dy(end:-1:1)]</code>：构造一个包含预测区间上界和下界逆序的向量，使区间闭合。</li><li><code>c2 = [182,100,199]./255;</code>：定义预测区间颜色为淡紫色（RGB值转换为[0,1]范围）。</li><li><code>plot([x&#39;,x&#39;],[uy&#39;,dy&#39;],&#39;Color&#39;,c2,&#39;LineWidth&#39;,1.2,&#39;LineStyle&#39;,&#39;--&#39;)</code>：绘制预测区间的边界线，颜色为淡紫色，线宽1.2，虚线样式。</li><li><code>fill(xconf, yconf,&#39;k&#39;,&#39;FaceColor&#39;,c2,&#39;EdgeColor&#39;,&#39;none&#39;,&#39;FaceAlpha&#39;,0.1)</code>：填充预测区间，内部颜色为淡紫色，无边框，填充透明度为0.1。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xlabel(&#x27;x-axis/Samples&#x27;),ylabel(&#x27;y-axis/Intensity value&#x27;)</span><br><span class="line">set(gca,&#x27;FontName&#x27;,&#x27;Times New Roman&#x27;,&#x27;FontSize&#x27;,12)</span><br><span class="line">legend(&#123;&#x27;- Data&#x27;,&#x27;- Linear fit&#x27;,&#x27;- 95% Prediction Interval&#x27;&#125;)</span><br><span class="line">set(gcf,&#x27;Color&#x27;,&#x27;White&#x27;);  % Background is white</span><br></pre></td></tr></table></figure><p>最后进行图形的标签、字体、图例及背景设置：</p><ul><li><code>xlabel(&#39;x-axis/Samples&#39;)</code>：设置x轴标签为“x-axis&#x2F;Samples”。</li><li><code>ylabel(&#39;y-axis/Intensity value&#39;)</code>：设置y轴标签为“y-axis&#x2F;Intensity value”。</li><li><code>set(gca,&#39;FontName&#39;,&#39;Times New Roman&#39;,&#39;FontSize&#39;,12)</code>：将当前坐标轴的字体设为“Times New Roman”，字号为12。</li><li><code>legend(&#123;&#39;- Data&#39;,&#39;- Linear fit&#39;,&#39;- 95% Prediction Interval&#39;&#125;)</code>：添加图例，分别标识原始数据、拟合曲线和95%预测区间。</li><li><code>set(gcf,&#39;Color&#39;,&#39;White&#39;)</code>：设置当前图形窗口背景颜色为白色。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/PJoY5QrlgRGecBStkFiTEQ">https://mp.weixin.qq.com/s/PJoY5QrlgRGecBStkFiTEQ</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024XCTF4/1-5/1</title>
      <link href="/2024/04/12/2024xctf4-1-5-1/"/>
      <url>/2024/04/12/2024xctf4-1-5-1/</url>
      
        <content type="html"><![CDATA[<h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">flag=<span class="string">b&#x27;XYCTF&#123;uuid&#125;&#x27;</span></span><br><span class="line">flag=bytes_to_long(flag)  <span class="comment">#将字节串 flag 转换为大整数</span></span><br><span class="line">leak=<span class="built_in">bin</span>(<span class="built_in">int</span>(flag))   <span class="comment">#转换为二进制字符串的形式</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:       <span class="comment"># 末位补0到514</span></span><br><span class="line">    leak += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(leak) == <span class="number">514</span>:    </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap_bits</span>(<span class="params">input_str</span>):   <span class="comment">#交换列表中对应位置的元素</span></span><br><span class="line">    input_list = <span class="built_in">list</span>(input_str[<span class="number">2</span>:])</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length // <span class="number">2</span>):</span><br><span class="line">        temp = input_list[i]</span><br><span class="line">        input_list[i] = input_list[length - <span class="number">1</span> - i]</span><br><span class="line">        input_list[length - <span class="number">1</span> - i] = temp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(input_list)</span><br><span class="line"></span><br><span class="line">input_str = leak</span><br><span class="line">result = swap_bits(input_str)</span><br><span class="line">a=result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_add</span>(<span class="params">input_str</span>):</span><br><span class="line">    input_list = <span class="built_in">list</span>(input_str)</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        input_list[i] = <span class="built_in">str</span>((<span class="built_in">int</span>(input_list[i]) + i + <span class="number">1</span>) % <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join(input_list)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_str = a</span><br><span class="line">result = custom_add(input_str)</span><br><span class="line">b=result</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment">#12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891134567789013445789912234667900123557889112356678911245568891223457790013345689901245667890234457799023355788001334678891124566790113445778902335578800133556899112346778011245567991223557880012355788902234677900124557889023355788001245568991133566790013445688912234577900124457889112456679001245578801233467789112355779912234577990233556780113</span></span><br></pre></td></tr></table></figure><p>根据上面的加密方式倒推出解密的函数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_sub</span>(<span class="params">input_str</span>):</span><br><span class="line">    input_list = <span class="built_in">list</span>(input_str)</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        input_list[i] = <span class="built_in">str</span>((<span class="built_in">int</span>(input_list[i]) + <span class="number">10</span> - i - <span class="number">1</span>) % <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join(input_list)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_swap_bits</span>(<span class="params">input_str</span>):</span><br><span class="line">    input_list = <span class="built_in">list</span>(input_str)</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length // <span class="number">2</span>):</span><br><span class="line">        temp = input_list[i]</span><br><span class="line">        input_list[i] = input_list[length - <span class="number">1</span> - i]</span><br><span class="line">        input_list[length - <span class="number">1</span> - i] = temp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(input_list)</span><br><span class="line"></span><br><span class="line">encrypted_flag = <span class="string">&quotquot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步：解除自定义加法</span></span><br><span class="line">step1 = custom_sub(encrypted_flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：逆向位交换</span></span><br><span class="line">step2 = reverse_swap_bits(step1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(step2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(step2,<span class="number">2</span>))</span><br><span class="line">x=<span class="string">&quot;1011000010110010100001101010100010001100111101101100011001110010011001000110100001100100011001100110101011001100010110101100011011000110110001000110100001011010011010001100110011000010110010100101101011000010011011100111001001110010010110101100101001110000011100001100001001101000011001001100100001100010011010000110010001101110011000001111101&quot;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(x,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="commentspan></span><br><span class="line"><span class="comment"># 9254392036983367729993565657642756163106647020423020921597044715242734027281359079743634890921671710476305652413203664281624325410548175719951158501965824</span></span><br><span class="line"><span class="comment"># b&#x27;XYCTF&#123;c924235f-ccb4-4fae-a799-e88a42d14270&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="happy-to-solve1"><a href="#happy-to-solve1" class="headerlink" title="happy_to_solve1"></a>happy_to_solve1</h2><p>题目：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_happy_prime</span>():</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = sympy.nextprime(p ^ ((<span class="number">1</span> &lt;&lt; <span class="number">512</span>) - <span class="number">1</span>))  </span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p, q = get_happy_prime()</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line"><span class="comment"># n=24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span></span><br><span class="line"><span class="comment"># c=14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span></span><br></pre></td></tr></table></figure><p>参考这里：<br><img src="https://pic.imgdb.cn/item/663308a10ea9cb1403ef5d97.webp" alt="alt text"><br><img src="https://pic.imgdb.cn/item/663308a10ea9cb1403ef5db6.webp" alt="alt text"><br><img src="https://pic.imgdb.cn/item/663308a10ea9cb1403ef5dd3.webp" alt="alt text"></p><p>改一下上面的代码即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">n = <span class="number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span></span><br><span class="line">c = <span class="number">14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p=(gmpy2.iroot(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">1024</span>)-<span class="number">4</span>*n,<span class="number">2</span>)[<span class="number">0</span>]+<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">512</span>))//<span class="number">2</span></span><br><span class="line">p=<span class="built_in">int</span>(p)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    p=sympy.nextprime(p)</span><br><span class="line">    <span class="keyword">if</span>(n%p==<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">q=n//p</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag=long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;XYCTF&#123;3f22f4efe3bbbc71bbcc999a0a622a1a23303cdc&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="熊博士"><a href="#熊博士" class="headerlink" title="熊博士"></a>熊博士</h2><p>题目:</p><p>CBXGU{ORF_BV_NVR_BLF_CRZL_QQ}</p><p>搜索发现是一种特定的加密方式</p><p><img src="https://pic.imgdb.cn/item/6632fe6d0ea9cb1403daf772.png" alt="alt text"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xyctf&#123;liu_ye_mei_you_xiao_jj&#125;</span><br></pre></td></tr></table></figure><h2 id="happy-to-solve2"><a href="#happy-to-solve2" class="headerlink" title="happy_to_solve2"></a>happy_to_solve2</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_happy_prime</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        p = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join([random.choice(<span class="string">&quot;123&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]))</span><br><span class="line">        q = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join([random.choice(<span class="string">&quot;567&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]))</span><br><span class="line">        <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line">            <span class="keyword">return</span> (p,q)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p ,q= get_happy_prime()</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line"><span class="comment"># 697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129104495659093134763261751546990704365966783697780787341963138501</span></span><br><span class="line"><span class="comment"># 153383826085102296581238539677668696644156148059026868813759015106139131297135097831661048493079405226972222492151356105759235749502324303047037349410709021152255315429280760639113724345836532087970918453353723090554450581657930847674930226113840172368662838756446364482977092478979838209396761279326533419699056209983721842484996150025403009644653678928025861445324715419893797015875541525590135843027312322236085581571452084477262582966972702577136904385741443870527205640874446616413917231260133364227248928492574610248881137364204914001412269740461851747883355414968499272944590071623223603501698004227753335552646715567802825755799597955409228004284739743749531270833084850113574712041224896044525292591264637452797151098802604186311724597450780520140413704697374209653369969451501627583467893160412780732575085846467289134920886789952338174193202234175299652687560232593212131693456966318670843605238958724126368185289703563591477049105538528244632434869965333722691837462591128379816582723367039674028619947057144546</span></span><br></pre></td></tr></table></figure><p>本题参考常乐村驾校队伍的wp</p><p>用pq ≡ 10 mod 10^i  DFS 搜寻</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">n =</span><br><span class="line"><span class="number">697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166</span></span><br><span class="line"><span class="number">486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628</span></span><br><span class="line"><span class="number">583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331</span></span><br><span class="line"><span class="number">897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326</span></span><br><span class="line"><span class="number">655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069</span></span><br><span class="line"><span class="number">834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661</span></span><br><span class="line"><span class="number">553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850</span></span><br><span class="line"><span class="number">851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129</span></span><br><span class="line"><span class="number">104495659093134763261751546990704365966783697780787341963138501</span></span><br><span class="line">c =</span><br><span class="line"><span class="number">153383826085102296581238539677668696644156148059026868813759015106139131297135097831661048493079</span></span><br><span class="line"><span class="number">405226972222492151356105759235749502324303047037349410709021152255315429280760639113724345836532087970918453353723090554450581657930847674930226113840172368662838756446364482977092478979838209</span></span><br><span class="line"><span class="number">396761279326533419699056209983721842484996150025403009644653678928025861445324715419893797015875</span></span><br><span class="line"><span class="number">541525590135843027312322236085581571452084477262582966972702577136904385741443870527205640874446</span></span><br><span class="line"><span class="number">616413917231260133364227248928492574610248881137364204914001412269740461851747883355414968499272</span></span><br><span class="line"><span class="number">944590071623223603501698004227753335552646715567802825755799597955409228004284739743749531270833084850113574712041224896044525292591264637452797151098802604186311724597450780520140413704697374</span></span><br><span class="line"><span class="number">209653369969451501627583467893160412780732575085846467289134920886789952338174193202234175299652</span></span><br><span class="line"><span class="number">687560232593212131693456966318670843605238958724126368185289703563591477049105538528244632434869</span></span><br><span class="line"><span class="number">965333722691837462591128379816582723367039674028619947057144546</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base10</span>(<span class="params">ss</span>):</span><br><span class="line">r = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ss[: -<span class="number">1</span>]:</span><br><span class="line">r = r * <span class="number">10</span> + x</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">ps, qs, mod</span>):</span><br><span class="line"><span class="keyword">if</span> base10(ps) * base10(qs) = n:</span><br><span class="line"><span class="keyword">yield</span> base10(ps), base10(qs)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">for</span> pp, qq <span class="keyword">in</span> product((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)):</span><br><span class="line">p = base10(ps + [pp])</span><br><span class="line">q = base10(qs + [qq])</span><br><span class="line"><span class="keyword">if</span> p * q % mod = n % mod:</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">from</span> dfs(ps + [pp], qs + [qq], mod * <span class="number">10</span>)</span><br><span class="line">p, q = <span class="built_in">next</span>(dfs([], [], <span class="number">1</span>))</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">XYCTF&#123;7f4b2241951976ce5ef6df44503209059997e5085d1bc21f6bef4d9effb29fd0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="factor1"><a href="#factor1" class="headerlink" title="factor1"></a>factor1</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">d = getPrime(<span class="number">512</span>)</span><br><span class="line">e = gmpy2.invert(d, (p**<span class="number">3</span> - <span class="number">1</span>) * (q**<span class="number">3</span> - <span class="number">1</span>))</span><br><span class="line">flag = <span class="string">&quot;XYCTF&#123;&quot;</span> + hashlib.md5(<span class="built_in">str</span>(p + q).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(p * q)</span><br><span class="line"><span class="comment"># 172005065945326769176157335849432320425605083524943730546805772515111751580759726759492349719668775270727323745284785341119685198468883978645793770975366048506237371435027612758232099414404389043740306443065413069994232238075194102578269859784981454218948784071599231415554297361219709787507633404217550013282713899284609273532223781487419770338416653260109238572639243087280632577902857385265070736208291583497988891353312351322545840742380550393294960815728021248513046077985900158814037534487146730483099151396746751774427787635287611736111679074330407715700153025952858666841328055071403960165321273972935204988906850585454805923440635864200149694398767776539993952528995717480620593326867245714074205285828967234591508039849777840636255379730281105670496110061909219669860172557450779495125345533232776767292561378244884362014224844319802810586344516400297830227894063759083198761120293919537342405893653545157892446163</span></span><br><span class="line"><span class="comment"># 99075185389443078008327214328328747792385153883836599753096971412377366865826254033534293886034828804219037466246175526347014045811852531994537520303063113985486063022444972761276531422538694915030159420989401280012025249129111871649831185047820236417385693285461420040134313833571949090757635806658958193793</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/663309e70ea9cb1403f260fd.png" alt="alt text"><br><img src="https://pic.imgdb.cn/item/66330a050ea9cb1403f2aa31.png" alt="alt text"><br><a href="https://www.cnblogs.com/futihuanhuan/p/18126544">https://www.cnblogs.com/futihuanhuan/p/18126544</a></p><p>e &#x3D; gmpy2.invert(d, (p<strong>3 - 1) * (q</strong>3 - 1))</p><p>ed&#x3D;1 mol (p^3-1)(q^3-1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">x, y</span>):  <span class="comment"># 使用辗转相处将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        res.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continued_fraction</span>(<span class="params">sub_res</span>):</span><br><span class="line">    numerator, denominator = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从sublist的后面往前循环</span></span><br><span class="line">        denominator, numerator = numerator, i * numerator + denominator</span><br><span class="line">    <span class="keyword">return</span> denominator, numerator  <span class="comment"># 得到渐进分数的分母和分子，并返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解每个渐进分数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_fraction</span>(<span class="params">x, y</span>):</span><br><span class="line">    res = transform(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(continued_fraction, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">a, b, c</span>):  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> sub_fraction(e, <span class="built_in">pow</span>(n,<span class="number">3</span>)):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line">        <span class="built_in">print</span>(phi)</span><br><span class="line"></span><br><span class="line">e = <span class="number">172005065945326769176157335849432320425605083524943730546805772515111751580759726759492349719668775270727323745284785341119685198468883978645793770975366048506237371435027612758232099414404389043740306443065413069994232238075194102578269859784981454218948784071599231415554297361219709787507633404217550013282713899284609273532223781487419770338416653260109238572639243087280632577902857385265070736208291583497988891353312351322545840742380550393294960815728021248513046077985900158814037534487146730483099151396746751774427787635287611736111679074330407715700153025952858666841328055071403960165321273972935204988906850585454805923440635864200149694398767776539993952528995717480620593326867245714074205285828967234591508039849777840636255379730281105670496110061909219669860172557450779495125345533232776767292561378244884362014224844319802810586344516400297830227894063759083198761120293919537342405893653545157892446163</span></span><br><span class="line">n = <span class="number">99075185389443078008327214328328747792385153883836599753096971412377366865826254033534293886034828804219037466246175526347014045811852531994537520303063113985486063022444972761276531422538694915030159420989401280012025249129111871649831185047820236417385693285461420040134313833571949090757635806658958193793</span></span><br><span class="line">d = wienerAttack(e, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到了phi的值（有四个，这里选择了最后一个才行）</span></span><br><span class="line">phi=<span class="number">972511355325113364052631731298241810108224336674853638392467496531221801463760422905081649486798893513235333261259026447362914449581968126150102058615785246984679107185088051540510676300698365173661664885922445984655201183939191294572815083110772280365015589954234618105130449050794187936653858911777331129374894613360180493778922390477471639230901499329286970066470938409172561402078020835704490763798033121327637376099345951393869066421256289755264836484293517455899841236893445058111156336783915080237891217097045326088433225353906745033086359517592587665091898519726306522216078946862525938605393095583476688928534868739031136603910653270126346663043777160589940969589929595662661998764846989622496897301967409430643458710968400436993966533764128546870219134569546167184537791250407432987498639475713973006971493363603598769092342912760402244358599858957999731973699418392072577594301810589012112435730728238977588777556</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p+q=<span class="number">19967005847503923034507166918794965506267503428119552203292911361615132318903414819134103287113608735292986181147786515878575262609755277623932397581187246</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols, Eq, solve </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义符号变量</span></span><br><span class="line">x= symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的值</span></span><br><span class="line">phi = <span class="number">972511355325113364052631731298241810108224336674853638392467496531221801463760422905081649486798893513235333261259026447362914449581968126150102058615785246984679107185088051540510676300698365173661664885922445984655201183939191294572815083110772280365015589954234618105130449050794187936653858911777331129374894613360180493778922390477471639230901499329286970066470938409172561402078020835704490763798033121327637376099345951393869066421256289755264836484293517455899841236893445058111156336783915080237891217097045326088433225353906745033086359517592587665091898519726306522216078946862525938605393095583476688928534868739031136603910653270126346663043777160589940969589929595662661998764846989622496897301967409430643458710968400436993966533764128546870219134569546167184537791250407432987498639475713973006971493363603598769092342912760402244358599858957999731973699418392072577594301810589012112435730728238977588777556</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">99075185389443078008327214328328747792385153883836599753096971412377366865826254033534293886034828804219037466246175526347014045811852531994537520303063113985486063022444972761276531422538694915030159420989401280012025249129111871649831185047820236417385693285461420040134313833571949090757635806658958193793</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方程    </span></span><br><span class="line">equation = Eq(n ** <span class="number">3</span> - x ** <span class="number">3</span> + <span class="number">3</span> * n * x + <span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解方程</span></span><br><span class="line">solutions = solve(equation, x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x&quot;</span>, solutions)</span><br><span class="line"><span class="comment"># x [19967005847503923034507166918794965506267503428119552203292911361615132318903414819134103287113608735292986181147786515878575262609755277623932397581187246, -9983502923751961517253583459397482753133751714059776101646455680807566159451707409567051643556804367646493090573893257939287631304877638811966198790593623 - 771456569821584922256693369902764016239372722068394853403923361178938709770043333485345978614898773234557340570790401703783946838483311130240494535029156*sqrt(3)*I, -9983502923751961517253583459397482753133751714059776101646455680807566159451707409567051643556804367646493090573893257939287631304877638811966198790593623 + 771456569821584922256693369902764016239372722068394853403923361178938709770043333485345978614898773234557340570790401703783946838483311130240494535029156*sqrt(3)*I]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">x=<span class="number">19967005847503923034507166918794965506267503428119552203292911361615132318903414819134103287113608735292986181147786515878575262609755277623932397581187246</span></span><br><span class="line">flag = <span class="string">&quot;XYCTF&#123;&quot;</span> + hashlib.md5(<span class="built_in">str</span>(x).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="factor3"><a href="#factor3" class="headerlink" title="factor3"></a>factor3</h2><p>加密代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag = <span class="string">b&#x27;XYCTF&#123;*****&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gainPrime</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">x = random.getrandbits(<span class="number">256</span>)</span><br><span class="line">y = random.getrandbits(<span class="number">256</span>)</span><br><span class="line"><span class="keyword">if</span> y % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">p = x ** <span class="number">3</span> + <span class="number">3</span> * y ** <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> p.bit_length() == <span class="number">768</span> <span class="keyword">and</span> p % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">and</span> isPrime(p):</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">p, q = gainPrime(), gainPrime()</span><br><span class="line">N = p * q</span><br><span class="line">phi = (p ** <span class="number">2</span> + p + <span class="number">1</span>) * (q ** <span class="number">2</span> + q + <span class="number">1</span>)</span><br><span class="line">d = getPrime(<span class="number">320</span>)</span><br><span class="line">e = inverse(d, phi)</span><br><span class="line">c = d**<span class="number">2</span>^m</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;N: <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c: <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">N:</span><br><span class="line"><span class="number">913125842482770239379848062277162627509794409924607555622246822717218133091223291889541294440266178282194506242444509803611492259403578922020590</span></span><br><span class="line"><span class="number">849630191477864719052980160940803309686069818208833547621252544423652489</span></span><br><span class="line"><span class="number">179493083138385424424384165228024273745733240109761707533778691158938848</span></span><br><span class="line"><span class="number">158094054261174692601673435971526522219273943464877956131040249169850420</span></span><br><span class="line"><span class="number">336023942653021547841666224446678539579529590840999008107782784268926145</span></span><br><span class="line"><span class="number">671962239929431694391039559247</span></span><br><span class="line">e:</span><br><span class="line"><span class="number">494518390582436635999115147756676313570637682518235195828939117782099618</span></span><br><span class="line"><span class="number">734167908630788943568232122157772909140885391963441876427590731524706959</span></span><br><span class="line"><span class="number">546524212914108888799081844320513851526790475333924396837458796755678072</span></span><br><span class="line"><span class="number">486028072639014677580265244176441153444956871730684233063789931539669072</span></span><br><span class="line"><span class="number">735599696830757690822185323538738397827461580678488181113667710378657058</span></span><br><span class="line"><span class="number">297572328491762536595872579603698945272140918157163640403488075948987156</span></span><br><span class="line"><span class="number">585480146162739943419183496337465468187233821931312507662218106713861638</span></span><br><span class="line"><span class="number">334075899266373256620752680354704533272722692596941861606161634082613228</span></span><br><span class="line"><span class="number">896420520465402725359166156632884432690715903666803067996854084671477445</span></span><br><span class="line"><span class="number">131853993177110154928274312496230096270510089973592664248613332000290545</span></span><br><span class="line"><span class="number">537840595645944390047611474888693558676781309912289044962293014118087259</span></span><br><span class="line"><span class="number">307560444929227407113819165713213046898243995956550944640168932947118400</span></span><br><span class="line"><span class="number">215917515277554126694376415569909534496134700668701465649939</span></span><br><span class="line">c:</span><br><span class="line"><span class="number">445093133736946148210694599254213355758596289403050506511087038911256532</span></span><br><span class="line"><span class="number">987550295276218237292611703737321050951657095848360656627436984055113238</span></span><br><span class="line"><span class="number">1128665744266165792377925899683228751870742727716</span></span><br></pre></td></tr></table></figure><p>解密参考：列向量队</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):<span class="comment">#多元copper</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">d = f.degree()</span><br><span class="line">R = f.base_ring()</span><br><span class="line">N = R.cardinality()</span><br><span class="line">f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">f = f.change_ring(ZZ)</span><br><span class="line">G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">base = N ^ (m - i) * f ^ i</span><br><span class="line"><span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d),</span><br><span class="line">repeat=f.nvariables()):</span><br><span class="line">g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">G.append(g)</span><br><span class="line">B, monomials = G.coefficient_matrix()</span><br><span class="line">monomials = vector(monomials)</span><br><span class="line">factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, factor)</span><br><span class="line">B = B.dense_matrix().LLL()</span><br><span class="line">B = B.change_ring(QQ)</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">H.append(h)</span><br><span class="line">I = H.ideal()</span><br><span class="line"><span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">H.pop()</span><br><span class="line"><span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">roots = []</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">roots.append(root)</span><br><span class="line"><span class="keyword">return</span> roots</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">n =</span><br><span class="line"><span class="number">913125842482770239379848062277162627509794409924607555622246822717218133091223291889541294440266178282194506242444509803611492259403578922020590</span></span><br><span class="line"><span class="number">849630191477864719052980160940803309686069818208833547621252544423652489</span></span><br><span class="line"><span class="number">179493083138385424424384165228024273745733240109761707533778691158938848</span></span><br><span class="line"><span class="number">158094054261174692601673435971526522219273943464877956131040249169850420</span></span><br><span class="line"><span class="number">336023942653021547841666224446678539579529590840999008107782784268926145</span></span><br><span class="line"><span class="number">671962239929431694391039559247</span></span><br><span class="line">e =</span><br><span class="line"><span class="number">494518390582436635999115147756676313570637682518235195828939117782099618</span></span><br><span class="line"><span class="number">734167908630788943568232122157772909140885391963441876427590731524706959</span></span><br><span class="line"><span class="number">546524212914108888799081844320513851526790475333924396837458796755678072</span></span><br><span class="line"><span class="number">486028072639014677580265244176441153444956871730684233063789931539669072</span></span><br><span class="line"><span class="number">735599696830757690822185323538738397827461580678488181113667710378657058</span></span><br><span class="line"><span class="number">297572328491762536595872579603698945272140918157163640403488075948987156</span></span><br><span class="line"><span class="number">585480146162739943419183496337465468187233821931312507662218106713861638</span></span><br><span class="line"><span class="number">334075899266373256620752680354704533272722692596941861606161634082613228</span></span><br><span class="line"><span class="number">896420520465402725359166156632884432690715903666803067996854084671477445</span></span><br><span class="line"><span class="number">131853993177110154928274312496230096270510089973592664248613332000290545</span></span><br><span class="line"><span class="number">537840595645944390047611474888693558676781309912289044962293014118087259</span></span><br><span class="line"><span class="number">307560444929227407113819165713213046898243995956550944640168932947118400</span></span><br><span class="line"><span class="number">215917515277554126694376415569909534496134700668701465649939</span></span><br><span class="line">P = PolynomialRing(Zmod(e), <span class="string">&quot;k,s&quot;</span>)</span><br><span class="line">k, s = P.gens()</span><br><span class="line">f = <span class="number">1</span> + k * (n ^ <span class="number">2</span> + (n + <span class="number">1</span>) * (s + <span class="number">1</span>) + s ^ <span class="number">2</span> - <span class="number">2</span> * n)</span><br><span class="line">k, s = small_roots(f, (<span class="number">2</span> ** <span class="number">320</span>, <span class="number">2</span> ** <span class="number">768</span>), m=<span class="number">3</span>, d=<span class="number">4</span>)[<span class="number">0</span>] <span class="comment"># take ~1min</span></span><br><span class="line">k, s = ZZ(k), ZZ(s)</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">125125730665737365965460573948581759569571720243814978163777784963537129</span></span><br><span class="line"><span class="string">2306024253248630690054410</span></span><br><span class="line"><span class="string">192542022902257858340613955458155183565501196469577365750108215823363337</span></span><br><span class="line"><span class="string">683394973722208794410902290438994342045520906008135423459729237892362733</span></span><br><span class="line"><span class="string">695782276383497516564289875792818430615786451024154774031397254880170824</span></span><br><span class="line"><span class="string">9946480791494352</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#求出k和s之后，直接可以求出d了</span></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> solve, symbols</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, isPrime, bytes_to_long,</span><br><span class="line">getPrime</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p_q =</span></span><br><span class="line"><span class="string">192542022902257858340613955458155183565501196469577365750108215823363337</span></span><br><span class="line"><span class="string">683394973722208794410902290438994342045520906008135423459729237892362733</span></span><br><span class="line"><span class="string">695782276383497516564289875792818430615786451024154774031397254880170824</span></span><br><span class="line"><span class="string">9946480791494352</span></span><br><span class="line"><span class="string">n =</span></span><br><span class="line"><span class="string">913125842482770239379848062277162627509794409924607555622246822717218133</span></span><br><span class="line"><span class="string">091223291889541294440266178282194506242444509803611492259403578922020590</span></span><br><span class="line"><span class="string">849630191477864719052980160940803309686069818208833547621252544423652489</span></span><br><span class="line"><span class="string">179493083138385424424384165228024273745733240109761707533778691158938848</span></span><br><span class="line"><span class="string">158094054261174692601673435971526522219273943464877956131040249169850420</span></span><br><span class="line"><span class="string">336023942653021547841666224446678539579529590840999008107782784268926145</span></span><br><span class="line"><span class="string">671962239929431694391039559247</span></span><br><span class="line"><span class="string">p, q = symbols(&#x27;p q&#x27;)</span></span><br><span class="line"><span class="string">res = solve([p + q - p_q, p * q - n], [p, q])</span></span><br><span class="line"><span class="string">print(res)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">e =</span><br><span class="line"><span class="number">494518390582436635999115147756676313570637682518235195828939117782099618</span></span><br><span class="line"><span class="number">734167908630788943568232122157772909140885391963441876427590731524706959</span></span><br><span class="line"><span class="number">546524212914108888799081844320513851526790475333924396837458796755678072</span></span><br><span class="line"><span class="number">486028072639014677580265244176441153444956871730684233063789931539669072</span></span><br><span class="line"><span class="number">735599696830757690822185323538738397827461580678488181113667710378657058</span></span><br><span class="line"><span class="number">297572328491762536595872579603698945272140918157163640403488075948987156</span></span><br><span class="line"><span class="number">585480146162739943419183496337465468187233821931312507662218106713861638</span></span><br><span class="line"><span class="number">334075899266373256620752680354704533272722692596941861606161634082613228</span></span><br><span class="line"><span class="number">896420520465402725359166156632884432690715903666803067996854084671477445</span></span><br><span class="line"><span class="number">131853993177110154928274312496230096270510089973592664248613332000290545</span></span><br><span class="line"><span class="number">537840595645944390047611474888693558676781309912289044962293014118087259</span></span><br><span class="line"><span class="number">307560444929227407113819165713213046898243995956550944640168932947118400</span></span><br><span class="line"><span class="number">215917515277554126694376415569909534496134700668701465649939</span></span><br><span class="line">p =</span><br><span class="line"><span class="number">845727542734252771097508620366884787581346823455578404917525769041539439</span></span><br><span class="line"><span class="number">746914530374958818236462967773717478357930648479282951655380705183747821</span></span><br><span class="line"><span class="number">800053493097745787392338644671787997907165214166274630065657567039034950</span></span><br><span class="line"><span class="number">440073852768399</span></span><br><span class="line">q =</span><br><span class="line"><span class="number">107969268628832581230863093421466704807366514124019525258355638919209393</span></span><br><span class="line"><span class="number">708703520684712912587255993661622594209727841160207128294191167373987951</span></span><br><span class="line"><span class="number">515776927073722937825056011325639630825069929607527311024831498176267329</span></span><br><span class="line"><span class="number">9506406938725953</span></span><br><span class="line">phi = (p ** <span class="number">2</span> + p + <span class="number">1</span>) * (q ** <span class="number">2</span> + q + <span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">c =</span><br><span class="line"><span class="number">445093133736946148210694599254213355758596289403050506511087038911256532</span></span><br><span class="line"><span class="number">987550295276218237292611703737321050951657095848360656627436984055113238</span></span><br><span class="line"><span class="number">1128665744266165792377925899683228751870742727716</span></span><br><span class="line">happy_to_solve2</span><br><span class="line">加密代码：</span><br><span class="line">m = c ^ (d ** <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;XYCTF&#123;I_love_to_read_the_crypto_paper_and_try_to_ak_them&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="babyRSMAX"><a href="#babyRSMAX" class="headerlink" title="babyRSMAX"></a>babyRSMAX</h2><p><img src="https://pic.imgdb.cn/item/66330abe0ea9cb1403f48f98.png" alt="alt text "><br>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from random import choice</span><br><span class="line"></span><br><span class="line">flag = b&#x27;XYCTF&#123;******&#125;&#x27;</span><br><span class="line">e = &#x27;?&#x27;</span><br><span class="line">def getBabyPrime(nbits):</span><br><span class="line">    while True:</span><br><span class="line">        p = 1</span><br><span class="line">        while p.bit_length() &lt;= nbits:</span><br><span class="line">            p *= choice(sieve_base)</span><br><span class="line">        </span><br><span class="line">        if isPrime(p+1):</span><br><span class="line">            return p+1</span><br><span class="line"></span><br><span class="line">p = getBabyPrime(512)</span><br><span class="line">q = getBabyPrime(512)</span><br><span class="line">n = p*q</span><br><span class="line">gift1 = (pow(p,e,n)-pow(q,e,n)) % n</span><br><span class="line">gift2 = pow(p+q,e,n)</span><br><span class="line"></span><br><span class="line">t = 65537</span><br><span class="line">x = bytes_to_long(e)</span><br><span class="line">y = pow(x, t, n)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = powmod(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;gift1 = &#123;gift1&#125;&#x27;)</span><br><span class="line">print(f&#x27;gift2 = &#123;gift2&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line">print(f&#x27;y = &#123;y&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 39332423872740210783246069030855946244104982381157166843977599780233911183158560901377359925435092326653303964261550158658551518626014048783435245471536959844874036516931542444719549997971482644905523459407775392702211086149279473784796202020281909706723380472571862792003687423791576530085747716706475220532321</span><br><span class="line">gift1 = 4549402444746338327349007235818187793950285105091726167573552412678416759694660166956782755631447271662108564084382098562999950228708300902201571583419116299932264478381197034402338481872937576172197202519770782458343606060544694608852844228400457232100904217062914047342663534138668490328400022651816597367310</span><br><span class="line">gift2 = 111061215998959709920736448050860427855012026815376672067601244053580566359594802604251992986382187891022583247997994146019970445247509119719411310760491983876636264003942870756402328634092146799825005835867245563420135253048223898334460067523975023732153230791136870324302259127159852763634051238811969161011462</span><br><span class="line">c = 16938927825234407267026017561045490265698491840814929432152839745035946118743714566623315033802681009017695526374397370343984360997903165842591414203197184946588470355728984912522040744691974819630118163976259246941579063687857994193309554129816268931672391946592680578681270693589911021465752454315629283033043</span><br><span class="line">y = 1813650001270967709841306491297716908969425248888510985109381881270362755031385564927869313112540534780853966341044526856705589020295048473305762088786992446350060024881117741041260391405962817182674421715239197211274668450947666394594121764333794138308442124114744892164155894256326961605137479286082964520217</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>本题参考了常乐村驾校队伍的wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line">n =</span><br><span class="line"><span class="number">393324238727402107832460690308559462441049823811571668439775997802339111831585609013773599254350</span></span><br><span class="line"><span class="number">923266533039642615501586585515186260140487834352454715369598448740365169315424447195499979714826</span></span><br><span class="line"><span class="number">449055234594077753927022110861492794737847962020202819097067233804725718627920036874237915765300</span></span><br><span class="line"><span class="number">85747716706475220532321</span></span><br><span class="line">g1 =</span><br><span class="line"><span class="number">454940244474633832734900723581818779395028510509172616757355241267841675969466016695678275563144</span></span><br><span class="line"><span class="number">727166210856408438209856299995022870830090220157158341911629993226447838119703440233848187293757</span></span><br><span class="line"><span class="number">617219720251977078245834360606054469460885284422840045723210090421706291404734266353413866849032</span></span><br><span class="line"><span class="number">8400022651816597367310</span></span><br><span class="line">g2 =</span><br><span class="line"><span class="number">111061215998959709920736448050860427855012026815376672067601244053580566359594802604251992986382</span></span><br><span class="line"><span class="number">187891022583247997994146019970445247509119719411310760491983876636264003942870756402328634092146</span></span><br><span class="line"><span class="number">799825005835867245563420135253048223898334460067523975023732153230791136870324302259127159852763</span></span><br><span class="line"><span class="number">634051238811969161011462</span></span><br><span class="line">c =</span><br><span class="line"><span class="number">169389278252344072670260175610454902656984918408149294321528397450359461187437145666233150338026</span></span><br><span class="line"><span class="number">810090176955263743973703439843609979031658425914142031971849465884703557289849125220407446919748</span></span><br><span class="line"><span class="number">196301181639762592469415790636878579941933095541298162689316723919465926805786812706935899110214</span></span><br><span class="line"><span class="number">65752454315629283033043</span></span><br><span class="line">y =</span><br><span class="line"><span class="number">181365000127096770984130649129771690896942524888851098510938188127036275503138556492786931311254053478085396634104452685670558902029504847330576208878699244635006002488111774104126039140596281</span></span><br><span class="line"><span class="number">718267442171523919721127466845094766639459412176433379413830844212411474489216415589425632696160</span></span><br><span class="line"><span class="number">5137479286082964520217</span></span><br><span class="line">pe = ((g1+g2)/ <span class="number">2</span>)%n</span><br><span class="line">qe = ((g2-g1)/ <span class="number">2</span>)%n</span><br><span class="line">p = gmpy2.gcd(pe,n)</span><br><span class="line">q = gmpy2.gcd(qe,n)</span><br><span class="line"><span class="built_in">print</span>(p,q)</span><br><span class="line"><span class="built_in">print</span>(p*q= n)</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">t = <span class="number">65537</span></span><br><span class="line">x = <span class="built_in">pow</span>(y,gmpy2.invert(t,phi),n)</span><br><span class="line">e = x</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(e))</span><br><span class="line">e = <span class="number">4096</span></span><br><span class="line">phi = phi/ <span class="number">4</span></span><br><span class="line">d_ = gmpy2.invert(e,phi)</span><br><span class="line"><span class="comment">#print(d)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multiplication</span>(<span class="params">x1,y1,x2,y2,w,p</span>):</span><br><span class="line">x=(x1*x2+y1*y2*w)%p</span><br><span class="line">y=(x1*y2+x2*y1)%p</span><br><span class="line"><span class="keyword">return</span> x,y</span><br><span class="line"><span class="comment"># 获取w,使得w = -1 mod p, w是复数元的平方</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_w</span>(<span class="params">c,p</span>):</span><br><span class="line">a=randint(<span class="number">1</span>,p)</span><br><span class="line">w=<span class="built_in">pow</span>(a, <span class="number">2</span>) - c</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">pow</span>(w,(p - <span class="number">1</span>)/ <span class="number">2</span>,p)! p-<span class="number">1</span>:</span><br><span class="line">a=randint(<span class="number">1</span>,p)</span><br><span class="line">w=<span class="built_in">pow</span>(a,<span class="number">2</span>)-c</span><br><span class="line"><span class="keyword">return</span> w,a</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Cipolla_algorithm</span>(<span class="params">c,p</span>):</span><br><span class="line">    <span class="comment">#主体部分</span></span><br><span class="line">    w,a=get_w(c,p)</span><br><span class="line">    power=(p+<span class="number">1</span>)/ <span class="number">2</span></span><br><span class="line">    x1=a</span><br><span class="line">    y1=<span class="number">1</span></span><br><span class="line">    x=<span class="number">1</span></span><br><span class="line">    y=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(power! <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">if</span>(power! (p+<span class="number">1</span>)/ <span class="number">2</span>):</span><br><span class="line">            x1,y1=multiplication(x1,y1,x1,y1,w,p)</span><br><span class="line">        <span class="keyword">if</span>(power &amp; <span class="number">1</span>):</span><br><span class="line">            x,y=multiplication(x,y,x1,y1,w,p)</span><br><span class="line">        power&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">cn =</span><br><span class="line"><span class="built_in">pow</span>(c,<span class="number">4</span>*<span class="number">1534022146892150554839736212812313821410100326022914405108745499241300613161518580076912</span></span><br><span class="line"><span class="number">4140840468748</span></span><br><span class="line"><span class="number">23035337005158475621433705623268639417140515158078335142054666787229183797173181186377993649280</span>,</span><br><span class="line">n)</span><br><span class="line">cp = cn%p</span><br><span class="line">Cipolla_algorithm(cn,p)%p</span><br><span class="line"><span class="number">166353789373057352195268573847472134983952212264580315606750168640904529917560511398152614100259</span></span><br><span class="line"><span class="number">694276272602506054433757749654828608600573448732931745676174</span></span><br><span class="line">sage: Cipolla_algorithm(cn,p)%p</span><br><span class="line"><span class="number">132092561537869160993667319333430266730451609506565594486832556247939179580442437134355292265094</span></span><br><span class="line"><span class="number">6388889883899419614130483678902025</span></span><br><span class="line">sage: Cipolla_algorithm(cn,p)%p</span><br><span class="line"><span class="number">166353789373057352195268573847472134983952212264580315606750168640904529917560511398152614100259</span></span><br><span class="line"><span class="number">694276272602506054433757749654828608600573448732931745676174</span></span><br><span class="line">sage:</span><br><span class="line">Cipolla_algorithm(<span class="number">166353789373057352195268573847472134983952212264580315606750168640904529917560</span></span><br><span class="line"><span class="number">511398152614100259694276272602506054433757749654828608600573448732931745676174</span>,p)%p</span><br><span class="line"><span class="number">0</span></span><br><span class="line">sage:</span><br><span class="line">Cipolla_algorithm(<span class="number">132092561537869160993667319333430266730451609506565594486832556247939179580442</span></span><br><span class="line"><span class="number">4371343552922650946388889883899419614130483678902025</span>,p)%p</span><br><span class="line"><span class="number">36344540379246669047243921781711114415694316462518391812884210045</span></span><br><span class="line">sage:</span><br><span class="line">Cipolla_algorithm(<span class="number">132092561537869160993667319333430266730451609506565594486832556247939179580442</span></span><br><span class="line"><span class="number">4371343552922650946388889883899419614130483678902025</span>,p)%p</span><br><span class="line"><span class="number">166353789373057352195268575168397750362643822201253508941052835945420624983216456266478176543306</span></span><br><span class="line"><span class="number">949701450304802363434626984929302798183530544471602540368154</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#长度较短的通常会是flag，尝试l2b</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">36344540379246669047243921781711114415694316462518391812884210045</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">b&#x27;XYCTF&#123;Rabin_is_so_biggggg!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CRYPTO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pyecharts绘制中国地图</title>
      <link href="/2024/04/10/pyecharts-hui-zhi-zhong-guo-di-tu/"/>
      <url>/2024/04/10/pyecharts-hui-zhi-zhong-guo-di-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="pyecharts库"><a href="#pyecharts库" class="headerlink" title="pyecharts库"></a>pyecharts库</h2><p>通过测试发现，安装0.1.9.4版本最为稳定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyecharts==<span class="number">0.1</span><span class="number">.9</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><p>安装完成后，下面是一个简单的测试案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Map</span><br><span class="line"></span><br><span class="line">province_distribution  = &#123;</span><br><span class="line">    <span class="string">&quot;北京&quot;</span>: <span class="number">3.923916945</span>,</span><br><span class="line">    <span class="string">&quot;天津&quot;</span>: <span class="number">1.974557674</span>,</span><br><span class="line">    <span class="string">&quot;河北&quot;</span>: <span class="number">0.031448024</span>,</span><br><span class="line">    <span class="string">&quot;山西&quot;</span>: -<span class="number">0.243928321</span>,</span><br><span class="line">    <span class="string">&quot;内蒙古&quot;</span>: <span class="number">0.285642805</span>,</span><br><span class="line">    <span class="string">&quot;辽宁&quot;</span>: -<span class="number">0.012222464</span>,</span><br><span class="line">    <span class="string">&quot;吉林&quot;</span>: <span class="number">0.037753234</span>,</span><br><span class="line">    <span class="string">&quot;黑龙江&quot;</span>: -<span class="number">0.098705912</span>,</span><br><span class="line">    <span class="string">&quot;上海&quot;</span>: <span class="number">2.498539306</span>,</span><br><span class="line">    <span class="string">&quot;江苏&quot;</span>: <span class="number">0.367988799</span>,</span><br><span class="line">    <span class="string">&quot;浙江&quot;</span>: <span class="number">0.889074231</span>,</span><br><span class="line">    <span class="string">&quot;安徽&quot;</span>: -<span class="number">0.6519182</span>,</span><br><span class="line">    <span class="string">&quot;福建&quot;</span>: -<span class="number">0.202640638</span>,</span><br><span class="line">    <span class="string">&quot;江西&quot;</span>: -<span class="number">0.968214234</span>,</span><br><span class="line">    <span class="string">&quot;山东&quot;</span>: <span class="number">0.355384584</span>,</span><br><span class="line">    <span class="string">&quot;河南&quot;</span>: -<span class="number">0.99580695</span>,</span><br><span class="line">    <span class="string">&quot;湖北&quot;</span>: -<span class="number">0.264681358</span>,</span><br><span class="line">    <span class="string">&quot;湖南&quot;</span>: -<span class="number">1.012688352</span>,</span><br><span class="line">    <span class="string">&quot;广东&quot;</span>: <span class="number">0.574760013</span>,</span><br><span class="line">    <span class="string">&quot;广西&quot;</span>: -<span class="number">0.830955316</span>,</span><br><span class="line">    <span class="string">&quot;海南&quot;</span>: <span class="number">0.149846753</span>,</span><br><span class="line">    <span class="string">&quot;重庆&quot;</span>: -<span class="number">0.431589086</span>,</span><br><span class="line">    <span class="string">&quot;四川&quot;</span>: -<span class="number">0.717277576</span>,</span><br><span class="line">    <span class="string">&quot;贵州&quot;</span>: -<span class="number">1.400394406</span>,</span><br><span class="line">    <span class="string">&quot;云南&quot;</span>: -<span class="number">1.016323672</span>,</span><br><span class="line">    <span class="string">&quot;西藏&quot;</span>: -<span class="number">0.146483877</span>,</span><br><span class="line">    <span class="string">&quot;陕西&quot;</span>: -<span class="number">0.202472393</span>,</span><br><span class="line">    <span class="string">&quot;甘肃&quot;</span>: -<span class="number">0.976863652</span>,</span><br><span class="line">    <span class="string">&quot;青海&quot;</span>: -<span class="number">0.352463859</span>,</span><br><span class="line">    <span class="string">&quot;宁夏&quot;</span>: -<span class="number">0.001899423</span>,</span><br><span class="line">    <span class="string">&quot;新疆&quot;</span>: -<span class="number">0.561382676</span></span><br><span class="line">&#125;</span><br><span class="line">provice = <span class="built_in">list</span>(province_distribution.keys())</span><br><span class="line">num = <span class="built_in">list</span>(province_distribution.values())</span><br><span class="line"></span><br><span class="line">chinaMap = Map(width=<span class="number">1200</span>, height=<span class="number">600</span>)</span><br><span class="line">chinaMap.add(name=<span class="string">&quot;医疗水平综合得分&quot;</span>,</span><br><span class="line">             attr=provice,</span><br><span class="line">             value=num,</span><br><span class="line">             visual_range=[-<span class="number">1.1</span>, <span class="number">1.5</span>],</span><br><span class="line">             maptype=<span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">             is_visualmap=<span class="literal">True</span>)</span><br><span class="line">chinaMap.render(path=<span class="string">&quot;中国地图.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行，会在同一目录下得到一个’中国地图.html’的文件，通过浏览器打开，可以得到如下的交互式地图</p><p><img src="https://pic.imgdb.cn/item/6616ab5468eb9357130f74dd.png" alt="alt text"></p><p>但是发现得到的地图无法自动显示各个省份的名称，因此可以使用<code>notepad++</code>打开’中国地图.html’，在一千九百多行的位置找到</p><p><img src="https://pic.imgdb.cn/item/6616ac1f68eb935713101e1f.png" alt="alt text"></p><p>添加如下内容并保存</p><p><img src="https://pic.imgdb.cn/item/6616ad3f68eb935713117bef.png" alt="alt text"></p><p>最终就可以得到带有省份名称的中国地图，可以下载保存</p><p><img src="https://pic.imgdb.cn/item/66169f6568eb935713011b92.png" alt="alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>标准化、归一化、去中心化辨析</title>
      <link href="/2024/04/08/biao-zhun-hua-gui-yi-hua-qu-zhong-xin-hua-bian-xi/"/>
      <url>/2024/04/08/biao-zhun-hua-gui-yi-hua-qu-zhong-xin-hua-bian-xi/</url>
      
        <content type="html"><![CDATA[<p>标准化（Standardization）、归一化（Normalization）和去中心化（Centering）是数据预处理中常用的三种不同的缩放技术，它们都旨在调整数据的尺度，以便于进行后续的分析和机器学习任务。虽然这些术语有时被交替使用，但它们在数学上有着不同的含义和应用场景。</p><h3 id="标准化（Standardization）"><a href="#标准化（Standardization）" class="headerlink" title="标准化（Standardization）"></a>标准化（Standardization）</h3><p>标准化是将数据转换为具有特定均值和标准差的过程。通常，标准化会使得数据的均值变为0，标准差变为1。这是通过以下公式完成的（Z-score规范化）：</p><p>$$ z &#x3D; \frac{(x - \mu)}{\sigma} $$</p><p>其中，$\ x $ 是原始数据点，$ \mu $ 是数据集的均值，$ \sigma $ 是数据集的标准差，$ z $ 是标准化后的值。</p><p>标准化的主要目的是消除不同量纲和尺度的影响，使得数据在进行计算和比较时更加公平。它在许多机器学习算法中非常有用，尤其是那些基于距离的算法，如K-近邻（KNN）和主成分分析（PCA）。</p><h3 id="归一化（Normalization）"><a href="#归一化（Normalization）" class="headerlink" title="归一化（Normalization）"></a>归一化（Normalization）</h3><p>归一化通常指的是将数据缩放到一个固定的范围，最常见的是[0, 1]。归一化的公式如下：</p><p>$$ x_{\text{norm}} &#x3D; \frac{x - \text{min}(x)}{\text{max}(x) - \text{min}(x)} $$</p><p>其中，$\ x $ 是原始数据点，<code>min(x)</code>和<code>max(x)</code>分别是数据集中的最小值和最大值，$ x_{\text{norm}} $ 是归一化后的值。</p><p>归一化对于需要数据在固定范围内进行计算的算法非常有用，如梯度下降和神经网络。它也常用于数据可视化，使得不同的数据点可以在同一尺度下比较。</p><h3 id="去中心化（Centering）"><a href="#去中心化（Centering）" class="headerlink" title="去中心化（Centering）"></a>去中心化（Centering）</h3><p>中心化是将数据的均值变为0的过程，但不改变数据的标准差。这可以通过以下公式完成：</p><p>$$ x_{\text{centered}} &#x3D; x - \mu $$</p><p>其中，$\ x$ 是原始数据点 ，$ \mu$ 是数据集的均值，$ x_{\text{centered}} $ 是去中心化后的值。</p><p>去中心化有助于突出数据中的异常值和波动，因为它保留了原始数据的方差。它在某些统计分析和时间序列分析中非常有用，尤其是在计算偏差或平均偏差时。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>标准化</strong>：调整数据的均值和标准差，使其具有均值为0和标准差为1的特性。</li><li><strong>归一化</strong>：将数据缩放到一个固定范围，通常是[0, 1]。</li><li><strong>去中心化</strong>：仅将数据的均值调整为0，不改变其标准差。</li></ul><p>在实际应用中，选择哪种方法取决于数据的特性和后续分析的需求。有时，这些方法可以组合使用，以达到最佳的预处理效果。例如，可以先进行去中心化，然后进行标准化或归一化。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://t.csdnimg.cn/uvG6k">http://t.csdnimg.cn/uvG6k</a></p><p><a href="http://t.csdnimg.cn/80z2S">http://t.csdnimg.cn/80z2S</a></p>]]></content>
      
      
      <categories>
          
          <category> 数模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据标准化处理疑问</title>
      <link href="/2024/04/08/shu-ju-biao-zhun-hua-chu-li-yi-wen/"/>
      <url>/2024/04/08/shu-ju-biao-zhun-hua-chu-li-yi-wen/</url>
      
        <content type="html"><![CDATA[<h2 id="标准化常使用的工具"><a href="#标准化常使用的工具" class="headerlink" title="标准化常使用的工具"></a>标准化常使用的工具</h2><p>1.使用 <code>sklearn</code> 库中的 <code>StandardScaler</code></p><p><code>StandardScaler</code> 是 <code>scikit-learn</code> 库中用于数据预处理的一个工具，它对每个特征进行标准化，使得特征的均值为0，标准差为1。这样做可以确保每个特征在PCA或其他算法中具有相同的重要性，因为算法通常对特征的尺度敏感。</p><p><code>StandardScaler</code> 使用的公式如下：</p><p>对于每个特征中的每个数据点 <code>x</code>，标准化后的值 <code>x_std</code> 计算方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_std = (x - mean) / std</span><br></pre></td></tr></table></figure><p>其中，<code>mean</code> 是该特征所有数据点的均值，<code>std</code> 是该特征所有数据点的标准差。</p><p><code>StandardScaler</code> 首先计算整个数据集的均值和标准差，然后使用这些参数对每个特征的每个数据点进行标准化。这个过程通过 <code>fit</code> 方法完成，然后 <code>transform</code> 方法应用于原始数据，以生成标准化后的数据。</p><p>在实际应用中，<code>fit_transform</code> 方法通常一起使用，因为它首先计算均值和标准差（fit），然后使用这些参数来转换数据（transform）。这样可以确保数据的标准化是基于整个数据集的，而不是基于数据集的一部分。</p><p>转化后的数值，均值为0，标准差为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">MVdata=pd.read_excel(<span class="string">r&quot;C:\Users\Jr.hu\Desktop\指标正向化后.xlsx&quot;</span>,index_col=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据标准化</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">MVdata_scaled = scaler.fit_transform(MVdata)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据标准化后：\n&quot;</span>,MVdata_scaled)</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66134e4e68eb93571348157b.png" alt="alt text"></p><p>2.自己定义公式进行计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S=(MVdata-MVdata.mean())/MVdata.std()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标准化处理后的数据:\n&quot;</span>, <span class="built_in">round</span>(S,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66134f9d68eb9357134b57ff.png" alt="alt text"></p><p>这里发现会有一点的误差，很奇怪，看公式应该是一样的，不知道为什么</p><p>对比之后我个人认为还是第二种方法计算出来的结果相对准确一点</p><p>后面有时间再详细测试一下为什么吧</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/chentiao/p/17203643.html">https://www.cnblogs.com/chentiao/p/17203643.html</a></p><p><a href="http://t.csdnimg.cn/wUqmh">http://t.csdnimg.cn/wUqmh</a></p><p>上面两篇还未认真学习，先放一下</p><h2 id="一起进步！"><a href="#一起进步！" class="headerlink" title="一起进步！"></a>一起进步！</h2>]]></content>
      
      
      <categories>
          
          <category> 数模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>主成分分析</title>
      <link href="/2024/04/08/zhu-cheng-fen-fen-xi/"/>
      <url>/2024/04/08/zhu-cheng-fen-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="主成分能用来做什么"><a href="#主成分能用来做什么" class="headerlink" title="主成分能用来做什么"></a>主成分能用来做什么</h2><p>聚类、回归、寻找变量之间的共线性关系！！！</p><p>主成分分析的一般目的由两点组成：（参考王学民老师）</p><p>（1）将多个有相关关系的变量压缩成少数几个不相关的主成分（综合变量），并保留绝大部分信息；</p><p>（2）给出各主成分的具有实际背景和意义的解释</p><h2 id="雷点在于！！！"><a href="#雷点在于！！！" class="headerlink" title="雷点在于！！！"></a>雷点在于！！！</h2><p><img src="https://pic.imgdb.cn/item/6612cf7b68eb935713aeefb1.png" alt="alt text"><br><img src="https://pic.imgdb.cn/item/6612d01468eb935713b00017.png" alt="alt text"> </p><p>多数论文以及博客使用主成分进行综合评价，王学民老师认为这是不对的，个人参考了一些这方面的研究后觉得王老师说的对。。。</p><p><img src="https://pic.imgdb.cn/item/6612d0cc68eb935713b139ed.png" alt="alt text"><br><img src="https://pic.imgdb.cn/item/6612d20768eb935713b347d3.png" alt="alt text"><br><img src="https://pic.imgdb.cn/item/6612d20068eb935713b345a0.png" alt="alt text"><br><img src="https://pic.imgdb.cn/item/6612d20768eb935713b347eb.png" alt="alt text"><br><img src="https://pic.imgdb.cn/item/6612d20768eb935713b347ff.png" alt="alt text"><br><img src="https://pic.imgdb.cn/item/6612d20668eb935713b347c3.png" alt="alt text"></p><p>因为个人理解能力有限，一知半解，只好放老师的文章来观摩学习</p><p>下面是复现一篇论文时写的python代码，除了最后评价分析这里不科学，其他的地方还行吧，权当存档留念，以后再也不傻乎乎的用主成分进行综合评价了。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> scale</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> factor_analyzer.factor_analyzer <span class="keyword">import</span> calculate_bartlett_sphericity</span><br><span class="line"><span class="keyword">from</span> factor_analyzer.factor_analyzer <span class="keyword">import</span> calculate_kmo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文字符及负号</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;Kaiti&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">MVdata=pd.read_excel(<span class="string">r&quot;C:\Users\Jr.hu\Desktop\指标正向化后.xlsx&quot;</span>,index_col=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始数据展示:\n&quot;</span>, MVdata)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先对数据进行检验分析</span></span><br><span class="line"><span class="comment"># 1.Bartlett&#x27;s球状检验</span></span><br><span class="line">chi_square_value, p_value = calculate_bartlett_sphericity(MVdata)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bartlett球状检验参数：\n卡方值为：&#123;&#125;，p值为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(chi_square_value, p_value))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.KMO检验</span></span><br><span class="line">kmo_all, kmo_model = calculate_kmo(MVdata)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;KMO检验参数：\n&quot;</span>, kmo_model)</span><br><span class="line"><span class="comment"># 参数检验通过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里需要先进行一些分析，为主成分分析做铺垫</span></span><br><span class="line"><span class="comment"># 对原始数据进行标准差标准化  这里采用课件中的方法</span></span><br><span class="line">S=(MVdata-MVdata.mean())/MVdata.std()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标准化处理后的数据:\n&quot;</span>, <span class="built_in">round</span>(S,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求相关系数矩阵</span></span><br><span class="line">CovX=np.around(np.corrcoef(MVdata.T),decimals=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;相关系数矩阵为：\n&quot;</span>,CovX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解特征值和特征向量</span></span><br><span class="line">featValue,featVec=np.linalg.eig(CovX.T)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;特征值为：\n&quot;</span>,featValue)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;特征向量为：\n&quot;</span>,featVec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对特征值进行排序输出</span></span><br><span class="line">featValue=<span class="built_in">sorted</span>(featValue,reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;特征值从高到低依次为：\n&quot;</span>,featValue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制特征值碎石图</span></span><br><span class="line">plt.scatter(<span class="built_in">range</span>(<span class="number">1</span>,MVdata.shape[<span class="number">1</span>]+<span class="number">1</span>),featValue)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,MVdata.shape[<span class="number">1</span>]+<span class="number">1</span>),featValue)</span><br><span class="line">plt.hlines(y=<span class="number">1</span>,xmin=<span class="number">0</span>,xmax=<span class="number">14</span>,colors=<span class="string">&#x27;red&#x27;</span>,linestyles=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Scree Plot&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Factors&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Eigenvalue&quot;</span>)</span><br><span class="line">plt.grid()  <span class="comment"># 显示网格</span></span><br><span class="line">plt.show()  <span class="comment"># 显示图形</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制累计贡献度折线图</span></span><br><span class="line">gx=featValue/np.<span class="built_in">sum</span>(featValue)   <span class="comment"># 贡献度</span></span><br><span class="line">lg=np.cumsum(gx)    <span class="comment"># 累计贡献度</span></span><br><span class="line">plt.scatter(<span class="built_in">range</span>(<span class="number">1</span>,MVdata.shape[<span class="number">1</span>]+<span class="number">1</span>),lg)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,MVdata.shape[<span class="number">1</span>]+<span class="number">1</span>),lg)</span><br><span class="line">plt.hlines(y=<span class="number">0.85</span>,xmin=<span class="number">0</span>,xmax=<span class="number">14</span>,colors=<span class="string">&#x27;red&#x27;</span>,linestyles=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">plt.text(<span class="number">1</span>,<span class="number">0.86</span>,<span class="string">&quot;85%水平线&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;累计贡献度&quot;</span>)</span><br><span class="line">plt.grid()  <span class="comment"># 显示网格</span></span><br><span class="line">plt.show()  <span class="comment"># 显示图形</span></span><br><span class="line"><span class="comment"># 由碎石图及折线图综合分析可知，主成分分析应分为四类，k=4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步，计算主成分对象</span></span><br><span class="line">pcal =PCA(n_components=<span class="number">4</span>).fit(S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步，确定主成分</span></span><br><span class="line">V=pcal.explained_variance_   <span class="comment"># 各个主成分所解释的数据方差</span></span><br><span class="line">W=pcal.explained_variance_ratio_  <span class="comment"># 各个主成分的方差解释比例</span></span><br><span class="line">W.<span class="built_in">sum</span>()    <span class="comment"># 所有主成分解释的总方差</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各个主成分所解释的数据方差为:\n&quot;</span>, V)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各个主成分的方差贡献率为:\n&quot;</span>, W)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;累计方差贡献率为:\n&quot;</span>, W.<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步，主成分负荷</span></span><br><span class="line">Comp_P=pd.DataFrame(pcal.components_.T)   <span class="comment"># 主成分载荷矩阵</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;主成分载荷矩阵为:\n&quot;</span>, Comp_P)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里可以绘制一张热力图表示原先的13个因子与降维后的4个主成分之间的关系</span></span><br><span class="line">ax = sns.heatmap(Comp_P, annot=<span class="literal">True</span>, cmap=<span class="string">&quot;coolwarm&quot;</span>)</span><br><span class="line">ax.set_xticks([<span class="number">0.5</span>, <span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">3.5</span>])</span><br><span class="line">ax.set_xticklabels([<span class="string">&#x27;Comp1&#x27;</span>, <span class="string">&#x27;Comp2&#x27;</span>, <span class="string">&#x27;Comp3&#x27;</span>, <span class="string">&#x27;Comp4&#x27;</span>])  <span class="comment"># 设置x轴的标签</span></span><br><span class="line">ax.set_yticks([<span class="number">0.5</span>,<span class="number">1.5</span>,<span class="number">2.5</span>,<span class="number">3.5</span>,<span class="number">4.5</span>,<span class="number">5.5</span>,<span class="number">6.5</span>,<span class="number">7.5</span>,<span class="number">8.5</span>,<span class="number">9.5</span>,<span class="number">10.5</span>,<span class="number">11.5</span>,<span class="number">12.5</span>])</span><br><span class="line">ax.set_yticklabels([<span class="string">&#x27;x1&#x27;</span>,<span class="string">&#x27;x2&#x27;</span>,<span class="string">&#x27;x3&#x27;</span>,<span class="string">&#x27;x4&#x27;</span>,<span class="string">&#x27;x5&#x27;</span>,<span class="string">&#x27;x6&#x27;</span>,<span class="string">&#x27;x7&#x27;</span>,<span class="string">&#x27;x8&#x27;</span>,<span class="string">&#x27;x9&#x27;</span>,<span class="string">&#x27;x10&#x27;</span>,<span class="string">&#x27;x11&#x27;</span>,<span class="string">&#x27;x12&#x27;</span>,<span class="string">&#x27;x13&#x27;</span>])  <span class="comment"># 设置y轴的标签</span></span><br><span class="line">plt.title(<span class="string">&quot;Factor Analysis&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步，先算各个主成分得分</span></span><br><span class="line">Si=pcal.fit_transform(S)</span><br><span class="line">SR=pd.DataFrame(Si,columns=[<span class="string">&#x27;Comp1&#x27;</span>,<span class="string">&#x27;Comp2&#x27;</span>,<span class="string">&#x27;Comp3&#x27;</span>,<span class="string">&#x27;Comp4&#x27;</span>],index=MVdata.index)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;主成分得分:\n&quot;</span>, SR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步，再算综合评价得分</span></span><br><span class="line">SR[<span class="string">&#x27;Comp&#x27;</span>]=Si.dot(W)</span><br><span class="line">SR[<span class="string">&#x27;Rank&#x27;</span>]=SR.Comp.rank(ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;主成分综合评价得分:\n&quot;</span>, SR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据可视化一：箱线图</span></span><br><span class="line"><span class="comment"># 箱线图1.0(最终得分的箱线图)</span></span><br><span class="line">sns.boxplot(y=SR[<span class="string">&#x27;Comp&#x27;</span>])   <span class="comment"># y轴为各地最终的评价得分</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;综合评价最终得分&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;最终得分箱线图&#x27;</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 箱线图2.0(四个主成分得分的箱线图)</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">8</span>))   <span class="comment"># 创建包含四个子图的画布</span></span><br><span class="line">sns.boxplot(y=SR[<span class="string">&#x27;Comp1&#x27;</span>], ax=axes[<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">sns.boxplot(y=SR[<span class="string">&#x27;Comp2&#x27;</span>], ax=axes[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">sns.boxplot(y=SR[<span class="string">&#x27;Comp3&#x27;</span>], ax=axes[<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">sns.boxplot(y=SR[<span class="string">&#x27;Comp4&#x27;</span>], ax=axes[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据可视化二：小提琴图</span></span><br><span class="line"><span class="comment"># 小提琴图1.0(最终得分小提琴图)</span></span><br><span class="line">sns.violinplot(x=<span class="string">&#x27;Comp&#x27;</span>,data=SR)</span><br><span class="line">plt.title(<span class="string">&#x27;最终得分小提琴图&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;综合评价最终得分&#x27;</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小提琴图2.0(四个主成分得分的小提琴图)</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">8</span>))   <span class="comment"># 创建包含四个子图的画布</span></span><br><span class="line">sns.violinplot(y=SR[<span class="string">&#x27;Comp1&#x27;</span>], ax=axes[<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">sns.violinplot(y=SR[<span class="string">&#x27;Comp2&#x27;</span>], ax=axes[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">sns.violinplot(y=SR[<span class="string">&#x27;Comp3&#x27;</span>], ax=axes[<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">sns.violinplot(y=SR[<span class="string">&#x27;Comp4&#x27;</span>], ax=axes[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化三：条图</span></span><br><span class="line"><span class="comment"># 这个没想到合适的数据，先放一放</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化四：概率分布图</span></span><br><span class="line"><span class="comment"># 概率分布图1.0---数据标准化处理之后的概率分布图</span></span><br><span class="line">sns.histplot(S,kde=<span class="literal">True</span>,color=<span class="string">&#x27;blue&#x27;</span>,bins=<span class="number">30</span>)   <span class="comment"># 这里可以单独看S[&quot;x1&quot;]...</span></span><br><span class="line">plt.title(<span class="string">&#x27;数据标准化处理后的概率分布图&#x27;</span>)  <span class="comment"># 标准化处理后满足正态分布</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;概率密度&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;数值&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 概率分布图2.0---这里我们选取了最终评价得分Comp为y轴,主成分一得分Comp1为x轴,可以呈现出较好的效果</span></span><br><span class="line">sns.jointplot(x=SR[<span class="string">&#x27;Comp1&#x27;</span>],y=SR[<span class="string">&#x27;Comp&#x27;</span>],data=SR)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 概率分布图3.0---多个变量,四个主成分的得分</span></span><br><span class="line">sns.pairplot(SR, <span class="built_in">vars</span>=[<span class="string">&#x27;Comp1&#x27;</span>,<span class="string">&#x27;Comp2&#x27;</span>,<span class="string">&#x27;Comp3&#x27;</span>,<span class="string">&#x27;Comp4&#x27;</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化五：柱状图</span></span><br><span class="line"><span class="comment"># 柱状图1.0---各个主成分的方差贡献率</span></span><br><span class="line">x = [<span class="string">&#x27;Comp1&#x27;</span>,<span class="string">&#x27;Comp2&#x27;</span>,<span class="string">&#x27;Comp3&#x27;</span>,<span class="string">&#x27;Comp4&#x27;</span>]</span><br><span class="line">y = [<span class="string">&#x27;Comp1&#x27;</span>,<span class="string">&#x27;Comp1、2&#x27;</span>,<span class="string">&#x27;Comp1、2、3&#x27;</span>,<span class="string">&#x27;Comp1、2、3、4&#x27;</span>]</span><br><span class="line">plt.grid(ls=<span class="string">&quot;--&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.title(<span class="string">&quot;各个主成分的方差贡献率&quot;</span>)</span><br><span class="line">bars = plt.bar(x, W)</span><br><span class="line"><span class="keyword">for</span> i, bar <span class="keyword">in</span> <span class="built_in">enumerate</span>(bars):   <span class="comment"># 添加百分比标签</span></span><br><span class="line">    plt.text(bar.get_x() + bar.get_width() / <span class="number">2</span>, bar.get_height(), <span class="string">f&quot;<span class="subst">&#123;W[i]*<span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span>,</span><br><span class="line">             ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱状图2.0---累计方差贡献率柱状图</span></span><br><span class="line">cumulative_variance = [<span class="built_in">sum</span>(W[:i+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(W))]    <span class="comment"># 计算累计方差贡献率</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.grid(ls=<span class="string">&quot;--&quot;</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.title(<span class="string">&quot;累计方差贡献率&quot;</span>)</span><br><span class="line">bars = plt.bar(y, cumulative_variance)</span><br><span class="line"><span class="keyword">for</span> i, bar <span class="keyword">in</span> <span class="built_in">enumerate</span>(bars):      <span class="comment"># 添加百分比标签</span></span><br><span class="line">    plt.text(bar.get_x() + bar.get_width() / <span class="number">2</span>, bar.get_height(), <span class="string">f&quot;<span class="subst">&#123;cumulative_variance[i]*<span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span>,</span><br><span class="line">             ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱状图3.0---综合评级得分柱状图</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.grid(ls=<span class="string">&quot;--&quot;</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.title(<span class="string">&quot;各省份综合评价得分条形图&quot;</span>)</span><br><span class="line">bars = plt.bar(SR[<span class="string">&#x27;Rank&#x27;</span>], SR[<span class="string">&#x27;Comp&#x27;</span>])</span><br><span class="line">text= [</span><br><span class="line">    <span class="string">&quot;北京市&quot;</span>, <span class="string">&quot;天津市&quot;</span>, <span class="string">&quot;河北省&quot;</span>, <span class="string">&quot;山西省&quot;</span>, <span class="string">&quot;内蒙古自治区&quot;</span>,</span><br><span class="line">    <span class="string">&quot;辽宁省&quot;</span>, <span class="string">&quot;吉林省&quot;</span>, <span class="string">&quot;黑龙江省&quot;</span>, <span class="string">&quot;上海市&quot;</span>, <span class="string">&quot;江苏省&quot;</span>,</span><br><span class="line">    <span class="string">&quot;浙江省&quot;</span>, <span class="string">&quot;安徽省&quot;</span>, <span class="string">&quot;福建省&quot;</span>, <span class="string">&quot;江西省&quot;</span>, <span class="string">&quot;山东省&quot;</span>,</span><br><span class="line">    <span class="string">&quot;河南省&quot;</span>, <span class="string">&quot;湖北省&quot;</span>, <span class="string">&quot;湖南省&quot;</span>, <span class="string">&quot;广东省&quot;</span>, <span class="string">&quot;广西壮族自治区&quot;</span>,</span><br><span class="line">    <span class="string">&quot;海南省&quot;</span>, <span class="string">&quot;重庆市&quot;</span>, <span class="string">&quot;四川省&quot;</span>, <span class="string">&quot;贵州省&quot;</span>, <span class="string">&quot;云南省&quot;</span>,</span><br><span class="line">    <span class="string">&quot;西藏自治区&quot;</span>, <span class="string">&quot;陕西省&quot;</span>, <span class="string">&quot;甘肃省&quot;</span>, <span class="string">&quot;青海省&quot;</span>, <span class="string">&quot;宁夏回族自治区&quot;</span>,</span><br><span class="line">    <span class="string">&quot;新疆维吾尔自治区&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> bar, province <span class="keyword">in</span> <span class="built_in">zip</span>(bars, text):</span><br><span class="line">    yval = bar.get_height()</span><br><span class="line">    plt.text(bar.get_x() + bar.get_width()/<span class="number">2</span>, yval, province, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主成分图（取前两个主成分）</span></span><br><span class="line">plt.plot(SR.Comp1,SR.Comp2,<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">A1=SR.Comp1</span><br><span class="line">A2=SR.Comp2</span><br><span class="line">AI=SR.index</span><br><span class="line">plt.hlines(<span class="number">0</span>,A1.<span class="built_in">min</span>(),A1.<span class="built_in">max</span>(),linestyles=<span class="string">&quot;dotted&quot;</span>)</span><br><span class="line">plt.vlines(<span class="number">0</span>,A2.<span class="built_in">min</span>(),A2.<span class="built_in">max</span>(),linestyles=<span class="string">&quot;dotted&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(SR.index.shape[<span class="number">0</span>]):</span><br><span class="line">    plt.text(A1[i],A2[i],AI[i])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="关于相关系数矩阵与协方差矩阵"><a href="#关于相关系数矩阵与协方差矩阵" class="headerlink" title="关于相关系数矩阵与协方差矩阵"></a>关于相关系数矩阵与协方差矩阵</h2><p>主成分分析（PCA）既可以使用协方差矩阵，也可以使用相关系数矩阵，具体选择哪种取决于数据的特性和分析的目的。以下是对两种矩阵在PCA中使用的考量因素：</p><p><strong>协方差矩阵</strong>：</p><ul><li><strong>适用情况</strong>：当原始数据的各个变量具有不同的量纲（如长度、重量、时间等）或者变量的尺度差异较大时，使用协方差矩阵更为合适。协方差矩阵直接反映了变量间因数值大小变化引起的线性关系，保留了原始变量的量纲信息。</li><li><strong>优点</strong>：能够捕捉变量间原始的、未经标准化的波动关系，对于那些量纲差异显著且这种差异对分析有重要意义的情况，使用协方差矩阵能够保持这些差异对主成分的影响。</li></ul><p><strong>相关系数矩阵</strong>：</p><ul><li><strong>适用情况</strong>：当原始数据的各个变量在同一量纲下或者经过标准化处理（即所有变量均转化为无量纲的、均值为0、标准差为1的状态）时，使用相关系数矩阵更为合适。相关系数矩阵衡量的是变量间关系的方向和强度，不受变量尺度的影响。</li><li><strong>优点</strong>：<ul><li><strong>消除量纲影响</strong>：由于相关系数矩阵中的元素是标准化数据的协方差，它已经消除了变量各自尺度的影响，只反映变量间相对变化的一致性。这使得不同量纲或不同尺度的变量在PCA中得以公平比较，避免了量纲较大或波动范围较大的变量对分析结果的主导。</li><li><strong>易于解释</strong>：相关系数的取值范围在-1到1之间，可以直接解读为变量间的线性相关程度，更便于理解和解释变量间的关系。</li></ul></li></ul><p><strong>选择原则</strong>：</p><ul><li>如果数据集中的变量具有相同的量纲或已经过标准化处理，通常建议使用相关系数矩阵，因为它能够更纯粹地反映变量间的相对关系，不受变量自身尺度的干扰。</li><li>如果变量间存在显著的量纲差异，并且这些差异对分析结果有重要含义</li></ul><h2 id="sklearn库默认使用协方差矩阵"><a href="#sklearn库默认使用协方差矩阵" class="headerlink" title="sklearn库默认使用协方差矩阵"></a>sklearn库默认使用协方差矩阵</h2><p><code>sklearn</code> 库在执行主成分分析（PCA）时，默认使用的是协方差矩阵。这是因为 <code>sklearn.decomposition.PCA</code> 类在计算主成分时，默认计算的是数据的协方差矩阵。然而，用户可以根据实际需求选择是否对输入数据进行预处理（如标准化），从而转换为使用相关系数矩阵进行PCA。</p><p>以下是使用 <code>sklearn</code> 进行PCA时与矩阵选择相关的几点说明：</p><ol><li><p><strong>默认行为</strong>：如果不进行额外的预处理，直接将原始数据传递给 <code>sklearn.decomposition.PCA</code> 类的实例，并进行拟合（fit），那么PCA将基于数据的协方差矩阵来确定主成分。</p></li><li><p><strong>标准化选项</strong>：如果希望使用相关系数矩阵进行PCA，通常需要先对数据进行标准化，即将数据转换为无量纲的、均值为0、标准差为1的形式。在 <code>sklearn</code> 中，可以使用 <code>preprocessing</code> 模块中的 <code>StandardScaler</code> 类来完成这一操作。对数据标准化后再进行PCA，此时虽然PCA内部依然计算的是标准化后数据的协方差矩阵，但由于标准化数据的均值和方差已调整为一致，此时的协方差矩阵实际上等价于相关系数矩阵，因为标准化消除了量纲和尺度的影响。</p></li></ol><p>例如，一个完整的流程可能如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设 data 是未标准化的原始数据</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">scaled_data = scaler.fit_transform(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并拟合PCA模型，此时使用的是等价于相关系数矩阵的标准化数据的协方差矩阵</span></span><br><span class="line">pca = PCA()</span><br><span class="line">pca.fit(scaled_data)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>参数设置</strong>：<code>sklearn</code> 的 <code>PCA</code> 类提供了 <code>covariance</code> 参数（从 <code>scikit-learn</code> 1.1 及更高版本开始），允许用户直接指定是否基于数据的协方差矩阵还是基于相关系数矩阵来进行PCA计算。不过，需要注意的是，设置 <code>covariance=&#39;corr&#39;</code> 时，<code>sklearn</code> 会自动对数据进行标准化，然后计算相关系数矩阵。因此，对于用户来说，直接对数据进行标准化仍然是推荐的做法，而不需要显式设置 <code>covariance</code> 参数。</li></ol><p>总结起来，在使用 <code>sklearn</code> 库进行主成分分析时，默认是基于协方差矩阵。若要基于相关系数矩阵进行分析，通常做法是先对数据进行标准化处理，确保变量间的关系不受量纲和尺度差异的影响。尽管 <code>sklearn</code> 提供了参数来直接指定基于相关系数矩阵计算，但实践中更常见的是通过预处理步骤标准化数据，间接实现基于相关系数矩阵的PCA。</p><h2 id="错上加错（载荷矩阵）"><a href="#错上加错（载荷矩阵）" class="headerlink" title="错上加错（载荷矩阵）"></a>错上加错（载荷矩阵）</h2><p>关于<code>载荷矩阵</code>的一点思考与说明</p><p>在上面的处理过程中，使用到了载荷矩阵，但是按照同样的思路使用<code>spss</code>来分析，得到的主成分系数矩阵不一样，结果相差很大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第三步，主成分负荷</span></span><br><span class="line">Comp_P=pd.DataFrame(pcal.components_.T)   <span class="comment"># 主成分载荷矩阵</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;主成分载荷矩阵为:\n&quot;</span>, Comp_P)</span><br></pre></td></tr></table></figure><p>上面的代码中关于<code>载荷矩阵</code>的计算是没有问题的，<code>载荷矩阵</code>描述了主变量与原始变量之间的相关系数，各个主成分的<code>得分系数矩阵</code>需要使用<code>载荷矩阵</code>除以对应<code>特征值的平方根</code>，这个系数才能表示各个变量与主变量之间的<code>线性关系</code></p><p>在上面的代码中，使用<code>sklrean</code>库进行分析直接用载荷矩阵描述各个变量与主变量之间的线性关系，缺少了一步转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主成分得分系数矩阵  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): </span><br><span class="line">    Comp_P[i]=Comp_P[i]/math.sqrt(V[i])    <span class="comment"># 计算公式为载荷矩阵除以对应主成分的特征值，这个操作是参考这篇文章：https://zhuanlan.zhihu.com/p/49481213</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;主成分得分矩阵:\n&quot;</span>, Comp_P)</span><br></pre></td></tr></table></figure><p>至于使用spss分析时，做主成分分析不要选择<code>旋转</code>,否则就变成了<code>因子分析</code>,结果当然不一样</p><p><img src="https://pic.imgdb.cn/item/6613ca9868eb9357132a62c2.png" alt="alt text"><br><img src="https://pic.imgdb.cn/item/6613ca9868eb9357132a6267.png" alt="alt text"></p><p>关于<code>因子分析</code>与<code>主成分分析</code>的区别和联系，下面放了一篇很好的文章</p><p>但是换句话说，反正都错了，错上加错也无所谓了。。。。</p><h2 id="参考借鉴"><a href="#参考借鉴" class="headerlink" title="参考借鉴"></a>参考借鉴</h2><p>做综合评价：</p><p><a href="http://t.csdnimg.cn/VvKCZ">http://t.csdnimg.cn/VvKCZ</a></p><p><a href="http://t.csdnimg.cn/ak1oY">http://t.csdnimg.cn/ak1oY</a></p><p><a href="http://t.csdnimg.cn/V8Cak">http://t.csdnimg.cn/V8Cak</a></p><p>做降维、聚类：</p><p><a href="https://www.cnblogs.com/RHadoop-Hive/p/9441505.html">https://www.cnblogs.com/RHadoop-Hive/p/9441505.html</a></p><p>做回归：</p><p>主成分分析 - Sophie的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/653310400">https://zhuanlan.zhihu.com/p/653310400</a></p><p>关于载荷矩阵的说明：</p><p>主成分分析PCA之Python与SPSS展示的区别 - canhui87的文章 - 知乎</p><p><a href="https://zhuanlan.zhihu.com/p/76622543">https://zhuanlan.zhihu.com/p/76622543</a></p><p>如何做主成分分析和因子分析？它们的区别与联系在哪里？ - 胡保强的文章 - 知乎</p><p><a href="https://zhuanlan.zhihu.com/p/49481213">https://zhuanlan.zhihu.com/p/49481213</a></p><h2 id="一起进步！"><a href="#一起进步！" class="headerlink" title="一起进步！"></a>一起进步！</h2>]]></content>
      
      
      <categories>
          
          <category> 数模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WP_2024NKCTF_CRYPTO_ezmath</title>
      <link href="/2024/03/26/wp-2024nkctf-crypto-ezmath/"/>
      <url>/2024/03/26/wp-2024nkctf-crypto-ezmath/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m1, m2 = bytes_to_long(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]), bytes_to_long(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:])</span><br><span class="line">p, q, r, s = [getStrongPrime(<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">n = p * q * r * s</span><br><span class="line">x = <span class="built_in">pow</span>(q + r, p, n)</span><br><span class="line">y = <span class="built_in">pow</span>(p * q + r, p, n)</span><br><span class="line">z = <span class="built_in">pow</span>(s + <span class="number">1</span>, m1, s ** <span class="number">3</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m2, e * (s - <span class="number">1</span>), n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;x = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;y = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;z = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 16063619267258988011034805988633616492558472337115259037200126862563048933118401979462064790962157697989038876156970157178132518189429914950166878537819575544418107719419007799951815657212334175336430766777427972314839713871744747439745897638084891777417411340564312381163685003204182743581513722530953822420925665928135283753941119399766754107671729392716849464530701015719632309411962242638805053491529098780122555818774774959577492378249768503656934696409965037843388835948033129997732058133842695370074265039977902884020467413323500218577769082193651281154702147769044514475692164145099161948955990463002411473013</span></span><br><span class="line"><span class="comment"># x = 3021730035236300354492366560252387204933590210661279960796549263827016146230329262559940840168033978439210301546282150367717272453598367244078695402717500358042032604007007155898199149948267938948641512214616076878271433754986480186150178487625316601499002827958344941689933374158456614113935145081427421623647242719093642478556263121508238995676370877385638074444859047640771188280945186355013165130171802867101829647797879344213688981448535289683363612035513789240264618036062440178755665951650666056478493289870170026121826588708849844053588998886259091357236645819074078054595561158630194224419831088510266212458</span></span><br><span class="line"><span class="comment"># y = 8995787142441643101775260550632842535051686960331455373408888374295557050896156890779515089927839904014859222004906681231525326673182671984194300730575609496770604394218160422560576866112460837985407931067753009696969997384839637927957848613356269534870170452152926447601781637641134982178028922559652443398183848786034348994249923007092159192374765197460466878587635412657807328348343062302127490267456095927890461140420639805398464266081441243108883599713672104446500850203779995739675784794478089863001309614674686652597236324659979849324914804032046113978246674538411441434320732570934185579553749616238819583998</span></span><br><span class="line"><span class="comment"># z = 1283646988194723153191718393109711130382429329041718186548715246082834666179475883560020086589684603980734305610989683434078096863563033623169666389076830792095374856743015929373461198718962686411467443788047511292138922700655772772117855226419561159782734009961921473456332468653898105909729309377890721920937410781006337057478451806364879679045839945032594716202888196404203782734864187890231653321470085251</span></span><br><span class="line"><span class="comment"># c = 4988583141177813116287729619098477713529507701428689219486720439476625736884177254107631282807612305211904876847916760967188201601494592359879509876201418493870112712105543214178376471651715703062382025712952561985261461883133695993952914519494709871429166239968478488380137336776740647671348901626710334330855078254188539448122493675463406596681080368929986034772169421577420193671300532508625180845417164660544286332963072804192276425664877337357353975758574262657585309762422727680851018467657523970318042829660721433987195369353660020476598195375492128671951807024027929490113371463210453342974983253996717176870</span></span><br></pre></td></tr></table></figure><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">16063619267258988011034805988633616492558472337115259037200126862563048933118401979462064790962157697989038876156970157178132518189429914950166878537819575544418107719419007799951815657212334175336430766777427972314839713871744747439745897638084891777417411340564312381163685003204182743581513722530953822420925665928135283753941119399766754107671729392716849464530701015719632309411962242638805053491529098780122555818774774959577492378249768503656934696409965037843388835948033129997732058133842695370074265039977902884020467413323500218577769082193651281154702147769044514475692164145099161948955990463002411473013</span></span><br><span class="line">x = <span class="number">3021730035236300354492366560252387204933590210661279960796549263827016146230329262559940840168033978439210301546282150367717272453598367244078695402717500358042032604007007155898199149948267938948641512214616076878271433754986480186150178487625316601499002827958344941689933374158456614113935145081427421623647242719093642478556263121508238995676370877385638074444859047640771188280945186355013165130171802867101829647797879344213688981448535289683363612035513789240264618036062440178755665951650666056478493289870170026121826588708849844053588998886259091357236645819074078054595561158630194224419831088510266212458</span></span><br><span class="line">y = <span class="number">8995787142441643101775260550632842535051686960331455373408888374295557050896156890779515089927839904014859222004906681231525326673182671984194300730575609496770604394218160422560576866112460837985407931067753009696969997384839637927957848613356269534870170452152926447601781637641134982178028922559652443398183848786034348994249923007092159192374765197460466878587635412657807328348343062302127490267456095927890461140420639805398464266081441243108883599713672104446500850203779995739675784794478089863001309614674686652597236324659979849324914804032046113978246674538411441434320732570934185579553749616238819583998</span></span><br><span class="line">z = <span class="number">1283646988194723153191718393109711130382429329041718186548715246082834666179475883560020086589684603980734305610989683434078096863563033623169666389076830792095374856743015929373461198718962686411467443788047511292138922700655772772117855226419561159782734009961921473456332468653898105909729309377890721920937410781006337057478451806364879679045839945032594716202888196404203782734864187890231653321470085251</span></span><br><span class="line">c = <span class="number">4988583141177813116287729619098477713529507701428689219486720439476625736884177254107631282807612305211904876847916760967188201601494592359879509876201418493870112712105543214178376471651715703062382025712952561985261461883133695993952914519494709871429166239968478488380137336776740647671348901626710334330855078254188539448122493675463406596681080368929986034772169421577420193671300532508625180845417164660544286332963072804192276425664877337357353975758574262657585309762422727680851018467657523970318042829660721433987195369353660020476598195375492128671951807024027929490113371463210453342974983253996717176870</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">s = GCD(c - <span class="number">1</span>, n)</span><br><span class="line">m1 = ((z - <span class="number">1</span>) // s) % s</span><br><span class="line">m1 = long_to_bytes(m1)</span><br><span class="line">r3 = y ** <span class="number">3</span> % (n // s)</span><br><span class="line">q = GCD(y - x, n)</span><br><span class="line">p = GCD(x-y-q, n//q)</span><br><span class="line">r = n//(p*q*s)</span><br><span class="line">phi = (q - <span class="number">1</span>)*(p - <span class="number">1</span>)*(r - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert((e * (s - <span class="number">1</span>)) // <span class="number">4</span>, phi)</span><br><span class="line">c_pqr = c % (p*q*r)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c, d, p*q*r)</span><br><span class="line">m2 = gmpy2.iroot(m2, <span class="number">4</span>)</span><br><span class="line">m2 = long_to_bytes(m2[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># print(m1)</span></span><br><span class="line"><span class="comment"># print(m2)</span></span><br><span class="line"><span class="built_in">print</span>(m1+m2)</span><br><span class="line"><span class="comment"># b&#x27;nkctf&#123;cb5b7392-cca4-4ce2-87e7-930cf6b29959&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ez_math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>coding_note</title>
      <link href="/2024/03/20/codingnote/"/>
      <url>/2024/03/20/codingnote/</url>
      
        <content type="html"><![CDATA[<h2 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation()"></a>next_permutation()</h2><p>在C++中，<code>std::next_permutation</code> 是一个标准库函数，用于生成序列的下一个排列。这个函数定义在头文件 <code>&lt;algorithm&gt;</code> 中，可以用于遍历一个序列的所有可能的排列。</p><p><code>std::next_permutation</code> 函数的基本用法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string s = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">next_permutation</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>())) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The next permutation is: &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;There are no more permutations.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>std::next_permutation</code> 函数尝试为字符串 <code>s</code> 生成下一个排列。如果成功，函数返回 <code>true</code>，并且 <code>s</code> 会被更新为下一个排列。如果已经是最后一个排列，函数返回 <code>false</code>，<code>s</code> 保持不变。</p><p>函数的参数是序列的开始和结束迭代器。对于数组，可以使用数组的指针或数组的引用作为参数。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::<span class="built_in">next_permutation</span>(arr, arr + <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure><p>在使用 <code>std::next_permutation</code> 时，通常将其放在一个循环中，以便遍历序列的所有排列。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : v) &#123;</span><br><span class="line">            std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (std::<span class="built_in">next_permutation</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>do-while</code> 循环确保了即使在最后一次调用 <code>std::next_permutation</code> 后，循环体内的代码也会执行，从而打印出最后一个排列。然后，<code>std::next_permutation</code> 被调用，尝试生成下一个排列。循环会一直继续，直到所有的排列都被遍历完毕。</p><h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h2><p>给定一个字符串s，请你找出其中不含有重复字符的最长子串的长度。</p><p>希哈表+快慢指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> result = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> length = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">cnt[s[j]]++;</span><br><span class="line"><span class="keyword">if</span> (cnt[s[j]] &gt; <span class="number">1</span>) &#123;<span class="comment">//遇到重复的字母</span></span><br><span class="line">result = result &lt; j - i ? j - i : result;<span class="comment">//计算快慢指针间子串的长度并更新</span></span><br><span class="line">      <span class="comment">//查找第一个重复字母并清零计数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; j; k++) &#123;</span><br><span class="line">        cnt[s[k]]--;<span class="comment">//清零第一个重复字母（含）前的计数</span></span><br><span class="line"><span class="keyword">if</span> (s[k] == s[j]) &#123;<span class="comment">//找到第一个重复字母，退出查找循环</span></span><br><span class="line">i = k;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i++;<span class="comment">//慢指针指向第一个重复字母后的字母</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result = result &lt; j - i ? j - i : result;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对一列数排序-火星人"><a href="#对一列数排序-火星人" class="headerlink" title="对一列数排序(火星人)"></a>对一列数排序(火星人)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,m;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">10110</span>];</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  cin&gt;&gt;m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">  &#123;</span><br><span class="line">    cin&gt;&gt;a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(m--)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">next_permutation</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);   <span class="comment">//对数组排序传递索引即可</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排列序数"><a href="#排列序数" class="headerlink" title="排列序数"></a>排列序数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//先对输入的字符串进行排列，然后输出全排列的情况，情况想等时结束</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s,o;</span><br><span class="line">  cin&gt;&gt;s;</span><br><span class="line">  o=s;</span><br><span class="line">  <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());  <span class="comment">//字符串内部排序的实现</span></span><br><span class="line">  <span class="keyword">if</span>(s==o) cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">next_permutation</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>()))</span><br><span class="line">  &#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span>(s==o)  cout&lt;&lt;cnt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第几个幸运数字"><a href="#第几个幸运数字" class="headerlink" title="第几个幸运数字"></a>第几个幸运数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span>  <span class="comment">//cpp实现</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>   <span class="comment">//暴力搜索</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> n=<span class="number">59084709587505</span>;</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;<span class="built_in">pow</span>(<span class="number">3</span>,i)&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;<span class="built_in">pow</span>(<span class="number">5</span>,j)&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;<span class="built_in">pow</span>(<span class="number">7</span>,k)&lt;n;k++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">3</span>,i)*<span class="built_in">pow</span>(<span class="number">5</span>,j)*<span class="built_in">pow</span>(<span class="number">7</span>,k)&lt;=n)  cnt++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cnt<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  <span class="comment"># python实现</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">50</span>):</span><br><span class="line">      a=<span class="number">3</span>**i;b=<span class="number">5</span>**j;c=<span class="number">7</span>**k</span><br><span class="line">      <span class="keyword">if</span> a*b*c&lt;=<span class="number">59084709587505</span>:</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(cnt-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="奖学金"><a href="#奖学金" class="headerlink" title="奖学金"></a>奖学金</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span>&#123;    <span class="comment">//定义一个结构体来存储相关数据</span></span><br><span class="line">  <span class="type">int</span> id;</span><br><span class="line">  <span class="type">int</span> c,m,e;</span><br><span class="line">  <span class="type">int</span> sum;</span><br><span class="line">&#125;st[<span class="number">305</span>];  <span class="comment">//n&lt;=300</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(stu a,stu b)</span>   <span class="comment">//定义一个结构体比较的函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.sum&gt;b.sum)  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(a.sum&lt;b.sum)   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(a.c&gt;b.c)  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.c&lt;b.c)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(a.id&gt;b.id)  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    st[i].id=i+<span class="number">1</span>;  <span class="comment">//输入学号</span></span><br><span class="line">    cin&gt;&gt;st[i].c&gt;&gt;st[i].m&gt;&gt;st[i].e;  <span class="comment">//输入三科成绩</span></span><br><span class="line">    st[i].sum=st[i].c+st[i].m+st[i].e;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(st,st+n,cmp);   <span class="comment">//按照结构体比较的方式进行排序</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;st[i].id&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;st[i].sum&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双向排序"><a href="#双向排序" class="headerlink" title="双向排序"></a>双向排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">//60%的解法 算法的复杂度为mnlogn</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> b)</span>  <span class="comment">//定义降序排列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,m;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  a[i]=i;   <span class="comment">//先生成数组包含数1-n</span></span><br><span class="line">  <span class="keyword">while</span>(m--)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="type">int</span> p,q;</span><br><span class="line">  cin&gt;&gt;p&gt;&gt;q;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="number">1</span>)  <span class="built_in">sort</span>(a+q,a+n+<span class="number">1</span>);<span class="comment">// 升序排列</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="number">0</span>)  <span class="built_in">sort</span>(a+<span class="number">1</span>,a+q+<span class="number">1</span>,cmp);<span class="comment">//降序排列</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误票据"><a href="#错误票据" class="headerlink" title="错误票据"></a>错误票据</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> m[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m[cnt])!=EOF) cnt++;   <span class="comment">//这里需要关注对输入的处理</span></span><br><span class="line">  <span class="built_in">sort</span>(m,m+cnt);</span><br><span class="line">  <span class="type">int</span> ans1,ans2;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt<span class="number">-1</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(m[i+<span class="number">1</span>]-m[i]&gt;<span class="number">1</span>) ans1=m[i]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m[i]==m[i+<span class="number">1</span>])  ans2=m[i];</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;ans1&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ans2; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统计数字"><a href="#统计数字" class="headerlink" title="统计数字"></a>统计数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m[<span class="number">200010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(m,m+n);</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span>(m[i]!=m[i+<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,m[i],cnt);</span><br><span class="line">      cnt=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">200005</span>];</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> temp=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    temp +=a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    temp-=a[i];</span><br><span class="line">    sum += a[i]*temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,sum);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="782-拼数"><a href="#782-拼数" class="headerlink" title="782 拼数"></a>782 拼数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按两个数字组合的字典序排序，就是把数字看成字符串来排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(string a,string b)</span>  <span class="comment">//从大到小，按字典序的反序列排列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b&gt;b+a;   <span class="comment">//组合字符串的技巧，这里需要注意</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n; </span><br><span class="line">  string a[n];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)  cin&gt;&gt;a[i];</span><br><span class="line">  <span class="built_in">sort</span>(a,a+n,cmp);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i];</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="208-带分数"><a href="#208-带分数" class="headerlink" title="208 带分数"></a>208 带分数</h2><p>这题我不是很会，参考了题解，懂了一点，感觉好复杂啊啊啊啊啊</p><p>仔细看还是很好理解的，就是不太好想到欸，还是自己太菜了。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排列题，9！共有362880种情况，全排列即可，不会超时</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> num[<span class="number">9</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;=b;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    sum=sum*<span class="number">10</span>+num[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">next_permutation</span>(num,num+<span class="number">9</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">8</span>;j++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="built_in">func</span>(<span class="number">0</span>,i);</span><br><span class="line">        <span class="type">int</span> b=<span class="built_in">func</span>(i+<span class="number">1</span>,j);</span><br><span class="line">        <span class="type">int</span> c=<span class="built_in">func</span>(j+<span class="number">1</span>,<span class="number">8</span>); <span class="comment">//9个数索引是0到8。。。</span></span><br><span class="line">        <span class="keyword">if</span>(n*c==a*c+b)</span><br><span class="line">        &#123;</span><br><span class="line">          cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;cnt;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回文判定（双指针-反向扫描）"><a href="#回文判定（双指针-反向扫描）" class="headerlink" title="回文判定（双指针&#x2F;反向扫描）"></a>回文判定（双指针&#x2F;反向扫描）</h2><p>实现一  for循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s;</span><br><span class="line">  cin&gt;&gt;s;</span><br><span class="line">  <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">    <span class="keyword">if</span>(s[i]!=s[n-i<span class="number">-1</span>]) cnt++;</span><br><span class="line">  <span class="keyword">if</span>(cnt!=<span class="number">0</span>) cout&lt;&lt;<span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span> cout&lt;&lt;<span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现二  for循环加改进</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s;</span><br><span class="line">  cin&gt;&gt;s;</span><br><span class="line">  <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">    <span class="keyword">if</span>(s[i]!=s[n-i<span class="number">-1</span>]) </span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;<span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//这里通过return 0可以实现直接结束程序</span></span><br><span class="line">    &#125;</span><br><span class="line">  cout&lt;&lt;<span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现三  使用while循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s;</span><br><span class="line">  cin&gt;&gt;s;</span><br><span class="line">  <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">  <span class="type">int</span> i=<span class="number">0</span>,j=n<span class="number">-1</span>;  <span class="comment">//双指针</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i]!=s[j])</span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;<span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i++,j--;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;<span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024_VCTF_crypto_狂飙</title>
      <link href="/2024/03/18/2024-vctf-crypto-kuang-biao/"/>
      <url>/2024/03/18/2024-vctf-crypto-kuang-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">m = <span class="number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></span><br><span class="line">key = os.urandom(<span class="number">24</span>)</span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">n=m % key</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">enc_flag = aes.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#103560843006078708944833658339172896192389513625588</span></span><br><span class="line"><span class="comment">#b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br></pre></td></tr></table></figure><p>由已知我们可以得到</p><p>m-s*key &#x3D; n</p><p>将 m-n 分解即可得到 s*key 的组合</p><p>根据一个字节 8 位，得到 key 为 192 位</p><p>然后可以利用 sage 进行爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">103560843006078708944833658339172896192389513625588</span></span><br><span class="line">m = <span class="number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></span><br><span class="line">key = m-n</span><br><span class="line"><span class="comment"># 88007513702424243702066490746035974298749130602173983187260701596410698439661</span></span><br><span class="line">enc = <span class="string">b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key.divisors():</span><br><span class="line">    i=long_to_bytes(i,<span class="number">24</span>)</span><br><span class="line">    aes=AES.new(i,AES.MODE_CBC,iv)</span><br><span class="line">    flag=aes.decrypt(enc)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gmpy2库的常用函数总结</title>
      <link href="/2024/03/11/gmpy2-ku-de-chang-yong-han-shu-zong-jie/"/>
      <url>/2024/03/11/gmpy2-ku-de-chang-yong-han-shu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="gmpy2"><a href="#gmpy2" class="headerlink" title="gmpy2"></a>gmpy2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">gmpy2.mpz(n)                <span class="comment"># 初始化一个大整数</span></span><br><span class="line">gmpy2.mpfr(x)               <span class="comment"># 初始化一个高精度浮点数x</span></span><br><span class="line">d = gmpy2.invert(e, n)      <span class="comment"># 求逆元，de = 1 mod n  模反元素</span></span><br><span class="line">C = gmpy2.powmod(M, e, n)   <span class="comment"># 幂取模，结果是 C = (M^e) mod n</span></span><br><span class="line">gmpy2.is_prime(n)           <span class="comment"># 素性检测</span></span><br><span class="line">gmpy2.gcd(a, b)             <span class="comment"># 欧几里得算法，最大公约数</span></span><br><span class="line">gmpy2.gcdext(a, b)          <span class="comment"># 扩展欧几里得算法</span></span><br><span class="line">gmpy2.iroot(x, n)           <span class="comment"># x开n次根</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WP_2024HSCCTF_CRYPTO_STAR_CHASING_DIARY</title>
      <link href="/2024/03/10/wp-2024hscctf-crypto-star-chasing-diary/"/>
      <url>/2024/03/10/wp-2024hscctf-crypto-star-chasing-diary/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">小肖在学习的过程中,了解到了一种填充图片的算法,兴奋的她用它和RSA加密了偶像的照片,</span></span><br><span class="line"><span class="string">但是在传输的过程中丢失了一部分加密算法,你能帮她补全,并解出来偶像的照片吗?</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n, x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    m = <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">j = <span class="number">128</span></span><br><span class="line">mm = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">257</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">257</span>):</span><br><span class="line">        mm.append(f(j, i, s) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.jpg&#x27;</span>)</span><br><span class="line">pixels = <span class="built_in">list</span>(img.getdata())</span><br><span class="line">data = [pixel <span class="keyword">for</span> pixel <span class="keyword">in</span> pixels]</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;key.png&#x27;</span>)</span><br><span class="line">pixels = <span class="built_in">list</span>(img.getdata())</span><br><span class="line">png_key = [pixel <span class="keyword">for</span> pixel <span class="keyword">in</span> pixels]</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0</span>] * <span class="number">65536</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    enc[i] = data[mm[i]]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    enc[s] = enc[s] ^ png_key[s]</span><br><span class="line"></span><br><span class="line">image = Image.new(<span class="string">&#x27;L&#x27;</span>, (<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line">image.putdata(enc)</span><br><span class="line">image.save(<span class="string">&#x27;enc.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一张图片 enc.ipg</p><p><img src="https://pic.imgdb.cn/item/65ed83e99f345e8d039b761d.jpg" alt="alt text"></p><p>还有一个压缩包</p><p>另外一个解密压缩包密码的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>, q)</span><br><span class="line">n = p * q</span><br><span class="line">key = <span class="string">&#x27;********************&#x27;</span></span><br><span class="line">m = bytes_to_long(key.encode())</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &lt; <span class="number">300</span></span><br><span class="line">r = randint(<span class="number">1</span>, n)</span><br><span class="line">c = (<span class="built_in">pow</span>(n + <span class="number">1</span>, m, n * n) * <span class="built_in">pow</span>(r, n, n * n)) % (n * n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = 7828612943367317778189697443061863547768704021648982642807960201410438190347546379219450386530108335470584219657007036386835647156694512102467911388214639</span></span><br><span class="line"><span class="comment"># q = 11560196429251786803557082533869761370530605728500211999842201987445533038949033226473164866960007192683170489064961432891988337343103657552186800680461299</span></span><br><span class="line"><span class="comment"># c = 768905250861905487717845092484035532140840941871031779930259407348955511757335716790249355464829607714399266689960353955065504221985891074636544161678177920296971444880997864168042745264256952808480926755620637239135808617643874771066244234690401223758004286234917537720362007827248701308605961814972773704288547887039586934111562590676930853945316673164146667949991176600280451163710564978897622310650541491271961315592017251211248379608602287809736613530069187936569470129814949302440734244885473716072898519354127964155042421376782226235081303957997587618278341829891036314980185040102049478608445519994654780162</span></span><br></pre></td></tr></table></figure><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>这是一个 Paillier 加密，参考</p><p><a href="https://zhuanlan.zhihu.com/p/106340045">https://zhuanlan.zhihu.com/p/106340045</a></p><p>解密分为以下几个步骤：</p><p>生成私钥： 私钥包含两个大质数 p 和 q。在本题中，p 和 q 已经给出了。</p><p>计算 Carmichael λ 函数的值：其中 λ(n) &#x3D; lcm(p-1, q-1)，lcm 是最小公倍数函数。</p><p>计算 μ： μ 是 n 的欧拉函数的模反元素，满足 </p><p>(L(g^λ(n) mod n^2))^-1 mod n</p><p>其中</p><p>L(x) &#x3D; (x - 1) &#x2F; n</p><p>g 是一个随机选择的整数且满足</p><p>gcd(L(g^λ(n) mod n^2), n) &#x3D; 1</p><p>解密密文： 密文 c 可以通过以下公式计算得到明文 m：</p><p>m &#x3D; L(c^λ(n) mod n^2) * μ mod n</p><p>代码参考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">p = <span class="number">7828612943367317778189697443061863547768704021648982642807960201410438190347546379219450386530108335470584219657007036386835647156694512102467911388214639</span></span><br><span class="line">q = <span class="number">11560196429251786803557082533869761370530605728500211999842201987445533038949033226473164866960007192683170489064961432891988337343103657552186800680461299</span></span><br><span class="line">c = <span class="number">768905250861905487717845092484035532140840941871031779930259407348955511757335716790249355464829607714399266689960353955065504221985891074636544161678177920296971444880997864168042745264256952808480926755620637239135808617643874771066244234690401223758004286234917537720362007827248701308605961814972773704288547887039586934111562590676930853945316673164146667949991176600280451163710564978897622310650541491271961315592017251211248379608602287809736613530069187936569470129814949302440734244885473716072898519354127964155042421376782226235081303957997587618278341829891036314980185040102049478608445519994654780162</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算λ(n)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a*b) // math.gcd(a, b)</span><br><span class="line"></span><br><span class="line">lambda_n = lcm(p-<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算μ</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_inverse</span>(<span class="params">a, m</span>):</span><br><span class="line">    m0, x0, x1 = m, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &gt; <span class="number">1</span>:</span><br><span class="line">        q = a // m</span><br><span class="line">        m, a = a % m, m</span><br><span class="line">        x0, x1 = x1 - q * x0, x0</span><br><span class="line">    <span class="keyword">return</span> x1 + m0 <span class="keyword">if</span> x1 &lt; <span class="number">0</span> <span class="keyword">else</span> x1</span><br><span class="line"></span><br><span class="line">mu = mod_inverse(lambda_n, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密密文</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c, lambda_n, n, mu</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(c, lambda_n, n*n) - <span class="number">1</span>) // n * mu % n</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="number">768905250861905487717845092484035532140840941871031779930259407348955511757335716790249355464829607714399266689960353955065504221985891074636544161678177920296971444880997864168042745264256952808480926755620637239135808617643874771066244234690401223758004286234917537720362007827248701308605961814972773704288547887039586934111562590676930853945316673164146667949991176600280451163710564978897622310650541491271961315592017251211248379608602287809736613530069187936569470129814949302440734244885473716072898519354127964155042421376782226235081303957997587618278341829891036314980185040102049478608445519994654780162</span></span><br><span class="line"></span><br><span class="line">plaintext = decrypt(ciphertext, lambda_n, n, mu)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;明文为:&quot;</span>, long_to_bytes(plaintext))</span><br><span class="line"><span class="comment"># 明文为: b&#x27;HSCCTF&#123;this_is_a_fake_flag&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>得到的 flag 为压缩包的密码，打开压缩包，发现了另外半份图片 key.png<br><img src="https://pic.imgdb.cn/item/65ed838c9f345e8d03996bca.png" alt="alt text"></p><p>下面的首要问题是补全这个加密函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n, x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    m = <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 这里少了一句话</span></span><br></pre></td></tr></table></figure><p>出题人用这个函数来对两张图片 flag.jpg 和 key.png 的像素点进行异或得到了 enc.jpg</p><p>但是这个函数我不知道是什么。。。。</p><p>over !</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WP_2024HSCCTF_CRYPTO_MIXED</title>
      <link href="/2024/03/10/wp-2024hscctf-crypto-mixed/"/>
      <url>/2024/03/10/wp-2024hscctf-crypto-mixed/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">q1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">p1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">n1 = q * p1</span><br><span class="line">n2 = p * q1</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">h0 = <span class="built_in">pow</span>(<span class="number">2023</span> * p + <span class="number">2024</span>, q1, n2)</span><br><span class="line">h1 = <span class="built_in">pow</span>(<span class="number">2024</span> * p1 + <span class="number">2023</span> * q, <span class="number">114</span>, n1)</span><br><span class="line">h2 = <span class="built_in">pow</span>(<span class="number">2023</span> * p1 + <span class="number">2024</span> * q, <span class="number">514</span>, n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h0 = <span class="subst">&#123;h0&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h1 = <span class="subst">&#123;h1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h2 = <span class="subst">&#123;h2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n1 = 14689930167621480307737218855980844793204825453111553640005733004311399091452749419195261723160562669712981077205514482387428543859060408330555457873612388970840075555219318724209919379670375754436986322725018229701175825510253987615017542205904982728558285520666278391637251512741084978804344612886660251741043298476839942441197788722691248949008018299101517153067904692310160459839327965213126456776042470327923603098133019640956702820908299859534676381094974148722668171932091455546601087513513432342088579253210930555185169910878657816252698605590059713584044287411998445279104965229112287195772355914014694372863</span></span><br><span class="line"><span class="comment"># n2 = 17914624231045471060767877283214815212078805279600237578901916178851704643026979522270658635212967285131654546207286875722198040564094351690066028556053274118826426726436922152056884333790850220488793722836758989770231697392015361745717234225528175411653330848965062023338707342188196332661335758350340958332400847642883219650661408895191363079017750144776587598058350920393498114498603046807597288603882782473322630631915467470131090200369527436760313289344813744004003957932606166823948354564464154141854938585629799995141656546295799610158824771809513458197812936595649326475123400845178122171317543843802357238737</span></span><br><span class="line"><span class="comment"># c = 13183645788828584902734975771833842634134772971197066374278716198331982362845597338541987579827576129126962300555023319276896080171662261983323670516457816608069076576704379871559881585100353737989915143190277856145677733747073530969459479608854483866886381406790221076900624083605418670450439523062190633487764982399334967431524831264337949814367905185282600511829794170139623625545288981992093108619556180352620171550284923452864402624195790781899415138548827684042790774382313520961335293225295922563245148598807498320652973409239921962292395269739151692443069186695137458774227330748775469621908962878548784542656</span></span><br><span class="line"><span class="comment"># h0 = 5690435858632801053001568276569200811072324786394351282330736437777643891675713760267573500875018036769819201228707494676033534733516436880434000381152290529934127584047681184797730806321117079578438213106595566102910231831641994870770844810797745935336962801658360541755214075101149142486964461669833043007174173934693214526552375910644574723526164021660497474760514459351270699055076380763188021265735007339272243426286470006040246926184305520860068095134003662496837644875879106318233600478000160450338727054920011063536387532763661934972965357326471012678550188382945584128136131833085006239075931753900705852481</span></span><br><span class="line"><span class="comment"># h1 = 12771704142231361356944931328203992824809472923288035056741145310446323135378739806430357600688780862532180394967607429708811767590541126019805423171023560973250443508427614362854583240402451944730512334908779225174763498122005198084487562912524477476241978066554026569609494641830034817298185887790987627444544391680388213205514284116732325350187204519755399841372144149840914651521842402817701298224803289451378581226204084757079457612984358925767378458994608562174048729806309230061089552045138514542758457243626150673888166620841134063713151240297774551489301504222933127458884374866611598279831562420720169790688</span></span><br><span class="line"><span class="comment"># h2 = 10768269134499905916388929049595509895751098112372323618798542159569174051578701710549609054808995774168931375186213550074900373023970882450822655786787740452681278837907191091338575561570211280095894576674089666981683405385847773819238581725093823429776684561667462626941518248024517707992035438082636259838822562843169441572048956484831730615047363383911454662789736761572912893234212875097536978423758275178050708616505311352511923810654873380808201395656416903900326634569672173228265730515727327832588326581592485713225927319225942965110285477266200380452637746037672411388696006933080509164615786616058664496851</span></span><br></pre></td></tr></table></figure><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>本题可以看成一个混合加密的缝合怪，将几道类似的题目拼接到了一起，下面先放参考别的师傅写的WP</p><p><a href="https://www.cnblogs.com/mumuhhh/p/17783610.html">https://www.cnblogs.com/mumuhhh/p/17783610.html</a></p><p>具体而言分成了两个解密题，作用为别为求解p和q</p><p>第一个为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h0 = <span class="built_in">pow</span>(<span class="number">2023</span> * p + <span class="number">2024</span>, q1, n2)</span><br></pre></td></tr></table></figure><p>上述公式中发现只有一个未知数（p和q1可以看成一个未知数）<br>因此理论上可以轻松解出，实际上应该也不难。。。具体使用到了费马定理，前面已经讲过，化简后一行代码即可解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = gmpy2.gcd(h0-<span class="built_in">pow</span>(<span class="number">2024</span>,n2,n2),n2)</span><br></pre></td></tr></table></figure><p>第二个为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1 = <span class="built_in">pow</span>(<span class="number">2024</span> * p1 + <span class="number">2023</span> * q, <span class="number">114</span>, n1)</span><br><span class="line">h2 = <span class="built_in">pow</span>(<span class="number">2023</span> * p1 + <span class="number">2024</span> * q, <span class="number">514</span>, n1)</span><br></pre></td></tr></table></figure><p>两个未知数（p1、q）,两个方程，理论上也能解决</p><p>但实际上这个要复杂一点点。。。</p><p>原理不是很懂，但是可以简单讲讲过程</p><p>首先需要求解一个叫k的东西，这个k与114和514这两个数有关，具体而言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="number">2</span>*<span class="number">57</span>*<span class="number">257</span></span><br></pre></td></tr></table></figure><p>如何计算的呢？</p><p>2代表的含义是114和514的最大公因数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>=gmpy2.gcd(<span class="number">114</span>, <span class="number">514</span>)</span><br></pre></td></tr></table></figure><p>然后57是114与2的商，257是514与2的商</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">57</span>=<span class="number">114</span>//<span class="number">2</span></span><br><span class="line"><span class="number">257</span>=<span class="number">514</span>//<span class="number">2</span></span><br></pre></td></tr></table></figure><p>知道了k之后就可以带入计算了，具体模板如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h5 = <span class="built_in">pow</span>(h1,<span class="number">257</span>,n)*<span class="built_in">pow</span>(<span class="number">2023</span>,k,n)-<span class="built_in">pow</span>(h2,<span class="number">57</span>,n)*<span class="built_in">pow</span>(<span class="number">2024</span>,k,n)</span><br><span class="line">h6 = <span class="built_in">pow</span>(h1,<span class="number">257</span>,n)*<span class="built_in">pow</span>(<span class="number">2024</span>,k,n)-<span class="built_in">pow</span>(h2,<span class="number">57</span>,n)*<span class="built_in">pow</span>(<span class="number">2023</span>,k,n)</span><br><span class="line">k1 = inverse(<span class="built_in">pow</span>(<span class="number">2023</span>,<span class="number">2</span>*k,n)-<span class="built_in">pow</span>(<span class="number">2024</span>,<span class="number">2</span>*k,n), n)</span><br><span class="line">k2 = inverse(<span class="built_in">pow</span>(<span class="number">2024</span>,<span class="number">2</span>*k,n)-<span class="built_in">pow</span>(<span class="number">2023</span>,<span class="number">2</span>*k,n), n)</span><br><span class="line">h3 = h5 * k1 % n</span><br><span class="line">h4 = h6 * k2 % n</span><br><span class="line">q = GCD(h3, n)</span><br></pre></td></tr></table></figure><p>求出p、q之后就可以解密了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = p * q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><p>over!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HSCCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WP_2024HSCCTF_CRYPTO_SING_IN</title>
      <link href="/2024/03/10/wp-2024hscctf-crypto-sing-in/"/>
      <url>/2024/03/10/wp-2024hscctf-crypto-sing-in/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;HSCCTF&#123;66666666666666666666666666666666666&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q = getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">g, r1, r2, k1, k2 = [randint(<span class="number">1</span>, n) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">g1 = powmod(g, r1 * (p - <span class="number">1</span>), n)</span><br><span class="line">g2 = powmod(g, r2 * (q - <span class="number">1</span>), n)</span><br><span class="line">c1 = m * powmod(g1, k1, n) % n</span><br><span class="line">c2 = m * powmod(g2, k2, n) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc=&#x27;</span>, [c1, c2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n, g1, g1=&#x27;</span>, [n, g1, g2])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">enc= [15258813801182767957948809411445530114743580005667897427534365589851124401953952700888032330082278736578651674105204553630115929829327520950316902504433079359916257355896937562916556083469602985115254272625361902512966905366505705193603115063442567259505806926885597909346860116511116593562896739734663097631870026814495999405532329662713707140991693625596972404484374296588505369466138353714461787853643947646268147993568111775200297788443085689323703846485412670213780175163562460311256388185948613714551169278328397181176821021494625532973065606678522088011055084956579073665474553688838705105692370860815836968744, 6812252973072040071827764212287068485224506664962923279994614164374840095630460681859406585838865259535150445414577263383839286602668872146630568583093203237350230531896113453730563536559780725054737930704052263836882704963528437893607940373145674848731274193348770450738356162141551719346994698149112827383011042635625991946491545698464513315705253441372356270248537025391519052228332747340090073726648071921053097612521949040588826684887577900030607964457543549015338544684381220552952995724701579427363382069065679545196826947900332605250858694574423497096207350532949517663416877954484913664168104807510052994343]</span></span><br><span class="line"><span class="string">n, g1, g1= [20807018344486474639307429177279931766730766338068107239915507489300098048895435781756514265069820029246382818970733268271541419058569567895618666922180270584064313671561310704041755422624879418184008100473568396190523033929320245716340019444764233261191278982354931492880877566550189410854395486995604287009460090861952156686772486228583819235930673806632618770875593810617784176409247510465542253043645164164225524491704753384493817563203956665022724674535516870726747405974392352500432805602085261375142216501656342533659731098891481615791354504343987459436489040377662127479793769523359343534307819013289699807101, 13669954919111873554762685722926885077118528999414402163291237939605095249827361266585404348819936899557500751307328088850133462100189908649705354225171362748567332828733792410877365393472368767642223613483944864421225366984013053159643284842823692865975521013400160643858123645513020647367033022539177063702511618272018019345686324322865461583030805528508961559861228807898458344763909703624723082316946660539208262816734999777236686904487167545596412866146192769859422435979617441355968077981338491466670291310491623996943880557071723073298267310617017933994938481600905833829730599911183096116409487608858717083764, 16004755272896973088305242134835363565950101667041191767091338528075710730690484241256646402124331734165332717221873300040844257120250717798419429003342474882969292183331631773486056363790119500409511338474885148624744719334829519138941747721940978742668429331169327121848561577357339194970483392418062307133642660625962426570987080348107999849220769541832138719358407833846252908305766546561532003650472770370573552424932908544299331489147220956574184822433945571318688467182365231955276573176433559755313822566687880866791301904461559170416753669109833335824210853322226762705537051009387847122221014380228383127427]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>目测需要解决的问题是求出p和q，但是n无法分解，陷入沉思。。。后来不小心找到了这道题的原型</p><h2 id="V-N2020-公开赛-Fast"><a href="#V-N2020-公开赛-Fast" class="headerlink" title="[V&amp;N2020 公开赛] Fast"></a>[V&amp;N2020 公开赛] Fast</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = p * q</span><br><span class="line"></span><br><span class="line">g, r1, r2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">g1 = <span class="built_in">pow</span>(g, r1 * (p-<span class="number">1</span>), N)</span><br><span class="line">g2 = <span class="built_in">pow</span>(g, r2 * (q-<span class="number">1</span>), N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">    s1, s2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    c1 = (m * <span class="built_in">pow</span>(g1, s1, N)) % N</span><br><span class="line">    c2 = (m * <span class="built_in">pow</span>(g2, s2, N)) % N</span><br><span class="line">    <span class="keyword">return</span> (c1, c2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c1, c2</span>):</span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="comment">#c = encrypt(bytes_to_long(flag))</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">18680643069610062851842282268594530254220611012409807422663284548187050713427682950720783343430650669361838067625768840896513125210105582070603021732086193955893838077699465426052925750736212977005683541174195320832791835197114668838654054444342903298662698415765898335350206380896849522280206304272801325820946987172164086644949521111058774180676742851681476123338557138770304164634321305204827406522957769478330124484710532963132900017800651579612646041955628867746525508376194147796920773364680264059390497210260540079810501777507814448518995581208169818764701641258963569599247156932381367802991222265241699715283</span></span><br><span class="line">g1 = <span class="number">9143176283300810019842153344177123108612540016879643936458724056602746667157014763960725115919119704406826965726023263657276550779443988565368344040505696950820899770544814163379169539926317676679421275092688200844094929042154854719312788471536324082041360841253720783220459009201882865091829118575721525038404689868986360373373122049951274015083845966946475469982961355934516388706446794517870569063777231434618411404965077775991870069073539415961610645268985004687402050059891500490949250730689691141954694508001895390336750734542724392709744200091587065816283592253967715080611459937165344139809223328071517060208</span></span><br><span class="line">g2 = <span class="number">14068322834597276347776814624877614869834816383564391664570268934537693322688875343215293618493363798985047779057952636529313879548457643220996398640913517182122425631198219387988691569709691279442005545716133131472147592456812502863851227108284027033557263611949365667779259585770738623603814004666845554284808166195201470503432803440754207350347128045893594280079379926676477680556845095378093693409219131090910168117334308781843178748431526974047817218228075136005979538773141427004682344298827618677773735288946271346252828348742296301538573408254015281232250841148556304927266143397565889649305095857756884049430</span></span><br><span class="line">c1, c2 = (<span class="number">3976514029543484086411168675941075541422870678409709261442618832911574665848843566949154289825219682094719766762966082440586568781997199077781276145091509192208487682443007457513002005089654365915817414921574344557570444253187757317116858499013550050579856269915915792827620535138057468531410166908365364129001407147467636145589396570815405571923148902993581000542566387654639930651683044853608873583911638108204074537952317056718986683846742909366072461130053275195290631718363272923316002049685111871888148244026652658482359335651889139243735138819453744763293112267738369048641158946411500606588429007794613880534</span>, <span class="number">18524535479582837341745231233387403662294605513261199630593257391163433751052467785080620993007681605662927226603747560698627838567782891522546977611597418150309028806158429831471152782211111046118637630899456903846057977815397285171313888516791822545633820066408276065732715348834255021260666966934592884548856831383262013360819013814149529393178712576141627031723067564594282618223686778534522328204603249125537258294561872667849498796757523663858312311082034700705599706428944071848443463999351872482644584735305157234751806369172212650596041534643187402820399145288902719434158798638116870325144146218568810928344</span>)</span><br></pre></td></tr></table></figure><p>这题给了解密函数，简单了许多。根据解密函数，只要知道c1、c2、p、q就能求出m。因为c1、c2是已知的，所以求p和q即可</p><p>根据加密的过程，与p，q有关系的语句只有这两个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g1 = <span class="built_in">pow</span>(g, r1 * (p-<span class="number">1</span>), N)</span><br><span class="line">g2 = <span class="built_in">pow</span>(g, r2 * (q-<span class="number">1</span>), N)</span><br></pre></td></tr></table></figure><p>接下来的推导我也没学过，就当懂了吧。。。</p><p>只看第一个式子：</p><h4 id="g-r1-p-1-mod-p-q-g1"><a href="#g-r1-p-1-mod-p-q-g1" class="headerlink" title="(g^r1)^(p-1) mod p*q &#x3D; g1"></a>(g^r1)^(p-1) mod p*q &#x3D; g1</h4><p>两边同模p：</p><h4 id="g-r1-p-1-mod-p-g1-mod-p"><a href="#g-r1-p-1-mod-p-g1-mod-p" class="headerlink" title="(g^r1)^(p-1) mod p &#x3D; g1 mod p"></a>(g^r1)^(p-1) mod p &#x3D; g1 mod p</h4><p>根据费马小定理（这个可以有）：</p><h4 id="a-（p-1）≡1（mod-p）"><a href="#a-（p-1）≡1（mod-p）" class="headerlink" title="a^（p-1）≡1（mod p）"></a>a^（p-1）≡1（mod p）</h4><p>带入公式显然有：</p><h4 id="g1-mod-1-p"><a href="#g1-mod-1-p" class="headerlink" title="g1 mod 1 &#x3D; p"></a>g1 mod 1 &#x3D; p</h4><p>简单转换一下就有：</p><h4 id="gcd-g1-1-p-q-p"><a href="#gcd-g1-1-p-q-p" class="headerlink" title="gcd(g1-1,p*q)&#x3D;p"></a>gcd(g1-1,p*q)&#x3D;p</h4><p>结合上述推导过程，我们可以得出一下结论：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcd(g1-<span class="number">1</span>,p*q)=p</span><br><span class="line">gcd(g2-<span class="number">1</span>,p*q)=q</span><br></pre></td></tr></table></figure><p>因此可以使用g1,g2和n来求得p和q，与加密过程中的随机质数无关</p><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>利用上述结论以及母题提供的解密函数，构建如下解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c1, c2</span>):</span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">N = <span class="number">20807018344486474639307429177279931766730766338068107239915507489300098048895435781756514265069820029246382818970733268271541419058569567895618666922180270584064313671561310704041755422624879418184008100473568396190523033929320245716340019444764233261191278982354931492880877566550189410854395486995604287009460090861952156686772486228583819235930673806632618770875593810617784176409247510465542253043645164164225524491704753384493817563203956665022724674535516870726747405974392352500432805602085261375142216501656342533659731098891481615791354504343987459436489040377662127479793769523359343534307819013289699807101</span></span><br><span class="line">g1 = <span class="number">13669954919111873554762685722926885077118528999414402163291237939605095249827361266585404348819936899557500751307328088850133462100189908649705354225171362748567332828733792410877365393472368767642223613483944864421225366984013053159643284842823692865975521013400160643858123645513020647367033022539177063702511618272018019345686324322865461583030805528508961559861228807898458344763909703624723082316946660539208262816734999777236686904487167545596412866146192769859422435979617441355968077981338491466670291310491623996943880557071723073298267310617017933994938481600905833829730599911183096116409487608858717083764</span></span><br><span class="line">g2 = <span class="number">16004755272896973088305242134835363565950101667041191767091338528075710730690484241256646402124331734165332717221873300040844257120250717798419429003342474882969292183331631773486056363790119500409511338474885148624744719334829519138941747721940978742668429331169327121848561577357339194970483392418062307133642660625962426570987080348107999849220769541832138719358407833846252908305766546561532003650472770370573552424932908544299331489147220956574184822433945571318688467182365231955276573176433559755313822566687880866791301904461559170416753669109833335824210853322226762705537051009387847122221014380228383127427</span></span><br><span class="line">c1, c2 = [<span class="number">15258813801182767957948809411445530114743580005667897427534365589851124401953952700888032330082278736578651674105204553630115929829327520950316902504433079359916257355896937562916556083469602985115254272625361902512966905366505705193603115063442567259505806926885597909346860116511116593562896739734663097631870026814495999405532329662713707140991693625596972404484374296588505369466138353714461787853643947646268147993568111775200297788443085689323703846485412670213780175163562460311256388185948613714551169278328397181176821021494625532973065606678522088011055084956579073665474553688838705105692370860815836968744</span>, <span class="number">6812252973072040071827764212287068485224506664962923279994614164374840095630460681859406585838865259535150445414577263383839286602668872146630568583093203237350230531896113453730563536559780725054737930704052263836882704963528437893607940373145674848731274193348770450738356162141551719346994698149112827383011042635625991946491545698464513315705253441372356270248537025391519052228332747340090073726648071921053097612521949040588826684887577900030607964457543549015338544684381220552952995724701579427363382069065679545196826947900332605250858694574423497096207350532949517663416877954484913664168104807510052994343</span>]</span><br><span class="line">p=gcd(N,g1-<span class="number">1</span>)</span><br><span class="line">q=gcd(N,g2-<span class="number">1</span>)</span><br><span class="line">m=decrypt(c1,c2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>over!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SING_IN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WP_2024PearlCTF_CRYPTO_3spies</title>
      <link href="/2024/03/09/wp-2024pearlctf-crypto-3spies/"/>
      <url>/2024/03/09/wp-2024pearlctf-crypto-3spies/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个加密脚本: encrypt.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">n2 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">n3 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e,n2)</span><br><span class="line">c3 = <span class="built_in">pow</span>(m,e,n3)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;encrypted-messages.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&#x27;n1: <span class="subst">&#123;n1&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;e: <span class="subst">&#123;e&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;c1: <span class="subst">&#123;c1&#125;</span>\n\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;n2: <span class="subst">&#123;n2&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;e: <span class="subst">&#123;e&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;c2: <span class="subst">&#123;c2&#125;</span>\n\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;n3: <span class="subst">&#123;n3&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;e: <span class="subst">&#123;e&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;c3: <span class="subst">&#123;c3&#125;</span>\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一个文本文件：encrypted-messages.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n1: 125267411676839013904356880992044234494446196964982422223130579882047339346910691451497681975351838034684254305738613386927222900898672184001345811471784343779083336010063097729870079645284178978512325038316112509718505547104307526489798594871208559607331790920412305711830820739308995357441030646151241475357</span><br><span class="line">e: 3</span><br><span class="line">c1: 53377681151597930200174280269480737905892580547675095951568028531545776989476273786562435486230550919422086944133253611872983670236114054374565938184593173194919064517779661178744278071496565181181705071524501841159717567250259220092464925447795412484629687708208662079791459184303259833667333882817260906165</span><br><span class="line"></span><br><span class="line">n2: 101985110329687359982214188967281711679876126442294375297547334583432698756724057183438691227371260175904715854057793173086301783390154807726779286131084537704721881438398569476214173211311977143694032174701007005033830070482491565424683664984059187439768982994371382763048098663670188786016786612348042190633</span><br><span class="line">e: 3</span><br><span class="line">c2: 86370003324603283962938004647941072863866893771153362222202759619566185050496089684606274416415418388916028237984708280964054009059814813483639010674182298294505525549842057730933691736372086557397211586739691237738757897947336698446258197604918828646265244195686107866422922575275382813594250335044143485624</span><br><span class="line"></span><br><span class="line">n3: 83259448903366278561128205003734328779222118906091604625605804813528274055482582431201682767294594942491788720967344243567819654813240542076250030802111361571504667752481579915864184180358691091092122509649590043074189547962292835856503625214027405901620103615424259796442446412031011575671410630232956892267</span><br><span class="line">e: 3</span><br><span class="line">c3: 25601241268900087228853235319569275926328919786631787991019848828558430219449358810095537362492238844266084660904521793373698736119824512458196492049138821633273765102576368573691391116632126183996786969554104441242376959688329346567745607825277943462236901478944551669406261301309719409165457168678763092118</span><br></pre></td></tr></table></figure><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>首先破解加密脚本，是一个常见的低指数加密广播攻击，e&#x3D;3,可以参考一下如下内容：</p><p><a href="https://blog.csdn.net/qq_46145027/article/details/125047313">https://blog.csdn.net/qq_46145027/article/details/125047313</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">125267411676839013904356880992044234494446196964982422223130579882047339346910691451497681975351838034684254305738613386927222900898672184001345811471784343779083336010063097729870079645284178978512325038316112509718505547104307526489798594871208559607331790920412305711830820739308995357441030646151241475357</span></span><br><span class="line">c1 = <span class="number">53377681151597930200174280269480737905892580547675095951568028531545776989476273786562435486230550919422086944133253611872983670236114054374565938184593173194919064517779661178744278071496565181181705071524501841159717567250259220092464925447795412484629687708208662079791459184303259833667333882817260906165</span></span><br><span class="line">n2 = <span class="number">101985110329687359982214188967281711679876126442294375297547334583432698756724057183438691227371260175904715854057793173086301783390154807726779286131084537704721881438398569476214173211311977143694032174701007005033830070482491565424683664984059187439768982994371382763048098663670188786016786612348042190633</span></span><br><span class="line">c2 = <span class="number">86370003324603283962938004647941072863866893771153362222202759619566185050496089684606274416415418388916028237984708280964054009059814813483639010674182298294505525549842057730933691736372086557397211586739691237738757897947336698446258197604918828646265244195686107866422922575275382813594250335044143485624</span></span><br><span class="line">n3 = <span class="number">83259448903366278561128205003734328779222118906091604625605804813528274055482582431201682767294594942491788720967344243567819654813240542076250030802111361571504667752481579915864184180358691091092122509649590043074189547962292835856503625214027405901620103615424259796442446412031011575671410630232956892267</span></span><br><span class="line">c3 = <span class="number">25601241268900087228853235319569275926328919786631787991019848828558430219449358810095537362492238844266084660904521793373698736119824512458196492049138821633273765102576368573691391116632126183996786969554104441242376959688329346567745607825277943462236901478944551669406261301309719409165457168678763092118</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = [n1, n2, n3]</span><br><span class="line">c = [c1, c2, c3]</span><br><span class="line">resultant, mod = crt(n, c)</span><br><span class="line">value, is_perfect = gmpy2.iroot(resultant, e)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(value))</span><br></pre></td></tr></table></figure><p>结果为一个网址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;This is your destination: &quot;https://pastes.io/1yjswxlvl2&quot;\n&#x27;</span></span><br></pre></td></tr></table></figure><p>在该网页上下载了如下文件：Flag_it_is.txt</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">You</span> think this is <span class="title class_">Gibbrish</span>, but it<span class="string">&#x27;s something different...</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>刚开始不是很懂，搞了半天没看明白如何破解，后来询问了一下身边的大佬，说是base64转图片，提供了一个在线工具：</p><p><a href="https://www.lddgo.net/convert/base64-to-image">https://www.lddgo.net/convert/base64-to-image</a></p><p>把上面的文件传入即可得到如下图片：<br><img src="https://pic.imgdb.cn/item/65ec35129f345e8d03542289.jpg" alt="alt text"></p><p>over!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PearlCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WP_2024HSCCTF_CRYPTO_REAL_SIGN_IN</title>
      <link href="/2024/03/09/wp-2024hscctf-crypto-real-sign-in/"/>
      <url>/2024/03/09/wp-2024hscctf-crypto-real-sign-in/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;HSCCTF&#123;*************************&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    c = powmod(m, e, n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n&quot;</span>, i, <span class="string">&quot;=&quot;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c&quot;</span>, i, <span class="string">&quot;=&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 13266094979118433615107077438835111371457503704538616496563510289250600197984029767950953071723442381279904747724269706555801425883117040972832035397268347603612025741219452353130266755150965019441092380030226256032720651858600172996344598355816134478110939124633509594465443169697188695226358357129879780253706604232278678465680358018262084198108533077519049507811758423498512565521615931699494491595078723098101084217611204442585182103261006086144344612398896576066999950905966920722348056083426326740287336766359383868804991393096926457607860171709146742941740864780610226463852018204647096292737915760430291250813</span></span><br><span class="line"><span class="string">c1 = 10454892625278317641789872724686322205927252335791803070937784201169059579634108503308033729970364983743915474860354063759051514315619953792921367621385574749886778911471839079815820922430263016140141364094131496885155882486798302404238523986615316359385759537428069831379320707742928167131988641527992674882901567191207763547432299532710945549959580670112346830919500694014972444803904248586178887470465867991650480024904327432717911313867713120525202669101524778826445503383549733326775312427637839488477432162027468606568090607495541492335140760946449358303999218277269859230888292780234275495274787996001069959971</span></span><br><span class="line"><span class="string">n2 = 13561524319281645924409429988746244285924512610515302181526524036825687984904507677894611353344735741110533280540372734178963216876945066232927791369207852762146826883906093804958723203309030840804897999205074456325062789110452940484077408580876939074453733126571662068654441714639301799127584606087971553812926212292460761915985786461807649546286330834719746624387850833859250717790492671884734393055454074719585937904232516659582736211933280011591605069686791049628396762690038333975652490908544846890333889140489210242676577675968427325105786641017561929481335597681693818435892140856959673754213600282444761045909</span></span><br><span class="line"><span class="string">c2 = 3809937396638973793281111150837774607768836561256425490071061814543315217182689579329457784159377040740840790603579270672790822179042079055887400637582022659400594844425891666493759469522229692267103516295923589666151948947533002975509430505778081264268698292606209538047240829756919764958544518311993684790118122163859571923899116815269989298822142104789156965964388346807167061332155392766290531602747731916010774318400533536413925876554324550780136191458776623029231802991319498346243427246484439391940676640693616519788950250194620455331557435567742874072637005171754550020619361150150760807391307377493836703076</span></span><br><span class="line"><span class="string">n3 = 20819967432768567938753694422911303382713641435728476601586838051751312782014589687874100683447016549893853820399247909653519950995166805072380656652093579604808569443345700131756901813968185726839863492859231569896747987531341038527577030274701158504736611486411122416871876820360598851918276248520018793494992493852386399935919098185299268920688465446256283333918993392163947559470887074488117510961172278330026050882249897526926951246915378841961743261451053094912730850754242934166148766977209435597121171360066632973035097557482087715745940551760350028517912402795353929678770383484462337839762404384487582066453</span></span><br><span class="line"><span class="string">c3 = 11563829913521314742585136805475993461403465700108053759771484386843765447294825812595747844564874801821547385942939017711043792590427266240133027831461974927558652665067213878683577605892319949704019193752250409813868906421753286690558646631157080887991363101311595921894128110588310204725909211948500421818595333014728114922612870236792445180757918034580210383348205174677492784034863701447097219480133095005954043490631339361280493810083309703940614371501369647446672052159714963350601039281652141446041256158792981347520865671115091097366786582678000769990989485879756562971825181583852052194492966890258786944315</span></span><br><span class="line"><span class="string">n4 = 19517605474769458566764053169103203900538883167125789442948194023333599294853531273087386563161613748743818343948170765525802041313369094525708034240492038517491037697421019698672940028061489377078569027204940525741751607758706837789276571889269840463242449627036923444536643477208091664006240106337894541529098279162689793633659155131183323675883233214674098857553487390844015483326711766090826364639791072315148015450491509411705543419711632894282105698410629463141048089867016193055384530738113369352506445669521342292860468297676826301170714618519525841753642713267083007541894156522819536935129135488289198694889</span></span><br><span class="line"><span class="string">c4 = 12720867554077215609167247949706745145667570273372296302246080668969511222297653722462456233088262153562301044885409538816931281414687572296907970004441185871229786306419586839050961363065587925188623309437687878362349712010861419409491068481019724226070296781806932012179356550421791040143093709543578156689726256993615533679238619784087615967419616376736870824897695863732260595608905898821074250285903989668303290834003098691902990265526695777899489911426855957844561961729063644070823142386451495647995297413399808476505524581260464059786283824394788336780567702950051743361294131648282343329587709077103035316720</span></span><br><span class="line"><span class="string">n5 = 15315765971812428868126611109300419975777573811870059860288938012581131143314666287089472408729190306740351316922426244732585067377217502116440145450875665683575473308102742095244349804293311006664351646952181210686812748912418175736013835669191549110546127830831456068811493086787520032272004231879188572130659936937680177977058975692716116961651093033986073297040678707534300965722868263825444198679243070507413216087205293997006805636338567585815764233374917745809135568855524993022583535608349280044851332779641619210310837108819273508771161881712796235518243572549756276118053736270122787899173695729089911000177</span></span><br><span class="line"><span class="string">c5 = 1996576325989768324317887012680560370528949194626393664650182754791578697786369958145137743555674312911707989139883926276952465377328602829900403114611234863417183707678398047030046855450074260654432278156903388641948696716193734714839957624359533486844023111115297718398319120718217043728064595217651738180806194912581964346594873253580010279706758241793778842399330631789750327865945625117967957133863637176404309782516880511747771793712203903185512285327103080133567660391921038681393551945607152726063692641742286406772926103324078574181176632321287759066802783643421564667257668981655199672490410258387124896839</span></span><br><span class="line"><span class="string">n6 = 22501623321194869030526666823514739767749207843970334295553523279818676682652976959807729381646792676134988101065783136759904452189288813040860021497429422935571083993146794186207853146483681094375360774768406629588311381375206331368965836725531623084019451921330442379292718421616088275750226791314378297932358311378533569620671423740598033204639634035814689781736104197321348154999759210532651451336192376531975837284751978609197068573278551236896713762616106051882505752287773203197087939983952212761603430314087275042009367400077728025285967811883773835952547025411853395307325959904214255100115763377527761863243</span></span><br><span class="line"><span class="string">c6 = 16972901653690784382193404778525843883847230468707217844241233207197480301434902629018088740822889948972102445668033489181324675531537650785766582307112083721410506834279363487814759021815005839906656731069521758605293428928322712895510490968448490116732590950772037788323801838566829526879837783860631971103738986788475652187080935944428662363573097225322630574705977616143315497272754050608117449938161772409924992453640310621899223691851303921323537779068346575997621024660907750345496836548887894110692437965970524341315015139872598871247336564148953981001708145253728789799483753931039894943324458172207408514055</span></span><br><span class="line"><span class="string">n7 = 20222972180177072345801227937253710431874005900913732040381986459681923475683145372990375296354647420667483866455563976492495863306613645199351725323069254033914660444884681801701527128578914815647228265457580192591405358646605069362025887082090772778349481109768859094222573588734354390770166651349176555216207359309348018342505464249804607873118984688190648392606550835717828160317062604597079101529586592809846608153548090689114431569844519317969076852156023429809918618137153901636552629572816865533796914796916912143735510069871682428043277595493567381686086440480398579063801490541087200975224372047447666853577</span></span><br><span class="line"><span class="string">c7 = 19248329020030453774384696880312801243022181399316695013193573740699955812434234453445733160128408889312090775734047782876100145988183327884917215679382382881065419870764186721970622248713761494850863082727373673264251951250813933154161422645331713437130381414540777017708015790836797014483890216068812718266206449620134392843370036352310247384624064366465809379383305877737001168693796305842850301708205795174536047495356081533121119809621200677554802850741327026857766466801847093397207492834507197621929666294565502206253758771807936447505283097006026148803103761799795917848061959407655084012166916418019312249784</span></span><br><span class="line"><span class="string">n8 = 28799545621025859784610107508239196961299975467825740831913751504915874851330462439158635575405356818113410333683180082332165697120427112955103148744439425445183885200419323900649247390987373643732545351428341672132606990651983217136427779727640093677134233750683573339125630816150512829880758197582740742903567508671599670638441690064624970884849155079924261319378412468315205937959638074779010811695132863607314175199659821450983825173738122749043063821539706648079731459596593171608003970504410762959266052601005965264083020025264976022719772719760327913949451765549596654112776579032915566112007668167772800022899</span></span><br><span class="line"><span class="string">c8 = 1557912453709476966737076991561069916132026563623952214325899450684779611396005511525194425002377424080593548871717093344298154722414402662579348749814362372502553596876087924405512346139642130044966150910684629355033505918013408065432489689359533653824531829749196503353303426506457519870729578421517704788083837871239684468506646791031429111449024396111145925900274462731352865657439734650971847748974665555525054155117163435567228916046859498167502129739768590572170326191362542459346405142436764480239930123323175219488501180973820200030365386979265642090761227134669853119027964377516064450203673169996741108201</span></span><br><span class="line"><span class="string">n9 = 10724722645304259715795299819065674754042984013786210584506231300619560676108475536395272046569973743641251757746061197828519780315618458377103563062231183483417813026164932742828160245936263717653018746001798106670074713826425538758327538077666818411803556790303118703675214570232032363741244652199877829850941356975349610433270602500949664737614829264570720376982697613497917773407899889472415398738368753150300782201701629840263791099898799223939097237737763305744244520913831151361155926462086252389196548583215275230652627205709362921989235487237437830519479308853639024184940767904019468405024567279269194660457</span></span><br><span class="line"><span class="string">c9 = 7054636121132343583858699301095750714111235817920115459468707884725018199621185268565462099537583727231123935665880304441155106987655834264363622503952228720525242179508079016631089564472694196928292967592007090527901832440980478605545275893294775905732209796463597105116676363505607644384293210905609044898854823349412282236466031666385339991490559120640881321780940909164095426401350314009757434019464208207922992311335823038396957805698822367795673327054284423260967631762122524511318733561339982590040303505605155884427567432712042870632816967182611225212150848091424300840160529323960243459920269872536666352976</span></span><br><span class="line"><span class="string">n10 = 16304817901397483417456609341516124523232426780023397228272913044723365389571327797134591736977502692057727416394924310828824378024812777529367342707896494815960255682947685036902235997899886291633609041685897197272675911304941501067794795285949540313990226409651292120126492714998892290044111541098365692731185787360609198921681736777103794430653696698141195954719030883935151980847339939213040373252819145655067286986300641668994700390921458682571619409488233289211738521046085311253119526685912893458131534718050802684180285138809217274273877376347024021056317566312186133916744533463879779997794540361760393219489</span></span><br><span class="line"><span class="string">c10 = 6039122660803656157700054739064564338439549484695206214016006129508782362229842967602464077735874540107161459041835340990108817139672137870642935613531313583963930144871458733026396223674801557621036949312116639217447114899726858984281194116508244403985568785765273838572470898925521147022021516862658967584135454474355381073026066426450614788381002057980590442338766869104957577338546687759141228942149374485785893539335288536729328218172278370763183603422629799846611737710865681572257803448960656692506773086527389616178693152885260795303008111935277529561576915114165678564997923634906377059491989399467738069641</span></span><br><span class="line"><span class="string">n11 = 26625591570108917991847624024325819020320989255483608230644879476517915211995542896341416515605576928392317717654695767006784744751962205355107012859426134474074616134986414248054781712130892076462288761672616993287474215271046602443215449210026303978249752825306035097841429567784265656890801589418315449927543660131967365276637662563112328427813183398517944210120851841495001293543971765864382060100600179108814852829473884481867272716907064729991187798328733196676298681328399250356028155411865948758466337763025886685436650643428510593697176416735568250615673642866668416526682341721998481502482877972649018501469</span></span><br><span class="line"><span class="string">c11 = 20247005397625616228661928392695469647749434533141783786437968083066137357689767280753532605896419173332597529708801946906363780592876111104850302784033136335456683361128603662454728234349563238948801712907903185993561076754164552845510795293521029798357876214260903355702688269527465118808832941386890598851762900876512383557653940846232884627557957652638581022140825373023173482471791720148792301241581919765510220083079365311297081633979398855966991069020584462613981094888736916444009463104235004451765533162593406749138640537670707679905027165914805299755934758172748227146495107002603546338597452964759860431081</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>这是一个公因数攻击(多组n和c)  因为有多个n和c，所以可能会存在两个n之间存在大于1的公因数，以此破解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 公因数攻击(多组n和c)</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">13266094979118433615107077438835111371457503704538616496563510289250600197984029767950953071723442381279904747724269706555801425883117040972832035397268347603612025741219452353130266755150965019441092380030226256032720651858600172996344598355816134478110939124633509594465443169697188695226358357129879780253706604232278678465680358018262084198108533077519049507811758423498512565521615931699494491595078723098101084217611204442585182103261006086144344612398896576066999950905966920722348056083426326740287336766359383868804991393096926457607860171709146742941740864780610226463852018204647096292737915760430291250813</span></span><br><span class="line">c1 = <span class="number">10454892625278317641789872724686322205927252335791803070937784201169059579634108503308033729970364983743915474860354063759051514315619953792921367621385574749886778911471839079815820922430263016140141364094131496885155882486798302404238523986615316359385759537428069831379320707742928167131988641527992674882901567191207763547432299532710945549959580670112346830919500694014972444803904248586178887470465867991650480024904327432717911313867713120525202669101524778826445503383549733326775312427637839488477432162027468606568090607495541492335140760946449358303999218277269859230888292780234275495274787996001069959971</span></span><br><span class="line">n2 = <span class="number">13561524319281645924409429988746244285924512610515302181526524036825687984904507677894611353344735741110533280540372734178963216876945066232927791369207852762146826883906093804958723203309030840804897999205074456325062789110452940484077408580876939074453733126571662068654441714639301799127584606087971553812926212292460761915985786461807649546286330834719746624387850833859250717790492671884734393055454074719585937904232516659582736211933280011591605069686791049628396762690038333975652490908544846890333889140489210242676577675968427325105786641017561929481335597681693818435892140856959673754213600282444761045909</span></span><br><span class="line">c2 = <span class="number">3809937396638973793281111150837774607768836561256425490071061814543315217182689579329457784159377040740840790603579270672790822179042079055887400637582022659400594844425891666493759469522229692267103516295923589666151948947533002975509430505778081264268698292606209538047240829756919764958544518311993684790118122163859571923899116815269989298822142104789156965964388346807167061332155392766290531602747731916010774318400533536413925876554324550780136191458776623029231802991319498346243427246484439391940676640693616519788950250194620455331557435567742874072637005171754550020619361150150760807391307377493836703076</span></span><br><span class="line">n3 = <span class="number">20819967432768567938753694422911303382713641435728476601586838051751312782014589687874100683447016549893853820399247909653519950995166805072380656652093579604808569443345700131756901813968185726839863492859231569896747987531341038527577030274701158504736611486411122416871876820360598851918276248520018793494992493852386399935919098185299268920688465446256283333918993392163947559470887074488117510961172278330026050882249897526926951246915378841961743261451053094912730850754242934166148766977209435597121171360066632973035097557482087715745940551760350028517912402795353929678770383484462337839762404384487582066453</span></span><br><span class="line">c3 = <span class="number">11563829913521314742585136805475993461403465700108053759771484386843765447294825812595747844564874801821547385942939017711043792590427266240133027831461974927558652665067213878683577605892319949704019193752250409813868906421753286690558646631157080887991363101311595921894128110588310204725909211948500421818595333014728114922612870236792445180757918034580210383348205174677492784034863701447097219480133095005954043490631339361280493810083309703940614371501369647446672052159714963350601039281652141446041256158792981347520865671115091097366786582678000769990989485879756562971825181583852052194492966890258786944315</span></span><br><span class="line">n4 = <span class="number">19517605474769458566764053169103203900538883167125789442948194023333599294853531273087386563161613748743818343948170765525802041313369094525708034240492038517491037697421019698672940028061489377078569027204940525741751607758706837789276571889269840463242449627036923444536643477208091664006240106337894541529098279162689793633659155131183323675883233214674098857553487390844015483326711766090826364639791072315148015450491509411705543419711632894282105698410629463141048089867016193055384530738113369352506445669521342292860468297676826301170714618519525841753642713267083007541894156522819536935129135488289198694889</span></span><br><span class="line">c4 = <span class="number">12720867554077215609167247949706745145667570273372296302246080668969511222297653722462456233088262153562301044885409538816931281414687572296907970004441185871229786306419586839050961363065587925188623309437687878362349712010861419409491068481019724226070296781806932012179356550421791040143093709543578156689726256993615533679238619784087615967419616376736870824897695863732260595608905898821074250285903989668303290834003098691902990265526695777899489911426855957844561961729063644070823142386451495647995297413399808476505524581260464059786283824394788336780567702950051743361294131648282343329587709077103035316720</span></span><br><span class="line">n5 = <span class="number">15315765971812428868126611109300419975777573811870059860288938012581131143314666287089472408729190306740351316922426244732585067377217502116440145450875665683575473308102742095244349804293311006664351646952181210686812748912418175736013835669191549110546127830831456068811493086787520032272004231879188572130659936937680177977058975692716116961651093033986073297040678707534300965722868263825444198679243070507413216087205293997006805636338567585815764233374917745809135568855524993022583535608349280044851332779641619210310837108819273508771161881712796235518243572549756276118053736270122787899173695729089911000177</span></span><br><span class="line">c5 = <span class="number">1996576325989768324317887012680560370528949194626393664650182754791578697786369958145137743555674312911707989139883926276952465377328602829900403114611234863417183707678398047030046855450074260654432278156903388641948696716193734714839957624359533486844023111115297718398319120718217043728064595217651738180806194912581964346594873253580010279706758241793778842399330631789750327865945625117967957133863637176404309782516880511747771793712203903185512285327103080133567660391921038681393551945607152726063692641742286406772926103324078574181176632321287759066802783643421564667257668981655199672490410258387124896839</span></span><br><span class="line">n6 = <span class="number">22501623321194869030526666823514739767749207843970334295553523279818676682652976959807729381646792676134988101065783136759904452189288813040860021497429422935571083993146794186207853146483681094375360774768406629588311381375206331368965836725531623084019451921330442379292718421616088275750226791314378297932358311378533569620671423740598033204639634035814689781736104197321348154999759210532651451336192376531975837284751978609197068573278551236896713762616106051882505752287773203197087939983952212761603430314087275042009367400077728025285967811883773835952547025411853395307325959904214255100115763377527761863243</span></span><br><span class="line">c6 = <span class="number">16972901653690784382193404778525843883847230468707217844241233207197480301434902629018088740822889948972102445668033489181324675531537650785766582307112083721410506834279363487814759021815005839906656731069521758605293428928322712895510490968448490116732590950772037788323801838566829526879837783860631971103738986788475652187080935944428662363573097225322630574705977616143315497272754050608117449938161772409924992453640310621899223691851303921323537779068346575997621024660907750345496836548887894110692437965970524341315015139872598871247336564148953981001708145253728789799483753931039894943324458172207408514055</span></span><br><span class="line">n7 = <span class="number">20222972180177072345801227937253710431874005900913732040381986459681923475683145372990375296354647420667483866455563976492495863306613645199351725323069254033914660444884681801701527128578914815647228265457580192591405358646605069362025887082090772778349481109768859094222573588734354390770166651349176555216207359309348018342505464249804607873118984688190648392606550835717828160317062604597079101529586592809846608153548090689114431569844519317969076852156023429809918618137153901636552629572816865533796914796916912143735510069871682428043277595493567381686086440480398579063801490541087200975224372047447666853577</span></span><br><span class="line">c7 = <span class="number">19248329020030453774384696880312801243022181399316695013193573740699955812434234453445733160128408889312090775734047782876100145988183327884917215679382382881065419870764186721970622248713761494850863082727373673264251951250813933154161422645331713437130381414540777017708015790836797014483890216068812718266206449620134392843370036352310247384624064366465809379383305877737001168693796305842850301708205795174536047495356081533121119809621200677554802850741327026857766466801847093397207492834507197621929666294565502206253758771807936447505283097006026148803103761799795917848061959407655084012166916418019312249784</span></span><br><span class="line">n8 = <span class="number">28799545621025859784610107508239196961299975467825740831913751504915874851330462439158635575405356818113410333683180082332165697120427112955103148744439425445183885200419323900649247390987373643732545351428341672132606990651983217136427779727640093677134233750683573339125630816150512829880758197582740742903567508671599670638441690064624970884849155079924261319378412468315205937959638074779010811695132863607314175199659821450983825173738122749043063821539706648079731459596593171608003970504410762959266052601005965264083020025264976022719772719760327913949451765549596654112776579032915566112007668167772800022899</span></span><br><span class="line">c8 = <span class="number">1557912453709476966737076991561069916132026563623952214325899450684779611396005511525194425002377424080593548871717093344298154722414402662579348749814362372502553596876087924405512346139642130044966150910684629355033505918013408065432489689359533653824531829749196503353303426506457519870729578421517704788083837871239684468506646791031429111449024396111145925900274462731352865657439734650971847748974665555525054155117163435567228916046859498167502129739768590572170326191362542459346405142436764480239930123323175219488501180973820200030365386979265642090761227134669853119027964377516064450203673169996741108201</span></span><br><span class="line">n9 = <span class="number">10724722645304259715795299819065674754042984013786210584506231300619560676108475536395272046569973743641251757746061197828519780315618458377103563062231183483417813026164932742828160245936263717653018746001798106670074713826425538758327538077666818411803556790303118703675214570232032363741244652199877829850941356975349610433270602500949664737614829264570720376982697613497917773407899889472415398738368753150300782201701629840263791099898799223939097237737763305744244520913831151361155926462086252389196548583215275230652627205709362921989235487237437830519479308853639024184940767904019468405024567279269194660457</span></span><br><span class="line">c9 = <span class="number">7054636121132343583858699301095750714111235817920115459468707884725018199621185268565462099537583727231123935665880304441155106987655834264363622503952228720525242179508079016631089564472694196928292967592007090527901832440980478605545275893294775905732209796463597105116676363505607644384293210905609044898854823349412282236466031666385339991490559120640881321780940909164095426401350314009757434019464208207922992311335823038396957805698822367795673327054284423260967631762122524511318733561339982590040303505605155884427567432712042870632816967182611225212150848091424300840160529323960243459920269872536666352976</span></span><br><span class="line">n10 = <span class="number">16304817901397483417456609341516124523232426780023397228272913044723365389571327797134591736977502692057727416394924310828824378024812777529367342707896494815960255682947685036902235997899886291633609041685897197272675911304941501067794795285949540313990226409651292120126492714998892290044111541098365692731185787360609198921681736777103794430653696698141195954719030883935151980847339939213040373252819145655067286986300641668994700390921458682571619409488233289211738521046085311253119526685912893458131534718050802684180285138809217274273877376347024021056317566312186133916744533463879779997794540361760393219489</span></span><br><span class="line">c10 = <span class="number">6039122660803656157700054739064564338439549484695206214016006129508782362229842967602464077735874540107161459041835340990108817139672137870642935613531313583963930144871458733026396223674801557621036949312116639217447114899726858984281194116508244403985568785765273838572470898925521147022021516862658967584135454474355381073026066426450614788381002057980590442338766869104957577338546687759141228942149374485785893539335288536729328218172278370763183603422629799846611737710865681572257803448960656692506773086527389616178693152885260795303008111935277529561576915114165678564997923634906377059491989399467738069641</span></span><br><span class="line">n11 = <span class="number">26625591570108917991847624024325819020320989255483608230644879476517915211995542896341416515605576928392317717654695767006784744751962205355107012859426134474074616134986414248054781712130892076462288761672616993287474215271046602443215449210026303978249752825306035097841429567784265656890801589418315449927543660131967365276637662563112328427813183398517944210120851841495001293543971765864382060100600179108814852829473884481867272716907064729991187798328733196676298681328399250356028155411865948758466337763025886685436650643428510593697176416735568250615673642866668416526682341721998481502482877972649018501469</span></span><br><span class="line">c11 = <span class="number">20247005397625616228661928392695469647749434533141783786437968083066137357689767280753532605896419173332597529708801946906363780592876111104850302784033136335456683361128603662454728234349563238948801712907903185993561076754164552845510795293521029798357876214260903355702688269527465118808832941386890598851762900876512383557653940846232884627557957652638581022140825373023173482471791720148792301241581919765510220083079365311297081633979398855966991069020584462613981094888736916444009463104235004451765533162593406749138640537670707679905027165914805299755934758172748227146495107002603546338597452964759860431081</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = []</span><br><span class="line">c = []</span><br><span class="line">p = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    n.append(<span class="built_in">eval</span>(<span class="string">&#x27;n&#x27;</span> + <span class="built_in">str</span>(i)))</span><br><span class="line">    c.append(<span class="built_in">eval</span>(<span class="string">&#x27;c&#x27;</span> + <span class="built_in">str</span>(i)))</span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">zip</span>(n, c))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(n)):</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(n[i], n[j]) != <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(i, j)    <span class="comment"># i=4,j=5</span></span><br><span class="line">            <span class="built_in">print</span>(gmpy2.gcd(n[i], n[j]))</span><br><span class="line">p = gmpy2.gcd(n5, n6)</span><br><span class="line">q = n5 // p</span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">m = <span class="built_in">pow</span>(c5, d, n5)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>over！</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HSCCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WP_2024HSCCTF_CRYPTO_FUNNY</title>
      <link href="/2024/03/09/wp-2024hscctf-crypto-funny/"/>
      <url>/2024/03/09/wp-2024hscctf-crypto-funny/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from <span class="title class_">Crypto</span>.<span class="title class_">Util</span>.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">1627858721743596752497831640628357323459243890844363792736407789751577427319257708507686114456632938183775129585728892845205290864750578798354859933996208521450129131173352490118085939969385911306718129785035108056909135931322755908602656567223998858450130768625587559935064753603718657989533793373124922891077849376447589198239126291127263234784363556777780461489387706699053671315621968807065360907667815336609878856798387057891974730460404647229308105442629038061284060276648993434681114539955086828451085582033288860959729755856478065093327544217813990665326820156340461326538271909605715822484950196033809892232121330623027855970475888202583512234213349462680452400729903400494519431590431864717223438807093669836615356855072370571595889807712166659061190031457954071146645411277702230847389264989391715763232453605404095019402186331633202953693057641475300619482863265936513394341066776619336452923951439714749067348507</span></span><br><span class="line">q = <span class="number">165059760196977338034268528857897083190717585647808271832795575354736221674892279730906525407442580833042731114617534865267230347093979480666213073939602212663043286794259410177026619955285626139270678815060566416554620185859901611571955490060241822054715533030464833509114500388615748465579240918292431860839</span></span><br><span class="line">c = <span class="number">209347444484196477254668267578954904181293909211985372842733666165076889646025992007884927283300662833989678431462547742385291078285045060028956748455410812196305788814280968487973559115983082461315009316488143477261307107939530267533197821947240438534411830018967506368459544025037634267899970815198992392565948727381322854560823769432552779881938316107779842525092269591932257206582810678457433166038809740255591841951300818106018061065936083887559841543250701094558114335651396741896281230175124133873529005816838785880680073159461666783649744640398010841282229366323100807220116460976549981263966530038289223576133865992894885483308732021144420507955669760623032114718333853671281281221009397028372653797668774820725717817362383394165014402977767667433542733963298092312930702496796235196487999167666133884266829605503363510544384236303968829214389757297563873395131798724306227675722494797069994655456021649231626359765579028950908065367760981736933167557841586896807116262630848742514005606289980676609588756946993271763119859088002784499062149533167332388600036550273743940503131248513795389688869470432261503038708892320267815658450917855334244502333938120781251564676408212996623419957317150267768978807968208353379334556945</span></span><br><span class="line"></span><br><span class="line">d = inverse(<span class="number">65537</span>, q - <span class="number">1</span>)</span><br><span class="line">m = powmod(c, d, q)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>直接运行就行</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HSCCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中stylecloud包的使用</title>
      <link href="/2024/03/07/python-zhong-stylecloud-bao-de-shi-yong/"/>
      <url>/2024/03/07/python-zhong-stylecloud-bao-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="stylecloud介绍"><a href="#stylecloud介绍" class="headerlink" title="stylecloud介绍"></a>stylecloud介绍</h2><p>stylecloud是一款比较好用的python包，常用于数据可视化操作，具体的介绍看看别人写的吧</p><p><a href="https://mp.weixin.qq.com/s/B23uDxzLUa_45uDh2R9Vlw">https://mp.weixin.qq.com/s/B23uDxzLUa_45uDh2R9Vlw</a></p><p><a href="https://cloud.tencent.com/developer/article/1699651">https://cloud.tencent.com/developer/article/1699651</a></p><p>蒙版图片参考网址：<a href="https://fontawesome.com/license/free">https://fontawesome.com/license/free</a></p><p>中文版：<a href="https://fa5.dashgame.com/#/%E5%9B%BE%E6%A0%87">https://fa5.dashgame.com/#/%E5%9B%BE%E6%A0%87</a></p><p>配色：palettable： <a href="https://jiffyclub.github.io/palettable/">https://jiffyclub.github.io/palettable/</a></p><p>特别需要注意的是蒙版图片的调用：<br>例如：fa-grin-beam，在python中调用好像得改为fa.grin-beam才行，有时候都不行，还是得自己多试试，搞不懂。</p><p>下面是个实例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from stylecloud import gen_stylecloud</span><br><span class="line">import jieba</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">with open(<span class="string">&#x27;xxxx.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本预处理  去除一些无用的字符   只提取出中文出来</span></span><br><span class="line">new_data = re.findall(<span class="string">&#x27;[\u4e00-\u9fa5]+&#x27;</span>, data, re.S)</span><br><span class="line">new_data = <span class="string">&quot;/&quot;</span>.join(new_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本分词</span></span><br><span class="line">seg_list_exact = jieba.cut(new_data, cut_all=<span class="title class_">True</span>)</span><br><span class="line"></span><br><span class="line">result_list = []</span><br><span class="line">with open(<span class="string">&#x27;stopword.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) as <span class="symbol">f:</span></span><br><span class="line">    con = f.readlines()</span><br><span class="line">    stop_words = set()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="symbol">con:</span></span><br><span class="line">        i = i.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)   <span class="comment"># 去掉读取每一行数据的\n</span></span><br><span class="line">        stop_words.add(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> <span class="symbol">seg_list_exact:</span></span><br><span class="line">    <span class="comment"># 设置停用词</span></span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stop_words <span class="keyword">and</span> len(word) &gt; <span class="number">1</span>:</span><br><span class="line">        result_list.append(word)</span><br><span class="line">print(result_list)</span><br><span class="line"></span><br><span class="line">gen_stylecloud(</span><br><span class="line">    text=<span class="string">&#x27; &#x27;</span>.join(result_list),                   <span class="comment"># 文本数据</span></span><br><span class="line">    size=<span class="number">600</span>,                                     <span class="comment"># 词云图大小</span></span><br><span class="line">    font_path=r<span class="string">&#x27;‪C:\Windows\Fonts\msyh.ttc&#x27;</span>, <span class="comment"># 中文词云  显示需要设置字体</span></span><br><span class="line">    output_name=<span class="string">&#x27;词云12.png&#x27;</span>,                       <span class="comment"># 输出词云图名称</span></span><br><span class="line">    icon_name=<span class="string">&#x27;fas fa.grin-beam&#x27;</span>,                   <span class="comment"># 图标   图片选择网址：https://fontawesome.com/license/free   # https://fontawesome.dashgame.com/</span></span><br><span class="line">    <span class="comment"># palette=&quot;Dark2_7&quot;  # 可以选择不同的配色方案，网址：palettable https://jiffyclub.github.io/palettable/</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python报错集合</title>
      <link href="/2024/03/07/python-bao-cuo-ji-he/"/>
      <url>/2024/03/07/python-bao-cuo-ji-he/</url>
      
        <content type="html"><![CDATA[<p>1、</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">word_freq = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> <span class="symbol">words:</span></span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> <span class="symbol">word_freq:</span></span><br><span class="line">        word_freq[word] += <span class="number">1</span></span><br><span class="line">    <span class="symbol">else:</span></span><br><span class="line">        word_freq[word] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(word_freq):</span><br><span class="line">    print(word)</span><br><span class="line">    print(word_freq[word])</span><br><span class="line"></span><br><span class="line"><span class="title class_">TypeError</span>: <span class="string">&#x27;dict&#x27;</span> object cannot be interpreted as an integer</span><br><span class="line">类型错误<span class="symbol">:<span class="string">&#x27;dict&#x27;</span></span>对象不能被解释为整数</span><br></pre></td></tr></table></figure><p>在打印字典的键值对时出现上述错误，首先是word没有参与循环，其次range(word_freq)使用错误</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">word_freq = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> <span class="symbol">words:</span></span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> <span class="symbol">word_freq:</span></span><br><span class="line">        word_freq[word] += <span class="number">1</span></span><br><span class="line">    <span class="symbol">else:</span></span><br><span class="line">        word_freq[word] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> word, freq <span class="keyword">in</span> word_freq.items():</span><br><span class="line">    print(word,word_freq[word])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WP_2021SWPUCTF新生赛_CRYPTO_traditional</title>
      <link href="/2024/03/04/wp-2021swpuctf-xin-sheng-sai-crypto-traditional/"/>
      <url>/2024/03/04/wp-2021swpuctf-xin-sheng-sai-crypto-traditional/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>西方的二进制数学的发明者莱布尼茨，从中国的八卦图当中受到启发，演绎并推论出了数学矩<br>阵，<br>最后创造的二进制数学。二进制数学的诞生为计算机的发明奠定了理论基础。而计算机现在改<br>变<br>了我们整个世界，改变了我们生活，而他的源头却是来自于八卦图。现在，给你一组由八卦图<br>方位<br>组成的密文，你能破解出其中的含义吗？<br> 震坤艮 震艮震 坤巽坤 坤巽震 震巽兑 震艮震 震离艮 震离艮<br> 格式：NSSCTF{}</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p> 根据文中提到的信息，我们尝试找到了一个图解来展示二进制和中国八卦之间的关系<br><img src="https://pic.imgdb.cn/item/65e7f3549f345e8d03a152f9.jpg" alt="alt text"><br>结合八卦与二叉树之间的的关系，将密文转化为：</p><p>100000001 100001100 000011000 000011100 100011110 100001100 100101001 100101001</p><p>再转为ASCII码</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">&quot;001000100 001100001 000110000 000110001 001110011 001100001 001101100 001101100&quot;</span></span><br><span class="line">m = m.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(m)):</span><br><span class="line">    print(chr(int(m[i], <span class="number">2</span>)), <span class="keyword">end</span>=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>但是结果发现为乱码<br><img src="https://pic.imgdb.cn/item/65e7f38c9f345e8d03a1fbbf.jpg" alt="alt text"></p><p>按理说不应该啊，怀疑是不是图片给错了，找了好几张类似的，发现图片没错，那就是题目的问题了，尝试了一下把最高位和最低位反着来读</p><p>001000100 001100001 000110000 000110001 001110011 001100001 001101100 001101100</p><p>这样就可以了。。。<br><img src="https://pic.imgdb.cn/item/65e7f39a9f345e8d03a229cb.jpg" alt="alt text"><br>严重怀疑这题是不是出题人搞错了，因为二叉树的下面是高位，上面是低位</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维纳攻击总结</title>
      <link href="/2024/02/11/wei-na-gong-ji-zong-jie/"/>
      <url>/2024/02/11/wei-na-gong-ji-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="维纳攻击"><a href="#维纳攻击" class="headerlink" title="维纳攻击"></a>维纳攻击</h2><p>wiener attack 是依靠连分数进行的攻击方式，适用于非常接近某一值（比如1）时，求一个比例关系(通常是e &#x2F; N &#x3D; 1)，在不同的题目中也会产生很多变式。</p><h3 id="解题模板"><a href="#解题模板" class="headerlink" title="解题模板"></a>解题模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算连分数</span></span><br><span class="line"><span class="string">    :param x: 分子</span></span><br><span class="line"><span class="string">    :param y: 分母</span></span><br><span class="line"><span class="string">    :return: 连分数列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算传入列表最后的渐进分数</span></span><br><span class="line"><span class="string">    :param cf: 连分数列表</span></span><br><span class="line"><span class="string">    :return: 该列表最后的渐近分数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="comment"># 这里的渐进分数分子分母要分开</span></span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span></span><br><span class="line"><span class="string">    :param a:x^2的系数</span></span><br><span class="line"><span class="string">    :param b:x的系数</span></span><br><span class="line"><span class="string">    :param c:pq</span></span><br><span class="line"><span class="string">    :return:p，q</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算列表所有的渐近分数</span></span><br><span class="line"><span class="string">    :param cf: 连分数列表</span></span><br><span class="line"><span class="string">    :return: 该列表所有的渐近分数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param e:</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: 私钥d</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d, k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">n = <span class="number">639662333905190724963174274393118134850652056724765488685973275138948202602626008285649108873241886836533441901790252560580886492518792249844707754890068885294414947775869189660933854702732140888525369256213185908742658834741758334492843871934294115437721034834635565406377520933839418094457376057043593848401</span></span><br><span class="line">e = <span class="number">548564175098067125961375319851171259385596271876637657761522885808657855394647972481844447376596437557651275057610120865395646169671221375251081541213042646978655686531005856899936162320404991331623237305862913250487293880446994470841390688087392282045130633013139311548859962245908782253213294049851175315059</span></span><br><span class="line">c = <span class="number">266367266471585923035346980467315672043839080179258966276144775106482166900911004389808367589961536843898187180012055918063504477273067284037318171833017082239907978935274619109926579983150571298634653886980563681026116724117473808890951091279814434050754571460308728024448607359710055618866766919226511213734</span></span><br><span class="line"></span><br><span class="line">d=wienerAttack(e, n)</span><br><span class="line">m=<span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m).decode())</span><br></pre></td></tr></table></figure><h3 id="例题一-HGAME-2022-week3-RSA-attack-3"><a href="#例题一-HGAME-2022-week3-RSA-attack-3" class="headerlink" title="例题一 [HGAME 2022 week3]RSA attack 3"></a>例题一 [HGAME 2022 week3]RSA attack 3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">2048</span>)</span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">d = getPrime(<span class="number">64</span>)</span><br><span class="line">e = invert(d, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(s2n(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">507419170088344932990702256911694788408493968749527614421614568612944144764889717229444020813658893362983714454159980719026366361318789415279417172858536381938870379267670180128174798344744371725609827872339512302232610590888649555446972990419313445687852636305518801236132032618350847705234643521557851434711389664130274468354405273873218264222293858509477860634889001898462547712800153111774564939279190835857445378261920532206352364005840238252284065587291779196975457288580812526597185332036342330147250312262816994625317482869849388424397437470502449815132000588425028055964432298176942124697105509057090546600330760364385753313923003549670107599757996810939165300581847068233156887269181096893089415302163770884312255957584660964506028002922164767453287973102961910781312351686488047510932997937700597992705557881172640175117476017503918294534205898046483981707558521558992058512940087192655700351675718815723840568640509355338482631416345193176708501897458649841539192993142790402734898948352382350766125000186026261167277014748183012844440603384989647664190074853086693408529737767147592432979469020671772152652865219092597717869942730499507426269170189547020660681363276871874469322437194397171763927907099922324375991793759</span></span><br><span class="line">e = <span class="number">77310199867448677782081572109343472783781135641712597643597122591443011229091533516758925238949755491395489408922437493670252550920826641442189683907973926843505436730014899918587477913032286153545247063493885982941194996251799882984145155733050069564485120660716110828110738784644223519725613280140006783618393995138076030616463398284819550627612102010214315235269945251741407899692274978642663650687157736417831290404871181902463904311095448368498432147292938825418930527188720696497596867575843476810225152659244529481480993843168383016583068747733118703000287423374094051895724494193455175131120243097065270804457787026492578916584536863548445813916819417857064037664101684455000184987531252344582899589746272173970083733130106407810619258077266603898529285634495710846838011858287024329514491058790557305041389614650730267774482954666726949886313386881066593946789460028399523245777171320319444673551268379126203862576627540177888290265714418064334752499940587750374552330008143708562065940245637685833371348603338834447212248648869514585047871442060412622164276894766238383894693759347590977926306581080390685360615407766600573527565016914830132066428454738135380178959590692145577418811677639050929791996313180297924833690095</span></span><br><span class="line">c = <span class="number">165251729917394529793163344300848992394021337429474789711805041655116845722480301677817165053253655027459227404782607373107477419083333844871948673626672704233977397989843349633720167495862807995411682262559392496273163155214888276398332204954185252030616473235814999366132031184631541209554169938146205402400412307638567132128690379079483633171535375278689326189057930259534983374296873110199636558962144635514392282351103900375366360933088605794654279480277782805401749872568584335215630740265944133347038070337891035560658434763924576508969938866566235926587685108811154229747423410476421860059769485356567301897413767088823807510568561254627099309752215808220067495561412081320541540679503218232020279947159175547517811501280846596226165148013762293861131544331444165070186672186027410082671602892508739473724143698396105392623164025712124329254933353509384748403154342322725203183050328143736631333990445537119855865348221215277608372952942702104088940952142851523651639574409075484106857403651453121036577767672430612728022444370874223001778580387635197325043524719396707713385963432915855227152371800527536048555551237729690663544828830627192867570345853910196397851763591543484023134551876591248557980182981967782409054277224</span></span><br></pre></td></tr></table></figure><p>比较常规的 RSA 题型，但问题是e相当的大，甚至与n相当的接近（差了一位数）</p><p>因此我们可以通过 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = p * q</span><br><span class="line">d = gmpy2.invert(e, （p-<span class="number">1</span>)*(q-<span class="number">1</span>)）     </span><br></pre></td></tr></table></figure><p>推出 d 非常的小,对此通常采取 维纳攻击 的方法来求取 d (需要知道 e,n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d, k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">n= <span class="number">507419170088344932990702256911694788408493968749527614421614568612944144764889717229444020813658893362983714454159980719026366361318789415279417172858536381938870379267670180128174798344744371725609827872339512302232610590888649555446972990419313445687852636305518801236132032618350847705234643521557851434711389664130274468354405273873218264222293858509477860634889001898462547712800153111774564939279190835857445378261920532206352364005840238252284065587291779196975457288580812526597185332036342330147250312262816994625317482869849388424397437470502449815132000588425028055964432298176942124697105509057090546600330760364385753313923003549670107599757996810939165300581847068233156887269181096893089415302163770884312255957584660964506028002922164767453287973102961910781312351686488047510932997937700597992705557881172640175117476017503918294534205898046483981707558521558992058512940087192655700351675718815723840568640509355338482631416345193176708501897458649841539192993142790402734898948352382350766125000186026261167277014748183012844440603384989647664190074853086693408529737767147592432979469020671772152652865219092597717869942730499507426269170189547020660681363276871874469322437194397171763927907099922324375991793759</span></span><br><span class="line">e= <span class="number">77310199867448677782081572109343472783781135641712597643597122591443011229091533516758925238949755491395489408922437493670252550920826641442189683907973926843505436730014899918587477913032286153545247063493885982941194996251799882984145155733050069564485120660716110828110738784644223519725613280140006783618393995138076030616463398284819550627612102010214315235269945251741407899692274978642663650687157736417831290404871181902463904311095448368498432147292938825418930527188720696497596867575843476810225152659244529481480993843168383016583068747733118703000287423374094051895724494193455175131120243097065270804457787026492578916584536863548445813916819417857064037664101684455000184987531252344582899589746272173970083733130106407810619258077266603898529285634495710846838011858287024329514491058790557305041389614650730267774482954666726949886313386881066593946789460028399523245777171320319444673551268379126203862576627540177888290265714418064334752499940587750374552330008143708562065940245637685833371348603338834447212248648869514585047871442060412622164276894766238383894693759347590977926306581080390685360615407766600573527565016914830132066428454738135380178959590692145577418811677639050929791996313180297924833690095</span></span><br><span class="line">c= <span class="number">165251729917394529793163344300848992394021337429474789711805041655116845722480301677817165053253655027459227404782607373107477419083333844871948673626672704233977397989843349633720167495862807995411682262559392496273163155214888276398332204954185252030616473235814999366132031184631541209554169938146205402400412307638567132128690379079483633171535375278689326189057930259534983374296873110199636558962144635514392282351103900375366360933088605794654279480277782805401749872568584335215630740265944133347038070337891035560658434763924576508969938866566235926587685108811154229747423410476421860059769485356567301897413767088823807510568561254627099309752215808220067495561412081320541540679503218232020279947159175547517811501280846596226165148013762293861131544331444165070186672186027410082671602892508739473724143698396105392623164025712124329254933353509384748403154342322725203183050328143736631333990445537119855865348221215277608372952942702104088940952142851523651639574409075484106857403651453121036577767672430612728022444370874223001778580387635197325043524719396707713385963432915855227152371800527536048555551237729690663544828830627192867570345853910196397851763591543484023134551876591248557980182981967782409054277224</span></span><br><span class="line"></span><br><span class="line">d=wienerAttack(e, n)</span><br><span class="line">m=<span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m).decode())</span><br><span class="line"><span class="comment"># hgame&#123;dO|YOU:kNOw!tHE*PRINcIplE*bEhInd%WInNEr#aTTacK&#125;</span></span><br></pre></td></tr></table></figure><h3 id="例题二-羊城杯-2020-RRRRRRRSA"><a href="#例题二-羊城杯-2020-RRRRRRRSA" class="headerlink" title="例题二 [羊城杯 2020]RRRRRRRSA"></a>例题二 [羊城杯 2020]RRRRRRRSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;GWHT&#123;************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag1 = flag[:<span class="number">19</span>].encode()  <span class="comment">#两截flag</span></span><br><span class="line">flag2 = flag[<span class="number">19</span>:].encode()</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag) == <span class="number">38</span>)</span><br><span class="line"></span><br><span class="line">P1 = getPrime(<span class="number">1038</span>)</span><br><span class="line">P2 = sympy.nextprime(P1)  <span class="comment">#p2&gt;p1</span></span><br><span class="line"><span class="keyword">assert</span>(P2 - P1 &lt; <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">Q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">Q2 = sympy.nextprime(Q1)  <span class="comment">#q2&gt;q1</span></span><br><span class="line"></span><br><span class="line">N1 = P1 * P1 * Q1</span><br><span class="line">N2 = P2 * P2 * Q2</span><br><span class="line"></span><br><span class="line">E1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">E2 = sympy.nextprime(E1)</span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag1)</span><br><span class="line">m2 = bytes_to_long(flag2)</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, E1, N1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, E2, N2)</span><br><span class="line"></span><br><span class="line">output = <span class="built_in">open</span>(<span class="string">&#x27;secret&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;N1=&#x27;</span> + <span class="built_in">str</span>(N1) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;c1=&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;E1=&#x27;</span> + <span class="built_in">str</span>(E1) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;N2=&#x27;</span> + <span class="built_in">str</span>(N2) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;c2=&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;E2=&#x27;</span> + <span class="built_in">str</span>(E2) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.close()</span><br><span class="line"></span><br><span class="line">N1=<span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span></span><br><span class="line">c1=<span class="number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span></span><br><span class="line">E1=<span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span></span><br><span class="line">N2=<span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span></span><br><span class="line">c2=<span class="number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span></span><br><span class="line">E2=<span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span></span><br></pre></td></tr></table></figure><p>首先 发现 e 的数值比较大，按照前一题的思路尝试分别对两段加密使用 维纳攻击 发现报错 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">ValueError: isqrt() of negative number</span><br></pre></td></tr></table></figure><p>产生的原因可能是 E&#x2F;N 远小于 1，并不满足 E 和 N 比较接近这一前提条件</p><p>但是我们发现 N1 和 N2 之间的数值比较接近，符合维纳攻击的前提条件</p><p>为什么使用 N1 和 N2 进行维纳攻击也可以实现解呢</p><p>我们可以通过下面的公式推导得出</p><p><img src="https://pic.imgdb.cn/item/65eecd579f345e8d035b6589.png" alt="alt text"></p><p>挖个坑：需要了解的内容有： 连分数、低解密指数攻击 等</p><p>有如下解码脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N1=<span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span></span><br><span class="line">c1=<span class="number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span></span><br><span class="line">E1=<span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span></span><br><span class="line">N2=<span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span></span><br><span class="line">c2=<span class="number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span></span><br><span class="line">E2=<span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    cF = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cF += [x // y]</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cF</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Simplify</span>(<span class="params">ctnf</span>):</span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> ctnf[::-<span class="number">1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> (numerator, denominator)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getit</span>(<span class="params">c</span>):</span><br><span class="line">    cf=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(c)):</span><br><span class="line">        cf.append(Simplify(c[:i]))</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"><span class="comment">#求渐进分数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    cf=continuedFra(e,n)</span><br><span class="line">    <span class="keyword">for</span> (p2,p1) <span class="keyword">in</span> getit(cf):</span><br><span class="line">        <span class="keyword">if</span> p1 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> N1%p1==<span class="number">0</span> <span class="keyword">and</span> p1!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> p1</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;not find!&#x27;</span>)</span><br><span class="line">q1=wienerAttack(N1,N2)</span><br><span class="line"><span class="comment">#p1=11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644210947</span></span><br><span class="line"><span class="built_in">print</span>(q1)</span><br><span class="line">p1=gmpy2.iroot(N1//q1,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p2=gmpy2.next_prime(p1)</span><br><span class="line">q2=gmpy2.next_prime(q1)</span><br><span class="line">phi1=p1*(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">phi2=p2*(p2-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d1=gmpy2.invert(E1,phi1)</span><br><span class="line">d2=gmpy2.invert(E2,phi2)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line">m1=number.long_to_bytes(gmpy2.powmod(c1,d1,N1))</span><br><span class="line">m2=number.long_to_bytes(gmpy2.powmod(c2,d2,N2))</span><br><span class="line"><span class="built_in">print</span>((m1+m2))</span><br><span class="line"></span><br><span class="line"><span class="comment">#GWHT&#123;3aadab41754799f978669d53e64a3aca&#125;</span></span><br></pre></td></tr></table></figure><p>【参考资料】</p><p><a href="http://t.csdnimg.cn/HzyzT">http://t.csdnimg.cn/HzyzT</a></p><p><a href="http://t.csdnimg.cn/BRvWy">http://t.csdnimg.cn/BRvWy</a></p><p><a href="http://t.csdnimg.cn/m9L8j">http://t.csdnimg.cn/m9L8j</a></p><p>后面还有羊城杯的22年、23年相关真题，有时间再分析</p><p><a href="http://t.csdnimg.cn/OvTUm">http://t.csdnimg.cn/OvTUm</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 维纳攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k-means聚类算法</title>
      <link href="/2023/08/24/k-jun-zhi-ju-lei-suan-fa/"/>
      <url>/2023/08/24/k-jun-zhi-ju-lei-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>K-means聚类算法是先随机选取K个对象作为初始的聚类中心。然后计算每个对象与各个种子聚类中心之间的距离，把每个对象分配给距离它最近的聚类中心。聚类中心以及分配给它们的对象就代表一个聚类。每分配一个样本，聚类的聚类中心会根据聚类中现有的对象被重新计算。这个过程将不断重复直到满足某个终止条件。终止条件可以是没有（或最小数目）对象被重新分配给不同的聚类，没有（或最小数目）聚类中心再发生变化，误差平方和局部最小。</p><h2 id="二、简化实例"><a href="#二、简化实例" class="headerlink" title="二、简化实例"></a>二、简化实例</h2><p>1.便于理解，首先创建一个明显分为2类20*2的例子（每一列为一个变量共2个变量，每一行为一个样本共20个样本）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">c1x=np.random.uniform(<span class="number">0.5</span>,<span class="number">1.5</span>,(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">c1y=np.random.uniform(<span class="number">0.5</span>,<span class="number">1.5</span>,(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">c2x=np.random.uniform(<span class="number">3.5</span>,<span class="number">4.5</span>,(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">c2y=np.random.uniform(<span class="number">3.5</span>,<span class="number">4.5</span>,(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">x=np.hstack((c1x,c2x))</span><br><span class="line">y=np.hstack((c2y,c2y))</span><br><span class="line">X=np.vstack((x,y)).T</span><br><span class="line">print(X)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1.4889993</span>  <span class="number">4.18741329</span>]</span><br><span class="line"> [<span class="number">0.73017615</span> <span class="number">4.07842216</span>]</span><br><span class="line"> [<span class="number">1.15522846</span> <span class="number">4.05744838</span>]</span><br><span class="line"> [<span class="number">1.40768457</span> <span class="number">3.76674812</span>]</span><br><span class="line"> [<span class="number">1.376212</span>   <span class="number">3.95063903</span>]</span><br><span class="line"> [<span class="number">1.20821055</span> <span class="number">4.34138767</span>]</span><br><span class="line"> [<span class="number">0.73898392</span> <span class="number">3.55026013</span>]</span><br><span class="line"> [<span class="number">0.97116627</span> <span class="number">3.65432314</span>]</span><br><span class="line"> [<span class="number">0.98267302</span> <span class="number">4.16731561</span>]</span><br><span class="line"> [<span class="number">1.06346541</span> <span class="number">4.44383585</span>]</span><br><span class="line"> [<span class="number">4.10945954</span> <span class="number">4.18741329</span>]</span><br><span class="line"> [<span class="number">3.75288064</span> <span class="number">4.07842216</span>]</span><br><span class="line"> [<span class="number">4.29638229</span> <span class="number">4.05744838</span>]</span><br><span class="line"> [<span class="number">3.95221785</span> <span class="number">3.76674812</span>]</span><br><span class="line"> [<span class="number">4.09826192</span> <span class="number">3.95063903</span>]</span><br><span class="line"> [<span class="number">4.04840874</span> <span class="number">4.34138767</span>]</span><br><span class="line"> [<span class="number">4.29594009</span> <span class="number">3.55026013</span>]</span><br><span class="line"> [<span class="number">3.56931245</span> <span class="number">3.65432314</span>]</span><br><span class="line"> [<span class="number">3.57962941</span> <span class="number">4.16731561</span>]</span><br><span class="line"> [<span class="number">3.65208848</span> <span class="number">4.44383585</span>]]</span><br></pre></td></tr></table></figure><p>2.引用Python库将样本分为两类（k&#x3D;2），并绘制散点图：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只需将X修改即可进行其他聚类分析</span></span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.cluster import <span class="title class_">KMeans</span></span><br><span class="line"> </span><br><span class="line">kemans=<span class="title class_">KMeans</span>(n_clusters=<span class="number">2</span>)</span><br><span class="line">result=kemans.fit_predict(X) <span class="comment">#训练及预测</span></span><br><span class="line">print(result)   <span class="comment">#分类结果</span></span><br><span class="line"> </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;sans-serif&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment">#散点图标签可以显示中文</span></span><br><span class="line"> </span><br><span class="line">x=[i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> X]</span><br><span class="line">y=[i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> X]</span><br><span class="line">plt.scatter(x,y,c=result,marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>3.如果K值未知，可采用肘部法选择K值（假设最大分类数为9类，分别计算分类结果为1-9类的平均离差，离差的提升变化下降最抖时的值为最优聚类数K）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.cluster import <span class="title class_">KMeans</span></span><br><span class="line">from scipy.spatial.distance import cdist</span><br><span class="line"> </span><br><span class="line">K=range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">meanDispersions=[]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="symbol">K:</span></span><br><span class="line">    kemans=<span class="title class_">KMeans</span>(n_clusters=k)</span><br><span class="line">    kemans.fit(X)</span><br><span class="line">    <span class="comment">#计算平均离差</span></span><br><span class="line">    m_Disp=sum(np.min(cdist(X,kemans.cluster_centers_,<span class="string">&#x27;euclidean&#x27;</span>),axis=<span class="number">1</span>))/X.shape[<span class="number">0</span>]</span><br><span class="line">    meanDispersions.append(m_Disp)</span><br><span class="line"> </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;sans-serif&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment">#使折线图显示中文</span></span><br><span class="line"> </span><br><span class="line">plt.plot(K,meanDispersions,<span class="string">&#x27;bx-&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均离差&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;用肘部方法选择K值&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="三、实例分析（对某网站500家饭店价格及评论进行聚类）"><a href="#三、实例分析（对某网站500家饭店价格及评论进行聚类）" class="headerlink" title="三、实例分析（对某网站500家饭店价格及评论进行聚类）"></a>三、实例分析（对某网站500家饭店价格及评论进行聚类）</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from sklearn.cluster import <span class="title class_">KMeans</span></span><br><span class="line">from scipy.spatial.distance import cdist</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line"> </span><br><span class="line">data=pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>,header=<span class="number">0</span>).iloc[<span class="symbol">:</span><span class="number">501</span>,<span class="number">3</span><span class="symbol">:</span><span class="number">5</span>]</span><br><span class="line">per_25=data.describe().iloc[<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">per_75=data.describe().iloc[<span class="number">6</span>,<span class="number">1</span>]</span><br><span class="line">data=data[(data.iloc[<span class="symbol">:</span>,<span class="number">1</span>]&gt;=per_25)&amp;(data.iloc[<span class="symbol">:</span>,<span class="number">1</span>]&lt;=per_75)] <span class="comment">#选择位于四分位数之内的数</span></span><br><span class="line">X=np.array(data)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">K=range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">meanDispersions=[]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="symbol">K:</span></span><br><span class="line">    kemans=<span class="title class_">KMeans</span>(n_clusters=k)</span><br><span class="line">    kemans.fit(X)</span><br><span class="line">    meanDispersions.append(sum(np.min(cdist(X,kemans.cluster_centers_,<span class="string">&#x27;euclidean&#x27;</span>),axis=<span class="number">1</span>))/X.shape[<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;sans-serif&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.plot(K,meanDispersions,<span class="string">&#x27;bx-&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均离差&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;用肘部方法选择K值&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>具体聚类过程：<br> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.cluster import <span class="title class_">KMeans</span></span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"> </span><br><span class="line">kemans=<span class="title class_">KMeans</span>(n_clusters=<span class="number">3</span>)</span><br><span class="line">result=kemans.fit_predict(X)</span><br><span class="line">print(result)</span><br><span class="line">x=[i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> X]</span><br><span class="line">y=[i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> X]</span><br><span class="line">plt.scatter(x,y,c=result,marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;avgPrice&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;llCommentNum&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;对500家饭店价格与评论数进行聚类&#x27;</span>)</span><br></pre></td></tr></table></figure><br>聚类结果：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>] </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/30/hello-world/"/>
      <url>/2022/08/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
